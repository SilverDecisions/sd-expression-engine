{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/complex.js/complex.js","sd-expression-engine.js","node_modules/decimal.js/decimal.js","node_modules/fraction.js/fraction.js","node_modules/javascript-natural-sort/naturalSort.js","node_modules/mathjs/core.js","node_modules/mathjs/lib/core/core.js","node_modules/mathjs/lib/core/function/config.js","node_modules/mathjs/lib/core/function/import.js","node_modules/mathjs/lib/core/typed.js","node_modules/mathjs/lib/error/ArgumentsError.js","node_modules/mathjs/lib/error/DimensionError.js","node_modules/mathjs/lib/error/IndexError.js","node_modules/mathjs/lib/expression/Help.js","node_modules/mathjs/lib/expression/Parser.js","node_modules/mathjs/lib/expression/docs/constants/Infinity.js","node_modules/mathjs/lib/expression/docs/constants/LN10.js","node_modules/mathjs/lib/expression/docs/constants/LN2.js","node_modules/mathjs/lib/expression/docs/constants/LOG10E.js","node_modules/mathjs/lib/expression/docs/constants/LOG2E.js","node_modules/mathjs/lib/expression/docs/constants/NaN.js","node_modules/mathjs/lib/expression/docs/constants/SQRT1_2.js","node_modules/mathjs/lib/expression/docs/constants/SQRT2.js","node_modules/mathjs/lib/expression/docs/constants/e.js","node_modules/mathjs/lib/expression/docs/constants/false.js","node_modules/mathjs/lib/expression/docs/constants/i.js","node_modules/mathjs/lib/expression/docs/constants/null.js","node_modules/mathjs/lib/expression/docs/constants/phi.js","node_modules/mathjs/lib/expression/docs/constants/pi.js","node_modules/mathjs/lib/expression/docs/constants/tau.js","node_modules/mathjs/lib/expression/docs/constants/true.js","node_modules/mathjs/lib/expression/docs/constants/version.js","node_modules/mathjs/lib/expression/docs/construction/bignumber.js","node_modules/mathjs/lib/expression/docs/construction/boolean.js","node_modules/mathjs/lib/expression/docs/construction/complex.js","node_modules/mathjs/lib/expression/docs/construction/createUnit.js","node_modules/mathjs/lib/expression/docs/construction/fraction.js","node_modules/mathjs/lib/expression/docs/construction/index.js","node_modules/mathjs/lib/expression/docs/construction/matrix.js","node_modules/mathjs/lib/expression/docs/construction/number.js","node_modules/mathjs/lib/expression/docs/construction/sparse.js","node_modules/mathjs/lib/expression/docs/construction/splitUnit.js","node_modules/mathjs/lib/expression/docs/construction/string.js","node_modules/mathjs/lib/expression/docs/construction/unit.js","node_modules/mathjs/lib/expression/docs/core/config.js","node_modules/mathjs/lib/expression/docs/core/import.js","node_modules/mathjs/lib/expression/docs/core/typed.js","node_modules/mathjs/lib/expression/docs/function/algebra/derivative.js","node_modules/mathjs/lib/expression/docs/function/algebra/lsolve.js","node_modules/mathjs/lib/expression/docs/function/algebra/lup.js","node_modules/mathjs/lib/expression/docs/function/algebra/lusolve.js","node_modules/mathjs/lib/expression/docs/function/algebra/qr.js","node_modules/mathjs/lib/expression/docs/function/algebra/simplify.js","node_modules/mathjs/lib/expression/docs/function/algebra/slu.js","node_modules/mathjs/lib/expression/docs/function/algebra/usolve.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/abs.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/add.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/cbrt.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/ceil.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/cube.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/divide.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/dotDivide.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/dotMultiply.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/dotPow.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/exp.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/fix.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/floor.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/gcd.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/hypot.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/lcm.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/log.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/log10.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/mod.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/multiply.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/norm.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/nthRoot.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/pow.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/round.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/sign.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/sqrt.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/square.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/subtract.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/unaryMinus.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/unaryPlus.js","node_modules/mathjs/lib/expression/docs/function/arithmetic/xgcd.js","node_modules/mathjs/lib/expression/docs/function/bitwise/bitAnd.js","node_modules/mathjs/lib/expression/docs/function/bitwise/bitNot.js","node_modules/mathjs/lib/expression/docs/function/bitwise/bitOr.js","node_modules/mathjs/lib/expression/docs/function/bitwise/bitXor.js","node_modules/mathjs/lib/expression/docs/function/bitwise/leftShift.js","node_modules/mathjs/lib/expression/docs/function/bitwise/rightArithShift.js","node_modules/mathjs/lib/expression/docs/function/bitwise/rightLogShift.js","node_modules/mathjs/lib/expression/docs/function/combinatorics/bellNumbers.js","node_modules/mathjs/lib/expression/docs/function/combinatorics/catalan.js","node_modules/mathjs/lib/expression/docs/function/combinatorics/composition.js","node_modules/mathjs/lib/expression/docs/function/combinatorics/stirlingS2.js","node_modules/mathjs/lib/expression/docs/function/complex/arg.js","node_modules/mathjs/lib/expression/docs/function/complex/conj.js","node_modules/mathjs/lib/expression/docs/function/complex/im.js","node_modules/mathjs/lib/expression/docs/function/complex/re.js","node_modules/mathjs/lib/expression/docs/function/expression/eval.js","node_modules/mathjs/lib/expression/docs/function/expression/help.js","node_modules/mathjs/lib/expression/docs/function/geometry/distance.js","node_modules/mathjs/lib/expression/docs/function/geometry/intersect.js","node_modules/mathjs/lib/expression/docs/function/logical/and.js","node_modules/mathjs/lib/expression/docs/function/logical/not.js","node_modules/mathjs/lib/expression/docs/function/logical/or.js","node_modules/mathjs/lib/expression/docs/function/logical/xor.js","node_modules/mathjs/lib/expression/docs/function/matrix/concat.js","node_modules/mathjs/lib/expression/docs/function/matrix/cross.js","node_modules/mathjs/lib/expression/docs/function/matrix/det.js","node_modules/mathjs/lib/expression/docs/function/matrix/diag.js","node_modules/mathjs/lib/expression/docs/function/matrix/dot.js","node_modules/mathjs/lib/expression/docs/function/matrix/eye.js","node_modules/mathjs/lib/expression/docs/function/matrix/filter.js","node_modules/mathjs/lib/expression/docs/function/matrix/flatten.js","node_modules/mathjs/lib/expression/docs/function/matrix/forEach.js","node_modules/mathjs/lib/expression/docs/function/matrix/inv.js","node_modules/mathjs/lib/expression/docs/function/matrix/kron.js","node_modules/mathjs/lib/expression/docs/function/matrix/map.js","node_modules/mathjs/lib/expression/docs/function/matrix/ones.js","node_modules/mathjs/lib/expression/docs/function/matrix/partitionSelect.js","node_modules/mathjs/lib/expression/docs/function/matrix/range.js","node_modules/mathjs/lib/expression/docs/function/matrix/reshape.js","node_modules/mathjs/lib/expression/docs/function/matrix/resize.js","node_modules/mathjs/lib/expression/docs/function/matrix/size.js","node_modules/mathjs/lib/expression/docs/function/matrix/sort.js","node_modules/mathjs/lib/expression/docs/function/matrix/squeeze.js","node_modules/mathjs/lib/expression/docs/function/matrix/subset.js","node_modules/mathjs/lib/expression/docs/function/matrix/trace.js","node_modules/mathjs/lib/expression/docs/function/matrix/transpose.js","node_modules/mathjs/lib/expression/docs/function/matrix/zeros.js","node_modules/mathjs/lib/expression/docs/function/probability/combinations.js","node_modules/mathjs/lib/expression/docs/function/probability/factorial.js","node_modules/mathjs/lib/expression/docs/function/probability/gamma.js","node_modules/mathjs/lib/expression/docs/function/probability/kldivergence.js","node_modules/mathjs/lib/expression/docs/function/probability/multinomial.js","node_modules/mathjs/lib/expression/docs/function/probability/permutations.js","node_modules/mathjs/lib/expression/docs/function/probability/pickRandom.js","node_modules/mathjs/lib/expression/docs/function/probability/random.js","node_modules/mathjs/lib/expression/docs/function/probability/randomInt.js","node_modules/mathjs/lib/expression/docs/function/relational/compare.js","node_modules/mathjs/lib/expression/docs/function/relational/compareNatural.js","node_modules/mathjs/lib/expression/docs/function/relational/deepEqual.js","node_modules/mathjs/lib/expression/docs/function/relational/equal.js","node_modules/mathjs/lib/expression/docs/function/relational/larger.js","node_modules/mathjs/lib/expression/docs/function/relational/largerEq.js","node_modules/mathjs/lib/expression/docs/function/relational/smaller.js","node_modules/mathjs/lib/expression/docs/function/relational/smallerEq.js","node_modules/mathjs/lib/expression/docs/function/relational/unequal.js","node_modules/mathjs/lib/expression/docs/function/set/setCartesian.js","node_modules/mathjs/lib/expression/docs/function/set/setDifference.js","node_modules/mathjs/lib/expression/docs/function/set/setDistinct.js","node_modules/mathjs/lib/expression/docs/function/set/setIntersect.js","node_modules/mathjs/lib/expression/docs/function/set/setIsSubset.js","node_modules/mathjs/lib/expression/docs/function/set/setMultiplicity.js","node_modules/mathjs/lib/expression/docs/function/set/setPowerset.js","node_modules/mathjs/lib/expression/docs/function/set/setSize.js","node_modules/mathjs/lib/expression/docs/function/set/setSymDifference.js","node_modules/mathjs/lib/expression/docs/function/set/setUnion.js","node_modules/mathjs/lib/expression/docs/function/special/erf.js","node_modules/mathjs/lib/expression/docs/function/statistics/mad.js","node_modules/mathjs/lib/expression/docs/function/statistics/max.js","node_modules/mathjs/lib/expression/docs/function/statistics/mean.js","node_modules/mathjs/lib/expression/docs/function/statistics/median.js","node_modules/mathjs/lib/expression/docs/function/statistics/min.js","node_modules/mathjs/lib/expression/docs/function/statistics/mode.js","node_modules/mathjs/lib/expression/docs/function/statistics/prod.js","node_modules/mathjs/lib/expression/docs/function/statistics/quantileSeq.js","node_modules/mathjs/lib/expression/docs/function/statistics/std.js","node_modules/mathjs/lib/expression/docs/function/statistics/sum.js","node_modules/mathjs/lib/expression/docs/function/statistics/var.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/acos.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/acosh.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/acot.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/acoth.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/acsc.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/acsch.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/asec.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/asech.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/asin.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/asinh.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/atan.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/atan2.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/atanh.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/cos.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/cosh.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/cot.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/coth.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/csc.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/csch.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/sec.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/sech.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/sin.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/sinh.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/tan.js","node_modules/mathjs/lib/expression/docs/function/trigonometry/tanh.js","node_modules/mathjs/lib/expression/docs/function/units/to.js","node_modules/mathjs/lib/expression/docs/function/utils/clone.js","node_modules/mathjs/lib/expression/docs/function/utils/format.js","node_modules/mathjs/lib/expression/docs/function/utils/isInteger.js","node_modules/mathjs/lib/expression/docs/function/utils/isNaN.js","node_modules/mathjs/lib/expression/docs/function/utils/isNegative.js","node_modules/mathjs/lib/expression/docs/function/utils/isNumeric.js","node_modules/mathjs/lib/expression/docs/function/utils/isPositive.js","node_modules/mathjs/lib/expression/docs/function/utils/isPrime.js","node_modules/mathjs/lib/expression/docs/function/utils/isZero.js","node_modules/mathjs/lib/expression/docs/function/utils/typeof.js","node_modules/mathjs/lib/expression/docs/index.js","node_modules/mathjs/lib/expression/function/compile.js","node_modules/mathjs/lib/expression/function/eval.js","node_modules/mathjs/lib/expression/function/help.js","node_modules/mathjs/lib/expression/function/index.js","node_modules/mathjs/lib/expression/function/parse.js","node_modules/mathjs/lib/expression/function/parser.js","node_modules/mathjs/lib/expression/index.js","node_modules/mathjs/lib/expression/keywords.js","node_modules/mathjs/lib/expression/node/AccessorNode.js","node_modules/mathjs/lib/expression/node/ArrayNode.js","node_modules/mathjs/lib/expression/node/AssignmentNode.js","node_modules/mathjs/lib/expression/node/BlockNode.js","node_modules/mathjs/lib/expression/node/ConditionalNode.js","node_modules/mathjs/lib/expression/node/ConstantNode.js","node_modules/mathjs/lib/expression/node/FunctionAssignmentNode.js","node_modules/mathjs/lib/expression/node/FunctionNode.js","node_modules/mathjs/lib/expression/node/IndexNode.js","node_modules/mathjs/lib/expression/node/Node.js","node_modules/mathjs/lib/expression/node/ObjectNode.js","node_modules/mathjs/lib/expression/node/OperatorNode.js","node_modules/mathjs/lib/expression/node/ParenthesisNode.js","node_modules/mathjs/lib/expression/node/RangeNode.js","node_modules/mathjs/lib/expression/node/SymbolNode.js","node_modules/mathjs/lib/expression/node/UpdateNode.js","node_modules/mathjs/lib/expression/node/compile.js","node_modules/mathjs/lib/expression/node/index.js","node_modules/mathjs/lib/expression/node/utils/access.js","node_modules/mathjs/lib/expression/node/utils/assign.js","node_modules/mathjs/lib/expression/node/utils/getUniqueArgumentName.js","node_modules/mathjs/lib/expression/operators.js","node_modules/mathjs/lib/expression/parse.js","node_modules/mathjs/lib/expression/transform/concat.transform.js","node_modules/mathjs/lib/expression/transform/error.transform.js","node_modules/mathjs/lib/expression/transform/filter.transform.js","node_modules/mathjs/lib/expression/transform/forEach.transform.js","node_modules/mathjs/lib/expression/transform/index.js","node_modules/mathjs/lib/expression/transform/index.transform.js","node_modules/mathjs/lib/expression/transform/map.transform.js","node_modules/mathjs/lib/expression/transform/max.transform.js","node_modules/mathjs/lib/expression/transform/mean.transform.js","node_modules/mathjs/lib/expression/transform/min.transform.js","node_modules/mathjs/lib/expression/transform/range.transform.js","node_modules/mathjs/lib/expression/transform/subset.transform.js","node_modules/mathjs/lib/function/algebra/decomposition/lup.js","node_modules/mathjs/lib/function/algebra/decomposition/qr.js","node_modules/mathjs/lib/function/algebra/decomposition/slu.js","node_modules/mathjs/lib/function/algebra/derivative.js","node_modules/mathjs/lib/function/algebra/index.js","node_modules/mathjs/lib/function/algebra/simplify.js","node_modules/mathjs/lib/function/algebra/simplify/simplifyConstant.js","node_modules/mathjs/lib/function/algebra/simplify/util.js","node_modules/mathjs/lib/function/algebra/solver/lsolve.js","node_modules/mathjs/lib/function/algebra/solver/lusolve.js","node_modules/mathjs/lib/function/algebra/solver/usolve.js","node_modules/mathjs/lib/function/algebra/solver/utils/solveValidation.js","node_modules/mathjs/lib/function/algebra/sparse/cs_amd.js","node_modules/mathjs/lib/function/algebra/sparse/cs_counts.js","node_modules/mathjs/lib/function/algebra/sparse/cs_dfs.js","node_modules/mathjs/lib/function/algebra/sparse/cs_etree.js","node_modules/mathjs/lib/function/algebra/sparse/cs_fkeep.js","node_modules/mathjs/lib/function/algebra/sparse/cs_flip.js","node_modules/mathjs/lib/function/algebra/sparse/cs_ipvec.js","node_modules/mathjs/lib/function/algebra/sparse/cs_leaf.js","node_modules/mathjs/lib/function/algebra/sparse/cs_lu.js","node_modules/mathjs/lib/function/algebra/sparse/cs_mark.js","node_modules/mathjs/lib/function/algebra/sparse/cs_marked.js","node_modules/mathjs/lib/function/algebra/sparse/cs_permute.js","node_modules/mathjs/lib/function/algebra/sparse/cs_post.js","node_modules/mathjs/lib/function/algebra/sparse/cs_reach.js","node_modules/mathjs/lib/function/algebra/sparse/cs_spsolve.js","node_modules/mathjs/lib/function/algebra/sparse/cs_sqr.js","node_modules/mathjs/lib/function/algebra/sparse/cs_tdfs.js","node_modules/mathjs/lib/function/algebra/sparse/cs_unflip.js","node_modules/mathjs/lib/function/arithmetic/abs.js","node_modules/mathjs/lib/function/arithmetic/add.js","node_modules/mathjs/lib/function/arithmetic/addScalar.js","node_modules/mathjs/lib/function/arithmetic/cbrt.js","node_modules/mathjs/lib/function/arithmetic/ceil.js","node_modules/mathjs/lib/function/arithmetic/cube.js","node_modules/mathjs/lib/function/arithmetic/divide.js","node_modules/mathjs/lib/function/arithmetic/divideScalar.js","node_modules/mathjs/lib/function/arithmetic/dotDivide.js","node_modules/mathjs/lib/function/arithmetic/dotMultiply.js","node_modules/mathjs/lib/function/arithmetic/dotPow.js","node_modules/mathjs/lib/function/arithmetic/exp.js","node_modules/mathjs/lib/function/arithmetic/fix.js","node_modules/mathjs/lib/function/arithmetic/floor.js","node_modules/mathjs/lib/function/arithmetic/gcd.js","node_modules/mathjs/lib/function/arithmetic/hypot.js","node_modules/mathjs/lib/function/arithmetic/index.js","node_modules/mathjs/lib/function/arithmetic/lcm.js","node_modules/mathjs/lib/function/arithmetic/log.js","node_modules/mathjs/lib/function/arithmetic/log10.js","node_modules/mathjs/lib/function/arithmetic/mod.js","node_modules/mathjs/lib/function/arithmetic/multiply.js","node_modules/mathjs/lib/function/arithmetic/multiplyScalar.js","node_modules/mathjs/lib/function/arithmetic/norm.js","node_modules/mathjs/lib/function/arithmetic/nthRoot.js","node_modules/mathjs/lib/function/arithmetic/pow.js","node_modules/mathjs/lib/function/arithmetic/round.js","node_modules/mathjs/lib/function/arithmetic/sign.js","node_modules/mathjs/lib/function/arithmetic/sqrt.js","node_modules/mathjs/lib/function/arithmetic/square.js","node_modules/mathjs/lib/function/arithmetic/subtract.js","node_modules/mathjs/lib/function/arithmetic/unaryMinus.js","node_modules/mathjs/lib/function/arithmetic/unaryPlus.js","node_modules/mathjs/lib/function/arithmetic/xgcd.js","node_modules/mathjs/lib/function/bitwise/bitAnd.js","node_modules/mathjs/lib/function/bitwise/bitNot.js","node_modules/mathjs/lib/function/bitwise/bitOr.js","node_modules/mathjs/lib/function/bitwise/bitXor.js","node_modules/mathjs/lib/function/bitwise/index.js","node_modules/mathjs/lib/function/bitwise/leftShift.js","node_modules/mathjs/lib/function/bitwise/rightArithShift.js","node_modules/mathjs/lib/function/bitwise/rightLogShift.js","node_modules/mathjs/lib/function/combinatorics/bellNumbers.js","node_modules/mathjs/lib/function/combinatorics/catalan.js","node_modules/mathjs/lib/function/combinatorics/composition.js","node_modules/mathjs/lib/function/combinatorics/index.js","node_modules/mathjs/lib/function/combinatorics/stirlingS2.js","node_modules/mathjs/lib/function/complex/arg.js","node_modules/mathjs/lib/function/complex/conj.js","node_modules/mathjs/lib/function/complex/im.js","node_modules/mathjs/lib/function/complex/index.js","node_modules/mathjs/lib/function/complex/re.js","node_modules/mathjs/lib/function/geometry/distance.js","node_modules/mathjs/lib/function/geometry/index.js","node_modules/mathjs/lib/function/geometry/intersect.js","node_modules/mathjs/lib/function/index.js","node_modules/mathjs/lib/function/logical/and.js","node_modules/mathjs/lib/function/logical/index.js","node_modules/mathjs/lib/function/logical/not.js","node_modules/mathjs/lib/function/logical/or.js","node_modules/mathjs/lib/function/logical/xor.js","node_modules/mathjs/lib/function/matrix/concat.js","node_modules/mathjs/lib/function/matrix/cross.js","node_modules/mathjs/lib/function/matrix/det.js","node_modules/mathjs/lib/function/matrix/diag.js","node_modules/mathjs/lib/function/matrix/dot.js","node_modules/mathjs/lib/function/matrix/eye.js","node_modules/mathjs/lib/function/matrix/filter.js","node_modules/mathjs/lib/function/matrix/flatten.js","node_modules/mathjs/lib/function/matrix/forEach.js","node_modules/mathjs/lib/function/matrix/index.js","node_modules/mathjs/lib/function/matrix/inv.js","node_modules/mathjs/lib/function/matrix/kron.js","node_modules/mathjs/lib/function/matrix/map.js","node_modules/mathjs/lib/function/matrix/ones.js","node_modules/mathjs/lib/function/matrix/partitionSelect.js","node_modules/mathjs/lib/function/matrix/range.js","node_modules/mathjs/lib/function/matrix/reshape.js","node_modules/mathjs/lib/function/matrix/resize.js","node_modules/mathjs/lib/function/matrix/size.js","node_modules/mathjs/lib/function/matrix/sort.js","node_modules/mathjs/lib/function/matrix/squeeze.js","node_modules/mathjs/lib/function/matrix/subset.js","node_modules/mathjs/lib/function/matrix/trace.js","node_modules/mathjs/lib/function/matrix/transpose.js","node_modules/mathjs/lib/function/matrix/zeros.js","node_modules/mathjs/lib/function/probability/combinations.js","node_modules/mathjs/lib/function/probability/distribution.js","node_modules/mathjs/lib/function/probability/factorial.js","node_modules/mathjs/lib/function/probability/gamma.js","node_modules/mathjs/lib/function/probability/index.js","node_modules/mathjs/lib/function/probability/kldivergence.js","node_modules/mathjs/lib/function/probability/multinomial.js","node_modules/mathjs/lib/function/probability/permutations.js","node_modules/mathjs/lib/function/probability/pickRandom.js","node_modules/mathjs/lib/function/probability/random.js","node_modules/mathjs/lib/function/probability/randomInt.js","node_modules/mathjs/lib/function/probability/seededRNG.js","node_modules/mathjs/lib/function/relational/compare.js","node_modules/mathjs/lib/function/relational/compareNatural.js","node_modules/mathjs/lib/function/relational/deepEqual.js","node_modules/mathjs/lib/function/relational/equal.js","node_modules/mathjs/lib/function/relational/equalScalar.js","node_modules/mathjs/lib/function/relational/index.js","node_modules/mathjs/lib/function/relational/larger.js","node_modules/mathjs/lib/function/relational/largerEq.js","node_modules/mathjs/lib/function/relational/smaller.js","node_modules/mathjs/lib/function/relational/smallerEq.js","node_modules/mathjs/lib/function/relational/unequal.js","node_modules/mathjs/lib/function/set/index.js","node_modules/mathjs/lib/function/set/setCartesian.js","node_modules/mathjs/lib/function/set/setDifference.js","node_modules/mathjs/lib/function/set/setDistinct.js","node_modules/mathjs/lib/function/set/setIntersect.js","node_modules/mathjs/lib/function/set/setIsSubset.js","node_modules/mathjs/lib/function/set/setMultiplicity.js","node_modules/mathjs/lib/function/set/setPowerset.js","node_modules/mathjs/lib/function/set/setSize.js","node_modules/mathjs/lib/function/set/setSymDifference.js","node_modules/mathjs/lib/function/set/setUnion.js","node_modules/mathjs/lib/function/special/erf.js","node_modules/mathjs/lib/function/special/index.js","node_modules/mathjs/lib/function/statistics/index.js","node_modules/mathjs/lib/function/statistics/mad.js","node_modules/mathjs/lib/function/statistics/max.js","node_modules/mathjs/lib/function/statistics/mean.js","node_modules/mathjs/lib/function/statistics/median.js","node_modules/mathjs/lib/function/statistics/min.js","node_modules/mathjs/lib/function/statistics/mode.js","node_modules/mathjs/lib/function/statistics/prod.js","node_modules/mathjs/lib/function/statistics/quantileSeq.js","node_modules/mathjs/lib/function/statistics/std.js","node_modules/mathjs/lib/function/statistics/sum.js","node_modules/mathjs/lib/function/statistics/var.js","node_modules/mathjs/lib/function/string/format.js","node_modules/mathjs/lib/function/string/index.js","node_modules/mathjs/lib/function/string/print.js","node_modules/mathjs/lib/function/trigonometry/acos.js","node_modules/mathjs/lib/function/trigonometry/acosh.js","node_modules/mathjs/lib/function/trigonometry/acot.js","node_modules/mathjs/lib/function/trigonometry/acoth.js","node_modules/mathjs/lib/function/trigonometry/acsc.js","node_modules/mathjs/lib/function/trigonometry/acsch.js","node_modules/mathjs/lib/function/trigonometry/asec.js","node_modules/mathjs/lib/function/trigonometry/asech.js","node_modules/mathjs/lib/function/trigonometry/asin.js","node_modules/mathjs/lib/function/trigonometry/asinh.js","node_modules/mathjs/lib/function/trigonometry/atan.js","node_modules/mathjs/lib/function/trigonometry/atan2.js","node_modules/mathjs/lib/function/trigonometry/atanh.js","node_modules/mathjs/lib/function/trigonometry/cos.js","node_modules/mathjs/lib/function/trigonometry/cosh.js","node_modules/mathjs/lib/function/trigonometry/cot.js","node_modules/mathjs/lib/function/trigonometry/coth.js","node_modules/mathjs/lib/function/trigonometry/csc.js","node_modules/mathjs/lib/function/trigonometry/csch.js","node_modules/mathjs/lib/function/trigonometry/index.js","node_modules/mathjs/lib/function/trigonometry/sec.js","node_modules/mathjs/lib/function/trigonometry/sech.js","node_modules/mathjs/lib/function/trigonometry/sin.js","node_modules/mathjs/lib/function/trigonometry/sinh.js","node_modules/mathjs/lib/function/trigonometry/tan.js","node_modules/mathjs/lib/function/trigonometry/tanh.js","node_modules/mathjs/lib/function/unit/index.js","node_modules/mathjs/lib/function/unit/to.js","node_modules/mathjs/lib/function/utils/clone.js","node_modules/mathjs/lib/function/utils/index.js","node_modules/mathjs/lib/function/utils/isInteger.js","node_modules/mathjs/lib/function/utils/isNaN.js","node_modules/mathjs/lib/function/utils/isNegative.js","node_modules/mathjs/lib/function/utils/isNumeric.js","node_modules/mathjs/lib/function/utils/isPositive.js","node_modules/mathjs/lib/function/utils/isPrime.js","node_modules/mathjs/lib/function/utils/isZero.js","node_modules/mathjs/lib/function/utils/typeof.js","node_modules/mathjs/lib/json/index.js","node_modules/mathjs/lib/json/reviver.js","node_modules/mathjs/lib/type/bignumber/BigNumber.js","node_modules/mathjs/lib/type/bignumber/function/bignumber.js","node_modules/mathjs/lib/type/bignumber/index.js","node_modules/mathjs/lib/type/boolean.js","node_modules/mathjs/lib/type/chain/Chain.js","node_modules/mathjs/lib/type/chain/function/chain.js","node_modules/mathjs/lib/type/chain/index.js","node_modules/mathjs/lib/type/complex/Complex.js","node_modules/mathjs/lib/type/complex/function/complex.js","node_modules/mathjs/lib/type/complex/index.js","node_modules/mathjs/lib/type/fraction/Fraction.js","node_modules/mathjs/lib/type/fraction/function/fraction.js","node_modules/mathjs/lib/type/fraction/index.js","node_modules/mathjs/lib/type/index.js","node_modules/mathjs/lib/type/matrix/DenseMatrix.js","node_modules/mathjs/lib/type/matrix/FibonacciHeap.js","node_modules/mathjs/lib/type/matrix/ImmutableDenseMatrix.js","node_modules/mathjs/lib/type/matrix/Matrix.js","node_modules/mathjs/lib/type/matrix/MatrixIndex.js","node_modules/mathjs/lib/type/matrix/Range.js","node_modules/mathjs/lib/type/matrix/Spa.js","node_modules/mathjs/lib/type/matrix/SparseMatrix.js","node_modules/mathjs/lib/type/matrix/function/index.js","node_modules/mathjs/lib/type/matrix/function/matrix.js","node_modules/mathjs/lib/type/matrix/function/sparse.js","node_modules/mathjs/lib/type/matrix/index.js","node_modules/mathjs/lib/type/matrix/utils/algorithm01.js","node_modules/mathjs/lib/type/matrix/utils/algorithm02.js","node_modules/mathjs/lib/type/matrix/utils/algorithm03.js","node_modules/mathjs/lib/type/matrix/utils/algorithm04.js","node_modules/mathjs/lib/type/matrix/utils/algorithm05.js","node_modules/mathjs/lib/type/matrix/utils/algorithm06.js","node_modules/mathjs/lib/type/matrix/utils/algorithm07.js","node_modules/mathjs/lib/type/matrix/utils/algorithm08.js","node_modules/mathjs/lib/type/matrix/utils/algorithm09.js","node_modules/mathjs/lib/type/matrix/utils/algorithm10.js","node_modules/mathjs/lib/type/matrix/utils/algorithm11.js","node_modules/mathjs/lib/type/matrix/utils/algorithm12.js","node_modules/mathjs/lib/type/matrix/utils/algorithm13.js","node_modules/mathjs/lib/type/matrix/utils/algorithm14.js","node_modules/mathjs/lib/type/number.js","node_modules/mathjs/lib/type/resultset/ResultSet.js","node_modules/mathjs/lib/type/resultset/index.js","node_modules/mathjs/lib/type/string.js","node_modules/mathjs/lib/type/unit/Unit.js","node_modules/mathjs/lib/type/unit/function/createUnit.js","node_modules/mathjs/lib/type/unit/function/splitUnit.js","node_modules/mathjs/lib/type/unit/function/unit.js","node_modules/mathjs/lib/type/unit/index.js","node_modules/mathjs/lib/type/unit/physicalConstants.js","node_modules/mathjs/lib/utils/array.js","node_modules/mathjs/lib/utils/bignumber/bitAnd.js","node_modules/mathjs/lib/utils/bignumber/bitNot.js","node_modules/mathjs/lib/utils/bignumber/bitOr.js","node_modules/mathjs/lib/utils/bignumber/bitXor.js","node_modules/mathjs/lib/utils/bignumber/bitwise.js","node_modules/mathjs/lib/utils/bignumber/constants.js","node_modules/mathjs/lib/utils/bignumber/formatter.js","node_modules/mathjs/lib/utils/bignumber/leftShift.js","node_modules/mathjs/lib/utils/bignumber/nearlyEqual.js","node_modules/mathjs/lib/utils/bignumber/rightArithShift.js","node_modules/mathjs/lib/utils/boolean.js","node_modules/mathjs/lib/utils/collection/containsCollections.js","node_modules/mathjs/lib/utils/collection/deepForEach.js","node_modules/mathjs/lib/utils/collection/deepMap.js","node_modules/mathjs/lib/utils/collection/isCollection.js","node_modules/mathjs/lib/utils/collection/reduce.js","node_modules/mathjs/lib/utils/collection/scatter.js","node_modules/mathjs/lib/utils/customs.js","node_modules/mathjs/lib/utils/emitter.js","node_modules/mathjs/lib/utils/function.js","node_modules/mathjs/lib/utils/index.js","node_modules/mathjs/lib/utils/latex.js","node_modules/mathjs/lib/utils/number.js","node_modules/mathjs/lib/utils/object.js","node_modules/mathjs/lib/utils/string.js","node_modules/mathjs/lib/utils/types.js","node_modules/seed-random/index.js","node_modules/tiny-emitter/index.js","node_modules/typed-function/typed-function.js","src/expression-engine.js","src/index.js","src/mathjs.js","index.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","1","module","root","logHypot","b","_a","Math","abs","_b","log","cos","atan2","Complex","this","parse","P","re","im","cosh","x","exp","sinh","hypot","y","sqrt","parser_exit","SyntaxError","undefined","sin","tokens","match","plus","minus","c","isNaN","parseFloat","prototype","sign","add","sub","mul","div","d","pow","arg","loh","tmp","tan","cot","sec","csc","asin","t1","t2","acos","PI","atan","Infinity","acot","asec","acsc","tanh","coth","csch","sech","asinh","res","acosh","atanh","noIM","oneMinus","onePlus","temp","acoth","acsch","asech","inverse","conjugate","neg","ceil","places","floor","round","equals","clone","toString","ret","toVector","valueOf","isFinite","E","define","2","globalScope","digitsToString","k","ws","indexOfLastWord","str","w","LOG_BASE","getZeroString","checkInt32","min","max","invalidArgument","checkRoundingDigits","rm","repeating","di","rd","mathpow","convertBase","baseIn","baseOut","j","arrL","arr","strL","NUMERALS","indexOf","charAt","reverse","cosine","Ctor","len","precision","taylorSeries","times","cos2x","finalise","sd","isTruncated","digits","roundUp","xd","xdi","constructor","out","push","BASE","pop","external","maxE","NaN","minE","finiteToString","isExp","nonFiniteToString","slice","getBase10Exponent","getLn10","pr","LN10_PRECISION","precisionLimitExceeded","LN10","getPi","PI_PRECISION","getPrecision","zs","intPow","truncate","mathfloor","isOdd","maxOrMin","args","ltgt","naturalExponential","denominator","guard","sum","wpr","rep","rounding","divide","naturalLogarithm","c0","numerator","x1","x2","String","parseDecimal","replace","search","substring","charCodeAt","parseOther","base","divisor","isFloat","p","xe","isHex","test","toLowerCase","isBinary","isOctal","Decimal","sine","sin2_x","d5","d16","d20","isHyperbolic","toLessThanHalfPi","isNeg","pi","halfPi","lte","quadrant","divToInt","isZero","toStringBinary","MAX_DIGITS","inexact","unshift","cbrt","config","obj","decimalError","v","ps","EXP_LIMIT","crypto","getRandomValues","randomBytes","cryptoUnavailable","isDecimal","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","ln","log10","log2","mod","random","trunc","hasOwnProperty","arguments","Uint32Array","copy","shift","noConflict","modulo","toExpNeg","toExpPos","MAX_SAFE_INTEGER","absoluteValue","comparedTo","cmp","xdL","ydL","yd","xs","ys","cubeRoot","m","t3","t3plusx","toExponential","eq","decimalPlaces","dp","dividedBy","dividedToIntegerBy","greaterThan","gt","greaterThanOrEqualTo","gte","hyperbolicCosine","one","cosh2_x","d8","hyperbolicSine","sinh2_x","hyperbolicTangent","inverseCosine","inverseHyperbolicCosine","inverseHyperbolicSine","inverseHyperbolicTangent","xsd","inverseSine","inverseTangent","px","isInteger","isInt","isNegative","isPositive","isPos","lessThan","lt","lessThanOrEqualTo","logarithm","isBase10","inf","num","xLTy","q","negated","carry","z","squareRoot","tangent","rL","toBinary","toDecimalPlaces","toDP","toFixed","toFraction","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toNearest","toNumber","toOctal","toPower","yn","toPrecision","toSignificantDigits","toSD","truncated","toJSON","multiplyInteger","compare","aL","bL","subtract","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","amd","self","Function","3","createError","name","errorConstructor","apply","stack","message","IntermediateInheritor","assign","parseInt","throwInvalidParam","InvalidParameter","Fraction","gcd","MAX_CYCLE_LEN","DivisionByZero","p1","p2","M","A","B","C","D","N","modpow","cycleLen","cycleStart","rem1","rem2","lcm","divisible","excludeWhole","whole","toLatex","toContinued","g","dec","cycLen","cycOff","4","naturalSort","oFxNcL","oFyNcL","sre","dre","hre","ore","insensitive","xN","split","yN","xD","Date","yD","cLoc","numS","5","./lib/core/core","6","isFactory","typedFactory","emitter","importFactory","configFactory","create","options","load","factory","instance","index","factories","math","type","_config","typed","instances","Object","mixin","expression","transform","mathWithTransform","epsilon","matrix","number","predictable","randomSeed","./../utils/emitter","./../utils/object","./function/config","./function/import","./typed","7","prev","object","map","validateOption","MATRIX","NUMBER","deepExtend","curr","changes","emit","contains","array","item","findIndex","values","console","warn","JSON","stringify","join","../../utils/object","8","math_import","ArgumentsError","_importFactory","Array","isArray","forEach","entry","value","isSupportedType","_import","silent","TypeError","wrap","_wrap","isTypedFunction","override","signatures","_importTransform","allowedInExpressions","fn","wrapper","existingTransform","namespace","path","traverse","existing","resolver","lazy","factoryAllowedInExpressions","isUnit","isComplex","isBigNumber","isFraction","isMatrix","unsafe","docs","error","json","chain","../../error/ArgumentsError","9","typedFunction","createTyped","types","isDenseMatrix","isSparseMatrix","isRange","isIndex","isResultSet","isHelp","RegExp","isOperatorNode","isConstantNode","isSymbolNode","isParenthesisNode","isFunctionNode","isFunctionAssignmentNode","isArrayNode","isAssignmentNode","isBlockNode","isConditionalNode","isIndexNode","isRangeNode","isUpdateNode","isNode","conversions","from","to","convert","BigNumber","Number","err","DenseMatrix","./../utils/number","typed-function","10","count","isArgumentsError","11","DimensionError","actual","expected","relation","RangeError","isDimensionError","12","IndexError","isIndexError","13","Help","doc","parser","desc","category","description","syntax","examples","expr","eval","string","format","seealso","mathjs","fromJSON","prop","../utils/object","../utils/string","./function/parser","14","Parser","scope","_parse","isParser","compile","get","customs","getSafeProperty","getAll","extend","setSafeProperty","remove","clear","../utils/customs","./parse","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","construction","bignumber","complex","createUnit","fraction","sparse","splitUnit","unit","LN2","LOG2E","LOG10E","phi","SQRT1_2","SQRT2","tau","version","speedOfLight","gravitationConstant","planckConstant","reducedPlanckConstant","magneticConstant","electricConstant","vacuumImpedance","coulomb","elementaryCharge","bohrMagneton","conductanceQuantum","inverseConductanceQuantum","magneticFluxQuantum","nuclearMagneton","klitzing","bohrRadius","classicalElectronRadius","electronMass","fermiCoupling","fineStructure","hartreeEnergy","protonMass","deuteronMass","neutronMass","quantumOfCirculation","rydberg","thomsonCrossSection","weakMixingAngle","efimovFactor","atomicMass","avogadro","boltzmann","faraday","firstRadiation","loschmidt","gasConstant","molarPlanckConstant","molarVolume","sackurTetrode","secondRadiation","stefanBoltzmann","wienDisplacement","molarMass","molarMassC12","gravity","planckLength","planckMass","planckTime","planckCharge","planckTemperature","derivative","lsolve","lup","lusolve","simplify","slu","usolve","qr","cube","dotDivide","dotMultiply","dotPow","fix","multiply","norm","nthRoot","square","unaryMinus","unaryPlus","xgcd","bitAnd","bitNot","bitOr","bitXor","leftShift","rightArithShift","rightLogShift","bellNumbers","catalan","composition","stirlingS2","conj","help","distance","intersect","cross","det","diag","dot","eye","filter","flatten","inv","kron","ones","partitionSelect","range","resize","reshape","size","sort","squeeze","subset","trace","transpose","zeros","combinations","factorial","gamma","kldivergence","multinomial","permutations","pickRandom","randomInt","compareNatural","deepEqual","larger","largerEq","smaller","smallerEq","unequal","setCartesian","setDifference","setDistinct","setIntersect","setIsSubset","setMultiplicity","setPowerset","setSize","setSymDifference","setUnion","erf","mad","mean","median","mode","quantileSeq","std","isNumeric","isPrime","./constants/Infinity","./constants/LN10","./constants/LN2","./constants/LOG10E","./constants/LOG2E","./constants/NaN","./constants/SQRT1_2","./constants/SQRT2","./constants/e","./constants/false","./constants/i","./constants/null","./constants/phi","./constants/pi","./constants/tau","./constants/true","./constants/version","./construction/bignumber","./construction/boolean","./construction/complex","./construction/createUnit","./construction/fraction","./construction/index","./construction/matrix","./construction/number","./construction/sparse","./construction/splitUnit","./construction/string","./construction/unit","./core/config","./core/import","./core/typed","./function/algebra/derivative","./function/algebra/lsolve","./function/algebra/lup","./function/algebra/lusolve","./function/algebra/qr","./function/algebra/simplify","./function/algebra/slu","./function/algebra/usolve","./function/arithmetic/abs","./function/arithmetic/add","./function/arithmetic/cbrt","./function/arithmetic/ceil","./function/arithmetic/cube","./function/arithmetic/divide","./function/arithmetic/dotDivide","./function/arithmetic/dotMultiply","./function/arithmetic/dotPow","./function/arithmetic/exp","./function/arithmetic/fix","./function/arithmetic/floor","./function/arithmetic/gcd","./function/arithmetic/hypot","./function/arithmetic/lcm","./function/arithmetic/log","./function/arithmetic/log10","./function/arithmetic/mod","./function/arithmetic/multiply","./function/arithmetic/norm","./function/arithmetic/nthRoot","./function/arithmetic/pow","./function/arithmetic/round","./function/arithmetic/sign","./function/arithmetic/sqrt","./function/arithmetic/square","./function/arithmetic/subtract","./function/arithmetic/unaryMinus","./function/arithmetic/unaryPlus","./function/arithmetic/xgcd","./function/bitwise/bitAnd","./function/bitwise/bitNot","./function/bitwise/bitOr","./function/bitwise/bitXor","./function/bitwise/leftShift","./function/bitwise/rightArithShift","./function/bitwise/rightLogShift","./function/combinatorics/bellNumbers","./function/combinatorics/catalan","./function/combinatorics/composition","./function/combinatorics/stirlingS2","./function/complex/arg","./function/complex/conj","./function/complex/im","./function/complex/re","./function/expression/eval","./function/expression/help","./function/geometry/distance","./function/geometry/intersect","./function/logical/and","./function/logical/not","./function/logical/or","./function/logical/xor","./function/matrix/concat","./function/matrix/cross","./function/matrix/det","./function/matrix/diag","./function/matrix/dot","./function/matrix/eye","./function/matrix/filter","./function/matrix/flatten","./function/matrix/forEach","./function/matrix/inv","./function/matrix/kron","./function/matrix/map","./function/matrix/ones","./function/matrix/partitionSelect","./function/matrix/range","./function/matrix/reshape","./function/matrix/resize","./function/matrix/size","./function/matrix/sort","./function/matrix/squeeze","./function/matrix/subset","./function/matrix/trace","./function/matrix/transpose","./function/matrix/zeros","./function/probability/combinations","./function/probability/factorial","./function/probability/gamma","./function/probability/kldivergence","./function/probability/multinomial","./function/probability/permutations","./function/probability/pickRandom","./function/probability/random","./function/probability/randomInt","./function/relational/compare","./function/relational/compareNatural","./function/relational/deepEqual","./function/relational/equal","./function/relational/larger","./function/relational/largerEq","./function/relational/smaller","./function/relational/smallerEq","./function/relational/unequal","./function/set/setCartesian","./function/set/setDifference","./function/set/setDistinct","./function/set/setIntersect","./function/set/setIsSubset","./function/set/setMultiplicity","./function/set/setPowerset","./function/set/setSize","./function/set/setSymDifference","./function/set/setUnion","./function/special/erf","./function/statistics/mad","./function/statistics/max","./function/statistics/mean","./function/statistics/median","./function/statistics/min","./function/statistics/mode","./function/statistics/prod","./function/statistics/quantileSeq","./function/statistics/std","./function/statistics/sum","./function/statistics/var","./function/trigonometry/acos","./function/trigonometry/acosh","./function/trigonometry/acot","./function/trigonometry/acoth","./function/trigonometry/acsc","./function/trigonometry/acsch","./function/trigonometry/asec","./function/trigonometry/asech","./function/trigonometry/asin","./function/trigonometry/asinh","./function/trigonometry/atan","./function/trigonometry/atan2","./function/trigonometry/atanh","./function/trigonometry/cos","./function/trigonometry/cosh","./function/trigonometry/cot","./function/trigonometry/coth","./function/trigonometry/csc","./function/trigonometry/csch","./function/trigonometry/sec","./function/trigonometry/sech","./function/trigonometry/sin","./function/trigonometry/sinh","./function/trigonometry/tan","./function/trigonometry/tanh","./function/units/to","./function/utils/clone","./function/utils/format","./function/utils/isInteger","./function/utils/isNaN","./function/utils/isNegative","./function/utils/isNumeric","./function/utils/isPositive","./function/utils/isPrime","./function/utils/isZero","./function/utils/typeof","209","Array | Matrix","deepMap","../../utils/collection/deepMap","../parse","210","string, Object","Array | Matrix, Object","211","any","../../utils/customs","../docs","212","./compile","./eval","./help","./parser","213","string | Array | Matrix","string | Array | Matrix, Object","214","","../Parser","215","./Help","./Parser","./docs","./function","./node","./transform","216","end","217","AccessorNode","defineProperty","isObjectProperty","getObjectProperty","bind","compileAccessorNode","node","defs","access","jsProp","needsSize","needParenthesis","isAccessorNode","isObjectNode","register","Node","callback","_ifNode","_toString","toHTML","_toTex","toTex","../../utils/string","./IndexNode","./Node","./utils/access","218","ArrayNode","items","every","deprecated","compileArrayNode","asMatrix","childNode","../../utils/array","219","AssignmentNode","compileAssignmentNode","jsName","parentObject","jsParentProperty","parentSize","parentIndex","parenthesis","precedence","operators","getPrecedence","exprPrecedence","../../type/matrix/function/matrix","../../utils/latex","../keywords","../operators","./ArrayNode","./utils/assign","220","BlockNode","blocks","block","visible","compileBlockNode","ResultSet","param","js","../../type/resultset/ResultSet","221","ConditionalNode","condition","trueExpr","falseExpr","compileConditionalNode","testCondition","conditionPrecedence","truePrecedence","falsePrecedence","222","ConstantNode","valueType","getType","SUPPORTED_TYPES","compileConstantNode","validateNumericValue","boolean","null","escape","../../utils/types","223","FunctionAssignmentNode","params","keywords","compileFunctionAssignmentNode","childArgs","jsParams","getUniqueArgumentName","jsExpr","latex","toSymbol","./utils/getUniqueArgumentName","224","FunctionNode","SymbolNode","compileFunctionNode","argsName","jsFn","jsArgs","jsScope","compileScope","isRaw","rawArgs","validateSafeMethod","jsObject","names","keys","expandTemplate","template","regex","inputPos","exec","property","ReferenceError","nodeToString","customString","handler","nodeToTex","customTex","latexConverter","customToTex","defaultTemplate","getIdentifier","./SymbolNode","225","IndexNode","dimensions","dotNotation","compileIndexNode","start","step","Range","needsEnd","some","../../type/matrix/Range","./RangeNode","226","_validateScope","symbol","comment","defsCode","factoryCode","_traverse","child","parent","_transform","replacement","nodes","find","cloneDeep","other","getContent","227","ObjectNode","properties","key","compileObjectNode","entries","isSafeProperty","228","OperatorNode","op","implicit","compileOperatorNode","isSafeMethod","calculateNecessaryParentheses","associativity","getAssociativity","parens","operandPrecedence","operandIdentifier","rootIdentifier","latexLeftParens","latexParens","lhsParens","lhsPrecedence","assocWithLhs","isAssociativeWith","rhsParens","rhsPrecedence","assocWithRhs","lhsIdentifier","rhsIdentifier","latexRightParens","parensArray","argPrecedence","assocWithArg","argAssociativity","assoc","operand","lhs","rhs","stringifiedArgs","lhsTex","rhsTex","texifiedArgs","./ConstantNode","./FunctionNode","229","ParenthesisNode","content","compileParenthesisNode","230","RangeNode","compileRangeNode","startPrecedence","stepPrecedence","endPrecedence","endSymbols","231","isValuelessUnit","Unit","compileSymbolNode","undef","232","UpdateNode","233","compileFunction","compileFunctions","_compile","234","./AccessorNode","./AssignmentNode","./BlockNode","./ConditionalNode","./FunctionAssignmentNode","./ObjectNode","./OperatorNode","./ParenthesisNode","./UpdateNode","235","errorTransform","../../../function/matrix/subset","../../../utils/customs","../../transform/error.transform","236","../../../type/matrix/function/matrix","237","238","_node","identifier","nodeA","nodeB","identifierA","identifierB","associativeWith","OperatorNode:or","OperatorNode:xor","OperatorNode:and","OperatorNode:bitOr","OperatorNode:bitXor","OperatorNode:bitAnd","OperatorNode:equal","OperatorNode:unequal","OperatorNode:smaller","OperatorNode:larger","OperatorNode:smallerEq","OperatorNode:largerEq","OperatorNode:leftShift","OperatorNode:rightArithShift","OperatorNode:rightLogShift","OperatorNode:to","OperatorNode:add","OperatorNode:subtract","OperatorNode:multiply","OperatorNode:divide","OperatorNode:dotMultiply","OperatorNode:dotDivide","OperatorNode:mod","OperatorNode:unaryPlus","OperatorNode:unaryMinus","OperatorNode:bitNot","OperatorNode:not","OperatorNode:pow","OperatorNode:dotPow","OperatorNode:factorial","OperatorNode:transpose","239","extra_nodes","parseStart","Matrix","elem","first","nesting_level","conditional_level","next","prevPreview","nextPreview","nextNextPreview","getToken","token_type","TOKENTYPE","NULL","token","isWhitespace","DELIMITER","c2","c3","DELIMITERS","isDigitDot","isAlpha","isDigit","NAMED_DELIMITERS","SYMBOL","UNKNOWN","createSyntaxError","isDecimalMark","getTokenSkipNewline","openParams","closeParams","parseBlock","parseAssignment","valid","parseConditional","parseLogicalOr","parseLogicalXor","parseLogicalAnd","parseBitwiseOr","parseBitwiseXor","parseBitwiseAnd","parseRelational","parseShift","==","!=","<",">","<=",">=","parseConversion","<<",">>",">>>","parseRange","in","parseAddSubtract","parseMultiplyDivide","+","-","last","parseUnary","*",".*","/","./","%","~","not","parsePow","parseLeftHandOperators","parseCustomNodes","!","'","parseAccessors","CustomNode","parseSymbol","parseString","parseStringToken","parseMatrix","rows","cols","row","parseRow","parseObject","parseNumber","parseParentheses","parseEnd","col",",","(",")","[","]","{","}","\"",";","^",".^","&","|","^|","=",":","?","and","xor","or","cPrev","cNext","isValidLatinOrGreek","isValidMathSymbol","high","low","nestingLevel","../error/ArgumentsError","../utils/collection/deepMap","./node/AccessorNode","./node/ArrayNode","./node/AssignmentNode","./node/BlockNode","./node/ConditionalNode","./node/ConstantNode","./node/FunctionAssignmentNode","./node/FunctionNode","./node/IndexNode","./node/ObjectNode","./node/OperatorNode","./node/ParenthesisNode","./node/RangeNode","./node/SymbolNode","240","concat","...any","lastIndex","../../function/matrix/concat","./error.transform","241","../../error/IndexError","242","filterTransform","_scope","../../function/matrix/filter","../node/SymbolNode","243","Array | Matrix, function","maxArgumentCount","recurse","../../function/matrix/forEach","../../utils/function","244","./concat.transform","./filter.transform","./forEach.transform","./index.transform","./map.transform","./max.transform","./mean.transform","./min.transform","./range.transform","./subset.transform","245","ii","isSet","Index","246","Array, function","_map","Matrix, function","orig","247","isCollection","dim","../../function/statistics/max","../../utils/collection/isCollection","248","../../function/statistics/mean","249","../../function/statistics/min","250","../../function/matrix/range","251","../../function/matrix/subset","252","addScalar","divideScalar","multiplyScalar","equalScalar","SparseMatrix","Spa","_denseLUP","_sparseLUP","L","U","_size","columns","data","_data","ldata","lsize","udata","usize","pabsv","vjj","absv","_swapRows","vij","pv","_values","_index","ptr","_ptr","lvalues","lindex","lptr","uvalues","uindex","uptr","pv_co","pv_oc","swapIndeces","kx","ky","spa","k0","k1","vkj","_forEachRow","vik","accumulate","swap","util","../../../utils/index","../../arithmetic/abs","../../arithmetic/addScalar","../../arithmetic/divideScalar","../../arithmetic/multiplyScalar","../../arithmetic/subtract","../../arithmetic/unaryMinus","../../relational/equalScalar","../../relational/larger","253","_denseQR","_sparseQR","Q","R","Qdata","Rdata","pivot","sgn","conjSgn","alphaSquared","alpha","u1","../../arithmetic/sign","../../arithmetic/sqrt","../../complex/conj","../../matrix/eye","../../matrix/zeros","../../relational/unequal","../../utils/clone","../../utils/isPositive","../../utils/isZero","254","cs_sqr","cs_lu","SparseMatrix, number, number","order","threshold","pinv","../../algebra/sparse/cs_lu","../../algebra/sparse/cs_sqr","255","funcArgsCheck","Node, SymbolNode, Object","variable","constNodes","constTag","_derivative","Node, SymbolNode","string, SymbolNode","string, SymbolNode, Object","string, string","string, string, Object","Node, string","Node, string, Object","_simplify","deriv","_derivTex","Node, SymbolNode, ConstantNode","string, string, number","Object, ConstantNode, string","Object, SymbolNode, string","varName","Object, ParenthesisNode, string","Object, FunctionAssignmentNode, string","Object, FunctionNode | OperatorNode, string","isConst","ConstantNode, Object","SymbolNode, Object","ParenthesisNode, Object","FunctionAssignmentNode, Object","FunctionNode, Object","arg2","funcDerivative","arg1","negative","func","chainDerivative","OperatorNode, Object","newArgs","expValue","powMinusOne","../../expression/node/ConstantNode","../../expression/node/FunctionNode","../../expression/node/OperatorNode","../../expression/node/ParenthesisNode","../../expression/node/SymbolNode","../../expression/parse","./simplify","256","./decomposition/lup","./decomposition/qr","./decomposition/slu","./derivative","./solver/lsolve","./solver/lusolve","./solver/usolve","257","removeParens","_buildRules","rules","ruleSet","newRule","rule","ruleType","lr","context","evaluate","isAssociative","makeNode","createMakeNodeFunction","expandsym","_getExpandPlaceholderSymbol","expanded","unflattenr","_lastsym","getSplits","right","rightArgs","isCommutative","splice","mergeMatch","match1","match2","placeholders","_exactMatch","combineChildMatches","list1","list2","merged","i1","i2","mergeChildMatches","childMatches","sets","reduce","uniqueSets","unique","_ruleMatch","isSplit","splits","splitMatches","matchSet","childMatch","SUPPORTED_CONSTANTS","simplifyConstant","unflattenl","string, Array","Node, Array","visited","applyRule","true","false","commutative","Node, Object","repl","matches","../../expression/node/Node","./simplify/simplifyConstant","./simplify/util","258","foldFraction","_toNode","_eval","fnname","_toNumber","ignore","_exactFraction","unaryMinusNode","_fractionToNode","vn","foldOp","ignoreandcontinue","allChildren","consts","vars","./../../../utils/number","./util","259","associative","children","findChildren","curnode","260","solveValidation","SparseMatrix, Array | Matrix","_sparseForwardSubstitution","DenseMatrix, Array | Matrix","_denseForwardSubstitution","Array, Array | Matrix","bdata","xj","bj","jvalues","jindex","./utils/solveValidation","261","cs_ipvec","_lusolve","SparseMatrix, Array | Matrix, number, number","Object, Array | Matrix","_toMatrix","../decomposition/lup","../decomposition/slu","../sparse/cs_ipvec","./lsolve","./usolve","262","_sparseBackwardSubstitution","_denseBackwardSubstitution","263","msize","datatype","_datatype","asize","../../../../utils/index","264","cs_flip","cs_fkeep","cs_tdfs","cs_amd","lemax","dense","cm","_createTargetMatrix","_diag","k2","pj","nvi","pk","eln","pn","h","cindex","cptr","cnz","W","nv","head","elen","degree","hhead","mark","_initializeQuotientGraph","nel","_initializeDegreeLists","mindeg","elenk","nvk","dk","pk1","pk2","_wclear","wnvi","dext","p3","p4","nvj","jlast","ok","at","tindex","tptr","../../arithmetic/add","../../arithmetic/multiply","../../matrix/transpose","./cs_fkeep","./cs_flip","./cs_tdfs","265","cs_leaf","cs_counts","post","ata","J","p0","ancestor","maxfirst","prevleaf","colcount","jleaf","./cs_leaf","266","cs_marked","cs_mark","cs_unflip","cs_dfs","top","jnew","done","./cs_mark","./cs_marked","./cs_unflip","267","cs_etree","inext","aindex","aptr","268","avalues","nz","269","270","271","sparent","jprev","272","cs_spsolve","tol","lnz","unz","ipiv","xabs","../../relational/largerEq","./cs_spsolve","273","274","275","cs_permute","adt","cvalues","t0","276","cs_post","277","cs_reach","gptr","gsize","bindex","bptr","./cs_dfs","278","lo","gvalues","gindex","bvalues","./cs_reach","279","cp","_vcount","leftmost","tail","nque","m2","pa","./cs_amd","./cs_counts","./cs_etree","./cs_permute","./cs_post","280","281","282","283","algorithm01","algorithm04","algorithm10","algorithm13","algorithm14","Matrix, Matrix","storage","Array, Array","Array, Matrix","Matrix, Array","Matrix, any","any, Matrix","Array, any","any, Array","any, any","any, any, ...any","rest","result","../../type/matrix/utils/algorithm01","../../type/matrix/utils/algorithm04","../../type/matrix/utils/algorithm10","../../type/matrix/utils/algorithm13","../../type/matrix/utils/algorithm14","../../utils/latex.js","./addScalar","284","number, number","Complex, Complex","BigNumber, BigNumber","Fraction, Fraction","Unit, Unit","equalBase","fixPrefix","285","_cbrtComplex","allRoots","arg_3","principal","_cbrtNumber","all","_cbrtUnit","negate","third","Complex, boolean","../utils/isNegative","./unaryMinus","286","287","288","algorithm11","Array | Matrix, Array | Matrix","any, Array | Matrix","../../type/matrix/utils/algorithm11","../matrix/inv","./divideScalar","./multiply","289","Unit, number | Fraction | BigNumber","_normalize","number | Fraction | BigNumber, Unit","./multiplyScalar","290","algorithm02","algorithm03","algorithm07","algorithm12","../../type/matrix/utils/algorithm02","../../type/matrix/utils/algorithm03","../../type/matrix/utils/algorithm07","../../type/matrix/utils/algorithm12","291","algorithm09","../../type/matrix/utils/algorithm09","292","./pow","293","294","295","296","_gcdBigNumber","zero","_gcd","Matrix, number | BigNumber","number | BigNumber, Matrix","Array, number | BigNumber","number | BigNumber, Array","Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber","../../utils/number","297","_hypot","largest","... number | BigNumber","toArray","../relational/smaller","../utils/isPositive","./abs","./sqrt","298","./add","./cbrt","./ceil","./cube","./divide","./dotDivide","./dotMultiply","./dotPow","./exp","./fix","./floor","./gcd","./hypot","./lcm","./log","./log10","./mod","./norm","./nthRoot","./round","./sign","./square","./subtract","./unaryPlus","./xgcd","299","_lcmBigNumber","algorithm06","_lcm","../../type/matrix/utils/algorithm06","300","301","_log10","302","_mod","algorithm05","../../type/matrix/utils/algorithm05","303","_validateMatrixDimensions","xsize","ysize","_multiplyVectorVector","_multiplyVectorMatrix","_multiplyMatrixVector","_multiplyMatrixMatrix","size1","size2","dt","adata","bdt","af","mf","_multiplyVectorDenseMatrix","bsize","alength","bcolumns","_multiplyDenseMatrixVector","_multiplySparseMatrixVector","_multiplyDenseMatrixDenseMatrix","_multiplyDenseMatrixSparseMatrix","_multiplySparseMatrixDenseMatrix","_multiplySparseMatrixSparseMatrix","arows","acolumns","jb","kb0","kb1","cij","kb","ib","brows","vbi","ka0","ka1","ka","ia","ic","vbij","../relational/equalScalar","304","number | Fraction | BigNumber | Complex, Unit","Unit, number | Fraction | BigNumber | Complex","305","_norm","sizeX","POSITIVE_INFINITY","pinf","NEGATIVE_INFINITY","ninf","maxc","cj","maxr","ri","boolean | null","number | Complex | BigNumber | boolean | null, number | BigNumber | string","Array, number | BigNumber | string","Matrix, number | BigNumber | string","../arithmetic/abs","../arithmetic/add","../arithmetic/multiply","../arithmetic/pow","../arithmetic/sqrt","../matrix/trace","../matrix/transpose","../relational/larger","306","_bigNthRoot","Big","_nthRoot","_nthComplexRoot","Complex, number","density","roots","307","_pow","yFrac","yNum","ex","_powArray","_powMatrix","Array, number","Array, BigNumber","Matrix, number","Matrix, BigNumber","Unit, number","../../type/fraction/function/fraction","../../type/number","../matrix/eye","308","NO_INT","_round","Complex, BigNumber","_n","number, BigNumber","Fraction, number","number | Complex | BigNumber, Matrix","number | Complex | BigNumber, Array","decimals","../matrix/zeros","309","310","_sqrtNumber","311","312","../../error/DimensionError","313","314","boolean | string | null","315","_xgcd","lastx","lasty","_xgcdBigNumber","316","bigBitAnd","../../utils/bignumber/bitAnd","317","bigBitNot","../../utils/bignumber/bitNot","318","bigBitOr","../../utils/bignumber/bitOr","319","bigBitXor","../../utils/bignumber/bitXor","320","./bitAnd","./bitNot","./bitOr","./bitXor","./leftShift","./rightArithShift","./rightLogShift","321","algorithm08","bigLeftShift","../../type/matrix/utils/algorithm08","../../utils/bignumber/leftShift","322","bigRightArithShift","../../utils/bignumber/rightArithShift","323","324","number | BigNumber","../utils/isInteger","./stirlingS2","325","../arithmetic/divide","../probability/combinations","326","number | BigNumber, number | BigNumber","../arithmetic/addScalar","327","./bellNumbers","./catalan","./composition","328","kFactorial","negativeOne","kChooseI","iPower","../arithmetic/subtract","../probability/factorial","329","330","331","332","./arg","./conj","./im","./re","333","334","Array, Array, Array","_2d","xCoeff","yCoeff","constant","_distancePointLine2D","Object, Object, Object","lineTwoPtY","lineTwoPtX","lineOnePtY","lineOnePtX","pointX","pointY","_3d","_parametricLine","_distancePointLine3D","_distance2d","_distance3d","Object, Object","xCoeffLine","yCoeffLine","pointZ","x0","y0","z0","pointOneX","pointOneY","pointTwoX","pointTwoY","pointOneZ","pointTwoZ","_pairwise","_distancePairwise","_objectToArray","den","y1","y2","yDiff","xDiff","radicant","z1","z2","zDiff","335","./distance","./intersect","336","_4d","_intersect2d","p1a","p1b","p2a","p2b","o1","o2","_intersect3d","x3","y3","z3","x4","y4","z4","d1343","d4321","d1321","d4343","d2121","ta","tb","pax","pay","paz","pbx","pby","pbz","_intersectLinePlane","py","pz","plane","Array, Array, Array, Array","Matrix, Matrix, Matrix","Matrix, Matrix, Matrix, Matrix","337","./algebra","./arithmetic","./bitwise","./combinatorics","./complex","./geometry","./logical","./matrix","./probability","./relational","./set","./special","./statistics","./string","./trigonometry","./unit","./utils","338","../utils/isZero","./not","339","./and","./or","./xor","340","341","342","343","...Array | Matrix | number | BigNumber","prevDim","matrices","_concat","...string","concatDim","344","_cross","highestDimension","xSize","ySize","product","345","_det","compute_mu","mu","fa","../../utils/index","../arithmetic/unaryMinus","346","kSuper","kSub","_createDiagonalMatrix","_getDiagonal","ms","F","diagonal","dm","vector","Array, string","Array, number, string","Array, BigNumber, string","Matrix, string","Matrix, number, string","Matrix, BigNumber, string","347","_dot","348","_eyeVector","_eye","defaultValue","minimum","number | BigNumber, string","number | BigNumber, number | BigNumber, string","349","_filterCallback","Array, RegExp","_filterRegExp","Matrix, RegExp","regexp","350","_flatten","flat","351","_forEach","352","./concat","./cross","./det","./diag","./dot","./eye","./filter","./flatten","./forEach","./inv","./kron","./map","./ones","./partitionSelect","./range","./reshape","./resize","./size","./sort","./squeeze","./subset","./trace","./transpose","./zeros","353","_inv","mat","Ac","Bc","Ar","Br","../arithmetic/divideScalar","../matrix/det","354","_kron","../arithmetic/multiplyScalar","355","356","_ones","hasBigNumbers","_validate","...number | BigNumber | string","Array | Matrix, string","357","asc","_partitionSelect","quickSelect","Array | Matrix, number","Array | Matrix, number, string","Array | Matrix, number, function","../relational/compare","358","_out","_strRange","includeEnd","_bigRangeInc","_bigRangeEx","_rangeInc","_rangeEx","ZERO","nums","invalid","ONE","string, boolean","number, number, number","number, number, boolean","number, number, number, boolean","BigNumber, BigNumber, BigNumber","BigNumber, BigNumber, boolean","BigNumber, BigNumber, BigNumber, boolean","359","sizes","360","_resizeString","defaultChar","361","number | Complex | BigNumber | Unit | boolean | null","362","_comparator","compareAsc","compareDesc","_arrayIsVector","_matrixIsVector","../relational/compareNatural","363","364","_getSubstring","strLen","validateIndex","dimension","substr","_setSubstring","chars","Array, Index","isScalar","Matrix, Index","Object, Index","_getObjectProperty","string, Index","Array, Index, any","Array, Index, any, any","Matrix, Index, any","Matrix, Index, any, any","string, Index, string","string, Index, string, string","Object, Index, any","_setObjectProperty","updated","365","_denseTrace","_sparseTrace","366","_denseTranspose","_sparseTranspose","transposedRow","transposed","367","_zeros","368","isPositiveInteger","369","distribution","distributions","randFunctions","arg3","isNumber","_randomDataForMatrix","_random","number | Array","_randomInt","number | Array, number","Array, number, number","possibles","_pickRandom","Array, number | Array","weights","Array, number | Array, Array | number","single","totalWeights","pick","rng","randKey","randFunc","uniform","normal","u2","picked","./seededRNG","370","./gamma","371","bigFactorial","twoN","threeN","fourN","fiveN","real","twoPiSqrt","372","./combinations","./factorial","./kldivergence","./multinomial","./permutations","./pickRandom","./random","./randomInt","373","_kldiv","plength","qlength","sumq","sump","qnorm","pnorm","../arithmetic/dotDivide","../arithmetic/log","../statistics/sum","../utils/isNumeric","374","denom","deepForEach","ai","../../utils/collection/deepForEach","375","376","./distribution","377","378","379","setSeed","seed","singletonRandom","seedrandom","on","seed-random","380","boolean, boolean","nearlyEqual","bigNearlyEqual","../../utils/bignumber/nearlyEqual","381","compareMatricesAndArrays","compareArrays","compareObjects","keysX","keysY","getTypeOf","compareBooleans","typeX","typeY","compareComplexNumbers","formatUnits","../utils/typeof","./compare","javascript-natural-sort","382","_deepEqual","equal","./equal","383","./equalScalar","384","385","./compareNatural","./deepEqual","./larger","./largerEq","./smaller","./smallerEq","./unequal","386","387","388","389","390","_unequal","391","./setCartesian","./setDifference","./setDistinct","./setIntersect","./setIsSubset","./setMultiplicity","./setPowerset","./setSize","./setSymDifference","./setUnion","392","a1","a2","b1","b2","../../type/matrix/DenseMatrix","../../type/matrix/MatrixIndex","../matrix/size","../matrix/subset","393","inb2","identify","generalize","../relational/equal","394","395","396","397","number | BigNumber | Fraction | Complex, Array | Matrix","398","_subset","bitarray","_sort","399","Array | Matrix, boolean","400","../matrix/concat","../matrix/sort","../set/setDifference","401","../set/setIntersect","../set/setSymDifference","402","erf1","ysq","xnum","xden","erfc2","del","erfc3","SQRPI","MAX_NUM","THRESH","403","./erf","404","./mad","./max","./mean","./median","./min","./mode","./prod","./quantileSeq","./std","./sum","./var","405","_mad","med","...","../matrix/map","../statistics/median","406","_largest","_max","Array | Matrix, number | BigNumber","containsCollections","../../utils/collection/containsCollections","../../utils/collection/reduce","407","_nmean","_mean","408","_median","mid","left","middle2","middle","number | BigNumber | Complex | Unit","number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit","../matrix/partitionSelect","409","_smallest","_min","410","_mode","411","_prod","412","probOrN","sorted","probArr","dataArr","_quantileSeq","nPlusOne","intN","currProb","prob","fracPart","validate","integerPart","integerPartNumber","number | BigNumber | Unit","413","_std","normalization","variance","../statistics/var","414","_sum","415","_var","diff","DEFAULT_NORMALIZATION","416","any, Object | function | number","417","./format","./print","418","print","_print","string, Object, number | Object","original","isString","419","420","_acosh","421","422","423","424","425","426","./acosh","427","428","429","430","431","_atanh","432","hasBase","BASE_UNITS","ANGLE","433","_cosh","434","435","_coth","436","437","_csch","438","./acos","./acot","./acoth","./acsc","./acsch","./asec","./asech","./asin","./asinh","./atan","./atan2","./atanh","./cos","./cosh","./cot","./coth","./csc","./csch","./sec","./sech","./sin","./sinh","./tan","./tanh","439","440","_sech","441","442","_sinh","443","444","_tanh","445","./to","446","Unit, Unit | string","447","448","./clone","./isInteger","./isNaN","./isNegative","./isNumeric","./isPositive","./isPrime","./isZero","./typeof","449","450","451","452","number | BigNumber | Fraction | boolean","Complex | Unit | string","453","454","455","456","_typeof","isChain","457","./reviver","458","459","decimal.js/decimal.js","460","0","../../../utils/collection/deepMap","461","./BigNumber","./function/bignumber","462","bool","lcase","./../utils/collection/deepMap","463","Chain","createProxy","chainify","createLazyProxy","arg0","464","465","./Chain","./function/chain","466","toPolar","strRe","strIm","fromPolar","EPSILON","complex.js","467","symbols","../../../utils/latex","468","./Complex","./function/complex","469","fraction.js","470","471","./Fraction","./function/fraction","472","./bignumber","./boolean","./chain","./fraction","./number","./resultset","473","preprocess","_get","_getSubmatrix","dims","_set","submatrix","sSize","iSize","outer","unsqueeze","_fit","_setSubmatrix","dataIndex","subIndex","newSize","changed","_resize","index_i","me","_value","swapRows","vi","_storage","./Matrix","474","FibonacciHeap","_minimum","oneOverLogPhi","isFibonacciHeap","insert","isEmpty","extractMinimum","numberOfChildren","tempRight","_findMinimumNode","_decreaseKey","_cut","_cascadingCut","_linkNodes","arraySize","numRoots","../../function/relational/larger","../../function/relational/smaller","475","ImmutableDenseMatrix","isImmutableDenseMatrix","./DenseMatrix","476","skipZeros","477","ranges","_dimensions","_isScalar","_createImmutableMatrix","strings","478","479","_heap","isSpa","heap","nodei","nodej","../../function/arithmetic/add","../../function/relational/equalScalar","480","_createFromMatrix","_createFromArray","source","_getsubset","_setsubset","idx","kk","mvalues","mindex","mptr","_getValueIndex","_remove","_insert","bottom","ins","colIndex","rowIndex","r1","c1","invoke","minRow","maxRow","minColumn","maxColumn","_toArray","vx","vy","481","...number | string | BigNumber | Range | Array | Matrix","482","_create","Array | Matrix, string, string","483","484","./FibonacciHeap","./ImmutableDenseMatrix","./MatrixIndex","./Range","./Spa","./SparseMatrix","./function/index","./function/matrix","./function/sparse","485","denseMatrix","sparseMatrix","cf","cdata","../../../error/DimensionError","486","../../../function/relational/equalScalar","487","488","xa","xb","wa","wb","489","wai","wbi","va","vb","vc","490","scatter","./../../../utils/collection/scatter","491","_scatter","492","493","494","495","496","497","csize","_iterate","level","av","bv","cv","498","../../../utils/object","499","Unit, string | Unit","valuelessUnit","500","501","./ResultSet","502","../utils/number","503","units","UNIT_NONE","prefix","PREFIXES","NONE","power","BASE_DIMENSIONS","isUnitListSimplified","skipWhitespace","text","revert","oldIndex","tentativeNumber","tentativeIndex","parseUnit","unitName","parseCharacter","toFind","_findUnit","UNITS","prefixes","endsWith","prefixLen","prefixName","calculateAngleValues","constants","rad","deg","grad","cycle","arcsec","arcmin","assertUnitNameIsValid","isValidAlpha","valueStr","powerMultiplierCurrent","expectingUnit","powerMultiplierStack","powerMultiplierStackProduct","oldC","uStr","baseDim","UNIT_SYSTEMS","auto","allowNoUnits","_isDerived","unitValue","unitOffset","unitPower","unitPrefixValue","_getNumberConverter","offset","_denormalize","prefixValue","inverted","valThis","valOther","getNumericIfUnitless","toNumeric","simplifyUnitListLazy","matchingBase","proposedUnitList","currentUnitSystem","matchingUnit","missingBaseDim","toSI","strNum","strDen","nNum","nDen","isImaginary","isReal","_bestPrefix","unitStr","absValue","absUnitValue","bestPrefix","bestDiff","scientific","parts","xFixed","xNumeric","xRounded","isNearlyEqual","testSum","SHORT","da","G","T","Z","Y","LONG","deca","hecto","kilo","mega","giga","tera","peta","exa","zetta","yotta","deci","centi","milli","micro","nano","pico","femto","atto","zepto","yocto","SQUARED","CUBIC","BINARY_SHORT","Ki","Mi","Gi","Ti","Pi","Ei","Zi","Yi","BINARY_LONG","kibi","mebi","gibi","tebi","pebi","exi","zebi","yobi","BTU","MM","SHORTLONG","MASS","LENGTH","TIME","CURRENT","TEMPERATURE","LUMINOUS_INTENSITY","AMOUNT_OF_SUBSTANCE","FORCE","SURFACE","VOLUME","ENERGY","POWER","PRESSURE","ELECTRIC_CHARGE","ELECTRIC_CAPACITANCE","ELECTRIC_POTENTIAL","ELECTRIC_RESISTANCE","ELECTRIC_INDUCTANCE","ELECTRIC_CONDUCTANCE","MAGNETIC_FLUX","MAGNETIC_FLUX_DENSITY","FREQUENCY","BIT","BASE_UNIT_NONE","meter","inch","foot","yard","mile","link","rod","angstrom","ft","mi","li","ch","mil","sqin","sqft","sqyd","sqmi","sqrd","sqch","sqmil","acre","hectare","m3","litre","cuin","cuft","cuyd","teaspoon","tablespoon","drop","gtt","minim","fluiddram","fluidounce","gill","cc","cup","pint","quart","gallon","beerbarrel","oilbarrel","hogshead","fldr","floz","gi","pt","qt","gal","bbl","obl","gram","ton","tonne","grain","dram","ounce","poundmass","hundredweight","stick","stone","gr","dr","oz","lbm","cwt","second","minute","hour","day","week","month","year","decade","century","millennium","hertz","reciprocal","Hz","ampere","K","degC","degF","degR","kelvin","celsius","fahrenheit","rankine","mol","mole","cd","candela","newton","dyn","dyne","lbf","poundforce","kip","joule","erg","Wh","eV","electronvolt","watt","hp","VAR","I","VA","Pa","psi","atm","bar","torr","mmHg","mmH2O","cmH2O","farad","volt","V","ohm","henry","H","siemens","S","weber","Wb","tesla","bits","bytes","ALIASES","meters","inches","feet","yards","miles","links","rods","chains","angstroms","litres","liter","liters","teaspoons","tablespoons","minims","fluiddrams","fluidounces","gills","cups","pints","quarts","gallons","beerbarrels","oilbarrels","hogsheads","gtts","grams","tons","tonnes","grains","drams","ounces","poundmasses","hundredweights","sticks","lb","lbs","kips","acres","hectares","sqfeet","sqyard","sqmile","sqmiles","mmhg","mmh2o","cmh2o","seconds","secs","minutes","mins","hours","hr","hrs","days","weeks","months","years","radians","degrees","gradian","gradians","cycles","arcsecond","arcseconds","arcminute","arcminutes","BTUs","watts","joules","amperes","coulombs","volts","ohms","farads","webers","teslas","electronvolts","moles","si","bit","cgs","us","setUnitSystem","getUnitSystem","typeConverters","alias","deleteUnit","aliases","lastUnit","createUnitSingle","definition","defUnit","toUpperCase","newUnit","anyMatch","baseName","newBaseUnit","aliasName","../../function/arithmetic/abs","../../function/arithmetic/addScalar","../../function/arithmetic/divideScalar","../../function/arithmetic/fix","../../function/arithmetic/multiplyScalar","../../function/arithmetic/pow","../../function/arithmetic/round","../../function/arithmetic/subtract","../../function/relational/equal","../../function/string/format","../../function/utils/isNumeric","../../function/utils/typeof","../../type/complex/Complex","../../utils/bignumber/constants","504","string, Unit | string | Object, Object","def","string, Unit | string | Object","505","Unit, Array","506","number | BigNumber | Fraction | Complex, string","507","./Unit","./function/createUnit","./function/splitUnit","./function/unit","./physicalConstants","508","fixedUnit","setLazyConstant","509","dimNext","oldLen","newLen","minLen","UNINITIALIZED","_reshape","accumulator","_squeeze","_unsqueeze","_defaultValue","newArray","flatArray","separator","../error/DimensionError","../error/IndexError","./object","./types","510","bitwise","511","prevPrec","512","negOne","513","514","decCoefficientToBinaryString","xBits","yBits","xSign","ySign","minBits","maxBits","minSign","shortLen","longLen","expFuncVal","outVal","twoPower","two","515","hasher","memoize","../function","516","notation","lower","upper","exponential","517","518","519","520","isBoolean","521","./isCollection","522","523","524","525","_reduce","val","tran","_switch","../array","526","update","527","isPlainObject","method","__proto__","safeNativeMethods","toLocaleString","528","Emitter","off","once","tiny-emitter","529","cache","hash","signature","530","./array","./emitter","531","Alpha","Beta","beta","Gamma","Delta","delta","Epsilon","varepsilon","Zeta","zeta","Eta","eta","Theta","theta","vartheta","Iota","iota","Kappa","kappa","varkappa","Lambda","lambda","Mu","Nu","nu","Xi","Omicron","omicron","varpi","Rho","rho","varrho","Sigma","sigma","varsigma","Tau","Upsilon","upsilon","Phi","varphi","Chi","chi","Psi","Omega","omega","Inf","infinity","oo","lim","532","toEngineering","splitNumber","exponent","coefficients","rounded","roundDigits","newExp","significandsDiff","expDiff","decimalIdx","decimalVal","splitValue","pp","removed","DBL_EPSILON","533","Boolean","canDefineProperty","_uninitialized","configurable","enumerable","534","formatArray","formatNumber","formatBigNumber","escaped","./bignumber/formatter","535","536","global","ARC4","keylen","width","mask","depth","typ","mixkey","smear","stringseed","tostring","autoseed","GLOBAL","Uint8Array","navigator","plugins","screen","pool","fromCharCode","chunks","window","startdenom","significance","overflow","oldRandom","use_entropy","entropy","arc4","resetGlobal","537","ctx","listener","_","evtArr","evts","liveEvents","538","getTypeTest","hint","getName","fns","argCount","actualType","_expected","_fn","anyType","Refs","categories","Param","varArgs","_types","trim","_varArgs","Signature","_params","childs","fallThrough","parseSignatures","rawSignatures","expand","signature_i","filterAnyTypeSignatures","filtered","mapSignatures","normalized","hasConversions","parseTree","anys","nodeSignature","overlapping","matchingAnys","paramsStartWith","getArgs","_typed","refs","_signatures","_name","_args","maxParams","toCode","body","conversion","cat","ac","bc","bi","toConversion","newParam","aLast","bLast","ref","getTests","tests","allTypes","exactTypes","conversion_i","_innerCode","exceptions","_exceptions","...Function","addType","addConversion","539","_interopRequireWildcard","__esModule","newObj","_classCallCheck","Constructor","ExpressionEngine","_createClass","defineProperties","target","props","descriptor","writable","protoProps","staticProps","_sdUtils","_mathjs","_sdRandom","sdRandom","functionNameList","fnName","importFn","asNumber","doEval","compileOnly","reviver","isExpressionObject","serialize","staticParser","prevScope","ev","Utils","parsed","randomMenuList","menuList","./mathjs","sd-random","sd-utils","540","_expressionEngine","./expression-engine","541","core","mathjs/core","mathjs/lib/expression","mathjs/lib/function","mathjs/lib/json","mathjs/lib/type","sd-expression-engine","_src","./src"],"mappings":"AAAAA,QAAA,QAAAC,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAR,UAAAA,OAAA,KAAAO,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAG,EAAA,MAAAA,GAAAH,GAAA,EAAA,IAAAI,GAAA,GAAAC,OAAA,uBAAAL,EAAA,IAAA,MAAAI,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAV,EAAAG,IAAAQ,WAAAZ,GAAAI,GAAA,GAAAS,KAAAF,EAAAC,QAAA,SAAAb,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAC,QAAAb,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAQ,QAAA,IAAA,GAAAL,GAAA,kBAAAT,UAAAA,QAAAM,EAAA,EAAAA,EAAAF,EAAAY,OAAAV,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAY,GAAA,SAAAjB,EAAAkB,EAAAJ,ICmCA,SAAAK,GAEA,YAyCA,SAAAC,GAAAZ,EAAAa,GAEA,GAAAC,GAAAC,KAAAC,IAAAhB,GACAiB,EAAAF,KAAAC,IAAAH,EAEA,OAAA,KAAAb,EACAe,KAAAG,IAAAD,GAGA,IAAAJ,EACAE,KAAAG,IAAAJ,GAGAA,EAAA,KAAAG,EAAA,IACA,GAAAF,KAAAG,IAAAlB,EAAAA,EAAAa,EAAAA,GAmCAE,KAAAG,IAAAlB,EAAAe,KAAAI,IAAAJ,KAAAK,MAAAP,EAAAb,KA8GA,QAAAqB,GAAArB,EAAAa,GAEA,MAAAS,gBAAAD,IAIAE,EAAAvB,EAAAa,GAEAS,KAAA,GAAAE,EAAA,QACAF,KAAA,GAAAE,EAAA,KANA,GAAAH,GAAArB,EAAAa,GAzMA,GAAAW,IAAAC,GAAA,EAAAC,GAAA,GAEAC,EAAA,SAAAC,GACA,MAAA,IAAAb,KAAAc,IAAAD,GAAAb,KAAAc,KAAAD,KAGAE,EAAA,SAAAF,GACA,MAAA,IAAAb,KAAAc,IAAAD,GAAAb,KAAAc,KAAAD,KAGAG,EAAA,SAAAH,EAAAI,GAEA,GAAAhC,GAAAe,KAAAC,IAAAY,GACAf,EAAAE,KAAAC,IAAAgB,EAEA,OAAAhC,GAAA,KAAAa,EAAA,IACAE,KAAAkB,KAAAjC,EAAAA,EAAAa,EAAAA,IAGAb,EAAAa,GACAb,EAAAa,EACAA,EAAAe,EAAAI,GAEAnB,EAAAmB,EAAAJ,EAEA5B,EAAAe,KAAAkB,KAAA,EAAApB,EAAAA,KAGAqB,EAAA,WACA,KAAAC,aAAA,kBA8DAZ,EAAA,SAAAvB,EAAAa,GAEA,GAAAuB,SAAApC,GAAA,OAAAA,EACAwB,EAAA,GACAA,EAAA,GAAA,MACA,IAAAY,SAAAvB,EACAW,EAAA,GAAAxB,EACAwB,EAAA,GAAAX,MACA,cAAAb,IAEA,IAAA,SAEA,MAAAA,IAAA,MAAAA,IACAwB,EAAA,GAAAxB,EAAA,GACAwB,EAAA,GAAAxB,EAAA,IACA,OAAAA,IAAA,OAAAA,IACAwB,EAAA,GAAAxB,EAAA,IAAAe,KAAAI,IAAAnB,EAAA,KACAwB,EAAA,GAAAxB,EAAA,IAAAe,KAAAsB,IAAArC,EAAA,MACA,KAAAA,IAAA,OAAAA,IACAwB,EAAA,GAAAxB,EAAA,EAAAe,KAAAI,IAAAnB,EAAA,KACAwB,EAAA,GAAAxB,EAAA,EAAAe,KAAAsB,IAAArC,EAAA,MACA,IAAAA,EAAAQ,QACAgB,EAAA,GAAAxB,EAAA,GACAwB,EAAA,GAAAxB,EAAA,IAEAkC,GAEA,MAEA,KAAA,SAEAV,EAAA,GACAA,EAAA,GAAA,CAEA,IAAAc,GAAAtC,EAAAuC,MAAA,yCACAC,EAAA,EACAC,EAAA,CAEA,QAAAH,GACAJ,GAGA,KAAA,GAAAjC,GAAA,EAAAA,EAAAqC,EAAA9B,OAAAP,IAAA,CAEA,GAAAyC,GAAAJ,EAAArC,EAEA,OAAAyC,GAAA,OAAAA,GAAA,OAAAA,IAEA,MAAAA,EACAF,IACA,MAAAE,EACAD,IACA,MAAAC,GAAA,MAAAA,GAEAF,EAAAC,IAAA,GACAP,IAGA,MAAAI,EAAArC,EAAA,IAAA0C,MAAAL,EAAArC,EAAA,IAIAuB,EAAA,IAAAoB,YAAAH,EAAA,EAAA,IAAA,IAAA,MAHAjB,EAAA,IAAAoB,YAAAH,EAAA,EAAA,IAAA,IAAAH,EAAArC,EAAA,IACAA,KAIAuC,EAAAC,EAAA,KAIAD,EAAAC,IAAA,GAAAE,MAAAD,KACAR,IAGA,MAAAI,EAAArC,EAAA,IAAA,MAAAqC,EAAArC,EAAA,IACAuB,EAAA,IAAAoB,YAAAH,EAAA,EAAA,IAAA,IAAAC,GACAzC,KAEAuB,EAAA,IAAAoB,YAAAH,EAAA,EAAA,IAAA,IAAAC,GAEAF,EAAAC,EAAA,IAKAD,EAAAC,EAAA,GACAP,GAEA,MAEA,KAAA,SACAV,EAAA,GAAA,EACAA,EAAA,GAAAxB,CACA,MAEA,SACAkC,IAGAS,MAAAnB,EAAA,KAAAmB,MAAAnB,EAAA,IAsBAH,GAAAwB,WAEApB,GAAA,EACAC,GAAA,EAOAoB,KAAA,WAEA,GAAA9B,GAAAM,KAAA,KAEA,OAAA,IAAAD,GACAC,KAAA,GAAAN,EACAM,KAAA,GAAAN,IAQA+B,IAAA,SAAA/C,EAAAa,GAIA,MAFAU,GAAAvB,EAAAa,GAEA,GAAAQ,GACAC,KAAA,GAAAE,EAAA,GACAF,KAAA,GAAAE,EAAA,KAQAwB,IAAA,SAAAhD,EAAAa,GAIA,MAFAU,GAAAvB,EAAAa,GAEA,GAAAQ,GACAC,KAAA,GAAAE,EAAA,GACAF,KAAA,GAAAE,EAAA,KAQAyB,IAAA,SAAAjD,EAAAa,GAKA,MAHAU,GAAAvB,EAAAa,GAGA,IAAAW,EAAA,IAAA,IAAAF,KAAA,GACA,GAAAD,GAAAC,KAAA,GAAAE,EAAA,GAAA,GAGA,GAAAH,GACAC,KAAA,GAAAE,EAAA,GAAAF,KAAA,GAAAE,EAAA,GACAF,KAAA,GAAAE,EAAA,GAAAF,KAAA,GAAAE,EAAA,KAQA0B,IAAA,SAAAlD,EAAAa,GAEAU,EAAAvB,EAAAa,GAEAb,EAAAsB,KAAA,GACAT,EAAAS,KAAA,EAEA,IAEA5B,GAAAkC,EAFAc,EAAAlB,EAAA,GACA2B,EAAA3B,EAAA,EAGA,OAAA,KAAA2B,EACA,IAAAT,EAEA,GAAArB,GACA,IAAArB,EAAAA,EAAA,EAAA,EACA,IAAAa,EAAAA,EAAA,EAAA,GAGA,GAAAQ,GAAArB,EAAA0C,EAAA7B,EAAA6B,GAIA3B,KAAAC,IAAA0B,GAAA3B,KAAAC,IAAAmC,IAEAvB,EAAAc,EAAAS,EACAzD,EAAAgD,EAAAd,EAAAuB,EAEA,GAAA9B,IACArB,EAAA4B,EAAAf,GAAAnB,GACAmB,EAAAe,EAAA5B,GAAAN,KAIAkC,EAAAuB,EAAAT,EACAhD,EAAAyD,EAAAvB,EAAAc,EAEA,GAAArB,IACArB,EAAAa,EAAAe,GAAAlC,GACAmB,EAAAb,EAAA4B,GAAAlC,KASA0D,IAAA,SAAApD,EAAAa,GAOA,GALAU,EAAAvB,EAAAa,GAEAb,EAAAsB,KAAA,GACAT,EAAAS,KAAA,GAEA,IAAAtB,GAAA,IAAAa,EACA,MAAAQ,GAAA,IAIA,IAAA,IAAAG,EAAA,GAAA,CAEA,GAAA,IAAAX,GAAAb,GAAA,EAEA,MAAA,IAAAqB,GAAAN,KAAAqC,IAAApD,EAAAwB,EAAA,IAAA,EAEA,IAAA,IAAAxB,EAEA,QAAAwB,EAAA,GAAA,EAAA,GAAA,GACA,IAAA,GACA,MAAA,IAAAH,GAAAN,KAAAqC,IAAAvC,EAAAW,EAAA,IAAA,EACA,KAAA,GACA,MAAA,IAAAH,GAAA,EAAAN,KAAAqC,IAAAvC,EAAAW,EAAA,IACA,KAAA,GACA,MAAA,IAAAH,KAAAN,KAAAqC,IAAAvC,EAAAW,EAAA,KAAA,EACA,KAAA,GACA,MAAA,IAAAH,GAAA,IAAAN,KAAAqC,IAAAvC,EAAAW,EAAA,OAwBA,GAAA6B,GAAAtC,KAAAK,MAAAP,EAAAb,GACAsD,EAAA1C,EAAAZ,EAAAa,EAIA,OAFAb,GAAAe,KAAAc,IAAAL,EAAA,GAAA8B,EAAA9B,EAAA,GAAA6B,GACAxC,EAAAW,EAAA,GAAA8B,EAAA9B,EAAA,GAAA6B,EACA,GAAAhC,GACArB,EAAAe,KAAAI,IAAAN,GACAb,EAAAe,KAAAsB,IAAAxB,KAQAoB,KAAA,WAEA,GAIAR,GAAAC,EAJA1B,EAAAsB,KAAA,GACAT,EAAAS,KAAA,GACA1B,EAAA0B,KAAA,KAIA,IAAAtB,GAAA,EAAA,CAEA,GAAA,IAAAa,EACA,MAAA,IAAAQ,GAAAN,KAAAkB,KAAAjC,GAAA,EAGAyB,GAAA,GAAAV,KAAAkB,KAAA,GAAArC,EAAAI,QAEAyB,GAAAV,KAAAC,IAAAH,GAAAE,KAAAkB,KAAA,GAAArC,EAAAI,GASA,OALA0B,GADA1B,GAAA,EACA,GAAAe,KAAAkB,KAAA,GAAArC,EAAAI,IAEAe,KAAAC,IAAAH,GAAAE,KAAAkB,KAAA,GAAArC,EAAAI,IAGA,GAAAqB,GAAAI,EAAAZ,EAAA,GAAAa,EAAAA,IAQAG,IAAA,WAEA,GAAA0B,GAAAxC,KAAAc,IAAAP,KAAA,GAKA,OAHA,KAAAA,KAAA,GAGA,GAAAD,GACAkC,EAAAxC,KAAAI,IAAAG,KAAA,IACAiC,EAAAxC,KAAAsB,IAAAf,KAAA,MAQAJ,IAAA,WAEA,GAAAlB,GAAAsB,KAAA,GACAT,EAAAS,KAAA,EAMA,OAAA,IAAAD,GACAT,EAAAZ,EAAAa,GACAE,KAAAK,MAAAP,EAAAb,KAQAgB,IAAA,WAEA,MAAAe,GAAAT,KAAA,GAAAA,KAAA,KAQA+B,IAAA,WAEA,MAAAtC,MAAAK,MAAAE,KAAA,GAAAA,KAAA,KAQAe,IAAA,WAIA,GAAArC,GAAAsB,KAAA,GACAT,EAAAS,KAAA,EAEA,OAAA,IAAAD,GACAN,KAAAsB,IAAArC,GAAA2B,EAAAd,GACAE,KAAAI,IAAAnB,GAAA8B,EAAAjB,KAQAM,IAAA,WAIA,GAAAnB,GAAAsB,KAAA,GACAT,EAAAS,KAAA,EAEA,OAAA,IAAAD,GACAN,KAAAI,IAAAnB,GAAA2B,EAAAd,IACAE,KAAAsB,IAAArC,GAAA8B,EAAAjB,KAQA2C,IAAA,WAIA,GAAAxD,GAAA,EAAAsB,KAAA,GACAT,EAAA,EAAAS,KAAA,GACA6B,EAAApC,KAAAI,IAAAnB,GAAA2B,EAAAd,EAEA,OAAA,IAAAQ,GACAN,KAAAsB,IAAArC,GAAAmD,EACArB,EAAAjB,GAAAsC,IAQAM,IAAA,WAIA,GAAAzD,GAAA,EAAAsB,KAAA,GACAT,EAAA,EAAAS,KAAA,GACA6B,EAAApC,KAAAI,IAAAnB,GAAA2B,EAAAd,EAEA,OAAA,IAAAQ,IACAN,KAAAsB,IAAArC,GAAAmD,EACArB,EAAAjB,GAAAsC,IAQAO,IAAA,WAIA,GAAA1D,GAAAsB,KAAA,GACAT,EAAAS,KAAA,GACA6B,EAAA,GAAAxB,EAAA,EAAAd,GAAA,GAAAE,KAAAI,IAAA,EAAAnB,EAEA,OAAA,IAAAqB,GACAN,KAAAI,IAAAnB,GAAA2B,EAAAd,GAAAsC,EACApC,KAAAsB,IAAArC,GAAA8B,EAAAjB,GAAAsC,IAQAQ,IAAA,WAIA,GAAA3D,GAAAsB,KAAA,GACAT,EAAAS,KAAA,GACA6B,EAAA,GAAAxB,EAAA,EAAAd,GAAA,GAAAE,KAAAI,IAAA,EAAAnB,EAEA,OAAA,IAAAqB,GACAN,KAAAsB,IAAArC,GAAA2B,EAAAd,GAAAsC,GACApC,KAAAI,IAAAnB,GAAA8B,EAAAjB,GAAAsC,IAQAS,KAAA,WAIA,GAAA5D,GAAAsB,KAAA,GACAT,EAAAS,KAAA,GAEAuC,EAAA,GAAAxC,GACAR,EAAAA,EAAAb,EAAAA,EAAA,KACAA,EAAAa,GAAA,OAEAiD,EAAA,GAAAzC,GACAwC,EAAA,GAAAhD,EACAgD,EAAA,GAAA7D,GAAA,KAEA,OAAA,IAAAqB,GAAAyC,EAAA,KAAAA,EAAA,MAQAC,KAAA,WAIA,GAAA/D,GAAAsB,KAAA,GACAT,EAAAS,KAAA,GAEAuC,EAAA,GAAAxC,GACAR,EAAAA,EAAAb,EAAAA,EAAA,KACAA,EAAAa,GAAA,OAEAiD,EAAA,GAAAzC,GACAwC,EAAA,GAAAhD,EACAgD,EAAA,GAAA7D,GAAA,KAEA,OAAA,IAAAqB,GAAAN,KAAAiD,GAAA,EAAAF,EAAA,GAAAA,EAAA,KAQAG,KAAA,WAIA,GAAAjE,GAAAsB,KAAA,GACAT,EAAAS,KAAA,EAEA,IAAA,IAAAtB,EAAA,CAEA,GAAA,IAAAa,EACA,MAAA,IAAAQ,GAAA,EAAA6C,EAAAA,EAGA,IAAArD,OACA,MAAA,IAAAQ,GAAA,KAAA6C,EAAAA,KAIA,GAAAf,GAAAnD,EAAAA,GAAA,EAAAa,IAAA,EAAAA,GAEAgD,EAAA,GAAAxC,IACA,EAAAR,EAAAA,EAAAb,EAAAA,GAAAmD,KACAnD,EAAAmD,GAAAjC,KAEA,OAAA,IAAAG,OAAAwC,EAAA,GAAA,GAAAA,EAAA,KAQAM,KAAA,WAIA,GAAAnE,GAAAsB,KAAA,GACAT,EAAAS,KAAA,EAEA,IAAA,IAAAT,EACA,MAAA,IAAAQ,GAAAN,KAAAK,MAAA,EAAApB,GAAA,EAGA,IAAAmD,GAAAnD,EAAAA,EAAAa,EAAAA,CACA,OAAA,KAAAsC,EACA,GAAA9B,GACArB,EAAAmD,GACAtC,EAAAsC,GAAAc,OACA,GAAA5C,GACA,IAAArB,EAAAA,EAAA,EAAA,EACA,IAAAa,GAAAA,EAAA,EAAA,GAAAoD,QAQAG,KAAA,WAIA,GAAApE,GAAAsB,KAAA,GACAT,EAAAS,KAAA,EAEA,IAAA,IAAAtB,GAAA,IAAAa,EACA,MAAA,IAAAQ,GAAA,EAAA6C,EAAAA,EAGA,IAAAf,GAAAnD,EAAAA,EAAAa,EAAAA,CACA,OAAA,KAAAsC,EACA,GAAA9B,GACArB,EAAAmD,GACAtC,EAAAsC,GAAAY,OACA,GAAA1C,GACA,IAAArB,EAAAA,EAAA,EAAA,EACA,IAAAa,GAAAA,EAAA,EAAA,GAAAkD,QAQAM,KAAA,WAIA,GAAArE,GAAAsB,KAAA,GACAT,EAAAS,KAAA,EAEA,IAAA,IAAAtB,GAAA,IAAAa,EACA,MAAA,IAAAQ,GAAAN,KAAAiD,GAAA,EAAAE,EAAAA,EAGA,IAAAf,GAAAnD,EAAAA,EAAAa,EAAAA,CACA,OAAA,KAAAsC,EACA,GAAA9B,GACArB,EAAAmD,GACAtC,EAAAsC,GAAAS,OACA,GAAAvC,GACA,IAAArB,EAAAA,EAAA,EAAA,EACA,IAAAa,GAAAA,EAAA,EAAA,GAAA+C,QAQA9B,KAAA,WAIA,GAAA9B,GAAAsB,KAAA,GACAT,EAAAS,KAAA,EAEA,OAAA,IAAAD,GACAS,EAAA9B,GAAAe,KAAAI,IAAAN,GACAc,EAAA3B,GAAAe,KAAAsB,IAAAxB,KAQAc,KAAA,WAIA,GAAA3B,GAAAsB,KAAA,GACAT,EAAAS,KAAA,EAEA,OAAA,IAAAD,GACAM,EAAA3B,GAAAe,KAAAI,IAAAN,GACAiB,EAAA9B,GAAAe,KAAAsB,IAAAxB,KAQAyD,KAAA,WAIA,GAAAtE,GAAA,EAAAsB,KAAA,GACAT,EAAA,EAAAS,KAAA,GACA6B,EAAAxB,EAAA3B,GAAAe,KAAAI,IAAAN,EAEA,OAAA,IAAAQ,GACAS,EAAA9B,GAAAmD,EACApC,KAAAsB,IAAAxB,GAAAsC,IAQAoB,KAAA,WAIA,GAAAvE,GAAA,EAAAsB,KAAA,GACAT,EAAA,EAAAS,KAAA,GACA6B,EAAAxB,EAAA3B,GAAAe,KAAAI,IAAAN,EAEA,OAAA,IAAAQ,GACAS,EAAA9B,GAAAmD,GACApC,KAAAsB,IAAAxB,GAAAsC,IAQAqB,KAAA,WAIA,GAAAxE,GAAAsB,KAAA,GACAT,EAAAS,KAAA,GACA6B,EAAApC,KAAAI,IAAA,EAAAN,GAAAc,EAAA,EAAA3B,EAEA,OAAA,IAAAqB,MACAS,EAAA9B,GAAAe,KAAAI,IAAAN,GAAAsC,EACA,EAAAxB,EAAA3B,GAAAe,KAAAsB,IAAAxB,GAAAsC,IAQAsB,KAAA,WAIA,GAAAzE,GAAAsB,KAAA,GACAT,EAAAS,KAAA,GACA6B,EAAApC,KAAAI,IAAA,EAAAN,GAAAc,EAAA,EAAA3B,EAEA,OAAA,IAAAqB,GACA,EAAAM,EAAA3B,GAAAe,KAAAI,IAAAN,GAAAsC,KACArB,EAAA9B,GAAAe,KAAAsB,IAAAxB,GAAAsC,IAQAuB,MAAA,WAIA,GAAAnB,GAAAjC,KAAA,EACAA,MAAA,IAAAA,KAAA,GACAA,KAAA,GAAAiC,CACA,IAAAoB,GAAArD,KAAA,MAQA,OANAA,MAAA,IAAAA,KAAA,GACAA,KAAA,GAAAiC,EACAA,EAAAoB,EAAA,GAEAA,EAAA,IAAAA,EAAA,GACAA,EAAA,GAAApB,EACAoB,GAQAC,MAAA,WAIA,GAAArB,GACAoB,EAAArD,KAAA,MAUA,OATAqD,GAAA,IAAA,GACApB,EAAAoB,EAAA,GACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,GAAApB,IAEAA,EAAAoB,EAAA,GACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,GAAApB,GAEAoB,GAQAE,MAAA,WAIA,GAAA7E,GAAAsB,KAAA,GACAT,EAAAS,KAAA,GAEAwD,EAAA9E,EAAA,GAAA,IAAAa,EACAkE,EAAA,EAAA/E,EACAgF,EAAA,EAAAhF,EACAmD,EAAA4B,EAAAA,EAAAlE,EAAAA,EAEAe,EAAA,IAAAuB,EACA,GAAA9B,IACA2D,EAAAD,EAAAlE,EAAAA,GAAAsC,GACAtC,EAAAkE,EAAAC,EAAAnE,GAAAsC,GACA,GAAA9B,GACArB,OAAAA,EAAA,EAAA,EACA,IAAAa,EAAAA,EAAA,EAAA,GAEAoE,EAAArD,EAAA,EAMA,OALAA,GAAA,GAAAhB,EAAAgB,EAAA,GAAAA,EAAA,IAAA,EACAA,EAAA,GAAAb,KAAAK,MAAAQ,EAAA,GAAAqD,GAAA,EACAH,IACAlD,EAAA,IAAAA,EAAA,IAEAA,GAQAsD,MAAA,WAIA,GAAAlF,GAAAsB,KAAA,GACAT,EAAAS,KAAA,EAEA,IAAA,IAAAtB,GAAA,IAAAa,EAEA,MAAA,IAAAQ,GAAA,EAAAN,KAAAiD,GAAA,EAGA,IAAAb,GAAAnD,EAAAA,EAAAa,EAAAA,CACA,OAAA,KAAAsC,EACA,GAAA9B,GACArB,EAAAmD,GACAtC,EAAAsC,GAAA0B,QACA,GAAAxD,GACA,IAAArB,EAAAA,EAAA,EAAA,EACA,IAAAa,GAAAA,EAAA,EAAA,GAAAgE,SAQAM,MAAA,WAIA,GAAAnF,GAAAsB,KAAA,GACAT,EAAAS,KAAA,EAEA,IAAA,IAAAT,EAEA,MAAA,IAAAQ,GACA,IAAArB,EACAe,KAAAG,IAAAlB,EAAAe,KAAAkB,KAAAjC,EAAAA,EAAA,IACAkE,EAAAA,EAAA,EAGA,IAAAf,GAAAnD,EAAAA,EAAAa,EAAAA,CACA,OAAA,KAAAsC,EACA,GAAA9B,GACArB,EAAAmD,GACAtC,EAAAsC,GAAAuB,QACA,GAAArD,GACA,IAAArB,EAAAA,EAAA,EAAA,EACA,IAAAa,GAAAA,EAAA,EAAA,GAAA6D,SAQAU,MAAA,WAIA,GAAApF,GAAAsB,KAAA,GACAT,EAAAS,KAAA,EAEA,IAAA,IAAAtB,GAAA,IAAAa,EACA,MAAA,IAAAQ,GAAA6C,EAAAA,EAAA,EAGA,IAAAf,GAAAnD,EAAAA,EAAAa,EAAAA,CACA,OAAA,KAAAsC,EACA,GAAA9B,GACArB,EAAAmD,GACAtC,EAAAsC,GAAAyB,QACA,GAAAvD,GACA,IAAArB,EAAAA,EAAA,EAAA,EACA,IAAAa,GAAAA,EAAA,EAAA,GAAA+D,SAQAS,QAAA,WAEA,GAAArF,GAAAsB,KAAA,GACAT,EAAAS,KAAA,GAEA6B,EAAAnD,EAAAA,EAAAa,EAAAA,CAEA,OAAA,IAAAQ,GACA,IAAArB,EAAAA,EAAAmD,EAAA,EACA,IAAAtC,GAAAA,EAAAsC,EAAA,IAQAmC,UAAA,WAEA,MAAA,IAAAjE,GAAAC,KAAA,KAAAA,KAAA,MAQAiE,IAAA,WAEA,MAAA,IAAAlE,KAAAC,KAAA,MAAAA,KAAA,MAQAkE,KAAA,SAAAC,GAIA,MAFAA,GAAA1E,KAAAqC,IAAA,GAAAqC,GAAA,GAEA,GAAApE,GACAN,KAAAyE,KAAAlE,KAAA,GAAAmE,GAAAA,EACA1E,KAAAyE,KAAAlE,KAAA,GAAAmE,GAAAA,IAQAC,MAAA,SAAAD,GAIA,MAFAA,GAAA1E,KAAAqC,IAAA,GAAAqC,GAAA,GAEA,GAAApE,GACAN,KAAA2E,MAAApE,KAAA,GAAAmE,GAAAA,EACA1E,KAAA2E,MAAApE,KAAA,GAAAmE,GAAAA,IAQAE,MAAA,SAAAF,GAIA,MAFAA,GAAA1E,KAAAqC,IAAA,GAAAqC,GAAA,GAEA,GAAApE,GACAN,KAAA4E,MAAArE,KAAA,GAAAmE,GAAAA,EACA1E,KAAA4E,MAAArE,KAAA,GAAAmE,GAAAA,IAQAG,OAAA,SAAA5F,EAAAa,GAIA,MAFAU,GAAAvB,EAAAa,GAEAE,KAAAC,IAAAQ,EAAA,GAAAF,KAAA,KAAAD,EAAA,SACAN,KAAAC,IAAAQ,EAAA,GAAAF,KAAA,KAAAD,EAAA,SAQAwE,MAAA,WAEA,MAAA,IAAAxE,GAAAC,KAAA,GAAAA,KAAA,KAQAwE,SAAA,WAEA,GAAA9F,GAAAsB,KAAA,GACAT,EAAAS,KAAA,GACAyE,EAAA,EAEA,OAAApD,OAAA3C,IAAA2C,MAAA9B,GACA,OAGA,IAAAb,IACA+F,GAAA/F,GAGA,IAAAa,IAEA,IAAAb,EACA+F,GAAAlF,EAAA,EAAA,MAAA,MACAA,EAAA,IACAkF,GAAA,KAGAlF,EAAAE,KAAAC,IAAAH,GAEA,IAAAA,IACAkF,GAAAlF,GAEAkF,GAAA,KAGAA,EAGAA,EAFA,MAUAC,SAAA,WAEA,OAAA1E,KAAA,GAAAA,KAAA,KAQA2E,QAAA,WAEA,MAAA,KAAA3E,KAAA,GACAA,KAAA,GAEA,MAQAqB,MAAA,WACA,MAAAA,OAAArB,KAAA,KAAAqB,MAAArB,KAAA,KAQA4E,SAAA,WACA,MAAAA,UAAA5E,KAAA,KAAA4E,SAAA5E,KAAA,MAIAD,EAAA,KAAA,GAAAA,GAAA,EAAA,GACAA,EAAA,IAAA,GAAAA,GAAA,EAAA,GACAA,EAAA,EAAA,GAAAA,GAAA,EAAA,GACAA,EAAA,GAAA,GAAAA,GAAAN,KAAAiD,GAAA,GACA3C,EAAA,EAAA,GAAAA,GAAAN,KAAAoF,EAAA,GACA9E,EAAA,QAAA,MAEA,kBAAA+E,SAAAA,OAAA,IACAA,UAAA,WACA,MAAA/E,KAEA,gBAAAf,GACAI,EAAA,QAAAW,EAEAV,EAAA,QAAAU,GAGAC,WCGM+E,GAAG,SAAS7G,EAAQkB,EAAOJ,ICtuCjC,SAAAgG,GACA,YAg9EA,SAAAC,GAAApD,GACA,GAAAlD,GAAAuG,EAAAC,EACAC,EAAAvD,EAAA3C,OAAA,EACAmG,EAAA,GACAC,EAAAzD,EAAA,EAEA,IAAAuD,EAAA,EAAA,CAEA,IADAC,GAAAC,EACA3G,EAAA,EAAAA,EAAAyG,EAAAzG,IACAwG,EAAAtD,EAAAlD,GAAA,GACAuG,EAAAK,GAAAJ,EAAAjG,OACAgG,IAAAG,GAAAG,EAAAN,IACAG,GAAAF,CAGAG,GAAAzD,EAAAlD,GACAwG,EAAAG,EAAA,GACAJ,EAAAK,GAAAJ,EAAAjG,OACAgG,IAAAG,GAAAG,EAAAN,QACA,IAAA,IAAAI,EACA,MAAA,GAIA,MAAAA,EAAA,KAAA,GAAAA,GAAA,EAEA,OAAAD,GAAAC,EAIA,QAAAG,GAAA9G,EAAA+G,EAAAC,GACA,GAAAhH,MAAAA,GAAAA,EAAA+G,GAAA/G,EAAAgH,EACA,KAAA9G,OAAA+G,GAAAjH,GAUA,QAAAkH,GAAAhE,EAAAlD,EAAAmH,EAAAC,GACA,GAAAC,GAAAd,EAAA5G,EAAA2H,CAGA,KAAAf,EAAArD,EAAA,GAAAqD,GAAA,GAAAA,GAAA,KAAAvG,CAwCA,SArCAA,EAAA,GACAA,GAAA4G,GACAS,EAAA,IAEAA,EAAAvG,KAAAyE,MAAAvF,EAAA,GAAA4G,IACA5G,GAAA4G,IAMAL,EAAAgB,GAAA,GAAAX,GAAA5G,GACAsH,EAAApE,EAAAmE,GAAAd,EAAA,EAEA,MAAAa,EACApH,EAAA,GACA,GAAAA,EAAAsH,EAAAA,EAAA,IAAA,EACA,GAAAtH,IAAAsH,EAAAA,EAAA,GAAA,GACA3H,EAAAwH,EAAA,GAAA,OAAAG,GAAAH,EAAA,GAAA,OAAAG,GAAA,KAAAA,GAAA,GAAAA,GAEA3H,GAAAwH,EAAA,GAAAG,EAAA,GAAAf,GAAAY,EAAA,GAAAG,EAAA,GAAAf,EAAA,KACArD,EAAAmE,EAAA,GAAAd,EAAA,IAAA,IAAAgB,GAAA,GAAAvH,EAAA,GAAA,IACAsH,GAAAf,EAAA,GAAA,GAAAe,IAAA,IAAApE,EAAAmE,EAAA,GAAAd,EAAA,IAAA,GAGAvG,EAAA,GACA,GAAAA,EAAAsH,EAAAA,EAAA,IAAA,EACA,GAAAtH,EAAAsH,EAAAA,EAAA,IAAA,EACA,GAAAtH,IAAAsH,EAAAA,EAAA,GAAA,GACA3H,GAAAyH,GAAAD,EAAA,IAAA,MAAAG,IAAAF,GAAAD,EAAA,GAAA,MAAAG,GAEA3H,IAAAyH,GAAAD,EAAA,IAAAG,EAAA,GAAAf,IACAa,GAAAD,EAAA,GAAAG,EAAA,GAAAf,EAAA,KACArD,EAAAmE,EAAA,GAAAd,EAAA,IAAA,IAAAgB,GAAA,GAAAvH,EAAA,GAAA,EAIAL,EAOA,QAAA6H,GAAAd,EAAAe,EAAAC,GAOA,IANA,GAAAC,GAEAC,EADAC,GAAA,GAEA7H,EAAA,EACA8H,EAAApB,EAAAnG,OAEAP,EAAA8H,GAAA,CACA,IAAAF,EAAAC,EAAAtH,OAAAqH,KAAAC,EAAAD,IAAAH,CAEA,KADAI,EAAA,IAAAE,GAAAC,QAAAtB,EAAAuB,OAAAjI,MACA2H,EAAA,EAAAA,EAAAE,EAAAtH,OAAAoH,IACAE,EAAAF,GAAAD,EAAA,IACA,SAAAG,EAAAF,EAAA,KAAAE,EAAAF,EAAA,GAAA,GACAE,EAAAF,EAAA,IAAAE,EAAAF,GAAAD,EAAA,EACAG,EAAAF,IAAAD,GAKA,MAAAG,GAAAK,UASA,QAAAC,GAAAC,EAAAzG,GACA,GAAA4E,GAAAxE,EACAsG,EAAA1G,EAAAuB,EAAA3C,MAMA8H,GAAA,IACA9B,EAAAzF,KAAAyE,KAAA8C,EAAA,GACAtG,EAAAjB,KAAAqC,IAAA,GAAAoD,GAAAV,aAEAU,EAAA,GACAxE,EAAA,gCAGAqG,EAAAE,WAAA/B,EAEA5E,EAAA4G,EAAAH,EAAA,EAAAzG,EAAA6G,MAAAzG,GAAA,GAAAqG,GAAA,GAGA,KAAA,GAAApI,GAAAuG,EAAAvG,KAAA,CACA,GAAAyI,GAAA9G,EAAA6G,MAAA7G,EACAA,GAAA8G,EAAAD,MAAAC,GAAAjG,MAAAiG,GAAAD,MAAA,GAAAjG,KAAA,GAKA,MAFA6F,GAAAE,WAAA/B,EAEA5E,EAmRA,QAAA+G,GAAA/G,EAAAgH,EAAAxB,EAAAyB,GACA,GAAAC,GAAA7I,EAAA2H,EAAApB,EAAAe,EAAAwB,EAAAnC,EAAAoC,EAAAC,EACAZ,EAAAzG,EAAAsH,WAGAC,GAAA,GAAA,MAAAP,EAAA,CAIA,GAHAI,EAAApH,EAAAuB,GAGA6F,EAAA,MAAApH,EAWA,KAAAkH,EAAA,EAAAtC,EAAAwC,EAAA,GAAAxC,GAAA,GAAAA,GAAA,GAAAsC,GAIA,IAHA7I,EAAA2I,EAAAE,EAGA7I,EAAA,EACAA,GAAA4G,GACAe,EAAAgB,EACAhC,EAAAoC,EAAAC,EAAA,GAGA1B,EAAAX,EAAAY,GAAA,GAAAsB,EAAAlB,EAAA,GAAA,GAAA,MAIA,IAFAqB,EAAAlI,KAAAyE,MAAAvF,EAAA,GAAA4G,IACAL,EAAAwC,EAAAxI,OACAyI,GAAAzC,EAAA,CACA,IAAAqC,EASA,KAAAM,EANA,MAAA3C,KAAAyC,GAAAD,EAAAI,KAAA,EACAxC,GAAAW,EAAA,EACAuB,EAAA,EACA7I,GAAA4G,GACAe,EAAA3H,EAAA4G,GAAA,MAIA,CAIA,IAHAD,EAAAJ,EAAAwC,EAAAC,GAGAH,EAAA,EAAAtC,GAAA,GAAAA,GAAA,GAAAsC,GAGA7I,IAAA4G,GAIAe,EAAA3H,EAAA4G,GAAAiC,EAGAvB,EAAAK,EAAA,EAAA,EAAAhB,EAAAY,GAAA,GAAAsB,EAAAlB,EAAA,GAAA,GAAA,EAoBA,GAfAiB,EAAAA,GAAAD,EAAA,GACA,SAAAI,EAAAC,EAAA,KAAArB,EAAA,EAAAhB,EAAAA,EAAAY,GAAA,GAAAsB,EAAAlB,EAAA,IAMAmB,EAAA3B,EAAA,GACAG,GAAAsB,KAAA,GAAAzB,GAAAA,IAAAxF,EAAA/B,EAAA,EAAA,EAAA,IACA0H,EAAA,GAAA,GAAAA,IAAA,GAAAH,GAAAyB,GAAA,GAAAzB,IAGAnH,EAAA,EAAA2H,EAAA,EAAAhB,EAAAY,GAAA,GAAAsB,EAAAlB,GAAA,EAAAoB,EAAAC,EAAA,IAAA,GAAA,GACA7B,IAAAxF,EAAA/B,EAAA,EAAA,EAAA,IAEA+I,EAAA,IAAAI,EAAA,GAgBA,MAfAA,GAAAxI,OAAA,EACAuI,GAGAH,GAAAhH,EAAAnC,EAAA,EAGAuJ,EAAA,GAAAxB,GAAA,IAAAX,GAAA+B,EAAA/B,IAAAA,IACAjF,EAAAnC,GAAAmJ,GAAA,GAIAI,EAAA,GAAApH,EAAAnC,EAAA,EAGAmC,CAiBA,IAbA,GAAA3B,GACA+I,EAAAxI,OAAAyI,EACAzC,EAAA,EACAyC,MAEAD,EAAAxI,OAAAyI,EAAA,EACAzC,EAAAgB,GAAA,GAAAX,GAAA5G,GAIA+I,EAAAC,GAAArB,EAAA,GAAAhB,EAAAY,GAAA,GAAAsB,EAAAlB,GAAAJ,GAAA,GAAAI,GAAA,GAAApB,EAAA,GAGAuC,EACA,OAAA,CAGA,GAAA,GAAAE,EAAA,CAGA,IAAAhJ,EAAA,EAAA2H,EAAAoB,EAAA,GAAApB,GAAA,GAAAA,GAAA,GAAA3H,GAEA,KADA2H,EAAAoB,EAAA,IAAAxC,EACAA,EAAA,EAAAoB,GAAA,GAAAA,GAAA,GAAApB,GAGAvG,IAAAuG,IACA5E,EAAAnC,IACAuJ,EAAA,IAAAK,KAAAL,EAAA,GAAA,GAGA,OAGA,GADAA,EAAAC,IAAAzC,EACAwC,EAAAC,IAAAI,GAAA,KACAL,GAAAC,KAAA,EACAzC,EAAA,EAMA,IAAAvG,EAAA+I,EAAAxI,OAAA,IAAAwI,IAAA/I,IAAA+I,EAAAM,MAsBA,MAnBAC,MAGA3H,EAAAnC,EAAA4I,EAAAmB,MAGA5H,EAAAuB,EAAA,KACAvB,EAAAnC,EAAAgK,KAGA7H,EAAAnC,EAAA4I,EAAAqB,OAGA9H,EAAAnC,EAAA,EACAmC,EAAAuB,GAAA,KAKAvB,EAIA,QAAA+H,GAAA/H,EAAAgI,EAAAhB,GACA,IAAAhH,EAAAsE,WAAA,MAAA2D,GAAAjI,EACA,IAAA4E,GACA/G,EAAAmC,EAAAnC,EACAkH,EAAAJ,EAAA3E,EAAAuB,GACAmF,EAAA3B,EAAAnG,MAwBA,OAtBAoJ,IACAhB,IAAApC,EAAAoC,EAAAN,GAAA,EACA3B,EAAAA,EAAAuB,OAAA,GAAA,IAAAvB,EAAAmD,MAAA,GAAAhD,EAAAN,GACA8B,EAAA,IACA3B,EAAAA,EAAAuB,OAAA,GAAA,IAAAvB,EAAAmD,MAAA,IAGAnD,EAAAA,GAAA/E,EAAAnC,EAAA,EAAA,IAAA,MAAAmC,EAAAnC,GACAA,EAAA,GACAkH,EAAA,KAAAG,GAAArH,EAAA,GAAAkH,EACAiC,IAAApC,EAAAoC,EAAAN,GAAA,IAAA3B,GAAAG,EAAAN,KACA/G,GAAA6I,GACA3B,GAAAG,EAAArH,EAAA,EAAA6I,GACAM,IAAApC,EAAAoC,EAAAnJ,EAAA,GAAA,IAAAkH,EAAAA,EAAA,IAAAG,EAAAN,OAEAA,EAAA/G,EAAA,GAAA6I,IAAA3B,EAAAA,EAAAmD,MAAA,EAAAtD,GAAA,IAAAG,EAAAmD,MAAAtD,IACAoC,IAAApC,EAAAoC,EAAAN,GAAA,IACA7I,EAAA,IAAA6I,IAAA3B,GAAA,KACAA,GAAAG,EAAAN,KAIAG,EAKA,QAAAoD,GAAAjB,EAAArJ,GACA,GAAAmH,GAAAkC,EAAA,EAGA,KAAArJ,GAAAoH,GAAAD,GAAA,GAAAA,GAAA,GAAAnH,GACA,OAAAA,GAIA,QAAAuK,GAAA3B,EAAAO,EAAAqB,GACA,GAAArB,EAAAsB,GAKA,KAFAX,KAAA,EACAU,IAAA5B,EAAAE,UAAA0B,GACA9J,MAAAgK,GAEA,OAAAxB,GAAA,GAAAN,GAAA+B,IAAAxB,EAAA,GAAA,GAIA,QAAAyB,GAAAhC,EAAAO,EAAAxB,GACA,GAAAwB,EAAA0B,GAAA,KAAAnK,OAAAgK,GACA,OAAAxB,GAAA,GAAAN,GAAArE,IAAA4E,EAAAxB,GAAA,GAIA,QAAAmD,GAAAzB,GACA,GAAAlC,GAAAkC,EAAAtI,OAAA,EACA8H,EAAA1B,EAAAC,GAAA,CAKA,IAHAD,EAAAkC,EAAAlC,GAGA,CAGA,KAAAA,EAAA,IAAA,EAAAA,GAAA,GAAA0B,GAGA,KAAA1B,EAAAkC,EAAA,GAAAlC,GAAA,GAAAA,GAAA,GAAA0B,IAGA,MAAAA,GAIA,QAAAxB,GAAAN,GAEA,IADA,GAAAgE,GAAA,GACAhE,KAAAgE,GAAA,GACA,OAAAA,GAWA,QAAAC,GAAApC,EAAAzG,EAAAjC,EAAAsK,GACA,GAAApB,GACAjJ,EAAA,GAAAyI,GAAA,GAIA7B,EAAAzF,KAAAyE,KAAAyE,EAAApD,GAAA,EAIA,KAFA0C,IAAA,IAEA,CAOA,GANA5J,EAAA,IACAC,EAAAA,EAAA6I,MAAA7G,GACA8I,EAAA9K,EAAAuD,EAAAqD,KAAAqC,GAAA,IAGAlJ,EAAAgL,GAAAhL,EAAA,GACA,IAAAA,EAAA,CAGAA,EAAAC,EAAAuD,EAAA3C,OAAA,EACAqI,GAAA,IAAAjJ,EAAAuD,EAAAxD,MAAAC,EAAAuD,EAAAxD,EACA,OAGAiC,EAAAA,EAAA6G,MAAA7G,GACA8I,EAAA9I,EAAAuB,EAAAqD,GAKA,MAFA+C,KAAA,EAEA3J,EAIA,QAAAgL,GAAAjL,GACA,MAAA,GAAAA,EAAAwD,EAAAxD,EAAAwD,EAAA3C,OAAA,GAOA,QAAAqK,GAAAxC,EAAAyC,EAAAC,GAKA,IAJA,GAAA/I,GACAJ,EAAA,GAAAyG,GAAAyC,EAAA,IACA7K,EAAA,IAEAA,EAAA6K,EAAAtK,QAAA,CAEA,GADAwB,EAAA,GAAAqG,GAAAyC,EAAA7K,KACA+B,EAAAnC,EAAA,CACA+B,EAAAI,CACA,OACAJ,EAAAmJ,GAAA/I,KACAJ,EAAAI,GAIA,MAAAJ,GAmCA,QAAAoJ,GAAApJ,EAAAgH,GACA,GAAAqC,GAAAC,EAAAtD,EAAAxE,EAAA+H,EAAAzL,EAAA0L,EACAC,EAAA,EACApL,EAAA,EACAuG,EAAA,EACA6B,EAAAzG,EAAAsH,YACA9B,EAAAiB,EAAAiD,SACArB,EAAA5B,EAAAE,SAGA,KAAA3G,EAAAuB,IAAAvB,EAAAuB,EAAA,IAAAvB,EAAAnC,EAAA,GAEA,MAAA,IAAA4I,GAAAzG,EAAAuB,EACAvB,EAAAuB,EAAA,GAAAvB,EAAA/B,EAAA,EAAA,EAAA,EAAA,EAAA,EACA+B,EAAA/B,EAAA+B,EAAA/B,EAAA,EAAA,EAAA+B,EAAA,IAaA,KAVA,MAAAgH,GACAW,IAAA,EACA6B,EAAAnB,GAEAmB,EAAAxC,EAGAlJ,EAAA,GAAA2I,GAAA,QAGAzG,EAAAnC,MAGAmC,EAAAA,EAAA6G,MAAA/I,GACA8G,GAAA,CAUA,KALA0E,EAAAnK,KAAAG,IAAAsG,GAAA,EAAAhB,IAAAzF,KAAAqJ,KAAA,EAAA,EAAA,EACAgB,GAAAF,EACAD,EAAA7H,EAAA+H,EAAA,GAAA9C,GAAA,GACAA,EAAAE,UAAA6C,IAEA,CAKA,GAJAhI,EAAAuF,EAAAvF,EAAAqF,MAAA7G,GAAAwJ,EAAA,GACAH,EAAAA,EAAAxC,QAAAxI,GACAP,EAAAyL,EAAA3I,KAAA+I,GAAAnI,EAAA6H,EAAAG,EAAA,IAEA7E,EAAA7G,EAAAyD,GAAA2G,MAAA,EAAAsB,KAAA7E,EAAA4E,EAAAhI,GAAA2G,MAAA,EAAAsB,GAAA,CAEA,IADAxD,EAAApB,EACAoB,KAAAuD,EAAAxC,EAAAwC,EAAA1C,MAAA0C,GAAAC,EAAA,EAOA,IAAA,MAAAxC,EAYA,MADAP,GAAAE,UAAA0B,EACAkB,CAVA,MAAAE,EAAA,GAAAlE,EAAAgE,EAAAhI,EAAAiI,EAAAF,EAAA9D,EAAAiE,IAMA,MAAA1C,GAAAwC,EAAA9C,EAAAE,UAAA0B,EAAA7C,EAAAmC,IAAA,EALAlB,GAAAE,UAAA6C,GAAA,GACAH,EAAA7H,EAAA1D,EAAA,GAAA2I,GAAA,GACApI,EAAA,EACAoL,IAUAF,EAAAzL,GAoBA,QAAA8L,GAAAxJ,EAAA4G,GACA,GAAAlG,GAAA+I,EAAAR,EAAAxL,EAAAiM,EAAAL,EAAAF,EAAAzL,EAAA0L,EAAAO,EAAAC,EACAjM,EAAA,EACAuL,EAAA,GACAtJ,EAAAI,EACAgH,EAAApH,EAAAuB,EACAkF,EAAAzG,EAAAsH,YACA9B,EAAAiB,EAAAiD,SACArB,EAAA5B,EAAAE,SAGA,IAAA3G,EAAA/B,EAAA,IAAAmJ,IAAAA,EAAA,KAAApH,EAAAnC,GAAA,GAAAuJ,EAAA,IAAA,GAAAA,EAAAxI,OACA,MAAA,IAAA6H,GAAAW,IAAAA,EAAA,MAAA,EAAA,GAAApH,EAAA/B,EAAA4J,IAAAT,EAAA,EAAApH,EAcA,IAXA,MAAAgH,GACAW,IAAA,EACA6B,EAAAnB,GAEAmB,EAAAxC,EAGAP,EAAAE,UAAA6C,GAAAF,EACAxI,EAAA6D,EAAAyC,GACAyC,EAAA/I,EAAAwF,OAAA,KAEAnH,KAAAC,IAAAvB,EAAAmC,EAAAnC,GAAA,OAqCA,MAJAC,GAAAsK,EAAA3B,EAAA+C,EAAA,EAAAnB,GAAAxB,MAAAhJ,EAAA,IACAmC,EAAA4J,EAAA,GAAAnD,GAAAoD,EAAA,IAAA/I,EAAAoH,MAAA,IAAAsB,EAAAF,GAAA1I,KAAA9C,GACA2I,EAAAE,UAAA0B,EAEA,MAAArB,EAAAD,EAAA/G,EAAAqI,EAAA7C,EAAAmC,IAAA,GAAA3H,CAxBA,MAAA6J,EAAA,GAAA,GAAAA,GAAA,GAAAA,GAAA/I,EAAAwF,OAAA,GAAA,GACAtG,EAAAA,EAAA6G,MAAAzG,GACAU,EAAA6D,EAAA3E,EAAAuB,GACAsI,EAAA/I,EAAAwF,OAAA,GACAvI,GAiCA,KA9BAF,EAAAmC,EAAAnC,EAEAgM,EAAA,GACA7J,EAAA,GAAAyG,GAAA,KAAA3F,GACAjD,KAEAmC,EAAA,GAAAyG,GAAAoD,EAAA,IAAA/I,EAAAoH,MAAA,IAeA6B,EAAA/J,EAKAuJ,EAAAO,EAAA9J,EAAA2J,GAAA3J,EAAAa,MAAA,GAAAb,EAAAY,KAAA,GAAA4I,EAAA,GACAQ,EAAAjD,EAAA/G,EAAA6G,MAAA7G,GAAAwJ,EAAA,GACAH,EAAA,IAEA,CAIA,GAHAS,EAAA/C,EAAA+C,EAAAjD,MAAAmD,GAAAR,EAAA,GACA1L,EAAAyL,EAAA3I,KAAA+I,GAAAG,EAAA,GAAArD,GAAA4C,GAAAG,EAAA,IAEA7E,EAAA7G,EAAAyD,GAAA2G,MAAA,EAAAsB,KAAA7E,EAAA4E,EAAAhI,GAAA2G,MAAA,EAAAsB,GAAA,CAcA,GAbAD,EAAAA,EAAA1C,MAAA,GAIA,IAAAhJ,IAAA0L,EAAAA,EAAA3I,KAAAwH,EAAA3B,EAAA+C,EAAA,EAAAnB,GAAAxB,MAAAhJ,EAAA,MACA0L,EAAAI,GAAAJ,EAAA,GAAA9C,GAAA1I,GAAAyL,EAAA,GAQA,MAAAxC,EAWA,MADAP,GAAAE,UAAA0B,EACAkB,CAVA,KAAAhE,EAAAgE,EAAAhI,EAAAiI,EAAAF,EAAA9D,EAAAiE,GAMA,MAAA1C,GAAAwC,EAAA9C,EAAAE,UAAA0B,EAAA7C,EAAAmC,IAAA,EALAlB,GAAAE,UAAA6C,GAAAF,EACAxL,EAAAgM,EAAA9J,EAAA2J,GAAAI,EAAAlJ,MAAA,GAAAkJ,EAAAnJ,KAAA,GAAA4I,EAAA,GACAQ,EAAAjD,EAAA/G,EAAA6G,MAAA7G,GAAAwJ,EAAA,GACAH,EAAAI,EAAA,EAUAF,EAAAzL,EACAuL,GAAA,GAMA,QAAApB,GAAAjI,GAEA,MAAAiK,QAAAjK,EAAA/B,EAAA+B,EAAA/B,EAAA,GAOA,QAAAiM,GAAAlK,EAAA+E,GACA,GAAAlH,GAAAQ,EAAAqI,CAmBA,MAhBA7I,EAAAkH,EAAAsB,QAAA,WAAAtB,EAAAA,EAAAoF,QAAA,IAAA,MAGA9L,EAAA0G,EAAAqF,OAAA,OAAA,GAGAvM,EAAA,IAAAA,EAAAQ,GACAR,IAAAkH,EAAAmD,MAAA7J,EAAA,GACA0G,EAAAA,EAAAsF,UAAA,EAAAhM,IACAR,EAAA,IAGAA,EAAAkH,EAAAnG,QAIAP,EAAA,EAAA,KAAA0G,EAAAuF,WAAAjM,GAAAA,KAGA,IAAAqI,EAAA3B,EAAAnG,OAAA,KAAAmG,EAAAuF,WAAA5D,EAAA,KAAAA,GAGA,GAFA3B,EAAAA,EAAAmD,MAAA7J,EAAAqI,GAEA,CAYA,GAXAA,GAAArI,EACA2B,EAAAnC,EAAAA,EAAAA,EAAAQ,EAAA,EACA2B,EAAAuB,KAMAlD,GAAAR,EAAA,GAAAoH,GACApH,EAAA,IAAAQ,GAAA4G,IAEA5G,EAAAqI,EAAA,CAEA,IADArI,GAAA2B,EAAAuB,EAAAiG,MAAAzC,EAAAmD,MAAA,EAAA7J,IACAqI,GAAAzB,GAAA5G,EAAAqI,GAAA1G,EAAAuB,EAAAiG,MAAAzC,EAAAmD,MAAA7J,EAAAA,GAAA4G,IACAF,GAAAA,EAAAmD,MAAA7J,GACAA,EAAA4G,GAAAF,EAAAnG,WAEAP,IAAAqI,CAGA,MAAArI,KAAA0G,GAAA,GACA/E,GAAAuB,EAAAiG,MAAAzC,GAEA4C,KAGA3H,EAAAnC,EAAAmC,EAAAsH,YAAAM,MAGA5H,EAAAuB,EAAA,KACAvB,EAAAnC,EAAAgK,KAGA7H,EAAAnC,EAAAmC,EAAAsH,YAAAQ,OAGA9H,EAAAnC,EAAA,EACAmC,EAAAuB,GAAA,SAOAvB,GAAAnC,EAAA,EACAmC,EAAAuB,GAAA,EAGA,OAAAvB,GAOA,QAAAuK,GAAAvK,EAAA+E,GACA,GAAAyF,GAAA/D,EAAAgE,EAAApM,EAAAqM,EAAAhE,EAAAiE,EAAAvD,EAAAwD,CAEA,IAAA,aAAA7F,GAAA,QAAAA,EAIA,OAHAA,IAAA/E,EAAA/B,EAAA4J,KACA7H,EAAAnC,EAAAgK,IACA7H,EAAAuB,EAAA,KACAvB,CAGA,IAAA6K,GAAAC,KAAA/F,GACAyF,EAAA,GACAzF,EAAAA,EAAAgG,kBACA,IAAAC,GAAAF,KAAA/F,GACAyF,EAAA,MACA,CAAA,IAAAS,GAAAH,KAAA/F,GAGA,KAAAxG,OAAA+G,GAAAP,EAFAyF,GAAA,EAkCA,IA5BAnM,EAAA0G,EAAAqF,OAAA,MAEA/L,EAAA,GACAsM,GAAA5F,EAAAmD,MAAA7J,EAAA,GACA0G,EAAAA,EAAAsF,UAAA,EAAAhM,IAEA0G,EAAAA,EAAAmD,MAAA,GAKA7J,EAAA0G,EAAAsB,QAAA,KACAqE,EAAArM,GAAA,EACAoI,EAAAzG,EAAAsH,YAEAoD,IACA3F,EAAAA,EAAAoF,QAAA,IAAA,IACAzD,EAAA3B,EAAAnG,OACAP,EAAAqI,EAAArI,EAGAoM,EAAA5B,EAAApC,EAAA,GAAAA,GAAA+D,GAAAnM,EAAA,EAAAA,IAGA+I,EAAAvB,EAAAd,EAAAyF,EAAA/C,IACAmD,EAAAxD,EAAAxI,OAAA,EAGAP,EAAAuM,EAAA,IAAAxD,EAAA/I,KAAAA,EAAA+I,EAAAM,KACA,OAAArJ,GAAA,EAAA,GAAAoI,GAAA,EAAAzG,EAAA/B,IACA+B,EAAAnC,EAAAsK,EAAAf,EAAAwD,GACA5K,EAAAuB,EAAA6F,EACAO,IAAA,EAQA+C,IAAA1K,EAAA2J,GAAA3J,EAAAyK,EAAA,EAAA/D,IAGAiE,IAAA3K,EAAAA,EAAA6G,MAAA1H,KAAAC,IAAAuL,GAAA,GAAAxL,KAAAqC,IAAA,EAAAmJ,GAAAO,GAAA1J,IAAA,EAAAmJ,KACAhD,IAAA,EAEA3H,GASA,QAAAmL,GAAA1E,EAAAzG,GACA,GAAA4E,GACA8B,EAAA1G,EAAAuB,EAAA3C,MAEA,IAAA8H,EAAA,EAAA,MAAAE,GAAAH,EAAA,EAAAzG,EAAAA,EAOA4E,GAAA,IAAAzF,KAAAkB,KAAAqG,GACA9B,EAAAA,EAAA,GAAA,GAAA,EAAAA,EAGA5E,EAAAA,EAAA6G,MAAA1H,KAAAqC,IAAA,GAAAoD,IACA5E,EAAA4G,EAAAH,EAAA,EAAAzG,EAAAA,EAOA,KAJA,GAAAoL,GACAC,EAAA,GAAA5E,GAAA,GACA6E,EAAA,GAAA7E,GAAA,IACA8E,EAAA,GAAA9E,GAAA,IACA7B,KACAwG,EAAApL,EAAA6G,MAAA7G,GACAA,EAAAA,EAAA6G,MAAAwE,EAAAzK,KAAAwK,EAAAvE,MAAAyE,EAAAzE,MAAAuE,GAAAvK,MAAA0K,KAGA,OAAAvL,GAKA,QAAA4G,GAAAH,EAAA1I,EAAAiC,EAAAI,EAAAoL,GACA,GAAAxF,GAAAlI,EAAAK,EAAA6L,EACA3L,EAAA,EACAgK,EAAA5B,EAAAE,UACA/B,EAAAzF,KAAAyE,KAAAyE,EAAApD,GAMA,KAJA0C,IAAA,EACAqC,EAAAhK,EAAA6G,MAAA7G,GACA7B,EAAA,GAAAsI,GAAArG,KAEA,CAMA,GALAtC,EAAA6L,GAAAxL,EAAA0I,MAAAmD,GAAA,GAAAvD,GAAA1I,IAAAA,KAAAsK,EAAA,GACAlK,EAAAqN,EAAApL,EAAAQ,KAAA9C,GAAAsC,EAAAS,MAAA/C,GACAsC,EAAAuJ,GAAA7L,EAAA+I,MAAAmD,GAAA,GAAAvD,GAAA1I,IAAAA,KAAAsK,EAAA,GACAvK,EAAAK,EAAAyC,KAAAR,GAEA,SAAAtC,EAAAyD,EAAAqD,GAAA,CACA,IAAAoB,EAAApB,EAAA9G,EAAAyD,EAAAyE,KAAA7H,EAAAoD,EAAAyE,IAAAA,MACA,GAAAA,MAAA,MAGAA,EAAA7H,EACAA,EAAAiC,EACAA,EAAAtC,EACAA,EAAAkI,EACA3H,IAMA,MAHAsJ,KAAA,EACA7J,EAAAyD,EAAA3C,OAAAgG,EAAA,EAEA9G,EAKA,QAAA2N,GAAAhF,EAAAzG,GACA,GAAAlC,GACA4N,EAAA1L,EAAA/B,EAAA,EACA0N,EAAAlD,EAAAhC,EAAAA,EAAAE,UAAA,GACAiF,EAAAD,EAAA9E,MAAA,GAIA,IAFA7G,EAAAA,EAAAZ,MAEAY,EAAA6L,IAAAD,GAEA,MADAE,IAAAJ,EAAA,EAAA,EACA1L,CAKA,IAFAlC,EAAAkC,EAAA+L,SAAAJ,GAEA7N,EAAAkO,SACAF,GAAAJ,EAAA,EAAA,MACA,CAIA,GAHA1L,EAAAA,EAAAa,MAAA/C,EAAA+I,MAAA8E,IAGA3L,EAAA6L,IAAAD,GAEA,MADAE,IAAA9C,EAAAlL,GAAA4N,EAAA,EAAA,EAAAA,EAAA,EAAA,EACA1L,CAGA8L,IAAA9C,EAAAlL,GAAA4N,EAAA,EAAA,EAAAA,EAAA,EAAA,EAGA,MAAA1L,GAAAa,MAAA8K,GAAAvM,MASA,QAAA6M,GAAAjM,EAAA+F,EAAAiB,EAAAxB,GACA,GAAAgF,GAAA3M,EAAAQ,EAAAuG,EAAA8B,EAAAS,EAAApC,EAAAqC,EAAAhH,EACAqG,EAAAzG,EAAAsH,YACAU,EAAA,SAAAhB,CAWA,IATAgB,GACA7C,EAAA6B,EAAA,EAAAkF,IACA,SAAA1G,EAAAA,EAAAiB,EAAAiD,SACAvE,EAAAK,EAAA,EAAA,KAEAwB,EAAAP,EAAAE,UACAnB,EAAAiB,EAAAiD,UAGA1J,EAAAsE,WAEA,CAoCA,IAnCAS,EAAAgD,EAAA/H,GACA3B,EAAA0G,EAAAsB,QAAA,KAOA2B,GACAwC,EAAA,EACA,IAAAzE,EACAiB,EAAA,EAAAA,EAAA,EACA,GAAAjB,IACAiB,EAAA,EAAAA,EAAA,IAGAwD,EAAAzE,EAOA1H,GAAA,IACA0G,EAAAA,EAAAoF,QAAA,IAAA,IACA/J,EAAA,GAAAqG,GAAA,GACArG,EAAAvC,EAAAkH,EAAAnG,OAAAP,EACA+B,EAAAmB,EAAAsE,EAAAkC,EAAA3H,GAAA,GAAAoK,GACApK,EAAAvC,EAAAuC,EAAAmB,EAAA3C,QAGAwI,EAAAvB,EAAAd,EAAA,GAAAyF,GACA3M,EAAA6I,EAAAU,EAAAxI,OAGA,GAAAwI,IAAAV,IAAAU,EAAAM,KAEA,IAAAN,EAAA,GAEA,CAyBA,GAxBA/I,EAAA,EACAR,KAEAmC,EAAA,GAAAyG,GAAAzG,GACAA,EAAAuB,EAAA6F,EACApH,EAAAnC,EAAAA,EACAmC,EAAA2J,GAAA3J,EAAAI,EAAA4G,EAAAxB,EAAA,EAAAgF,GACApD,EAAApH,EAAAuB,EACA1D,EAAAmC,EAAAnC,EACAsJ,EAAAgF,IAIA9N,EAAA+I,EAAAJ,GACApC,EAAA4F,EAAA,EACArD,EAAAA,GAAA,SAAAC,EAAAJ,EAAA,GAEAG,EAAA3B,EAAA,GACA,SAAAnH,GAAA8I,KAAA,IAAA3B,GAAAA,KAAAxF,EAAA/B,EAAA,EAAA,EAAA,IACAI,EAAAuG,GAAAvG,IAAAuG,IAAA,IAAAY,GAAA2B,GAAA,IAAA3B,GAAA,EAAA4B,EAAAJ,EAAA,IACAxB,KAAAxF,EAAA/B,EAAA,EAAA,EAAA,IAEAmJ,EAAAxI,OAAAoI,EAEAG,EAGA,OAAAC,IAAAJ,GAAAwD,EAAA,GACApD,EAAAJ,GAAA,EACAA,MACAnJ,EACAuJ,EAAAgF,QAAA,GAMA,KAAA1F,EAAAU,EAAAxI,QAAAwI,EAAAV,EAAA,KAAAA,GAGA,IAAArI,EAAA,EAAA0G,EAAA,GAAA1G,EAAAqI,EAAArI,IAAA0G,GAAAqB,GAAAE,OAAAc,EAAA/I,GAGA,IAAA2J,EAAA,CACA,GAAAtB,EAAA,EACA,GAAA,IAAAX,GAAA,GAAAA,EAAA,CAEA,IADA1H,EAAA,IAAA0H,EAAA,EAAA,IACAW,EAAAA,EAAArI,EAAAqI,IAAA3B,GAAA,GAEA,KADAqC,EAAAvB,EAAAd,EAAAyF,EAAAzE,GACAW,EAAAU,EAAAxI,QAAAwI,EAAAV,EAAA,KAAAA,GAGA,IAAArI,EAAA,EAAA0G,EAAA,KAAA1G,EAAAqI,EAAArI,IAAA0G,GAAAqB,GAAAE,OAAAc,EAAA/I,QAEA0G,GAAAA,EAAAuB,OAAA,GAAA,IAAAvB,EAAAmD,MAAA,EAIAnD,GAAAA,GAAAlH,EAAA,EAAA,IAAA,MAAAA,MACA,IAAAA,EAAA,EAAA,CACA,OAAAA,GAAAkH,EAAA,IAAAA,CACAA,GAAA,KAAAA,MAEA,MAAAlH,EAAA6I,EAAA,IAAA7I,GAAA6I,EAAA7I,KAAAkH,GAAA,QACAlH,GAAA6I,IAAA3B,EAAAA,EAAAmD,MAAA,EAAArK,GAAA,IAAAkH,EAAAmD,MAAArK,QAlEAkH,GAAAiD,EAAA,OAAA,GAsEAjD,IAAA,IAAAgB,EAAA,KAAA,GAAAA,EAAA,KAAA,GAAAA,EAAA,KAAA,IAAAhB,MA9GAA,GAAAkD,EAAAjI,EAiHA,OAAAA,GAAA/B,EAAA,EAAA,IAAA8G,EAAAA,EAKA,QAAA+D,GAAA5C,EAAAQ,GACA,GAAAR,EAAAtH,OAAA8H,EAEA,MADAR,GAAAtH,OAAA8H,GACA,EAyDA,QAAAtH,GAAAY,GACA,MAAA,IAAAN,MAAAM,GAAAZ,MAUA,QAAA+C,GAAAnC,GACA,MAAA,IAAAN,MAAAM,GAAAmC,OAWA,QAAAa,GAAAhD,GACA,MAAA,IAAAN,MAAAM,GAAAgD,QAYA,QAAA7B,GAAAnB,EAAAI,GACA,MAAA,IAAAV,MAAAM,GAAAY,KAAAR,GAWA,QAAA4B,GAAAhC,GACA,MAAA,IAAAN,MAAAM,GAAAgC,OAWA,QAAAc,GAAA9C,GACA,MAAA,IAAAN,MAAAM,GAAA8C,QAWA,QAAAT,GAAArC,GACA,MAAA,IAAAN,MAAAM,GAAAqC,OAWA,QAAAY,GAAAjD,GACA,MAAA,IAAAN,MAAAM,GAAAiD,QA6BA,QAAAzD,GAAAY,EAAAJ,GACAI,EAAA,GAAAV,MAAAU,GACAJ,EAAA,GAAAN,MAAAM,EACA,IAAAhC,GACAqK,EAAA3I,KAAAiH,UACAnB,EAAA9F,KAAAgK,SACAF,EAAAnB,EAAA,CAkCA,OA/BAjI,GAAAnC,GAAA+B,EAAA/B,EAIAmC,EAAAmB,GAAAvB,EAAAuB,GAKAvB,EAAAuB,GAAAnB,EAAA4L,UACAhO,EAAAgC,EAAA/B,EAAA,EAAAwK,EAAA/I,KAAA2I,EAAA7C,GAAA,GAAA9F,MAAA,GACA1B,EAAAC,EAAAmC,EAAAnC,IAGAmC,EAAAmB,GAAAvB,EAAAgM,UACAhO,EAAAyK,EAAA/I,KAAA8J,EAAA,GAAA3C,MAAA,IACA7I,EAAAC,EAAAmC,EAAAnC,GAGA+B,EAAA/B,EAAA,GACAyB,KAAAiH,UAAA6C,EACA9J,KAAAgK,SAAA,EACA1L,EAAA0B,KAAA2C,KAAAsH,GAAAvJ,EAAAJ,EAAAwJ,EAAA,IACAxJ,EAAAyI,EAAA/I,KAAA8J,EAAA,GACA9J,KAAAiH,UAAA0B,EACA3I,KAAAgK,SAAAlE,EACAxH,EAAAoC,EAAAnC,EAAA,EAAAD,EAAA6C,MAAAb,GAAAhC,EAAA4C,KAAAZ,IAEAhC,EAAA0B,KAAA2C,KAAAsH,GAAAvJ,EAAAJ,EAAAwJ,EAAA,KAvBAxL,EAAAyK,EAAA/I,KAAA8J,EAAA,GAAA3C,MAAA7G,EAAA/B,EAAA,EAAA,IAAA,KACAD,EAAAC,EAAAmC,EAAAnC,GALAD,EAAA,GAAA0B,MAAAmI,KA8BA7J,EAWA,QAAAqO,GAAArM,GACA,MAAA,IAAAN,MAAAM,GAAAqM,OAUA,QAAAzI,GAAA5D,GACA,MAAA+G,GAAA/G,EAAA,GAAAN,MAAAM,GAAAA,EAAAnC,EAAA,EAAA,GAqBA,QAAAyO,GAAAC,GACA,IAAAA,GAAA,gBAAAA,GAAA,KAAAhO,OAAAiO,GAAA,kBACA,IAAAnO,GAAAsM,EAAA8B,EACAC,GACA,YAAA,EAAAR,GACA,WAAA,EAAA,EACA,YAAAS,GAAA,EACA,WAAA,EAAAA,GACA,OAAA,EAAAA,GACA,QAAAA,GAAA,EACA,SAAA,EAAA,EAGA,KAAAtO,EAAA,EAAAA,EAAAqO,EAAA9N,OAAAP,GAAA,EACA,GAAA,UAAAoO,EAAAF,EAAA5B,EAAA+B,EAAArO,KAAA,CACA,KAAA0K,GAAA0D,KAAAA,GAAAA,GAAAC,EAAArO,EAAA,IAAAoO,GAAAC,EAAArO,EAAA,IACA,KAAAE,OAAA+G,GAAAqF,EAAA,KAAA8B,EADA/M,MAAAiL,GAAA8B,EAKA,GAAA,UAAAA,EAAAF,EAAA5B,EAAA,WAAA,CACA,GAAA8B,KAAA,GAAAA,KAAA,GAAA,IAAAA,GAAA,IAAAA,EAYA,KAAAlO,OAAA+G,GAAAqF,EAAA,KAAA8B,EAXA,IAAAA,EAAA,CACA,GAAA,mBAAAG,UAAAA,SACAA,OAAAC,kBAAAD,OAAAE,YAGA,KAAAvO,OAAAwO,GAFArN,MAAAiL,IAAA,MAKAjL,MAAAiL,IAAA,EAOA,MAAAjL,MAWA,QAAAH,GAAAS,GACA,MAAA,IAAAN,MAAAM,GAAAT,MAWA,QAAAQ,GAAAC,GACA,MAAA,IAAAN,MAAAM,GAAAD,OASA,QAAAkE,GAAAsI,GAUA,QAAArB,GAAAuB,GACA,GAAA5O,GAAAQ,EAAAP,EACAkC,EAAAN,IAGA,MAAAM,YAAAkL,IAAA,MAAA,IAAAA,GAAAuB,EAOA,IAHAzM,EAAAsH,YAAA4D,EAGAuB,YAAAvB,GAIA,MAHAlL,GAAA/B,EAAAwO,EAAAxO,EACA+B,EAAAnC,EAAA4O,EAAA5O,OACAmC,EAAAuB,GAAAkL,EAAAA,EAAAlL,GAAAkL,EAAAvE,QAAAuE,EAMA,IAFA3O,QAAA2O,GAEA,WAAA3O,EAAA,CACA,GAAA,IAAA2O,EAIA,MAHAzM,GAAA/B,EAAA,EAAAwO,EAAA,KAAA,EACAzM,EAAAnC,EAAA,OACAmC,EAAAuB,GAAA,GAYA,IARAkL,EAAA,GACAA,GAAAA,EACAzM,EAAA/B,MAEA+B,EAAA/B,EAAA,EAIAwO,MAAAA,GAAAA,EAAA,IAAA,CACA,IAAA5O,EAAA,EAAAQ,EAAAoO,EAAApO,GAAA,GAAAA,GAAA,GAAAR,GAGA,OAFAmC,GAAAnC,EAAAA,OACAmC,EAAAuB,GAAAkL,IAIA,MAAA,GAAAA,IAAA,GACAA,IAAAzM,EAAA/B,EAAA4J,KACA7H,EAAAnC,EAAAgK,SACA7H,EAAAuB,EAAA,OAIA2I,EAAAlK,EAAAyM,EAAAvI,YAEA,GAAA,WAAApG,EACA,KAAAS,OAAA+G,GAAAmH,EAWA,OAPA,MAAAA,EAAAnC,WAAA,IACAmC,EAAAA,EAAAvE,MAAA,GACAlI,EAAA/B,MAEA+B,EAAA/B,EAAA,EAGA+O,GAAAlC,KAAA2B,GAAAvC,EAAAlK,EAAAyM,GAAAlC,EAAAvK,EAAAyM,GA1EA,GAAApO,GAAAsM,EAAA+B,CAmIA,IAtDAxB,EAAAjK,UAAArB,GAEAsL,EAAA+B,SAAA,EACA/B,EAAAgC,WAAA,EACAhC,EAAAiC,WAAA,EACAjC,EAAAkC,YAAA,EACAlC,EAAAmC,cAAA,EACAnC,EAAAoC,gBAAA,EACApC,EAAAqC,gBAAA,EACArC,EAAAsC,gBAAA,EACAtC,EAAAuC,iBAAA,EACAvC,EAAAwC,OAAA,EAEAxC,EAAAoB,OAAApB,EAAAyC,IAAArB,EACApB,EAAAjH,MAAAA,EAEAiH,EAAA9L,IAAAA,EACA8L,EAAA/I,KAAAA,EACA+I,EAAAlI,MAAAA,EACAkI,EAAA/J,IAAAA,EACA+J,EAAAlJ,KAAAA,EACAkJ,EAAApI,MAAAA,EACAoI,EAAA7I,KAAAA,EACA6I,EAAAjI,MAAAA,EACAiI,EAAA1L,MAAAA,EACA0L,EAAAmB,KAAAA,EACAnB,EAAAtH,KAAAA,EACAsH,EAAA3L,IAAAA,EACA2L,EAAAnL,KAAAA,EACAmL,EAAA5J,IAAAA,EACA4J,EAAAjL,IAAAA,EACAiL,EAAApH,MAAAA,EACAoH,EAAA/K,MAAAA,EACA+K,EAAA0C,GAAAA,EACA1C,EAAA5L,IAAAA,EACA4L,EAAA2C,MAAAA,EACA3C,EAAA4C,KAAAA,EACA5C,EAAA7F,IAAAA,EACA6F,EAAA9F,IAAAA,EACA8F,EAAA6C,IAAAA,EACA7C,EAAA7J,IAAAA,EACA6J,EAAA1J,IAAAA,GACA0J,EAAA8C,OAAAA,GACA9C,EAAAnH,MAAAA,GACAmH,EAAAhK,KAAAA,GACAgK,EAAAzK,IAAAA,GACAyK,EAAAhL,KAAAA,GACAgL,EAAA7K,KAAAA,GACA6K,EAAA9J,IAAAA,GACA8J,EAAAtJ,IAAAA,GACAsJ,EAAAxI,KAAAA,GACAwI,EAAA+C,MAAAA,GAEA,SAAA1B,IAAAA,MACAA,EAEA,IADAG,GAAA,YAAA,WAAA,WAAA,WAAA,OAAA,OAAA,SAAA,UACArO,EAAA,EAAAA,EAAAqO,EAAA9N,QAAA2N,EAAA2B,eAAAvD,EAAA+B,EAAArO,QAAAkO,EAAA5B,GAAAjL,KAAAiL,GAKA,OAFAO,GAAAoB,OAAAC,GAEArB,EAYA,QAAA5J,GAAAtB,EAAAI,GACA,MAAA,IAAAV,MAAAM,GAAAsB,IAAAlB,GAWA,QAAAH,GAAAD,GACA,MAAA,IAAAN,MAAAM,GAAAC,MAUA,QAAA6D,GAAA9D,GACA,MAAA+G,GAAA/G,EAAA,GAAAN,MAAAM,GAAAA,EAAAnC,EAAA,EAAA,GAWA,QAAAsC,KACA,GAAA9B,GAAAN,EACAD,EAAA,GAAA4B,MAAA,EAIA,KAFAiI,IAAA,EAEAtJ,EAAA,EAAAA,EAAA8P,UAAAvP,QAEA,GADAb,EAAA,GAAA2B,MAAAyO,UAAA9P,MACAN,EAAAwD,EAMAzD,EAAAyD,IACAzD,EAAAA,EAAA8C,KAAA7C,EAAA8I,MAAA9I,SAPA,CACA,GAAAA,EAAAE,EAEA,MADA0J,KAAA,EACA,GAAAjI,MAAA,EAAA,EAEA5B,GAAAC,EAQA,MAFA4J,KAAA,EAEA7J,EAAAuC,OAWA,QAAAuN,GAAA5N,GACA,MAAA,IAAAN,MAAAM,GAAA4N,KAcA,QAAAtO,GAAAU,EAAAI,GACA,MAAA,IAAAV,MAAAM,GAAAV,IAAAc,GAWA,QAAA0N,GAAA9N,GACA,MAAA,IAAAN,MAAAM,GAAAV,IAAA,GAWA,QAAAuO,GAAA7N,GACA,MAAA,IAAAN,MAAAM,GAAAV,IAAA,IAUA,QAAA+F,KACA,MAAA4D,GAAAvJ,KAAAyO,UAAA,MAUA,QAAA/I,KACA,MAAA6D,GAAAvJ,KAAAyO,UAAA,MAYA,QAAAJ,GAAA/N,EAAAI,GACA,MAAA,IAAAV,MAAAM,GAAA+N,IAAA3N,GAYA,QAAAiB,GAAArB,EAAAI,GACA,MAAA,IAAAV,MAAAM,GAAAqB,IAAAjB,GAYA,QAAAoB,IAAAxB,EAAAI,GACA,MAAA,IAAAV,MAAAM,GAAAwB,IAAApB,GAYA,QAAA4N,IAAAhH,GACA,GAAAzF,GAAA1D,EAAA+G,EAAA7G,EACAM,EAAA,EACAL,EAAA,GAAA0B,MAAA,GACAiG,IAOA,IALA,SAAAqB,EAAAA,EAAAtH,KAAAiH,UACAxB,EAAA6B,EAAA,EAAAkF,IAEAtH,EAAAzF,KAAAyE,KAAAoD,EAAA/B,IAEAvF,KAAAkN,OAIA,GAAAA,OAAAC,gBAGA,IAFAtL,EAAAqL,OAAAC,gBAAA,GAAAuB,aAAAxJ,IAEAvG,EAAAuG,GACA7G,EAAAwD,EAAAlD,GAIAN,GAAA,MACAwD,EAAAlD,GAAAuO,OAAAC,gBAAA,GAAAuB,aAAA,IAAA,GAKAzI,EAAAtH,KAAAN,EAAA,QAKA,CAAA,IAAA6O,OAAAE,YAwBA,KAAAvO,OAAAwO,GAnBA,KAFAxL,EAAAqL,OAAAE,YAAAlI,GAAA,GAEAvG,EAAAuG,GAGA7G,EAAAwD,EAAAlD,IAAAkD,EAAAlD,EAAA,IAAA,IAAAkD,EAAAlD,EAAA,IAAA,MAAA,IAAAkD,EAAAlD,EAAA,KAAA,IAGAN,GAAA,MACA6O,OAAAE,YAAA,GAAAuB,KAAA9M,EAAAlD,IAKAsH,EAAA6B,KAAAzJ,EAAA,KACAM,GAAA,EAIAA,GAAAuG,EAAA,MA5CA,MAAAvG,EAAAuG,GAAAe,EAAAtH,KAAA,IAAAc,KAAA6O,SAAA,CA2DA,KAVApJ,EAAAe,IAAAtH,GACA2I,GAAA/B,GAGAL,GAAAoC,IACAjJ,EAAA6H,GAAA,GAAAX,GAAA+B,GACArB,EAAAtH,IAAAuG,EAAA7G,EAAA,GAAAA,GAIA,IAAA4H,EAAAtH,GAAAA,IAAAsH,EAAA+B,KAGA,IAAArJ,EAAA,EACAR,EAAA,EACA8H,GAAA,OACA,CAIA,IAHA9H,KAGA,IAAA8H,EAAA,GAAA9H,GAAAoH,GAAAU,EAAA2I,OAGA,KAAA1J,EAAA,EAAA7G,EAAA4H,EAAA,GAAA5H,GAAA,GAAAA,GAAA,GAAA6G,GAGAA,GAAAK,KAAApH,GAAAoH,GAAAL,GAMA,MAHA5G,GAAAH,EAAAA,EACAG,EAAAuD,EAAAoE,EAEA3H,EAYA,QAAA+F,IAAA/D,GACA,MAAA+G,GAAA/G,EAAA,GAAAN,MAAAM,GAAAA,EAAAnC,EAAA,EAAA6B,KAAAgK,UAaA,QAAAxI,IAAAlB,GAEA,MADAA,GAAA,GAAAN,MAAAM,GACAA,EAAAuB,EAAAvB,EAAAuB,EAAA,GAAAvB,EAAA/B,EAAA,EAAA+B,EAAA/B,EAAA+B,EAAA/B,GAAA4J,IAWA,QAAApH,IAAAT,GACA,MAAA,IAAAN,MAAAM,GAAAS,MAWA,QAAAP,IAAAF,GACA,MAAA,IAAAN,MAAAM,GAAAE,OAWA,QAAAG,IAAAL,GACA,MAAA,IAAAN,MAAAM,GAAAK,OAYA,QAAAe,IAAApB,EAAAI,GACA,MAAA,IAAAV,MAAAM,GAAAoB,IAAAhB,GAWA,QAAAwB,IAAA5B,GACA,MAAA,IAAAN,MAAAM,GAAA4B,MAWA,QAAAc,IAAA1C,GACA,MAAA,IAAAN,MAAAM,GAAA0C,OAUA,QAAAuL,IAAAjO,GACA,MAAA+G,GAAA/G,EAAA,GAAAN,MAAAM,GAAAA,EAAAnC,EAAA,EAAA,GAjpJA,GAkFAsO,IAAAoC,GAAAzC,GAlFAa,GAAA,KAIAT,GAAA,IAGA9F,GAAA,mBAGAoC,GAAA,qgCAGApG,GAAA,qgCAIA8I,IAOAvE,UAAA,GAiBA+C,SAAA,EAeA8E,OAAA,EAIAC,YAIAC,SAAA,GAIA5G,MAAA6E,GAIA/E,KAAA+E,GAGAC,QAAA,GAQAjF,IAAA,EAEA6E,GAAA,kBACAlH,GAAAkH,GAAA,qBACAjE,GAAAiE,GAAA,2BACAO,GAAAP,GAAA,qBAEAzD,GAAA5J,KAAA2E,MACA8B,GAAAzG,KAAAqC,IAEAwJ,GAAA,6CACAH,GAAA,yDACAI,GAAA,gDACA+B,GAAA,qCAEAvF,GAAA,IACAxC,GAAA,EACA0J,GAAA,iBAEArG,GAAAE,GAAA5J,OAAA,EACA8J,GAAAtG,GAAAxD,OAAA,EAGAgB,KAyEAA,IAAAgP,cAAAhP,GAAAR,IAAA,WACA,GAAAY,GAAA,GAAAN,MAAA4H,YAAA5H,KAEA,OADAM,GAAA/B,EAAA,IAAA+B,EAAA/B,EAAA,GACA8I,EAAA/G,IASAJ,GAAAgE,KAAA,WACA,MAAAmD,GAAA,GAAArH,MAAA4H,YAAA5H,MAAAA,KAAA7B,EAAA,EAAA,IAYA+B,GAAAiP,WAAAjP,GAAAkP,IAAA,SAAA1O,GACA,GAAA/B,GAAA2H,EAAA+I,EAAAC,EACAhP,EAAAN,KACA0H,EAAApH,EAAAuB,EACA0N,GAAA7O,EAAA,GAAAJ,GAAAsH,YAAAlH,IAAAmB,EACA2N,EAAAlP,EAAA/B,EACAkR,EAAA/O,EAAAnC,CAGA,KAAAmJ,IAAA6H,EACA,MAAAC,IAAAC,EAAAD,IAAAC,EAAAD,EAAA9H,IAAA6H,EAAA,GAAA7H,EAAA8H,EAAA,EAAA,KAAArH,GAIA,KAAAT,EAAA,KAAA6H,EAAA,GAAA,MAAA7H,GAAA,GAAA8H,EAAAD,EAAA,IAAAE,EAAA,CAGA,IAAAD,IAAAC,EAAA,MAAAD,EAGA,IAAAlP,EAAAnC,IAAAuC,EAAAvC,EAAA,MAAAmC,GAAAnC,EAAAuC,EAAAvC,EAAAqR,EAAA,EAAA,IAMA,KAJAH,EAAA3H,EAAAxI,OACAoQ,EAAAC,EAAArQ,OAGAP,EAAA,EAAA2H,EAAA+I,EAAAC,EAAAD,EAAAC,EAAA3Q,EAAA2H,IAAA3H,EACA,GAAA+I,EAAA/I,KAAA4Q,EAAA5Q,GAAA,MAAA+I,GAAA/I,GAAA4Q,EAAA5Q,GAAA6Q,EAAA,EAAA,IAIA,OAAAH,KAAAC,EAAA,EAAAD,EAAAC,EAAAE,EAAA,EAAA,MAiBAtP,GAAA4G,OAAA5G,GAAAL,IAAA,WACA,GAAA8I,GAAA7C,EACAxF,EAAAN,KACA+G,EAAAzG,EAAAsH,WAEA,OAAAtH,GAAAuB,EAGAvB,EAAAuB,EAAA,IAEA8G,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,SACAjD,EAAAE,UAAA0B,EAAAlJ,KAAAkG,IAAArF,EAAAnC,EAAAmC,EAAAgH,MAAA/B,GACAwB,EAAAiD,SAAA,EAEA1J,EAAAwG,EAAAC,EAAAgF,EAAAhF,EAAAzG,IAEAyG,EAAAE,UAAA0B,EACA5B,EAAAiD,SAAAlE,EAEAuB,EAAA,GAAA+E,IAAA,GAAAA,GAAA9L,EAAA2D,MAAA3D,EAAAqI,EAAA7C,GAAA,IAZA,GAAAiB,GAAA,GAHA,GAAAA,GAAAoB,MAmCAjI,GAAAwP,SAAAxP,GAAAyM,KAAA,WACA,GAAAxO,GAAAwR,EAAAtR,EAAAC,EAAAyL,EAAAxL,EAAA+I,EAAAlJ,EAAAwR,EAAAC,EACAvP,EAAAN,KACA+G,EAAAzG,EAAAsH,WAEA,KAAAtH,EAAAsE,YAAAtE,EAAAgM,SAAA,MAAA,IAAAvF,GAAAzG,EAoCA,KAnCA2H,IAAA,EAGA1J,EAAA+B,EAAA/B,EAAAkB,KAAAqC,IAAAxB,EAAA/B,EAAA+B,EAAA,EAAA,GAIA/B,GAAAkB,KAAAC,IAAAnB,IAAA,EAAA,EAqBAD,EAAA,GAAAyI,GAAAxI,EAAAiG,aApBAnG,EAAA4G,EAAA3E,EAAAuB,GACA1D,EAAAmC,EAAAnC,GAGAI,GAAAJ,EAAAE,EAAAa,OAAA,GAAA,KAAAb,GAAA,GAAAE,GAAAA,MAAA,IAAA,MACAA,EAAAkB,KAAAqC,IAAAzD,EAAA,EAAA,GAGAF,EAAAkL,IAAAlL,EAAA,GAAA,IAAAA,EAAA,IAAAA,EAAA,KAAA,IAEAI,GAAA,EAAA,EACAF,EAAA,KAAAF,GAEAE,EAAAE,EAAAuR,gBACAzR,EAAAA,EAAAmK,MAAA,EAAAnK,EAAAsI,QAAA,KAAA,GAAAxI,GAGAG,EAAA,GAAAyI,GAAA1I,GACAC,EAAAC,EAAA+B,EAAA/B,GAKA+I,GAAAnJ,EAAA4I,EAAAE,WAAA,IAWA,GANA7I,EAAAE,EACAsR,EAAAxR,EAAA+I,MAAA/I,GAAA+I,MAAA/I,GACAyR,EAAAD,EAAA1O,KAAAZ,GACAhC,EAAA2L,GAAA4F,EAAA3O,KAAAZ,GAAA6G,MAAA/I,GAAAyR,EAAA3O,KAAA0O,GAAAtI,EAAA,EAAA,GAGArC,EAAA7G,EAAAyD,GAAA2G,MAAA,EAAAlB,MAAAjJ,EAAA4G,EAAA3G,EAAAuD,IAAA2G,MAAA,EAAAlB,GAAA,CAKA,GAJAjJ,EAAAA,EAAAmK,MAAAlB,EAAA,EAAAA,EAAA,GAIA,QAAAjJ,IAAA0L,GAAA,QAAA1L,GAeA,EAIAA,KAAAA,EAAAmK,MAAA,IAAA,KAAAnK,EAAAuI,OAAA,MAGAS,EAAA/I,EAAAH,EAAA,EAAA,GACAwR,GAAArR,EAAA6I,MAAA7I,GAAA6I,MAAA7I,GAAAyR,GAAAzP,GAGA,OAtBA,IAAAyJ,IACA1C,EAAAjJ,EAAAD,EAAA,EAAA,GAEAC,EAAA+I,MAAA/I,GAAA+I,MAAA/I,GAAA2R,GAAAzP,IAAA,CACAhC,EAAAF,CACA,OAIAkJ,GAAA,EACAyC,EAAA,EAmBA,MAFA9B,KAAA,EAEAZ,EAAA/I,EAAAH,EAAA4I,EAAAiD,SAAA2F,IAQAzP,GAAA8P,cAAA9P,GAAA+P,GAAA,WACA,GAAA3K,GACAzD,EAAA7B,KAAA6B,EACAxD,EAAA8J,GAEA,IAAAtG,EAAA,CAMA,GALAyD,EAAAzD,EAAA3C,OAAA,EACAb,GAAAiH,EAAA+D,GAAArJ,KAAA7B,EAAAoH,KAAAA,GAGAD,EAAAzD,EAAAyD,GACA,KAAAA,EAAA,IAAA,EAAAA,GAAA,GAAAjH,GACAA,GAAA,IAAAA,EAAA,GAGA,MAAAA,IAyBA6B,GAAAgQ,UAAAhQ,GAAA0B,IAAA,SAAAlB,GACA,MAAAuJ,IAAAjK,KAAA,GAAAA,MAAA4H,YAAAlH,KASAR,GAAAiQ,mBAAAjQ,GAAAmM,SAAA,SAAA3L,GACA,GAAAJ,GAAAN,KACA+G,EAAAzG,EAAAsH,WACA,OAAAP,GAAA4C,GAAA3J,EAAA,GAAAyG,GAAArG,GAAA,EAAA,EAAA,GAAAqG,EAAAE,UAAAF,EAAAiD,WAQA9J,GAAAoE,OAAApE,GAAA6P,GAAA,SAAArP,GACA,MAAA,KAAAV,KAAAoP,IAAA1O,IASAR,GAAAkE,MAAA,WACA,MAAAiD,GAAA,GAAArH,MAAA4H,YAAA5H,MAAAA,KAAA7B,EAAA,EAAA,IASA+B,GAAAkQ,YAAAlQ,GAAAmQ,GAAA,SAAA3P,GACA,MAAAV,MAAAoP,IAAA1O,GAAA,GASAR,GAAAoQ,qBAAApQ,GAAAqQ,IAAA,SAAA7P,GACA,GAAAwE,GAAAlF,KAAAoP,IAAA1O,EACA,OAAA,IAAAwE,GAAA,IAAAA,GA6BAhF,GAAAsQ,iBAAAtQ,GAAAG,KAAA,WACA,GAAA6E,GAAA7G,EAAAsK,EAAA7C,EAAAkB,EACA1G,EAAAN,KACA+G,EAAAzG,EAAAsH,YACA6I,EAAA,GAAA1J,GAAA,EAEA,KAAAzG,EAAAsE,WAAA,MAAA,IAAAmC,GAAAzG,EAAA/B,EAAA,EAAA,EAAA4J,IACA,IAAA7H,EAAAgM,SAAA,MAAAmE,EAEA9H,GAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,SACAjD,EAAAE,UAAA0B,EAAAlJ,KAAAkG,IAAArF,EAAAnC,EAAAmC,EAAAgH,MAAA,EACAP,EAAAiD,SAAA,EACAhD,EAAA1G,EAAAuB,EAAA3C,OAOA8H,EAAA,IACA9B,EAAAzF,KAAAyE,KAAA8C,EAAA,GACA3I,EAAAoB,KAAAqC,IAAA,GAAAoD,GAAAV,aAEAU,EAAA,GACA7G,EAAA,gCAGAiC,EAAA4G,EAAAH,EAAA,EAAAzG,EAAA6G,MAAA9I,GAAA,GAAA0I,GAAA,IAAA,EAMA,KAHA,GAAA2J,GACA/R,EAAAuG,EACAyL,EAAA,GAAA5J,GAAA,GACApI,KACA+R,EAAApQ,EAAA6G,MAAA7G,GACAA,EAAAmQ,EAAAtP,MAAAuP,EAAAvJ,MAAAwJ,EAAAxP,MAAAuP,EAAAvJ,MAAAwJ,KAGA,OAAAtJ,GAAA/G,EAAAyG,EAAAE,UAAA0B,EAAA5B,EAAAiD,SAAAlE,GAAA,IAkCA5F,GAAA0Q,eAAA1Q,GAAAM,KAAA,WACA,GAAA0E,GAAAyD,EAAA7C,EAAAkB,EACA1G,EAAAN,KACA+G,EAAAzG,EAAAsH,WAEA,KAAAtH,EAAAsE,YAAAtE,EAAAgM,SAAA,MAAA,IAAAvF,GAAAzG,EAQA,IANAqI,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,SACAjD,EAAAE,UAAA0B,EAAAlJ,KAAAkG,IAAArF,EAAAnC,EAAAmC,EAAAgH,MAAA,EACAP,EAAAiD,SAAA,EACAhD,EAAA1G,EAAAuB,EAAA3C,OAEA8H,EAAA,EACA1G,EAAA4G,EAAAH,EAAA,EAAAzG,EAAAA,GAAA,OACA,CAWA4E,EAAA,IAAAzF,KAAAkB,KAAAqG,GACA9B,EAAAA,EAAA,GAAA,GAAA,EAAAA,EAEA5E,EAAAA,EAAA6G,MAAA1H,KAAAqC,IAAA,GAAAoD,IAEA5E,EAAA4G,EAAAH,EAAA,EAAAzG,EAAAA,GAAA,EAOA,KAJA,GAAAuQ,GACAlF,EAAA,GAAA5E,GAAA,GACA6E,EAAA,GAAA7E,GAAA,IACA8E,EAAA,GAAA9E,GAAA,IACA7B,KACA2L,EAAAvQ,EAAA6G,MAAA7G,GACAA,EAAAA,EAAA6G,MAAAwE,EAAAzK,KAAA2P,EAAA1J,MAAAyE,EAAAzE,MAAA0J,GAAA3P,KAAA2K,MAOA,MAHA9E,GAAAE,UAAA0B,EACA5B,EAAAiD,SAAAlE,EAEAuB,EAAA/G,EAAAqI,EAAA7C,GAAA,IAoBA5F,GAAA4Q,kBAAA5Q,GAAA8C,KAAA,WACA,GAAA2F,GAAA7C,EACAxF,EAAAN,KACA+G,EAAAzG,EAAAsH,WAEA,OAAAtH,GAAAsE,WACAtE,EAAAgM,SAAA,GAAAvF,GAAAzG,IAEAqI,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,SACAjD,EAAAE,UAAA0B,EAAA,EACA5B,EAAAiD,SAAA,EAEAC,GAAA3J,EAAAE,OAAAF,EAAAD,OAAA0G,EAAAE,UAAA0B,EAAA5B,EAAAiD,SAAAlE,IARA,GAAAiB,GAAAzG,EAAA/B,IA+BA2B,GAAA6Q,cAAA7Q,GAAAuC,KAAA,WACA,GAAAyJ,GACA5L,EAAAN,KACA+G,EAAAzG,EAAAsH,YACA1C,EAAA5E,EAAAZ,MAAA0P,IAAA,GACAzG,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,QAEA,OAAA9E,QACA,IAAAA,EAEA5E,EAAA0L,QAAAjD,EAAAhC,EAAA4B,EAAA7C,GAAA,GAAAiB,GAAA,GAEA,GAAAA,GAAAoB,KAGA7H,EAAAgM,SAAAvD,EAAAhC,EAAA4B,EAAA,EAAA7C,GAAAqB,MAAA,KAIAJ,EAAAE,UAAA0B,EAAA,EACA5B,EAAAiD,SAAA,EAEA1J,EAAAA,EAAAgC,OACA4J,EAAAnD,EAAAhC,EAAA4B,EAAA,EAAA7C,GAAAqB,MAAA,IAEAJ,EAAAE,UAAA0B,EACA5B,EAAAiD,SAAAlE,EAEAoG,EAAA/K,MAAAb,KAuBAJ,GAAA8Q,wBAAA9Q,GAAAoD,MAAA,WACA,GAAAqF,GAAA7C,EACAxF,EAAAN,KACA+G,EAAAzG,EAAAsH,WAEA,OAAAtH,GAAA6L,IAAA,GAAA,GAAApF,GAAAzG,EAAAyP,GAAA,GAAA,EAAA5H,KACA7H,EAAAsE,YAEA+D,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,SACAjD,EAAAE,UAAA0B,EAAAlJ,KAAAkG,IAAAlG,KAAAC,IAAAY,EAAAnC,GAAAmC,EAAAgH,MAAA,EACAP,EAAAiD,SAAA,EACA/B,IAAA,EAEA3H,EAAAA,EAAA6G,MAAA7G,GAAAa,MAAA,GAAAR,OAAAO,KAAAZ,GAEA2H,IAAA,EACAlB,EAAAE,UAAA0B,EACA5B,EAAAiD,SAAAlE,EAEAxF,EAAA4N,MAdA,GAAAnH,GAAAzG,IAkCAJ,GAAA+Q,sBAAA/Q,GAAAkD,MAAA,WACA,GAAAuF,GAAA7C,EACAxF,EAAAN,KACA+G,EAAAzG,EAAAsH,WAEA,QAAAtH,EAAAsE,YAAAtE,EAAAgM,SAAA,GAAAvF,GAAAzG,IAEAqI,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,SACAjD,EAAAE,UAAA0B,EAAA,EAAAlJ,KAAAkG,IAAAlG,KAAAC,IAAAY,EAAAnC,GAAAmC,EAAAgH,MAAA,EACAP,EAAAiD,SAAA,EACA/B,IAAA,EAEA3H,EAAAA,EAAA6G,MAAA7G,GAAAY,KAAA,GAAAP,OAAAO,KAAAZ,GAEA2H,IAAA,EACAlB,EAAAE,UAAA0B,EACA5B,EAAAiD,SAAAlE,EAEAxF,EAAA4N,OAuBAhO,GAAAgR,yBAAAhR,GAAAqD,MAAA,WACA,GAAAoF,GAAA7C,EAAAgE,EAAAqH,EACA7Q,EAAAN,KACA+G,EAAAzG,EAAAsH,WAEA,OAAAtH,GAAAsE,WACAtE,EAAAnC,GAAA,EAAA,GAAA4I,GAAAzG,EAAAZ,MAAAqQ,GAAA,GAAAzP,EAAA/B,EAAA,EAAA+B,EAAAgM,SAAAhM,EAAA6H,MAEAQ,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,SACAmH,EAAA7Q,EAAAgH,KAEA7H,KAAAkG,IAAAwL,EAAAxI,GAAA,GAAArI,EAAAnC,EAAA,EAAAkJ,EAAA,GAAAN,GAAAzG,GAAAqI,EAAA7C,GAAA,IAEAiB,EAAAE,UAAA6C,EAAAqH,EAAA7Q,EAAAnC,EAEAmC,EAAA2J,GAAA3J,EAAAY,KAAA,GAAA,GAAA6F,GAAA,GAAA5F,MAAAb,GAAAwJ,EAAAnB,EAAA,GAEA5B,EAAAE,UAAA0B,EAAA,EACA5B,EAAAiD,SAAA,EAEA1J,EAAAA,EAAA4N,KAEAnH,EAAAE,UAAA0B,EACA5B,EAAAiD,SAAAlE,EAEAxF,EAAA6G,MAAA,MArBA,GAAAJ,GAAAoB,MA8CAjI,GAAAkR,YAAAlR,GAAAoC,KAAA,WACA,GAAA4J,GAAAhH,EACAyD,EAAA7C,EACAxF,EAAAN,KACA+G,EAAAzG,EAAAsH,WAEA,OAAAtH,GAAAgM,SAAA,GAAAvF,GAAAzG,IAEA4E,EAAA5E,EAAAZ,MAAA0P,IAAA,GACAzG,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,SAEA9E,OAGA,IAAAA,GACAgH,EAAAnD,EAAAhC,EAAA4B,EAAA,EAAA7C,GAAAqB,MAAA,IACA+E,EAAA3N,EAAA+B,EAAA/B,EACA2N,GAIA,GAAAnF,GAAAoB,MAKApB,EAAAE,UAAA0B,EAAA,EACA5B,EAAAiD,SAAA,EAEA1J,EAAAA,EAAAsB,IAAA,GAAAmF,GAAA,GAAA5F,MAAAb,EAAA6G,MAAA7G,IAAAK,OAAAO,KAAA,IAAAyB,OAEAoE,EAAAE,UAAA0B,EACA5B,EAAAiD,SAAAlE,EAEAxF,EAAA6G,MAAA,MAsBAjH,GAAAmR,eAAAnR,GAAAyC,KAAA,WACA,GAAAhE,GAAA2H,EAAApB,EAAA7G,EAAAiT,EAAAlT,EAAAE,EAAAwL,EAAAQ,EACAhK,EAAAN,KACA+G,EAAAzG,EAAAsH,YACAe,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,QAEA,IAAA1J,EAAAsE,WAOA,CAAA,GAAAtE,EAAAgM,SACA,MAAA,IAAAvF,GAAAzG,EACA,IAAAA,EAAAZ,MAAAqQ,GAAA,IAAApH,EAAA,GAAAK,GAGA,MAFA1K,GAAAyK,EAAAhC,EAAA4B,EAAA,EAAA7C,GAAAqB,MAAA,KACA7I,EAAAC,EAAA+B,EAAA/B,EACAD,MAZA,CACA,IAAAgC,EAAA/B,EAAA,MAAA,IAAAwI,GAAAoB,IACA,IAAAQ,EAAA,GAAAK,GAGA,MAFA1K,GAAAyK,EAAAhC,EAAA4B,EAAA,EAAA7C,GAAAqB,MAAA,IACA7I,EAAAC,EAAA+B,EAAA/B,EACAD,EAqBA,IAXAyI,EAAAE,UAAA6C,EAAAnB,EAAA,GACA5B,EAAAiD,SAAA,EAQA9E,EAAAzF,KAAAiG,IAAA,GAAAoE,EAAAvE,GAAA,EAAA,GAEA5G,EAAAuG,EAAAvG,IAAAA,EAAA2B,EAAAA,EAAAsB,IAAAtB,EAAA6G,MAAA7G,GAAAY,KAAA,GAAAP,OAAAO,KAAA,GAWA,KATA+G,IAAA,EAEA3B,EAAA7G,KAAAyE,KAAA4F,EAAAvE,IACAlH,EAAA,EACAiM,EAAAhK,EAAA6G,MAAA7G,GACAhC,EAAA,GAAAyI,GAAAzG,GACAgR,EAAAhR,EAGA3B,QAOA,GANA2S,EAAAA,EAAAnK,MAAAmD,GACAlM,EAAAE,EAAA6C,MAAAmQ,EAAA1P,IAAAvD,GAAA,IAEAiT,EAAAA,EAAAnK,MAAAmD,GACAhM,EAAAF,EAAA8C,KAAAoQ,EAAA1P,IAAAvD,GAAA,IAEA,SAAAC,EAAAuD,EAAAyE,GAAA,IAAA3H,EAAA2H,EAAAhI,EAAAuD,EAAAlD,KAAAP,EAAAyD,EAAAlD,IAAAA,MAOA,MAJAuG,KAAA5G,EAAAA,EAAA6I,MAAA,GAAAjC,EAAA,IAEA+C,IAAA,EAEAZ,EAAA/I,EAAAyI,EAAAE,UAAA0B,EAAA5B,EAAAiD,SAAAlE,GAAA,IAQA5F,GAAA0E,SAAA,WACA,QAAA5E,KAAA6B,GAQA3B,GAAAqR,UAAArR,GAAAsR,MAAA,WACA,QAAAxR,KAAA6B,GAAAwH,GAAArJ,KAAA7B,EAAAoH,IAAAvF,KAAA6B,EAAA3C,OAAA,GAQAgB,GAAAmB,MAAA,WACA,OAAArB,KAAAzB,GAQA2B,GAAAuR,WAAAvR,GAAA8L,MAAA,WACA,MAAAhM,MAAAzB,EAAA,GAQA2B,GAAAwR,WAAAxR,GAAAyR,MAAA,WACA,MAAA3R,MAAAzB,EAAA,GAQA2B,GAAAoM,OAAA,WACA,QAAAtM,KAAA6B,GAAA,IAAA7B,KAAA6B,EAAA,IAQA3B,GAAA0R,SAAA1R,GAAA2R,GAAA,SAAAnR,GACA,MAAAV,MAAAoP,IAAA1O,GAAA,GAQAR,GAAA4R,kBAAA5R,GAAAiM,IAAA,SAAAzL,GACA,MAAAV,MAAAoP,IAAA1O,GAAA,GAkCAR,GAAA6R,UAAA7R,GAAAN,IAAA,SAAAkL,GACA,GAAAkH,GAAAnQ,EAAA8H,EAAAzE,EAAA+M,EAAAC,EAAA5K,EAAAhJ,EACAyD,EAAA/B,KACA+G,EAAAhF,EAAA6F,YACAe,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,SACAJ,EAAA,CAGA,IAAA,MAAAkB,EACAA,EAAA,GAAA/D,GAAA,IACAiL,GAAA,MACA,CAKA,GAJAlH,EAAA,GAAA/D,GAAA+D,GACAjJ,EAAAiJ,EAAAjJ,EAGAiJ,EAAAvM,EAAA,IAAAsD,IAAAA,EAAA,IAAAiJ,EAAAiF,GAAA,GAAA,MAAA,IAAAhJ,GAAAoB,IAEA6J,GAAAlH,EAAAiF,GAAA,IAMA,GAHAlO,EAAAE,EAAAF,EAGAE,EAAAxD,EAAA,IAAAsD,IAAAA,EAAA,IAAAE,EAAAgO,GAAA,GACA,MAAA,IAAAhJ,GAAAlF,IAAAA,EAAA,MAAA,EAAA,GAAAE,EAAAxD,EAAA4J,IAAAtG,EAAA,EAAA,EAAA,EAKA,IAAAmQ,EACA,GAAAnQ,EAAA3C,OAAA,EACA+S,GAAA,MACA,CACA,IAAA/M,EAAArD,EAAA,GAAAqD,EAAA,KAAA,GAAAA,GAAA,EACA+M,GAAA,IAAA/M,EA0BA,GAtBA+C,IAAA,EACAX,EAAAqB,EAAAiB,EACAsI,EAAAhI,EAAAnI,EAAAuF,GACAqC,EAAAqI,EAAAtJ,EAAA3B,EAAAO,EAAA,IAAA4C,EAAAY,EAAAxD,GAGAhJ,EAAA2L,GAAAiI,EAAAvI,EAAArC,EAAA,GAgBAzB,EAAAvH,EAAAuD,EAAAqD,EAAAyD,EAAA7C,GAEA,EAMA,IALAwB,GAAA,GACA4K,EAAAhI,EAAAnI,EAAAuF,GACAqC,EAAAqI,EAAAtJ,EAAA3B,EAAAO,EAAA,IAAA4C,EAAAY,EAAAxD,GACAhJ,EAAA2L,GAAAiI,EAAAvI,EAAArC,EAAA,IAEA2K,EAAA,EAGAhN,EAAA3G,EAAAuD,GAAA2G,MAAAtD,EAAA,EAAAA,EAAA,IAAA,GAAA,OACA5G,EAAA+I,EAAA/I,EAAAqK,EAAA,EAAA,GAGA,aAEA9C,EAAAvH,EAAAuD,EAAAqD,GAAA,GAAAY,GAKA,OAFAmC,KAAA,EAEAZ,EAAA/I,EAAAqK,EAAA7C,IAiDA5F,GAAAiB,MAAAjB,GAAAwB,IAAA,SAAAhB,GACA,GAAAmB,GAAA1D,EAAAQ,EAAA2H,EAAApB,EAAA8B,EAAA2B,EAAA7C,EAAA4B,EAAAwD,EAAAiH,EAAA5C,EACAjP,EAAAN,KACA+G,EAAAzG,EAAAsH,WAKA,IAHAlH,EAAA,GAAAqG,GAAArG,IAGAJ,EAAAuB,IAAAnB,EAAAmB,EAaA,MAVAvB,GAAA/B,GAAAmC,EAAAnC,EAGA+B,EAAAuB,EAAAnB,EAAAnC,GAAAmC,EAAAnC,EAKAmC,EAAA,GAAAqG,GAAArG,EAAAmB,GAAAvB,EAAA/B,IAAAmC,EAAAnC,EAAA+B,EAAA6H,KARAzH,EAAA,GAAAqG,GAAAoB,KAUAzH,CAIA,IAAAJ,EAAA/B,GAAAmC,EAAAnC,EAEA,MADAmC,GAAAnC,GAAAmC,EAAAnC,EACA+B,EAAAY,KAAAR,EASA,IANAgH,EAAApH,EAAAuB,EACA0N,EAAA7O,EAAAmB,EACA8G,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,UAGAtC,EAAA,KAAA6H,EAAA,GAAA,CAGA,GAAAA,EAAA,GAAA7O,EAAAnC,GAAAmC,EAAAnC,MAGA,CAAA,IAAAmJ,EAAA,GAIA,MAAA,IAAAX,GAAA,IAAAjB,KAAA,EAJApF,GAAA,GAAAqG,GAAAzG,GAMA,MAAA2H,IAAAZ,EAAA3G,EAAAiI,EAAA7C,GAAApF,EAaA,GAPAvC,EAAAkL,GAAA3I,EAAAvC,EAAAoH,IACA2F,EAAA7B,GAAA/I,EAAAnC,EAAAoH,IAEAmC,EAAAA,EAAAc,QACAtD,EAAAgG,EAAA/M,EAGA,CAyBA,IAxBAgU,EAAAjN,EAAA,EAEAiN,GACAtQ,EAAA6F,EACAxC,GAAAA,EACA8B,EAAAuI,EAAArQ,SAEA2C,EAAA0N,EACApR,EAAA+M,EACAlE,EAAAU,EAAAxI,QAMAP,EAAAc,KAAAkG,IAAAlG,KAAAyE,KAAAyE,EAAApD,IAAAyB,GAAA,EAEA9B,EAAAvG,IACAuG,EAAAvG,EACAkD,EAAA3C,OAAA,GAIA2C,EAAAgF,UACAlI,EAAAuG,EAAAvG,KAAAkD,EAAAiG,KAAA,EACAjG,GAAAgF,cAGA,CASA,IALAlI,EAAA+I,EAAAxI,OACA8H,EAAAuI,EAAArQ,OACAiT,EAAAxT,EAAAqI,EACAmL,IAAAnL,EAAArI,GAEAA,EAAA,EAAAA,EAAAqI,EAAArI,IACA,GAAA+I,EAAA/I,IAAA4Q,EAAA5Q,GAAA,CACAwT,EAAAzK,EAAA/I,GAAA4Q,EAAA5Q,EACA,OAIAuG,EAAA,EAcA,IAXAiN,IACAtQ,EAAA6F,EACAA,EAAA6H,EACAA,EAAA1N,EACAnB,EAAAnC,GAAAmC,EAAAnC,GAGAyI,EAAAU,EAAAxI,OAIAP,EAAA4Q,EAAArQ,OAAA8H,EAAArI,EAAA,IAAAA,EAAA+I,EAAAV,KAAA,CAGA,KAAArI,EAAA4Q,EAAArQ,OAAAP,EAAAuG,GAAA,CAEA,GAAAwC,IAAA/I,GAAA4Q,EAAA5Q,GAAA,CACA,IAAA2H,EAAA3H,EAAA2H,GAAA,IAAAoB,IAAApB,IAAAoB,EAAApB,GAAAyB,GAAA,IACAL,EAAApB,GACAoB,EAAA/I,IAAAoJ,GAGAL,EAAA/I,IAAA4Q,EAAA5Q,GAIA,KAAA,IAAA+I,IAAAV,IAAAU,EAAAM,KAGA,MAAA,IAAAN,EAAA,GAAAA,EAAAkH,UAAAzQ,CAGA,OAAAuJ,GAAA,IAEAhH,EAAAmB,EAAA6F,EACAhH,EAAAvC,EAAAsK,EAAAf,EAAAvJ,GAEA8J,GAAAZ,EAAA3G,EAAAiI,EAAA7C,GAAApF,GALA,GAAAqG,GAAA,IAAAjB,KAAA,IAiCA5F,GAAA4O,OAAA5O,GAAAmO,IAAA,SAAA3N,GACA,GAAA0R,GACA9R,EAAAN,KACA+G,EAAAzG,EAAAsH,WAKA,OAHAlH,GAAA,GAAAqG,GAAArG,IAGAJ,EAAAuB,IAAAnB,EAAAnC,GAAAmC,EAAAmB,IAAAnB,EAAAmB,EAAA,GAAA,GAAAkF,GAAAoB,MAGAzH,EAAAmB,GAAAvB,EAAAuB,IAAAvB,EAAAuB,EAAA,GACAwF,EAAA,GAAAN,GAAAzG,GAAAyG,EAAAE,UAAAF,EAAAiD,WAIA/B,IAAA,EAEA,GAAAlB,EAAA+H,QAIAsD,EAAAnI,GAAA3J,EAAAI,EAAAhB,MAAA,EAAA,EAAA,GACA0S,EAAA7T,GAAAmC,EAAAnC,GAEA6T,EAAAnI,GAAA3J,EAAAI,EAAA,EAAAqG,EAAA+H,OAAA,GAGAsD,EAAAA,EAAAjL,MAAAzG,GAEAuH,IAAA,EAEA3H,EAAAa,MAAAiR,KAUAlS,GAAAwJ,mBAAAxJ,GAAAK,IAAA,WACA,MAAAmJ,GAAA1J,OASAE,GAAAgK,iBAAAhK,GAAAgO,GAAA,WACA,MAAAhE,GAAAlK,OASAE,GAAAmS,QAAAnS,GAAA+D,IAAA,WACA,GAAA3D,GAAA,GAAAN,MAAA4H,YAAA5H,KAEA,OADAM,GAAA/B,GAAA+B,EAAA/B,EACA8I,EAAA/G,IAyBAJ,GAAAgB,KAAAhB,GAAAuB,IAAA,SAAAf,GACA,GAAA4R,GAAAzQ,EAAA1D,EAAAQ,EAAAuG,EAAA8B,EAAA2B,EAAA7C,EAAA4B,EAAA6H,EACAjP,EAAAN,KACA+G,EAAAzG,EAAAsH,WAKA,IAHAlH,EAAA,GAAAqG,GAAArG,IAGAJ,EAAAuB,IAAAnB,EAAAmB,EAWA,MARAvB,GAAA/B,GAAAmC,EAAAnC,EAMA+B,EAAAuB,IAAAnB,EAAA,GAAAqG,GAAArG,EAAAmB,GAAAvB,EAAA/B,IAAAmC,EAAAnC,EAAA+B,EAAA6H,MANAzH,EAAA,GAAAqG,GAAAoB,KAQAzH,CAIA,IAAAJ,EAAA/B,GAAAmC,EAAAnC,EAEA,MADAmC,GAAAnC,GAAAmC,EAAAnC,EACA+B,EAAAa,MAAAT,EASA,IANAgH,EAAApH,EAAAuB,EACA0N,EAAA7O,EAAAmB,EACA8G,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,UAGAtC,EAAA,KAAA6H,EAAA,GAMA,MAFAA,GAAA,KAAA7O,EAAA,GAAAqG,GAAAzG,IAEA2H,GAAAZ,EAAA3G,EAAAiI,EAAA7C,GAAApF,CAaA,IAPAwE,EAAAmE,GAAA/I,EAAAnC,EAAAoH,IACApH,EAAAkL,GAAA3I,EAAAvC,EAAAoH,IAEAmC,EAAAA,EAAAc,QACA7J,EAAAuG,EAAA/G,EAGA,CAuBA,IArBAQ,EAAA,GACAkD,EAAA6F,EACA/I,GAAAA,EACAqI,EAAAuI,EAAArQ,SAEA2C,EAAA0N,EACApR,EAAA+G,EACA8B,EAAAU,EAAAxI,QAIAgG,EAAAzF,KAAAyE,KAAAyE,EAAApD,IACAyB,EAAA9B,EAAA8B,EAAA9B,EAAA,EAAA8B,EAAA,EAEArI,EAAAqI,IACArI,EAAAqI,EACAnF,EAAA3C,OAAA,GAIA2C,EAAAgF,UACAlI,KAAAkD,EAAAiG,KAAA;AACAjG,EAAAgF,UAeA,IAZAG,EAAAU,EAAAxI,OACAP,EAAA4Q,EAAArQ,OAGA8H,EAAArI,EAAA,IACAA,EAAAqI,EACAnF,EAAA0N,EACAA,EAAA7H,EACAA,EAAA7F,GAIAyQ,EAAA,EAAA3T,GACA2T,GAAA5K,IAAA/I,GAAA+I,EAAA/I,GAAA4Q,EAAA5Q,GAAA2T,GAAAvK,GAAA,EACAL,EAAA/I,IAAAoJ,EAUA,KAPAuK,IACA5K,EAAAgF,QAAA4F,KACAnU,GAKA6I,EAAAU,EAAAxI,OAAA,GAAAwI,IAAAV,IAAAU,EAAAM,KAKA,OAHAtH,GAAAmB,EAAA6F,EACAhH,EAAAvC,EAAAsK,EAAAf,EAAAvJ,GAEA8J,GAAAZ,EAAA3G,EAAAiI,EAAA7C,GAAApF,GAUAR,GAAA+G,UAAA/G,GAAAoH,GAAA,SAAAiL,GACA,GAAArN,GACA5E,EAAAN,IAEA,IAAA,SAAAuS,GAAAA,MAAAA,GAAA,IAAAA,GAAA,IAAAA,EAAA,KAAA1T,OAAA+G,GAAA2M,EASA,OAPAjS,GAAAuB,GACAqD,EAAA+D,EAAA3I,EAAAuB,GACA0Q,GAAAjS,EAAAnC,EAAA,EAAA+G,IAAAA,EAAA5E,EAAAnC,EAAA,IAEA+G,EAAAiD,IAGAjD,GASAhF,GAAAmE,MAAA,WACA,GAAA/D,GAAAN,KACA+G,EAAAzG,EAAAsH,WAEA,OAAAP,GAAA,GAAAN,GAAAzG,GAAAA,EAAAnC,EAAA,EAAA4I,EAAAiD,WAmBA9J,GAAAuL,KAAAvL,GAAAa,IAAA,WACA,GAAA4H,GAAA7C,EACAxF,EAAAN,KACA+G,EAAAzG,EAAAsH,WAEA,OAAAtH,GAAAsE,WACAtE,EAAAgM,SAAA,GAAAvF,GAAAzG,IAEAqI,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,SACAjD,EAAAE,UAAA0B,EAAAlJ,KAAAkG,IAAArF,EAAAnC,EAAAmC,EAAAgH,MAAA/B,GACAwB,EAAAiD,SAAA,EAEA1J,EAAAmL,EAAA1E,EAAAgF,EAAAhF,EAAAzG,IAEAyG,EAAAE,UAAA0B,EACA5B,EAAAiD,SAAAlE,EAEAuB,EAAA+E,GAAA,EAAA9L,EAAA2D,MAAA3D,EAAAqI,EAAA7C,GAAA,IAbA,GAAAiB,GAAAoB,MA6BAjI,GAAAsS,WAAAtS,GAAAS,KAAA,WACA,GAAAgP,GAAAtR,EAAAiJ,EAAAhJ,EAAAyL,EAAA3L,EACAkC,EAAAN,KACA6B,EAAAvB,EAAAuB,EACA1D,EAAAmC,EAAAnC,EACAI,EAAA+B,EAAA/B,EACAwI,EAAAzG,EAAAsH,WAGA,IAAA,IAAArJ,IAAAsD,IAAAA,EAAA,GACA,MAAA,IAAAkF,IAAAxI,GAAAA,EAAA,KAAAsD,GAAAA,EAAA,IAAAsG,IAAAtG,EAAAvB,EAAA,EAAA,EAgCA,KA7BA2H,IAAA,EAGA1J,EAAAkB,KAAAkB,MAAAL,GAIA,GAAA/B,GAAAA,GAAA,EAAA,GACAF,EAAA4G,EAAApD,IAEAxD,EAAAa,OAAAf,GAAA,GAAA,IAAAE,GAAA,KACAE,EAAAkB,KAAAkB,KAAAtC,GACAF,EAAAkL,IAAAlL,EAAA,GAAA,IAAAA,EAAA,GAAAA,EAAA,GAEAI,GAAA,EAAA,EACAF,EAAA,KAAAF,GAEAE,EAAAE,EAAAuR,gBACAzR,EAAAA,EAAAmK,MAAA,EAAAnK,EAAAsI,QAAA,KAAA,GAAAxI,GAGAG,EAAA,GAAAyI,GAAA1I,IAEAC,EAAA,GAAAyI,GAAAxI,EAAAiG,YAGA8C,GAAAnJ,EAAA4I,EAAAE,WAAA,IAQA,GAJA7I,EAAAE,EACAA,EAAAF,EAAA8C,KAAA+I,GAAA3J,EAAAlC,EAAAkJ,EAAA,EAAA,IAAAH,MAAA,IAGAlC,EAAA7G,EAAAyD,GAAA2G,MAAA,EAAAlB,MAAAjJ,EAAA4G,EAAA3G,EAAAuD,IAAA2G,MAAA,EAAAlB,GAAA,CAKA,GAJAjJ,EAAAA,EAAAmK,MAAAlB,EAAA,EAAAA,EAAA,GAIA,QAAAjJ,IAAA0L,GAAA,QAAA1L,GAeA,EAIAA,KAAAA,EAAAmK,MAAA,IAAA,KAAAnK,EAAAuI,OAAA,MAGAS,EAAA/I,EAAAH,EAAA,EAAA,GACAwR,GAAArR,EAAA6I,MAAA7I,GAAAyR,GAAAzP,GAGA,OAtBA,IAAAyJ,IACA1C,EAAAjJ,EAAAD,EAAA,EAAA,GAEAC,EAAA+I,MAAA/I,GAAA2R,GAAAzP,IAAA,CACAhC,EAAAF,CACA,OAIAkJ,GAAA,EACAyC,EAAA,EAmBA,MAFA9B,KAAA,EAEAZ,EAAA/I,EAAAH,EAAA4I,EAAAiD,SAAA2F,IAiBAzP,GAAAuS,QAAAvS,GAAAgC,IAAA,WACA,GAAAyG,GAAA7C,EACAxF,EAAAN,KACA+G,EAAAzG,EAAAsH,WAEA,OAAAtH,GAAAsE,WACAtE,EAAAgM,SAAA,GAAAvF,GAAAzG,IAEAqI,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,SACAjD,EAAAE,UAAA0B,EAAA,GACA5B,EAAAiD,SAAA,EAEA1J,EAAAA,EAAAS,MACAT,EAAA/B,EAAA,EACA+B,EAAA2J,GAAA3J,EAAA,GAAAyG,GAAA,GAAA5F,MAAAb,EAAA6G,MAAA7G,IAAAK,OAAAgI,EAAA,GAAA,GAEA5B,EAAAE,UAAA0B,EACA5B,EAAAiD,SAAAlE,EAEAuB,EAAA,GAAA+E,IAAA,GAAAA,GAAA9L,EAAA2D,MAAA3D,EAAAqI,EAAA7C,GAAA,IAfA,GAAAiB,GAAAoB,MAwCAjI,GAAAiH,MAAAjH,GAAAyB,IAAA,SAAAjB,GACA,GAAA4R,GAAAnU,EAAAQ,EAAAuG,EAAA5G,EAAAoU,EAAAtU,EAAAiR,EAAAC,EACAhP,EAAAN,KACA+G,EAAAzG,EAAAsH,YACAF,EAAApH,EAAAuB,EACA0N,GAAA7O,EAAA,GAAAqG,GAAArG,IAAAmB,CAKA,IAHAnB,EAAAnC,GAAA+B,EAAA/B,IAGAmJ,GAAAA,EAAA,IAAA6H,GAAAA,EAAA,IAEA,MAAA,IAAAxI,IAAArG,EAAAnC,GAAAmJ,IAAAA,EAAA,KAAA6H,GAAAA,IAAAA,EAAA,KAAA7H,EAIAS,IAIAT,GAAA6H,EAAA,EAAA7O,EAAAnC,EAAAmC,EAAAnC,EAAA,EAoBA,KAjBAJ,EAAAkL,GAAA/I,EAAAnC,EAAAoH,IAAA8D,GAAA3I,EAAAvC,EAAAoH,IACA8J,EAAA3H,EAAAxI,OACAoQ,EAAAC,EAAArQ,OAGAmQ,EAAAC,IACAhR,EAAAoJ,EACAA,EAAA6H,EACAA,EAAAjR,EACAoU,EAAArD,EACAA,EAAAC,EACAA,EAAAoD,GAIApU,KACAoU,EAAArD,EAAAC,EACA3Q,EAAA+T,EAAA/T,KAAAL,EAAAwJ,KAAA,EAGA,KAAAnJ,EAAA2Q,IAAA3Q,GAAA,GAAA,CAEA,IADA2T,EAAA,EACApN,EAAAmK,EAAA1Q,EAAAuG,EAAAvG,GACAP,EAAAE,EAAA4G,GAAAqK,EAAA5Q,GAAA+I,EAAAxC,EAAAvG,EAAA,GAAA2T,EACAhU,EAAA4G,KAAA9G,EAAA2J,GAAA,EACAuK,EAAAlU,EAAA2J,GAAA,CAGAzJ,GAAA4G,IAAA5G,EAAA4G,GAAAoN,GAAAvK,GAAA,EAIA,MAAAzJ,IAAAoU,IAAApU,EAAA0J,KAQA,OANAsK,KAAAnU,EACAG,EAAAsQ,QAEAlO,EAAAmB,EAAAvD,EACAoC,EAAAvC,EAAAsK,EAAAnK,EAAAH,GAEA8J,GAAAZ,EAAA3G,EAAAqG,EAAAE,UAAAF,EAAAiD,UAAAtJ,GAcAR,GAAAyS,SAAA,SAAArL,EAAAxB,GACA,MAAAyG,GAAAvM,KAAA,EAAAsH,EAAAxB,IAcA5F,GAAA0S,gBAAA1S,GAAA2S,KAAA,SAAA5C,EAAAnK,GACA,GAAAxF,GAAAN,KACA+G,EAAAzG,EAAAsH,WAGA,OADAtH,GAAA,GAAAyG,GAAAzG,GACA,SAAA2P,EAAA3P,GAEAmF,EAAAwK,EAAA,EAAAzD,IAEA,SAAA1G,EAAAA,EAAAiB,EAAAiD,SACAvE,EAAAK,EAAA,EAAA,GAEAuB,EAAA/G,EAAA2P,EAAA3P,EAAAnC,EAAA,EAAA2H,KAYA5F,GAAA4P,cAAA,SAAAG,EAAAnK,GACA,GAAAT,GACA/E,EAAAN,KACA+G,EAAAzG,EAAAsH,WAcA,OAZA,UAAAqI,EACA5K,EAAAgD,EAAA/H,GAAA,IAEAmF,EAAAwK,EAAA,EAAAzD,IAEA,SAAA1G,EAAAA,EAAAiB,EAAAiD,SACAvE,EAAAK,EAAA,EAAA,GAEAxF,EAAA+G,EAAA,GAAAN,GAAAzG,GAAA2P,EAAA,EAAAnK,GACAT,EAAAgD,EAAA/H,GAAA,EAAA2P,EAAA,IAGA3P,EAAA0L,UAAA1L,EAAAgM,SAAA,IAAAjH,EAAAA,GAoBAnF,GAAA4S,QAAA,SAAA7C,EAAAnK,GACA,GAAAT,GAAA3E,EACAJ,EAAAN,KACA+G,EAAAzG,EAAAsH,WAgBA,OAdA,UAAAqI,EACA5K,EAAAgD,EAAA/H,IAEAmF,EAAAwK,EAAA,EAAAzD,IAEA,SAAA1G,EAAAA,EAAAiB,EAAAiD,SACAvE,EAAAK,EAAA,EAAA,GAEApF,EAAA2G,EAAA,GAAAN,GAAAzG,GAAA2P,EAAA3P,EAAAnC,EAAA,EAAA2H,GACAT,EAAAgD,EAAA3H,GAAA,EAAAuP,EAAAvP,EAAAvC,EAAA,IAKAmC,EAAA0L,UAAA1L,EAAAgM,SAAA,IAAAjH,EAAAA,GAeAnF,GAAA6S,WAAA,SAAAC,GACA,GAAAnR,GAAAoR,EAAAC,EAAAC,EAAAhV,EAAA+G,EAAA7G,EAAA+U,EAAAC,EAAA1K,EAAAyJ,EAAA9T,EACAgC,EAAAN,KACA0H,EAAApH,EAAAuB,EACAkF,EAAAzG,EAAAsH,WAEA,KAAAF,EAAA,MAAA,IAAAX,GAAAzG,EAUA,IARA+S,EAAAJ,EAAA,GAAAlM,GAAA,GACAmM,EAAAE,EAAA,GAAArM,GAAA,GAEAlF,EAAA,GAAAkF,GAAAmM,GACA/U,EAAA0D,EAAA1D,EAAA8K,EAAAvB,GAAApH,EAAAnC,EAAA,EACA+G,EAAA/G,EAAAoH,GACA1D,EAAAA,EAAA,GAAAqE,GAAA,GAAAhB,EAAA,EAAAK,GAAAL,EAAAA,GAEA,MAAA8N,EAGAA,EAAA7U,EAAA,EAAA0D,EAAAwR,MACA,CAEA,GADAhV,EAAA,GAAA0I,GAAAiM,IACA3U,EAAAmT,SAAAnT,EAAAwT,GAAAwB,GAAA,KAAAxU,OAAA+G,GAAAvH,EACA2U,GAAA3U,EAAAgS,GAAAxO,GAAA1D,EAAA,EAAA0D,EAAAwR,EAAAhV,EAQA,IALA4J,IAAA,EACA5J,EAAA,GAAA0I,GAAA9B,EAAAyC,IACAiB,EAAA5B,EAAAE,UACAF,EAAAE,UAAA9I,EAAAuJ,EAAAxI,OAAAqG,GAAA,EAGA6M,EAAAnI,GAAA5L,EAAAwD,EAAA,EAAA,EAAA,GACAsR,EAAAF,EAAA/R,KAAAkR,EAAAjL,MAAA+L,IACA,GAAAC,EAAA/D,IAAA4D,IACAC,EAAAC,EACAA,EAAAC,EACAA,EAAAE,EACAA,EAAAD,EAAAlS,KAAAkR,EAAAjL,MAAAgM,IACAC,EAAAD,EACAA,EAAAtR,EACAA,EAAAxD,EAAA8C,MAAAiR,EAAAjL,MAAAgM,IACA9U,EAAA8U,CAeA,OAZAA,GAAAlJ,GAAA+I,EAAA7R,MAAA8R,GAAAC,EAAA,EAAA,EAAA,GACAE,EAAAA,EAAAlS,KAAAiS,EAAAhM,MAAAkM,IACAJ,EAAAA,EAAA/R,KAAAiS,EAAAhM,MAAA+L,IACAE,EAAA7U,EAAA8U,EAAA9U,EAAA+B,EAAA/B,EAGAD,EAAA2L,GAAAoJ,EAAAH,EAAA/U,EAAA,GAAAgD,MAAAb,GAAAZ,MAAA0P,IAAAnF,GAAAmJ,EAAAH,EAAA9U,EAAA,GAAAgD,MAAAb,GAAAZ,OAAA,GACA2T,EAAAH,IAAAE,EAAAH,GAEAlM,EAAAE,UAAA0B,EACAV,IAAA,EAEA3J,GAcA4B,GAAAoT,cAAApT,GAAAqT,MAAA,SAAAjM,EAAAxB,GACA,MAAAyG,GAAAvM,KAAA,GAAAsH,EAAAxB,IA2BA5F,GAAAsT,UAAA,SAAA9S,EAAAoF,GACA,GAAAxF,GAAAN,KACA+G,EAAAzG,EAAAsH,WAIA,IAFAtH,EAAA,GAAAyG,GAAAzG,GAEA,MAAAI,EAAA,CAGA,IAAAJ,EAAAuB,EAAA,MAAAvB,EAEAI,GAAA,GAAAqG,GAAA,GACAjB,EAAAiB,EAAAiD,aACA,CAKA,GAJAtJ,EAAA,GAAAqG,GAAArG,GACA,SAAAoF,GAAAL,EAAAK,EAAA,EAAA,IAGAxF,EAAAuB,EAAA,MAAAnB,GAAAnC,EAAA+B,EAAAI,CAGA,KAAAA,EAAAmB,EAEA,MADAnB,GAAAnC,IAAAmC,EAAAnC,EAAA+B,EAAA/B,GACAmC,EAkBA,MAbAA,GAAAmB,EAAA,IACAoG,IAAA,EACAnC,EAAA,IAAAA,GAAA,EAAA,EAAA,EAAA,GAAAA,IACAxF,EAAA2J,GAAA3J,EAAAI,EAAA,EAAAoF,EAAA,GAAAqB,MAAAzG,GACAuH,IAAA,EACAZ,EAAA/G,KAIAI,EAAAnC,EAAA+B,EAAA/B,EACA+B,EAAAI,GAGAJ,GASAJ,GAAAuT,SAAA,WACA,OAAAzT,MAcAE,GAAAwT,QAAA,SAAApM,EAAAxB,GACA,MAAAyG,GAAAvM,KAAA,EAAAsH,EAAAxB,IA+CA5F,GAAAyT,QAAAzT,GAAA4B,IAAA,SAAApB,GACA,GAAAvC,GAAA+G,EAAAyD,EAAArK,EAAAwH,EAAAvH,EACA+B,EAAAN,KACA+G,EAAAzG,EAAAsH,YACAgM,IAAAlT,EAAA,GAAAqG,GAAArG,GAGA,MAAAJ,EAAAuB,GAAAnB,EAAAmB,GAAAvB,EAAAuB,EAAA,IAAAnB,EAAAmB,EAAA,IAAA,MAAA,IAAAkF,GAAAb,IAAA5F,EAAAsT,GAIA,IAFAtT,EAAA,GAAAyG,GAAAzG,GAEAA,EAAAyP,GAAA,GAAA,MAAAzP,EAKA,IAHAqI,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,SAEAtJ,EAAAqP,GAAA,GAAA,MAAA1I,GAAA/G,EAAAqI,EAAA7C,EAMA,IAHA3H,EAAAkL,GAAA3I,EAAAvC,EAAAoH,IAGApH,GAAAuC,EAAAmB,EAAA3C,OAAA,IAAAgG,EAAA0O,EAAA,GAAAA,EAAAA,IAAA3E,GAEA,MADA3Q,GAAA6K,EAAApC,EAAAzG,EAAA4E,EAAAyD,GACAjI,EAAAnC,EAAA,EAAA,GAAAwI,GAAA,GAAAnF,IAAAtD,GAAA+I,EAAA/I,EAAAqK,EAAA7C,EAMA,IAHAvH,EAAA+B,EAAA/B,EAGAA,EAAA,EAAA,CAGA,GAAAJ,EAAAuC,EAAAmB,EAAA3C,OAAA,EAAA,MAAA,IAAA6H,GAAAoB,IAMA,IAHA,IAAA,EAAAzH,EAAAmB,EAAA1D,MAAAI,EAAA,GAGA,GAAA+B,EAAAnC,GAAA,GAAAmC,EAAAuB,EAAA,IAAA,GAAAvB,EAAAuB,EAAA3C,OAEA,MADAoB,GAAA/B,EAAAA,EACA+B,EAgBA,MARA4E,GAAAgB,IAAA5F,EAAAsT,GACAzV,EAAA,GAAA+G,GAAAN,SAAAM,GAEA,GAAA6B,GAAA7B,EAAA,IAAA/G,EADAkL,GAAAuK,GAAAnU,KAAAG,IAAA,KAAAqF,EAAA3E,EAAAuB,IAAApC,KAAAqJ,KAAAxI,EAAAnC,EAAA,IAMAA,EAAA4I,EAAAmB,KAAA,GAAA/J,EAAA4I,EAAAqB,KAAA,EAAA,GAAArB,GAAA5I,EAAA,EAAAI,EAAA,EAAA,IAEA0J,IAAA,EACAlB,EAAAiD,SAAA1J,EAAA/B,EAAA,EAMA2G,EAAAzF,KAAAiG,IAAA,IAAAvH,EAAA,IAAAe,QAGAZ,EAAAoL,EAAAhJ,EAAAyG,MAAA+C,EAAA5J,EAAAqI,EAAAzD,IAAAyD,GAGArK,EAAAuD,IAGAvD,EAAA+I,EAAA/I,EAAAqK,EAAA,EAAA,GAIA9C,EAAAvH,EAAAuD,EAAA8G,EAAA7C,KACA3H,EAAAwK,EAAA,GAGArK,EAAA+I,EAAAqC,EAAAhJ,EAAAyG,MAAA+C,EAAA5J,EAAAnC,EAAA+G,IAAA/G,GAAAA,EAAA,EAAA,IAGA8G,EAAA3G,EAAAuD,GAAA2G,MAAAG,EAAA,EAAAA,EAAA,IAAA,GAAA,OACArK,EAAA+I,EAAA/I,EAAAqK,EAAA,EAAA,MAKArK,EAAAC,EAAAA,EACA0J,IAAA,EACAlB,EAAAiD,SAAAlE,EAEAuB,EAAA/I,EAAAqK,EAAA7C,KAeA5F,GAAA2T,YAAA,SAAAvM,EAAAxB,GACA,GAAAT,GACA/E,EAAAN,KACA+G,EAAAzG,EAAAsH,WAcA,OAZA,UAAAN,EACAjC,EAAAgD,EAAA/H,EAAAA,EAAAnC,GAAA4I,EAAAgI,UAAAzO,EAAAnC,GAAA4I,EAAAiI,WAEAvJ,EAAA6B,EAAA,EAAAkF,IAEA,SAAA1G,EAAAA,EAAAiB,EAAAiD,SACAvE,EAAAK,EAAA,EAAA,GAEAxF,EAAA+G,EAAA,GAAAN,GAAAzG,GAAAgH,EAAAxB,GACAT,EAAAgD,EAAA/H,EAAAgH,GAAAhH,EAAAnC,GAAAmC,EAAAnC,GAAA4I,EAAAgI,SAAAzH,IAGAhH,EAAA0L,UAAA1L,EAAAgM,SAAA,IAAAjH,EAAAA,GAkBAnF,GAAA4T,oBAAA5T,GAAA6T,KAAA,SAAAzM,EAAAxB,GACA,GAAAxF,GAAAN,KACA+G,EAAAzG,EAAAsH,WAYA,OAVA,UAAAN,GACAA,EAAAP,EAAAE,UACAnB,EAAAiB,EAAAiD,WAEAvE,EAAA6B,EAAA,EAAAkF,IAEA,SAAA1G,EAAAA,EAAAiB,EAAAiD,SACAvE,EAAAK,EAAA,EAAA,IAGAuB,EAAA,GAAAN,GAAAzG,GAAAgH,EAAAxB,IAWA5F,GAAAsE,SAAA,WACA,GAAAlE,GAAAN,KACA+G,EAAAzG,EAAAsH,YACAvC,EAAAgD,EAAA/H,EAAAA,EAAAnC,GAAA4I,EAAAgI,UAAAzO,EAAAnC,GAAA4I,EAAAiI,SAEA,OAAA1O,GAAA0L,UAAA1L,EAAAgM,SAAA,IAAAjH,EAAAA,GAQAnF,GAAA8T,UAAA9T,GAAAqO,MAAA,WACA,MAAAlH,GAAA,GAAArH,MAAA4H,YAAA5H,MAAAA,KAAA7B,EAAA,EAAA,IASA+B,GAAAyE,QAAAzE,GAAA+T,OAAA,WACA,GAAA3T,GAAAN,KACA+G,EAAAzG,EAAAsH,YACAvC,EAAAgD,EAAA/H,EAAAA,EAAAnC,GAAA4I,EAAAgI,UAAAzO,EAAAnC,GAAA4I,EAAAiI,SAEA,OAAA1O,GAAA0L,QAAA,IAAA3G,EAAAA,EA6NA,IAAA4E,IAAA,WAGA,QAAAiK,GAAA5T,EAAA4E,EAAA4F,GACA,GAAAnH,GACA2O,EAAA,EACA3T,EAAA2B,EAAApB,MAEA,KAAAoB,EAAAA,EAAAkI,QAAA7J,KACAgF,EAAArD,EAAA3B,GAAAuG,EAAAoN,EACAhS,EAAA3B,GAAAgF,EAAAmH,EAAA,EACAwH,EAAA3O,EAAAmH,EAAA,CAKA,OAFAwH,IAAAhS,EAAAoM,QAAA4F,GAEAhS,EAGA,QAAA6T,GAAAzV,EAAAa,EAAA6U,EAAAC,GACA,GAAA1V,GAAAL,CAEA,IAAA8V,GAAAC,EACA/V,EAAA8V,EAAAC,EAAA,SAEA,KAAA1V,EAAAL,EAAA,EAAAK,EAAAyV,EAAAzV,IACA,GAAAD,EAAAC,IAAAY,EAAAZ,GAAA,CACAL,EAAAI,EAAAC,GAAAY,EAAAZ,GAAA,IACA,OAKA,MAAAL,GAGA,QAAAgW,GAAA5V,EAAAa,EAAA6U,EAAAtJ,GAIA,IAHA,GAAAnM,GAAA,EAGAyV,KACA1V,EAAA0V,IAAAzV,EACAA,EAAAD,EAAA0V,GAAA7U,EAAA6U,GAAA,EAAA,EACA1V,EAAA0V,GAAAzV,EAAAmM,EAAApM,EAAA0V,GAAA7U,EAAA6U,EAIA,OAAA1V,EAAA,IAAAA,EAAAQ,OAAA,GAAAR,EAAAkQ,QAGA,MAAA,UAAAtO,EAAAI,EAAAiI,EAAA7C,EAAAmK,EAAAnF,GACA,GAAAsE,GAAAjR,EAAAQ,EAAAuG,EAAAqP,EAAAC,EAAAC,EAAAC,EAAAtC,EAAAuC,EAAAC,EAAAC,EAAAC,EAAAxN,EAAAlJ,EAAA2W,EAAAC,EAAAC,EACAC,EAAAC,EACApO,EAAAzG,EAAAsH,YACApG,EAAAlB,EAAA/B,GAAAmC,EAAAnC,EAAA,KACAmJ,EAAApH,EAAAuB,EACA0N,EAAA7O,EAAAmB,CAGA,MAAA6F,GAAAA,EAAA,IAAA6H,GAAAA,EAAA,IAEA,MAAA,IAAAxI,GACAzG,EAAA/B,GAAAmC,EAAAnC,IAAAmJ,GAAA6H,GAAA7H,EAAA,IAAA6H,EAAA,GAAAA,GAGA7H,GAAA,GAAAA,EAAA,KAAA6H,EAAA,EAAA/N,EAAAA,EAAA,EAHA2G,IAsBA,KAhBA2C,GACAyJ,EAAA,EACApW,EAAAmC,EAAAnC,EAAAuC,EAAAvC,IAEA2M,EAAA/C,GACAwM,EAAAhP,GACApH,EAAAkL,GAAA/I,EAAAnC,EAAAoW,GAAAlL,GAAA3I,EAAAvC,EAAAoW,IAGAW,EAAA3F,EAAArQ,OACA8V,EAAAtN,EAAAxI,OACAkT,EAAA,GAAArL,GAAAvF,GACAmT,EAAAvC,EAAAvQ,KAIAlD,EAAA,EAAA4Q,EAAA5Q,KAAA+I,EAAA/I,IAAA,GAAAA,KAaA,GAXA4Q,EAAA5Q,IAAA+I,EAAA/I,IAAA,IAAAR,IAEA,MAAAwK,GACArB,EAAAqB,EAAA5B,EAAAE,UACAnB,EAAAiB,EAAAiD,UAEA1C,EADA2I,EACAtH,GAAArI,EAAAnC,EAAAuC,EAAAvC,GAAA,EAEAwK,EAGArB,EAAA,EACAqN,EAAA7M,KAAA,GACA0M,GAAA,MACA,CAOA,GAJAlN,EAAAA,EAAAiN,EAAA,EAAA,EACA5V,EAAA,EAGA,GAAAuW,EAAA,CAMA,IALAhQ,EAAA,EACAqK,EAAAA,EAAA,GACAjI,KAGA3I,EAAAqW,GAAA9P,IAAAoC,IAAA3I,IACAP,EAAA8G,EAAA4F,GAAApD,EAAA/I,IAAA,GACAgW,EAAAhW,GAAAP,EAAAmR,EAAA,EACArK,EAAA9G,EAAAmR,EAAA,CAGAiF,GAAAtP,GAAAvG,EAAAqW,MAGA,CAiBA,IAdA9P,EAAA4F,GAAAyE,EAAA,GAAA,GAAA,EAEArK,EAAA,IACAqK,EAAA2E,EAAA3E,EAAArK,EAAA4F,GACApD,EAAAwM,EAAAxM,EAAAxC,EAAA4F,GACAoK,EAAA3F,EAAArQ,OACA8V,EAAAtN,EAAAxI,QAGA6V,EAAAG,EACAN,EAAAlN,EAAAc,MAAA,EAAA0M,GACAL,EAAAD,EAAA1V,OAGA2V,EAAAK,GAAAN,EAAAC,KAAA,CAEAM,GAAA5F,EAAA/G,QACA2M,EAAAzI,QAAA,GACAuI,EAAA1F,EAAA,GAEAA,EAAA,IAAAzE,EAAA,KAAAmK,CAEA,GACA/P,GAAA,EAGAkK,EAAA+E,EAAA5E,EAAAqF,EAAAM,EAAAL,GAGAzF,EAAA,GAGA0F,EAAAF,EAAA,GACAM,GAAAL,IAAAC,EAAAA,EAAAhK,GAAA8J,EAAA,IAAA,IAGA1P,EAAA4P,EAAAG,EAAA,EAUA/P,EAAA,GACAA,GAAA4F,IAAA5F,EAAA4F,EAAA,GAGA2J,EAAAP,EAAA3E,EAAArK,EAAA4F,GACA4J,EAAAD,EAAAvV,OACA2V,EAAAD,EAAA1V,OAGAkQ,EAAA+E,EAAAM,EAAAG,EAAAF,EAAAG,GAGA,GAAAzF,IACAlK,IAGAoP,EAAAG,EAAAS,EAAAR,EAAAS,EAAA5F,EAAAmF,EAAA5J,MAOA,GAAA5F,IAAAkK,EAAAlK,EAAA,GACAuP,EAAAlF,EAAA/G,SAGAkM,EAAAD,EAAAvV,OACAwV,EAAAG,GAAAJ,EAAA/H,QAAA,GAGA4H,EAAAM,EAAAH,EAAAI,EAAA/J,GAGAsE,QACAyF,EAAAD,EAAA1V,OAGAkQ,EAAA+E,EAAA5E,EAAAqF,EAAAM,EAAAL,GAGAzF,EAAA,IACAlK,IAGAoP,EAAAM,EAAAM,EAAAL,EAAAM,EAAA5F,EAAAsF,EAAA/J,KAIA+J,EAAAD,EAAA1V,QACA,IAAAkQ,IACAlK,IACA0P,GAAA,IAIAD,EAAAhW,KAAAuG,EAGAkK,GAAAwF,EAAA,GACAA,EAAAC,KAAAnN,EAAAqN,IAAA,GAEAH,GAAAlN,EAAAqN,IACAF,EAAA,UAGAE,IAAAC,GAAA,SAAAJ,EAAA,KAAAtN,IAEAkN,GAAA,SAAAI,EAAA,GAIAD,EAAA,IAAAA,EAAA/F,QAIA,GAAA,GAAA2F,EACAnC,EAAAjU,EAAAA,EACAsO,GAAA+H,MACA,CAGA,IAAA7V,EAAA,EAAAuG,EAAAyP,EAAA,GAAAzP,GAAA,GAAAA,GAAA,GAAAvG,GACAyT,GAAAjU,EAAAQ,EAAAR,EAAAoW,EAAA,EAEAlN,EAAA+K,EAAAnC,EAAAtH,EAAAyJ,EAAAjU,EAAA,EAAAwK,EAAA7C,EAAA0O,GAGA,MAAApC,MAwzDA5G,IAAAjH,EAAAiH,IAGA1C,GAAA,GAAA0C,IAAA1C,IACApG,GAAA,GAAA8I,IAAA9I,IAOA,kBAAAoC,SAAAA,OAAAsQ,IACAtQ,OAAA,WACA,MAAA0G,MAIA,mBAAApM,IAAAA,EAAAJ,QACAI,EAAAJ,QAAAwM,GAAA,WAAAA,GAAAA,QAAAA,IAIAxG,IACAA,EAAA,mBAAAqQ,OAAAA,MAAAA,KAAAA,MAAAA,KACAA,KAAAC,SAAA,kBAGAzG,GAAA7J,EAAAwG,QACAA,GAAAqD,WAAA,WAEA,MADA7J,GAAAwG,QAAAqD,GACArD,IAGAxG,EAAAwG,QAAAA,KAEAxL,WD0uCMuV,GAAG,SAASrX,EAAQkB,EAAOJ,IE/4LjC,SAAAK,GAEA,YAcA,SAAAmW,GAAAC,GACA,GAAAC,GAAA,WACA,GAAA/R,GAAA9E,MAAA8W,MAAA3V,KAAAyO,UACA9K,GAAA8R,KAAAzV,KAAAyV,KAAAA,EACAzV,KAAA4V,MAAAjS,EAAAiS,MACA5V,KAAA6V,QAAAlS,EAAAkS,SAGAC,EAAA,YAIA,OAHAA,GAAAvU,UAAA1C,MAAA0C,UACAmU,EAAAnU,UAAA,GAAAuU,GAEAJ,EAMA,QAAAK,GAAA1X,EAAAE,GAKA,MAHA8C,OAAAhD,EAAA2X,SAAA3X,EAAA,MACA4X,IAEA5X,EAAAE,EAGA,QAAA0X,KACA,KAAA,IAAAC,GAkPA,QAAAC,GAAAzX,EAAAa,GAEA,MAAAS,gBAAAmW,IAIAlW,EAAAvB,EAAAa,GAGAb,EADAyX,EAAA,OACAC,EAAAlW,EAAA,EAAAA,EAAA,GAEA,EAGAF,KAAA,EAAAE,EAAA,EACAF,KAAA,EAAAE,EAAA,EAAAxB,OACAsB,KAAA,EAAAE,EAAA,EAAAxB,IAbA,GAAAyX,GAAAzX,EAAAa,GAzRA,GAAA8W,GAAA,IAGAnW,GACA3B,EAAA,EACAF,EAAA,EACAwD,EAAA,GAkBAyU,EAAAH,EAAA,eAAAX,EAAA,kBACAU,EAAAC,EAAA,iBAAAX,EAAA,oBAcAvV,EAAA,SAAAsW,EAAAC,GAEA,GAOAC,GAPApY,EAAA,EAAAwD,EAAA,EAAAtD,EAAA,EACAwO,EAAA,EAAAzH,EAAA,EAAAhF,EAAA,EAAAI,EAAA,EAAA6R,EAAA,EAEAmE,EAAA,EAAAC,EAAA,EACAC,EAAA,EAAAC,EAAA,EAEAC,EAAA,GAGA,IAAAhW,SAAAyV,GAAA,OAAAA,OAEA,IAAAzV,SAAA0V,EACAnY,EAAAkY,EACA1U,EAAA2U,EACAjY,EAAAF,EAAAwD,MAEA,cAAA0U,IAEA,IAAA,SAEA,KAAAA,IAAA,KAAAA,IACAlY,EAAAkY,EAAA,EACA1U,EAAA0U,EAAA,EACA,KAAAA,KACAlY,GAAAkY,EAAA,IACA,IAAAA,IACAlY,EAAAkY,EAAA,GACA,IAAAA,KACA1U,EAAA0U,EAAA,KAEAN,IAEA1X,EAAAF,EAAAwD,CACA,MAEA,KAAA,SAOA,GALA0U,EAAA,IACAhY,EAAAgY,EACAA,GAAAA,GAGAA,EAAA,IAAA,EACAlY,EAAAkY,MACA,IAAAA,EAAA,EAAA,CAUA,IARAA,GAAA,IACAhE,EAAA9S,KAAAqC,IAAA,GAAArC,KAAA2E,MAAA,EAAA3E,KAAAG,IAAA2W,GAAA9W,KAAAqJ,OACAyN,GAAAhE,GAMAoE,GAAAG,GAAAD,GAAAC,GAAA,CAGA,GAFAL,GAAAC,EAAAE,IAAAD,EAAAE,GAEAN,IAAAE,EAAA,CACAE,EAAAE,GAAAC,GACAzY,EAAAqY,EAAAE,EACA/U,EAAA8U,EAAAE,GACAA,EAAAF,GACAtY,EAAAuY,EACA/U,EAAAgV,IAEAxY,EAAAqY,EACA7U,EAAA8U,EAEA,OAIAJ,EAAAE,GACAC,GAAAE,EACAD,GAAAE,IAEAD,GAAAF,EACAG,GAAAF,GAGAA,EAAAG,GACAzY,EAAAuY,EACA/U,EAAAgV,IAEAxY,EAAAqY,EACA7U,EAAA8U,GAIAtY,GAAAkU,OACAlR,MAAAkV,IAAAlV,MAAAmV,MACA3U,EAAAxD,EAAA8J,IAEA,MAEA,KAAA,SA6CA,GA3CAwO,EAAAJ,EAAAtV,MAAA,UAEA,MAAA0V,EAAAD,IACAnY,KACAmY,KACA,MAAAC,EAAAD,IACAA,IAGAC,EAAAzX,SAAAwX,EAAA,EACApR,EAAAyQ,EAAAY,EAAAD,KAAAnY,GACA,MAAAoY,EAAAD,EAAA,IAAA,MAAAC,EAAAD,IAEA,MAAAC,EAAAD,KACA3J,EAAAgJ,EAAAY,EAAAD,KAAAnY,IAEAmY,KAGAA,EAAA,IAAAC,EAAAzX,QAAA,MAAAyX,EAAAD,EAAA,IAAA,MAAAC,EAAAD,EAAA,IAAA,MAAAC,EAAAD,EAAA,IAAA,MAAAC,EAAAD,EAAA,MACApR,EAAAyQ,EAAAY,EAAAD,GAAAnY,GACAmC,EAAAjB,KAAAqC,IAAA,GAAA6U,EAAAD,GAAAxX,QACAwX,MAIA,MAAAC,EAAAD,IAAA,MAAAC,EAAAD,EAAA,IAAA,MAAAC,EAAAD,IAAA,MAAAC,EAAAD,EAAA,MACApW,EAAAyV,EAAAY,EAAAD,EAAA,GAAAnY,GACAgU,EAAA9S,KAAAqC,IAAA,GAAA6U,EAAAD,EAAA,GAAAxX,QAAA,EACAwX,GAAA,IAGA,MAAAC,EAAAD,EAAA,IAAA,MAAAC,EAAAD,EAAA,IACApR,EAAAyQ,EAAAY,EAAAD,GAAAnY,GACAmC,EAAAqV,EAAAY,EAAAD,EAAA,GAAA,GACAA,GAAA,GACA,MAAAC,EAAAD,EAAA,IAAA,MAAAC,EAAAD,EAAA,KACA3J,EAAAgJ,EAAAY,EAAAD,GAAAnY,GACA+G,EAAAyQ,EAAAY,EAAAD,EAAA,GAAAnY,GACAmC,EAAAqV,EAAAY,EAAAD,EAAA,GAAA,GACAA,GAAA,GAGAC,EAAAzX,QAAAwX,EAAA,CACA7U,EAAAnB,EAAA6R,EACAhU,EACAF,EAAAiC,EAAAuB,EAAAkL,EAAAwF,EAAAjN,CACA,OAKA,QACA2Q,IAGA,GAAA,IAAApU,EACA,KAAA,IAAAyU,EAGApW,GAAA,EAAA3B,EAAA,KAAA,EACA2B,EAAA,EAAAT,KAAAC,IAAArB,GACA6B,EAAA,EAAAT,KAAAC,IAAAmC,IAGAkV,EAAA,SAAAxX,EAAApB,EAAAwR,GAEA,IAAA,GAAArR,GAAA,EAAAH,EAAA,EAAAoB,EAAAA,EAAAA,EAAAoQ,EAAAxR,IAAA,EAEA,EAAAA,IACAG,EAAAA,EAAAiB,EAAAoQ,EAGA,OAAArR,IAGA0Y,EAAA,SAAA3Y,EAAAwD,GAEA,KAAAA,EAAA,IAAA,EACAA,GAAA,GAEA,KAAAA,EAAA,IAAA,EACAA,GAAA,GAEA,GAAA,IAAAA,EACA,MAAA,EASA,KAAA,GAFA+S,GAAA,GAAA/S,EAEAzD,EAAA,EAAA,IAAAwW,EAAAxW,IAGA,GAFAwW,EAAA,GAAAA,EAAA/S,EAEAzD,EAAAiY,EACA,MAAA,EAEA,OAAAjY,IAGA6Y,EAAA,SAAA5Y,EAAAwD,EAAAmF,GAKA,IAAA,GAHAkQ,GAAA,EACAC,EAAAJ,EAAA,GAAA/P,EAAAnF,GAEAzD,EAAA,EAAAA,EAAA,IAAAA,IAAA,CAGA,GAAA8Y,IAAAC,EACA,MAAA/Y,EAEA8Y,GAAA,GAAAA,EAAArV,EACAsV,EAAA,GAAAA,EAAAtV,EAEA,MAAA,IAGAuU,EAAA,SAAA1X,EAAAa,GAEA,IAAAb,EAAA,MAAAa,EACA,KAAAA,EAAA,MAAAb,EAEA,QAAA,CAEA,GADAA,GAAAa,GACAb,EAAA,MAAAa,EAEA,IADAA,GAAAb,GACAa,EAAA,MAAAb,IAkCAyX,GAAA,OAAA,EAEAA,EAAA5U,WAEAhD,EAAA,EACAF,EAAA,EACAwD,EAAA,EAOAnC,IAAA,WAEA,MAAA,IAAAyW,GAAAnW,KAAA,EAAAA,KAAA,IAQAiE,IAAA,WAEA,MAAA,IAAAkS,IAAAnW,KAAA,EAAAA,KAAA,EAAAA,KAAA,IAQAyB,IAAA,SAAA/C,EAAAa,GAGA,MADAU,GAAAvB,EAAAa,GACA,GAAA4W,GACAnW,KAAA,EAAAA,KAAA,EAAAE,EAAA,EAAAA,EAAA,EAAAF,KAAA,EAAAE,EAAA,EACAF,KAAA,EAAAE,EAAA,IASAwB,IAAA,SAAAhD,EAAAa,GAGA,MADAU,GAAAvB,EAAAa,GACA,GAAA4W,GACAnW,KAAA,EAAAA,KAAA,EAAAE,EAAA,EAAAA,EAAA,EAAAF,KAAA,EAAAE,EAAA,EACAF,KAAA,EAAAE,EAAA,IASAyB,IAAA,SAAAjD,EAAAa,GAGA,MADAU,GAAAvB,EAAAa,GACA,GAAA4W,GACAnW,KAAA,EAAAE,EAAA,EAAAF,KAAA,EAAAE,EAAA,EACAF,KAAA,EAAAE,EAAA,IASA0B,IAAA,SAAAlD,EAAAa,GAGA,MADAU,GAAAvB,EAAAa,GACA,GAAA4W,GACAnW,KAAA,EAAAE,EAAA,EAAAF,KAAA,EAAAE,EAAA,EACAF,KAAA,EAAAE,EAAA,IASAqE,MAAA,WACA,MAAA,IAAA4R,GAAAnW,OAQAqO,IAAA,SAAA3P,EAAAa,GAEA,MAAA8B,OAAArB,KAAA,IAAAqB,MAAArB,KAAA,GACA,GAAAmW,GAAAhO,KAGArH,SAAApC,EACA,GAAAyX,GAAAnW,KAAA,EAAAA,KAAA,EAAAA,KAAA,EAAA,IAGAC,EAAAvB,EAAAa,GACA,IAAAW,EAAA,GAAA,IAAAF,KAAA,GACAmW,EAAA,EAAA,GAiBA,GAAAA,GACAnW,KAAA,EAAAE,EAAA,EAAAF,KAAA,GAAAE,EAAA,EAAAF,KAAA,GACAE,EAAA,EAAAF,KAAA,KASAoW,IAAA,SAAA1X,EAAAa,GAMA,MAJAU,GAAAvB,EAAAa,GAIA,GAAA4W,GAAAC,EAAAlW,EAAA,EAAAF,KAAA,GAAAE,EAAA,EAAAF,KAAA,EAAAoW,EAAAlW,EAAA,EAAAF,KAAA,KAQAoX,IAAA,SAAA1Y,EAAAa,GAMA,MAJAU,GAAAvB,EAAAa,GAIA,IAAAW,EAAA,GAAA,IAAAF,KAAA,EACA,GAAAmW,GAEA,GAAAA,GAAAjW,EAAA,EAAAF,KAAA,EAAAoW,EAAAlW,EAAA,EAAAF,KAAA,GAAAoW,EAAAlW,EAAA,EAAAF,KAAA,KAQAkE,KAAA,SAAAC,GAIA,MAFAA,GAAA1E,KAAAqC,IAAA,GAAAqC,GAAA,GAEA9C,MAAArB,KAAA,IAAAqB,MAAArB,KAAA,GACA,GAAAmW,GAAAhO,KAEA,GAAAgO,GAAA1W,KAAAyE,KAAAC,EAAAnE,KAAA,EAAAA,KAAA,EAAAA,KAAA,GAAAmE,IAQAC,MAAA,SAAAD,GAIA,MAFAA,GAAA1E,KAAAqC,IAAA,GAAAqC,GAAA,GAEA9C,MAAArB,KAAA,IAAAqB,MAAArB,KAAA,GACA,GAAAmW,GAAAhO,KAEA,GAAAgO,GAAA1W,KAAA2E,MAAAD,EAAAnE,KAAA,EAAAA,KAAA,EAAAA,KAAA,GAAAmE,IAQAE,MAAA,SAAAF,GAIA,MAFAA,GAAA1E,KAAAqC,IAAA,GAAAqC,GAAA,GAEA9C,MAAArB,KAAA,IAAAqB,MAAArB,KAAA,GACA,GAAAmW,GAAAhO,KAEA,GAAAgO,GAAA1W,KAAA4E,MAAAF,EAAAnE,KAAA,EAAAA,KAAA,EAAAA,KAAA,GAAAmE,IAQAJ,QAAA,WAEA,MAAA,IAAAoS,GAAAnW,KAAA,EAAAA,KAAA,EAAAA,KAAA,IAQA8B,IAAA,SAAA6N,GAEA,MAAAA,GAAA,EACA,GAAAwG,GAAA1W,KAAAqC,IAAA9B,KAAA,EAAAA,KAAA,GAAA2P,GAAAlQ,KAAAqC,IAAA9B,KAAA,GAAA2P,IAEA,GAAAwG,GAAA1W,KAAAqC,IAAA9B,KAAA,EAAAA,KAAA,EAAA2P,GAAAlQ,KAAAqC,IAAA9B,KAAA,EAAA2P,KASArL,OAAA,SAAA5F,EAAAa,GAGA,MADAU,GAAAvB,EAAAa,GACAS,KAAA,EAAAA,KAAA,EAAAE,EAAA,IAAAA,EAAA,EAAAA,EAAA,EAAAF,KAAA,GAQAmU,QAAA,SAAAzV,EAAAa,GAEAU,EAAAvB,EAAAa,EACA,IAAAnB,GAAA4B,KAAA,EAAAA,KAAA,EAAAE,EAAA,EAAAA,EAAA,EAAAA,EAAA,EAAAF,KAAA,CACA,QAAA,EAAA5B,IAAAA,EAAA,IAQAiZ,UAAA,SAAA3Y,EAAAa,GAGA,MADAU,GAAAvB,EAAAa,OACAW,EAAA,EAAAF,KAAA,IAAAA,KAAA,EAAAE,EAAA,GAAAA,EAAA,EAAAF,KAAA,KAQA2E,QAAA,WAEA,MAAA3E,MAAA,EAAAA,KAAA,EAAAA,KAAA,GAQA+S,WAAA,SAAAuE,GAEA,GAAAC,GAAAlS,EAAA,GACAhH,EAAA2B,KAAA,EACA6B,EAAA7B,KAAA,CAmBA,OAlBAA,MAAA,EAAA,IACAqF,GAAA,KAGA,IAAAxD,EACAwD,GAAAhH,GAGAiZ,IAAAC,EAAA9X,KAAA2E,MAAA/F,EAAAwD,IAAA,IACAwD,GAAAkS,EACAlS,GAAA,IACAhH,GAAAwD,GAGAwD,GAAAhH,EACAgH,GAAA,IACAA,GAAAxD,GAEAwD,GAQAmS,QAAA,SAAAF,GAEA,GAAAC,GAAAlS,EAAA,GACAhH,EAAA2B,KAAA,EACA6B,EAAA7B,KAAA,CAoBA,OAnBAA,MAAA,EAAA,IACAqF,GAAA,KAGA,IAAAxD,EACAwD,GAAAhH,GAGAiZ,IAAAC,EAAA9X,KAAA2E,MAAA/F,EAAAwD,IAAA,IACAwD,GAAAkS,EACAlZ,GAAAwD,GAGAwD,GAAA,UACAA,GAAAhH,EACAgH,GAAA,KACAA,GAAAxD,EACAwD,GAAA,KAEAA,GAQAoS,YAAA,WAEA,GAAArZ,GACAM,EAAAsB,KAAA,EACAT,EAAAS,KAAA,EACAqD,IAEA,GACAA,GAAAyE,KAAArI,KAAA2E,MAAA1F,EAAAa,IACAnB,EAAAM,EAAAa,EACAb,EAAAa,EACAA,EAAAnB,QACA,IAAAM,EAEA,OAAA2E,IAQAmB,SAAA,WAEA,GAAAkT,GACAZ,EAAA9W,KAAA,EACA6W,EAAA7W,KAAA,CAEA,IAAAqB,MAAAyV,IAAAzV,MAAAwV,GACA,MAAA,KAGAV,GAAA,SACAuB,EAAAtB,EAAAU,EAAAD,GACAC,GAAAY,EACAb,GAAAa,EAGA,IAAAC,GAAA,GAEAC,EAAAZ,EAAAF,EAAAD,GACAgB,EAAAZ,EAAAH,EAAAD,EAAAe,GAEAvS,EAAArF,KAAA,OAAA,IAAA,EAUA,IARAqF,GAAAyR,EAAAD,EAAA,EAEAC,GAAAD,EACAC,GAAA,GAEAA,IACAzR,GAAA,KAEAuS,EAAA,CAEA,IAAA,GAAAjZ,GAAAkZ,EAAAlZ,KACA0G,GAAAyR,EAAAD,EAAA,EACAC,GAAAD,EACAC,GAAA,EAEAzR,IAAA,GACA,KAAA,GAAA1G,GAAAiZ,EAAAjZ,KACA0G,GAAAyR,EAAAD,EAAA,EACAC,GAAAD,EACAC,GAAA,EAEAzR,IAAA,QAEA,KAAA,GAAA1G,GAAAgZ,EAAAb,GAAAnY,KACA0G,GAAAyR,EAAAD,EAAA,EACAC,GAAAD,EACAC,GAAA,EAGA,OAAAzR,KAIA,kBAAAP,SAAAA,OAAA,IACAA,UAAA,WACA,MAAAqR,KAEA,gBAAAnX,GACAI,EAAA,QAAA+W,EAEA9W,EAAA,SAAA8W,GAGAnW,WFy7LM8X,GAAG,SAAS5Z,EAAQkB,EAAOJ,GGhsNjCI,EAAAJ,QAAA,QAAA+Y,GAAArZ,EAAAa,GACA,YACA,IAeAyY,GAAAC,EAfA9X,EAAA,8EACA+X,EAAA,iBACAC,EAAA,iHACAC,EAAA,iBACAC,EAAA,KACA1Z,EAAA,SAAAJ,GAAA,MAAAwZ,GAAAO,cAAA,GAAA/Z,GAAA8M,eAAA,GAAA9M,GAEA+B,EAAA3B,EAAAD,GAAA+L,QAAAyN,EAAA,KAAA,GACAxX,EAAA/B,EAAAY,GAAAkL,QAAAyN,EAAA,KAAA,GAEAK,EAAAjY,EAAAmK,QAAAtK,EAAA,UAAAsK,QAAA,MAAA,IAAAA,QAAA,MAAA,IAAA+N,MAAA,MACAC,EAAA/X,EAAA+J,QAAAtK,EAAA,UAAAsK,QAAA,MAAA,IAAAA,QAAA,MAAA,IAAA+N,MAAA,MAEAE,EAAA1C,SAAA1V,EAAAW,MAAAmX,GAAA,KAAA,IAAAG,EAAArZ,QAAAoB,EAAAW,MAAAkX,IAAAQ,KAAA1Y,MAAAK,GACAsY,EAAA5C,SAAAtV,EAAAO,MAAAmX,GAAA,KAAAM,GAAAhY,EAAAO,MAAAkX,IAAAQ,KAAA1Y,MAAAS,IAAA,IAGA,IAAAkY,EAAA,CACA,GAAAF,EAAAE,EAAA,QACA,IAAAF,EAAAE,EAAA,MAAA,GAGA,IAAA,GAAAC,GAAA,EAAAC,EAAArZ,KAAAkG,IAAA4S,EAAArZ,OAAAuZ,EAAAvZ,QAAA2Z,EAAAC,EAAAD,IAAA,CAKA,GAHAb,IAAAO,EAAAM,IAAA,IAAA5X,MAAAoX,IAAA/W,WAAAiX,EAAAM,KAAAN,EAAAM,IAAA,EACAZ,IAAAQ,EAAAI,IAAA,IAAA5X,MAAAoX,IAAA/W,WAAAmX,EAAAI,KAAAJ,EAAAI,IAAA,EAEAxX,MAAA2W,KAAA3W,MAAA4W,GAAA,MAAA5W,OAAA2W,GAAA,IAMA,UAJAA,UAAAC,KACAD,GAAA,GACAC,GAAA,IAEAD,EAAAC,EAAA,QACA,IAAAD,EAAAC,EAAA,MAAA,GAEA,MAAA,SHysNMc,GAAG,SAAS7a,EAAQkB,EAAOJ,GIpvNjCI,EAAAJ,QAAAd,EAAA,qBJsvNG8a,kBAAkB,IAAIC,GAAG,SAAS/a,EAAQkB,EAAOJ,GKtvNpD,GAAAka,GAAAhb,EAAA,qBAAAgb,UACAC,EAAAjb,EAAA,WACAkb,EAAAlb,EAAA,sBAEAmb,EAAAnb,EAAA,qBACAob,EAAApb,EAAA,oBA+BAc,GAAAua,OAAA,SAAAC,GAuDA,QAAAC,GAAAC,GACA,IAAAR,EAAAQ,GACA,KAAA,IAAA7a,OAAA,wEAGA,IACA8a,GADAC,EAAAC,EAAAlT,QAAA+S,EAqBA,OAnBAE,SAIAD,EAFAD,EAAAI,QAAA,EAEAJ,EAAAA,QAAAI,EAAAC,KAAAC,EAAAP,EAAAK,EAAAG,MAAAH,GAGAJ,EAAAA,QAAAI,EAAAC,KAAAC,EAAAP,EAAAK,EAAAG,OAIAJ,EAAA/R,KAAA4R,GACAQ,EAAApS,KAAA6R,IAIAA,EAAAO,EAAAN,GAGAD,EA/EA,GAAA,kBAAAQ,QAAAZ,OACA,KAAA,IAAA1a,OAAA,gHAKA,IAAAgb,MACAK,KAGAJ,EAAAV,EAAAgB,SACAN,GAAAC,QACAD,EAAAO,YACAC,aACAC,sBAIAT,EAAAG,MAAAd,EAAAI,OAAAO,EAAAC,KAGA,IAAAC,IAGAQ,QAAA,MAGAC,OAAA,SAGAC,OAAA,SAGAzT,UAAA,GAMA0T,aAAA,EAIAC,WAAA,KAiDA,OATAd,GAAA,UAAAL,EAAAJ,GACAS,EAAA,OAAAL,EAAAH,GACAQ,EAAAO,WAAAE,kBAAA,OAAAT,EAAA,OAGAN,GACAM,EAAAlN,OAAA4M,GAGAM,KL0vNGe,qBAAqB,IAAIC,oBAAoB,IAAIC,oBAAoB,EAAEC,oBAAoB,EAAEC,UAAU,IAAIC,GAAG,SAAShd,EAAQkB,EAAOJ,GM53NzI,YAIA,SAAA0a,GAAAK,EAAAnN,EAAA6M,EAAAQ,EAAAH,GAsCA,QAAAE,GAAAR,GACA,GAAAA,EAAA,CACA,GAAA2B,GAAAC,EAAAC,IAAAzO,EAAAwO,EAAA7W,MAGA+W,GAAA9B,EAAA,SAAA+B,GACAD,EAAA9B,EAAA,SAAAgC,GAGAJ,EAAAK,WAAA7O,EAAA4M,EAEA,IAAAkC,GAAAN,EAAAC,IAAAzO,EAAAwO,EAAA7W,OAEAoX,EAAAP,EAAAC,IAAA7B,EAAA4B,EAAA7W,MAKA,OAFAuV,GAAA8B,KAAA,SAAAF,EAAAP,EAAAQ,GAEAD,EAGA,MAAAN,GAAAC,IAAAzO,EAAAwO,EAAA7W,OA1DA,GAAAgX,IAAA,SAAA,SACAC,GAAA,SAAA,YAAA,WAiEA,OAHAxB,GAAAuB,OAAAA,EACAvB,EAAAwB,OAAAA,EAEAxB,EASA,QAAA6B,GAAAC,EAAAC,GACA,MAAAD,GAAAnV,QAAAoV,QASA,QAAAC,GAAAF,EAAAC,GACA,MAAAD,GACAT,IAAA,SAAA1c,GACA,MAAAA,GAAA0M,gBAEA1E,QAAAoV,EAAA1Q,eASA,QAAAiQ,GAAA9B,EAAA/D,EAAAwG,GACA,GAAAnb,SAAA0Y,EAAA/D,KAAAoG,EAAAI,EAAAzC,EAAA/D,IAAA,CACA,GAAAmE,GAAAoC,EAAAC,EAAAzC,EAAA/D,GACAmE,SAGAsC,QAAAC,KAAA,mDAAA1G,EAAA,iBAAAwG,EAAArC,GAAA,iBAAAJ,EAAA/D,GAAA,MAEA+D,EAAA/D,GAAAwG,EAAArC,IAIAsC,QAAAC,KAAA,2BAAA3C,EAAA/D,GAAA,+BAAAA,EAAA,yBAAAwG,EAAAZ,IAAAe,KAAAC,WAAAC,KAAA,MAAA,MAlHA,GAAAlB,GAAAld,EAAA,qBAuHAc,GAAAyW,KAAA,SACAzW,EAAA8a,MAAA,EACA9a,EAAA0a,QAAAA,IN+3NG6C,qBAAqB,MAAMC,GAAG,SAASte,EAAQkB,EAAOJ,GO1/NzD,YAOA,SAAA0a,GAAAK,EAAAnN,EAAA6M,EAAAQ,EAAAH,GAgDA,QAAA2C,GAAArB,EAAA5B,GACA,GAAAtH,GAAAzD,UAAAvP,MACA,IAAA,IAAAgT,GAAA,IAAAA,EACA,KAAA,IAAAwK,GAAA,SAAAxK,EAAA,EAAA,EAOA,IAJAsH,IACAA,MAGAN,EAAAkC,GACAuB,EAAAvB,EAAA5B,OAGA,IAAAoD,MAAAC,QAAAzB,GACAA,EAAA0B,QAAA,SAAAC,GACAN,EAAAM,EAAAvD,SAGA,IAAA,gBAAA4B,IAEA,IAAA,GAAA3F,KAAA2F,GACA,GAAAA,EAAA5M,eAAAiH,GAAA,CACA,GAAAuH,GAAA5B,EAAA3F,EACAwH,GAAAD,GACAE,EAAAzH,EAAAuH,EAAAxD,GAEAN,EAAAkC,GACAuB,EAAAvB,EAAA5B,GAGAiD,EAAAO,EAAAxD,QAMA,KAAAA,EAAA2D,OACA,KAAA,IAAAC,WAAA,sCAYA,QAAAF,GAAAzH,EAAAuH,EAAAxD,GAOA,GALAA,EAAA6D,MAAA,kBAAAL,KAEAA,EAAAM,EAAAN,IAGAO,EAAAzD,EAAArE,KAAA8H,EAAAP,GAeA,MAZAA,GAFAxD,EAAAgE,SAEAvD,EAAAxE,EAAAuH,EAAAS,YAIAxD,EAAAH,EAAArE,GAAAuH,GAGAlD,EAAArE,GAAAuH,EACAU,EAAAjI,EAAAuH,OACAlD,GAAA8B,KAAA,SAAAnG,EAAA,WACA,MAAAuH,IAKA,IAAAlc,SAAAgZ,EAAArE,IAAA+D,EAAAgE,SAMA,MALA1D,GAAArE,GAAAuH,EACAU,EAAAjI,EAAAuH,OACAlD,GAAA8B,KAAA,SAAAnG,EAAA,WACA,MAAAuH,IAKA,KAAAxD,EAAA2D,OACA,KAAA,IAAAte,OAAA,kBAAA4W,EAAA,qBAIA,QAAAiI,GAAAjI,EAAAuH,GACAA,GAAA,kBAAAA,GAAA1C,WACAR,EAAAO,WAAAC,UAAA7E,GAAAuH,EAAA1C,UACAqD,EAAAlI,KACAqE,EAAAO,WAAAE,kBAAA9E,GAAAuH,EAAA1C,mBAKAR,GAAAO,WAAAC,UAAA7E,GACAkI,EAAAlI,KACAqE,EAAAO,WAAAE,kBAAA9E,GAAAuH,IAYA,QAAAM,GAAAM,GACA,GAAAC,GAAA,WAEA,IAAA,GADArU,MACA7K,EAAA,EAAAqI,EAAAyH,UAAAvP,OAAAP,EAAAqI,EAAArI,IAAA,CACA,GAAAoD,GAAA0M,UAAA9P,EACA6K,GAAA7K,GAAAoD,GAAAA,EAAA4C,UAEA,MAAAiZ,GAAAjI,MAAAmE,EAAAtQ,GAOA,OAJAoU,GAAAtD,YACAuD,EAAAvD,UAAAsD,EAAAtD,WAGAuD,EASA,QAAAlB,GAAAjD,EAAAF,GACA,GAAA,gBAAAE,GAAAjE,KAAA,CACA,GAAAA,GAAAiE,EAAAjE,KACAqI,EAAArI,IAAAqE,GAAAO,WAAAC,UACAyD,EAAArE,EAAAsE,KAAAC,EAAAnE,EAAAJ,EAAAsE,MAAAlE,EACAoE,EAAAH,EAAAvP,eAAAiH,GAAAsI,EAAAtI,GAAA3U,OAEAqd,EAAA,WACA,GAAAxE,GAAAF,EAAAC,EACA,IAAAC,GAAA,kBAAAA,GAAAW,UACA,KAAA,IAAAzb,OAAA,wIAIA,IAAA0e,EAAAW,IAAAX,EAAA5D,GASA,MARAH,GAAAgE,WAKA7D,EAAAM,EAAAiE,EAAAvE,IAGAA,CAGA,IAAA7Y,SAAAod,GAAA1E,EAAAgE,SACA,MAAA7D,EAGA,KAAAH,EAAA2D,OACA,KAAA,IAAAte,OAAA,kBAAA4W,EAAA,qBAIAiE,GAAA0E,QAAA,GACAA,EAAAL,EAAAtI,EAAA0I,GAEAL,IACA,yBAAApE,EAAAsE,MAAAK,EAAA3E,KACA0E,EAAAtE,EAAAO,WAAAE,kBAAA9E,EAAA0I,KAKAJ,EAAAtI,GAAA0I,IAEAL,IACA,yBAAApE,EAAAsE,MAAAK,EAAA3E,MACAI,EAAAO,WAAAE,kBAAA9E,GAAA0I,MAKArE,EAAA8B,KAAA,SAAAnG,EAAA0I,EAAAzE,EAAAsE,UAKAvE,GAAAC,GAUA,QAAAuD,GAAA7B,GACA,MAAA,kBAAAA,IACA,gBAAAA,IACA,gBAAAA,IACA,iBAAAA,IACA,OAAAA,GACAA,GAAAA,EAAAkD,UAAA,GACAlD,GAAAA,EAAAmD,aAAA,GACAnD,GAAAA,EAAAoD,eAAA,GACApD,GAAAA,EAAAqD,cAAA,GACArD,GAAAA,EAAAsD,YAAA,GACAtD,GAAAwB,MAAAC,QAAAzB,MAAA,EAQA,QAAAmC,GAAAK,GACA,MAAA,kBAAAA,IAAA,gBAAAA,GAAAH,WAGA,QAAAE,GAAAlI,GACA,OAAAkJ,EAAAnQ,eAAAiH,GAGA,QAAA4I,GAAA3E,GACA,MAAA5Y,UAAA4Y,EAAAsE,OAAAW,EAAAnQ,eAAAkL,EAAAjE,MAIA,GAAAkJ,IACAtE,YAAA,EACAN,MAAA,EACA6E,MAAA,EACAC,OAAA,EACAC,MAAA,EACAC,OAAA,EAGA,OAAAtC,GA1SA,GAAA2B,GAAAlgB,EAAA,sBAAAkgB,KACAlF,EAAAhb,EAAA,sBAAAgb,UACA+E,EAAA/f,EAAA,sBAAA+f,SACAvB,EAAAxe,EAAA,6BA0SAc,GAAA8a,MAAA,EACA9a,EAAAyW,KAAA,SACAzW,EAAA0a,QAAAA,EACA1a,EAAAof,MAAA,IP6/NGY,6BAA6B,GAAGzC,qBAAqB,MAAM0C,GAAG,SAAS/gB,EAAQkB,EAAOJ,GQ/yOzF,GAAAkgB,GAAAhhB,EAAA,kBACAsJ,EAAAtJ,EAAA,qBAAAsJ,OAGA2X,EAAA,WAIA,MADAA,GAAAD,EAAA3F,OACA2F,EAQAlgB,GAAAua,OAAA,SAAAQ,GAIA,GAAAE,GAAAkF,GAuNA,OAlNAlF,GAAAmF,QACA3J,KAAA,SAAArK,KAAA,SAAA9K,GAAA,MAAA,gBAAAA,MACAmV,KAAA,UAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAie,aACA9I,KAAA,YAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAke,eACA/I,KAAA,WAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAme,cACAhJ,KAAA,OAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAge,UACA7I,KAAA,SAAArK,KAAA,SAAA9K,GAAA,MAAA,gBAAAA,MACAmV,KAAA,QAAArK,KAAAwR,MAAAC,UACApH,KAAA,SAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAoe,YACAjJ,KAAA,cAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAA+e,iBACA5J,KAAA,eAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAgf,kBACA7J,KAAA,QAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAif,WACA9J,KAAA,QAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAkf,WACA/J,KAAA,UAAArK,KAAA,SAAA9K,GAAA,MAAA,iBAAAA,MACAmV,KAAA,YAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAmf,eACAhK,KAAA,OAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAof,UACAjK,KAAA,WAAArK,KAAA,SAAA9K,GAAA,MAAA,kBAAAA,MACAmV,KAAA,OAAArK,KAAA,SAAA9K,GAAA,MAAAA,aAAAqY,SACAlD,KAAA,SAAArK,KAAA,SAAA9K,GAAA,MAAAA,aAAAqf,WACAlK,KAAA,SAAArK,KAAA,SAAA9K,GAAA,MAAA,gBAAAA,MACAmV,KAAA,OAAArK,KAAA,SAAA9K,GAAA,MAAA,QAAAA,KACAmV,KAAA,YAAArK,KAAA,SAAA9K,GAAA,MAAAQ,UAAAR,KAEAmV,KAAA,eAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAsf,kBACAnK,KAAA,eAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAuf,kBACApK,KAAA,aAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAwf,gBACArK,KAAA,kBAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAyf,qBACAtK,KAAA,eAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAA0f,kBACAvK,KAAA,yBAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAA2f,4BACAxK,KAAA,YAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAA4f,eACAzK,KAAA,iBAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAA6f,oBACA1K,KAAA,YAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAA8f,eACA3K,KAAA,kBAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAA+f,qBACA5K,KAAA,YAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAggB,eACA7K,KAAA,YAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAigB,eACA9K,KAAA,aAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAkgB,gBACA/K,KAAA,OAAArK,KAAA,SAAA9K,GAAA,MAAAA,IAAAA,EAAAmgB,UAIAxG,EAAAyG,cAEAC,KAAA,SACAC,GAAA,YACAC,QAAA,SAAAvgB,GAEA,GAAAkH,EAAAlH,GAAA,GACA,KAAA,IAAA8c,WAAA,uFACA9c,EAAA,wDAGA,OAAA,IAAAyZ,GAAA+G,UAAAxgB,MAGAqgB,KAAA,SACAC,GAAA,UACAC,QAAA,SAAAvgB,GACA,MAAA,IAAAyZ,GAAAha,QAAAO,EAAA,MAGAqgB,KAAA,SACAC,GAAA,SACAC,QAAA,SAAAvgB,GACA,MAAAA,GAAA,MAGAqgB,KAAA,YACAC,GAAA,UACAC,QAAA,SAAAvgB,GACA,MAAA,IAAAyZ,GAAAha,QAAAO,EAAAmT,WAAA,MAGAkN,KAAA,WACAC,GAAA,YACAC,QAAA,SAAAvgB,GACA,KAAA,IAAA8c,WAAA,gKAIAuD,KAAA,WACAC,GAAA,UACAC,QAAA,SAAAvgB,GACA,MAAA,IAAAyZ,GAAAha,QAAAO,EAAAqE,UAAA,MAGAgc,KAAA,SACAC,GAAA,WACAC,QAAA,SAAAvgB,GACA,GAAA1B,GAAA,GAAAmb,GAAA5D,SAAA7V,EACA,IAAA1B,EAAA+F,YAAArE,EACA,KAAA,IAAA8c,WAAA,mGACA9c,EAAA,sDAGA,OAAA,IAAAyZ,GAAA5D,SAAA7V,MAUAqgB,KAAA,SACAC,GAAA,SACAC,QAAA,SAAAvgB,GACA,GAAAjC,GAAA0iB,OAAAzgB,EACA,IAAAe,MAAAhD,GACA,KAAA,IAAAQ,OAAA,mBAAAyB,EAAA,gBAEA,OAAAjC,MAGAsiB,KAAA,SACAC,GAAA,YACAC,QAAA,SAAAvgB,GACA,IACA,MAAA,IAAAyZ,GAAA+G,UAAAxgB,GAEA,MAAA0gB,GACA,KAAA,IAAAniB,OAAA,mBAAAyB,EAAA,sBAIAqgB,KAAA,SACAC,GAAA,WACAC,QAAA,SAAAvgB,GACA,IACA,MAAA,IAAAyZ,GAAA5D,SAAA7V,GAEA,MAAA0gB,GACA,KAAA,IAAAniB,OAAA,mBAAAyB,EAAA,qBAIAqgB,KAAA,SACAC,GAAA,UACAC,QAAA,SAAAvgB,GACA,IACA,MAAA,IAAAyZ,GAAAha,QAAAO,GAEA,MAAA0gB,GACA,KAAA,IAAAniB,OAAA,mBAAAyB,EAAA,oBAIAqgB,KAAA,UACAC,GAAA,SACAC,QAAA,SAAAvgB,GACA,OAAAA,KAGAqgB,KAAA,UACAC,GAAA,YACAC,QAAA,SAAAvgB,GACA,MAAA,IAAAyZ,GAAA+G,YAAAxgB,OAGAqgB,KAAA,UACAC,GAAA,WACAC,QAAA,SAAAvgB,GACA,MAAA,IAAAyZ,GAAA5D,WAAA7V,OAGAqgB,KAAA,UACAC,GAAA,SACAC,QAAA,SAAAvgB,GACA,OAAAA,KAGAqgB,KAAA,OACAC,GAAA,SACAC,QAAA,WACA,MAAA,MAGAF,KAAA,OACAC,GAAA,SACAC,QAAA,WACA,MAAA,UAGAF,KAAA,OACAC,GAAA,YACAC,QAAA,WACA,MAAA,IAAA9G,GAAA+G,UAAA,MAGAH,KAAA,OACAC,GAAA,WACAC,QAAA,WACA,MAAA,IAAA9G,GAAA5D,SAAA,MAGAwK,KAAA,QACAC,GAAA,SACAC,QAAA,SAAA/E,GAEA,MAAA,IAAA/B,GAAAkH,YAAAnF,MAGA6E,KAAA,SACAC,GAAA,QACAC,QAAA,SAAApG,GACA,MAAAA,GAAA9V,aAKAsV,KRmzOGiH,oBAAoB,IAAIC,iBAAiB,MAAMC,IAAI,SAASljB,EAAQkB,EAAOJ,GS9hP9E,YAWA,SAAA0d,GAAAkB,EAAAyD,EAAA3b,EAAAC,GACA,KAAA3F,eAAA0c,IACA,KAAA,IAAA7b,aAAA,mDAGAb,MAAA4d,GAAAA,EACA5d,KAAAqhB,MAAAA,EACArhB,KAAA0F,IAAAA,EACA1F,KAAA2F,IAAAA,EAEA3F,KAAA6V,QAAA,yCAAA+H,EACA,KAAAyD,EAAA,cACA3b,GAAA5E,QAAA6E,EAAA,IAAAA,EAAA,IAAA,aAEA3F,KAAA4V,OAAA,GAAA/W,QAAA+W,MAGA8G,EAAAnb,UAAA,GAAA1C,OACA6d,EAAAnb,UAAAqG,YAAA/I,MACA6d,EAAAnb,UAAAkU,KAAA,iBACAiH,EAAAnb,UAAA+f,kBAAA,EAEAliB,EAAAJ,QAAA0d,OTiiPM6E,IAAI,SAASrjB,EAAQkB,EAAOJ,GUlkPlC,YAWA,SAAAwiB,GAAAC,EAAAC,EAAAC,GACA,KAAA3hB,eAAAwhB,IACA,KAAA,IAAA3gB,aAAA,mDAGAb,MAAAyhB,OAAAA,EACAzhB,KAAA0hB,SAAAA,EACA1hB,KAAA2hB,SAAAA,EAEA3hB,KAAA6V,QAAA,wBACA+G,MAAAC,QAAA4E,GAAA,IAAAA,EAAAnF,KAAA,MAAA,IAAAmF,GACA,KAAAzhB,KAAA2hB,UAAA,MAAA,KACA/E,MAAAC,QAAA6E,GAAA,IAAAA,EAAApF,KAAA,MAAA,IAAAoF,GACA,IAEA1hB,KAAA4V,OAAA,GAAA/W,QAAA+W,MAGA4L,EAAAjgB,UAAA,GAAAqgB,YACAJ,EAAAjgB,UAAAqG,YAAAga,WACAJ,EAAAjgB,UAAAkU,KAAA,iBACA+L,EAAAjgB,UAAAsgB,kBAAA,EAEAziB,EAAAJ,QAAAwiB,OVqkPMM,IAAI,SAAS5jB,EAAQkB,EAAOJ,GWvmPlC,YAYA,SAAA+iB,GAAAnI,EAAAlU,EAAAC,GACA,KAAA3F,eAAA+hB,IACA,KAAA,IAAAlhB,aAAA,mDAGAb,MAAA4Z,MAAAA,EACAnL,UAAAvP,OAAA,GACAc,KAAA0F,IAAA,EACA1F,KAAA2F,IAAAD,IAGA1F,KAAA0F,IAAAA,EACA1F,KAAA2F,IAAAA,GAGA7E,SAAAd,KAAA0F,KAAA1F,KAAA4Z,MAAA5Z,KAAA0F,IACA1F,KAAA6V,QAAA,uBAAA7V,KAAA4Z,MAAA,MAAA5Z,KAAA0F,IAAA,IAEA5E,SAAAd,KAAA2F,KAAA3F,KAAA4Z,OAAA5Z,KAAA2F,IACA3F,KAAA6V,QAAA,uBAAA7V,KAAA4Z,MAAA,OAAA5Z,KAAA2F,IAAA,GAAA,IAGA3F,KAAA6V,QAAA,uBAAA7V,KAAA4Z,MAAA,IAGA5Z,KAAA4V,OAAA,GAAA/W,QAAA+W,MAGAmM,EAAAxgB,UAAA,GAAAqgB,YACAG,EAAAxgB,UAAAqG,YAAAga,WACAG,EAAAxgB,UAAAkU,KAAA,aACAsM,EAAAxgB,UAAAygB,cAAA,EAEA5iB,EAAAJ,QAAA+iB,OX0mPME,IAAI,SAAS/jB,EAAQkB,EAAOJ,GYvpPlC,YAKA,SAAA0a,GAAAK,EAAAnN,EAAA6M,EAAAQ,GAcA,QAAAiI,GAAAC,GACA,KAAAniB,eAAAkiB,IACA,KAAA,IAAArhB,aAAA,mDAGA,KAAAshB,EAAA,KAAA,IAAAtjB,OAAA,yBAEAmB,MAAAmiB,IAAAA,EApBA,GAAAC,GAAA3I,EAAAvb,EAAA,uBAyGA,OA/EAgkB,GAAA3gB,UAAAwY,KAAA,OACAmI,EAAA3gB,UAAAme,QAAA,EAOAwC,EAAA3gB,UAAAiD,SAAA,WACA,GAAA2d,GAAAniB,KAAAmiB,QACAE,EAAA,IAcA,IAZAF,EAAA1M,OACA4M,GAAA,SAAAF,EAAA1M,KAAA,QAEA0M,EAAAG,WACAD,GAAA,aAAAF,EAAAG,SAAA,QAEAH,EAAAI,cACAF,GAAA,qBAAAF,EAAAI,YAAA,QAEAJ,EAAAK,SACAH,GAAA,gBAAAF,EAAAK,OAAAlG,KAAA,UAAA,QAEA6F,EAAAM,SAAA,CACAJ,GAAA,aACA,KAAA,GAAA1jB,GAAA,EAAAA,EAAAwjB,EAAAM,SAAAvjB,OAAAP,IAAA,CACA,GAAA+jB,GAAAP,EAAAM,SAAA9jB,EACA0jB,IAAA,OAAAK,EAAA,IAEA,IAAArf,EACA,KACAA,EAAA+e,EAAAO,KAAAD,GAEA,MAAAvkB,GACAkF,EAAAlF,EAEAkF,IAAAA,EAAAqc,SACA2C,GAAA,WAAAO,EAAAC,OAAAxf,GAAA4D,UAAA,KAAA,MAGAob,GAAA,KAMA,MAJAF,GAAAW,UACAT,GAAA,aAAAF,EAAAW,QAAAxG,KAAA,MAAA,MAGA+F,GAMAH,EAAA3gB,UAAA0S,OAAA,WACA,GAAApH,GAAAuO,EAAA7W,MAAAvE,KAAAmiB,IAEA,OADAtV,GAAAkW,OAAA,OACAlW,GAQAqV,EAAAc,SAAA,SAAAlE,GACA,GAAAqD,KACA,KAAA,GAAAc,KAAAnE,GACA,WAAAmE,IACAd,EAAAc,GAAAnE,EAAAmE,GAGA,OAAA,IAAAf,GAAAC,IAMAD,EAAA3gB,UAAAoD,QAAAud,EAAA3gB,UAAAiD,SAEA0d,EA7GA,GAAA9G,GAAAld,EAAA,mBACA0kB,EAAA1kB,EAAA,kBA+GAc,GAAAyW,KAAA,OACAzW,EAAAgf,KAAA,OACAhf,EAAA0a,QAAAA,IZ0pPGwJ,kBAAkB,IAAIC,kBAAkB,IAAIC,oBAAoB,MAAMC,IAAI,SAASnlB,EAAQkB,EAAOJ,Ga9wPrG,YAKA,SAAA0a,GAAAK,EAAAnN,EAAA6M,EAAAQ,EAAAH,GAmDA,QAAAwJ,KACA,KAAAtjB,eAAAsjB,IACA,KAAA,IAAAziB,aACA,mDAEAb,MAAAujB,SAvDA,GAAAC,GAAA/J,EAAAvb,EAAA,WAuJA,OA1FAolB,GAAA/hB,UAAAwY,KAAA,SACAuJ,EAAA/hB,UAAAkiB,UAAA,EAUAH,EAAA/hB,UAAAtB,MAAA,SAAAyiB,GACA,KAAA,IAAA7jB,OAAA,wDAUAykB,EAAA/hB,UAAAmiB,QAAA,SAAAhB,GACA,KAAA,IAAA7jB,OAAA,4DASAykB,EAAA/hB,UAAAohB,KAAA,SAAAD,GAEA,MAAAc,GAAAd,GACAgB,UACAf,KAAA3iB,KAAAujB,QASAD,EAAA/hB,UAAAoiB,IAAA,SAAAlO,GAEA,MAAAA,KAAAzV,MAAAujB,MACAK,EAAAC,gBAAA7jB,KAAAujB,MAAA9N,GACA3U,QAOAwiB,EAAA/hB,UAAAuiB,OAAA,WACA,MAAAC,MAAA/jB,KAAAujB,QAQAD,EAAA/hB,UAAA0M,IAAA,SAAAwH,EAAAuH,GAEA,MAAA4G,GAAAI,gBAAAhkB,KAAAujB,MAAA9N,EAAAuH,IAOAsG,EAAA/hB,UAAA0iB,OAAA,SAAAxO,SAEAzV,MAAAujB,MAAA9N,IAMA6N,EAAA/hB,UAAA2iB,MAAA,WACA,IAAA,GAAAzO,KAAAzV,MAAAujB,MACAvjB,KAAAujB,MAAA/U,eAAAiH,UACAzV,MAAAujB,MAAA9N,IAKA6N,EA3JA,GAAAS,GAAA7lB,EAAA,mBAAA6lB,OACAH,EAAA1lB,EAAA,mBA6JAc,GAAAyW,KAAA,SACAzW,EAAAgf,KAAA,aACAhf,EAAA0a,QAAAA,EACA1a,EAAA8a,MAAA,IbixPGqK,mBAAmB,IAAIjB,kBAAkB,IAAIkB,UAAU,MAAMC,IAAI,SAASnmB,EAAQkB,EAAOJ,Gcp7P5FI,EAAAJ,SACAyW,KAAA,WACA6M,SAAA,YACAE,QACA,YAEAD,YAAA,6GACAE,UACA,WACA,SAEAK,iBdw7PMwB,IAAI,SAASpmB,EAAQkB,EAAOJ,Gen8PlCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,YACAE,QACA,QAEAD,YAAA,oEACAE,UACA,OACA,WAEAK,iBfu8PMyB,IAAI,SAASrmB,EAAQkB,EAAOJ,GgBl9PlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,YACAE,QACA,OAEAD,YAAA,mEACAE,UACA,MACA,UAEAK,iBhBs9PM0B,IAAI,SAAStmB,EAAQkB,EAAOJ,GiBj+PlCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,YACAE,QACA,UAEAD,YAAA,mEACAE,UACA,SACA,cAEAK,iBjBq+PM2B,IAAI,SAASvmB,EAAQkB,EAAOJ,GkBh/PlCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,YACAE,QACA,SAEAD,YAAA,kEACAE,UACA,QACA,aAEAK,iBlBo/PM4B,IAAI,SAASxmB,EAAQkB,EAAOJ,GmB//PlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,YACAE,QACA,OAEAD,YAAA,eACAE,UACA,MACA,SAEAK,iBnBmgQM6B,IAAI,SAASzmB,EAAQkB,EAAOJ,GoB9gQlCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,YACAE,QACA,WAEAD,YAAA,+DACAE,UACA,UACA,aAEAK,iBpBkhQM8B,IAAI,SAAS1mB,EAAQkB,EAAOJ,GqB7hQlCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,YACAE,QACA,SAEAD,YAAA,6DACAE,UACA,QACA,WAEAK,iBrBiiQM+B,IAAI,SAAS3mB,EAAQkB,EAAOJ,GsB5iQlCI,EAAAJ,SACAyW,KAAA,IACA6M,SAAA,YACAE,QACA,KAEAD,YAAA,oFACAE,UACA,IACA,QACA,SACA,UAEAK,SAAA,atBgjQMgC,IAAI,SAAS5mB,EAAQkB,EAAOJ,GuB7jQlCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,YACAE,QACA,SAEAD,YAAA,sBACAE,UACA,SAEAK,SAAA,cvBikQMiC,IAAI,SAAS7mB,EAAQkB,EAAOJ,GwB3kQlCI,EAAAJ,SACAyW,KAAA,IACA6M,SAAA,YACAE,QACA,KAEAD,YAAA,sIACAE,UACA,IACA,QACA,YAEAK,iBxB+kQMkC,IAAI,SAAS9mB,EAAQkB,EAAOJ,GyB3lQlCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,YACAE,QACA,QAEAD,YAAA,aACAE,UACA,QAEAK,SAAA,OAAA,ezB+lQMmC,IAAI,SAAS/mB,EAAQkB,EAAOJ,G0BzmQlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,YACAE,QACA,OAEAD,YAAA,mOACAE,UACA,OAEAK,iB1B6mQMoC,IAAI,SAAShnB,EAAQkB,EAAOJ,G2BvnQlCI,EAAAJ,SACAyW,KAAA,KACA6M,SAAA,YACAE,QACA,MAEAD,YAAA,gJACAE,UACA,KACA,aAEAK,SAAA,a3B2nQMqC,IAAI,SAASjnB,EAAQkB,EAAOJ,G4BtoQlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,YACAE,QACA,OAEAD,YAAA,0GACAE,UACA,MACA,UAEAK,SAAA,Y5B0oQMsC,IAAI,SAASlnB,EAAQkB,EAAOJ,G6BrpQlCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,YACAE,QACA,QAEAD,YAAA,qBACAE,UACA,QAEAK,SAAA,e7BypQMuC,IAAI,SAASnnB,EAAQkB,EAAOJ,G8BnqQlCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,YACAE,QACA,WAEAD,YAAA,8CACAE,UACA,WAEAK,iB9BuqQMwC,IAAI,SAASpnB,EAAQkB,EAAOJ,G+BjrQlCI,EAAAJ,SACAyW,KAAA,YACA6M,SAAA,eACAE,QACA,gBAEAD,YACA,+CACAE,UACA,YACA,kCACA,mBACA,uBACA,8BAEAK,SACA,UAAA,UAAA,WAAA,QAAA,SAAA,SAAA,c/BsrQMyC,IAAI,SAASrnB,EAAQkB,EAAOJ,GgCtsQlCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,eACAE,QACA,IACA,cAEAD,YACA,6CACAE,UACA,aACA,aACA,aACA,kBACA,mBACA,yBAEAK,SACA,YAAA,UAAA,QAAA,SAAA,SAAA,SAAA,chC2sQM0C,IAAI,SAAStnB,EAAQkB,EAAOJ,GiC7tQlCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,eACAE,QACA,YACA,kBACA,mBAEAD,YACA,2BACAE,UACA,YACA,gBACA,qBAEAK,SACA,YAAA,UAAA,QAAA,SAAA,SAAA,SAAA,cjCkuQM2C,IAAI,SAASvnB,EAAQkB,EAAOJ,GkClvQlCI,EAAAJ,SACAyW,KAAA,aACA6M,SAAA,eACAE,QACA,0BACA,gCAEAD,YACA,iEACAE,UACA,oBACA,uFACA,oCAEAK,SACA,OAAA,mBlCuvQM4C,IAAI,SAASxnB,EAAQkB,EAAOJ,GmCtwQlCI,EAAAJ,SACAyW,KAAA,WACA6M,SAAA,eACAE,QACA,gBACA,qBAEAD,YACA,uEACAE,UACA,kBACA,mCAEAK,SACA,YAAA,UAAA,UAAA,QAAA,SAAA,SAAA;OnC2wQM6C,IAAI,SAASznB,EAAQkB,EAAOJ,GoCzxQlCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,eACAE,QACA,UACA,cACA,mBACA,yBACA,kCACA,+CAEAD,YACA,yDACAE,UACA,KACA,YACA,yBACA,UACA,eACA,4BAEAK,SACA,YAAA,UAAA,UAAA,UAAA,SAAA,QAAA,SAAA,cpC8xQM8C,IAAI,SAAS1nB,EAAQkB,EAAOJ,GqCpzQlCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,eACAE,QACA,KACA,6BACA,WACA,kBACA,iBAEAD,YACA,mBACAE,UACA,KACA,YACA,qBACA,WACA,iBACA,iCACA,4CAEAK,SACA,YAAA,UAAA,UAAA,QAAA,SAAA,SAAA,OAAA,gBrCyzQM+C,IAAI,SAAS3nB,EAAQkB,EAAOJ,GsC/0QlCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,eACAE,QACA,IACA,aAEAD,YACA,gEACAE,UACA,IACA,MACA,OACA,YACA,gBACA,eACA,oCACA,uBAEAK,SACA,YAAA,UAAA,UAAA,WAAA,QAAA,SAAA,SAAA,ctCo1QMgD,IAAI,SAAS5nB,EAAQkB,EAAOJ,GuCx2QlCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,eACAE,QACA,WACA,qCACA,gDAEAD,YACA,0BACAE,UACA,WACA,uBACA,kCAEAK,SACA,YAAA,UAAA,UAAA,QAAA,SAAA,SAAA,OAAA,gBvC62QMiD,IAAI,SAAS7nB,EAAQkB,EAAOJ,GwC73QlCI,EAAAJ,SACAyW,KAAA,YACA6M,SAAA,eACAE,QACA,wCAEAD,YACA,6EACAE,UACA,oCAEAK,SACA,OAAA,oBxCk4QMkD,IAAI,SAAS9nB,EAAQkB,EAAOJ,GyC94QlCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,eACAE,QACA,SACA,aAEAD,YACA,iDACAE,UACA,iBACA,cACA,kBAEAK,SACA,YAAA,UAAA,UAAA,QAAA,SAAA,SAAA,czCm5QMmD,IAAI,SAAS/nB,EAAQkB,EAAOJ,G0Cl6QlCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,eACAE,QACA,aACA,oBACA,gBAEAD,YACA,iBACAE,UACA,SACA,SACA,wBACA,kBAEAK,SACA,YAAA,UAAA,UAAA,QAAA,SAAA,SAAA,gB1Cu6QMoD,IAAI,SAAShoB,EAAQkB,EAAOJ,G2Cx7QlCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,OACAE,QACA,WACA,mBAEAD,YAAA,6CACAE,UACA,WACA,YACA,+BACA,aAEAK,iB3C47QMqD,IAAI,SAASjoB,EAAQkB,EAAOJ,G4C18QlCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,OACAE,QACA,oBACA,8BAEAD,YAAA,gDACAE,UACA,4CACA,UACA,cAEAK,iB5C88QMsD,IAAI,SAASloB,EAAQkB,EAAOJ,G6C39QlCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,OACAE,QACA,oBACA,2BAEAD,YAAA,2BACAE,UACA,iDACA,YACA,mBAEAK,iB7C+9QMuD,IAAI,SAASnoB,EAAQkB,EAAOJ,G8C5+QlCI,EAAAJ,SACAyW,KAAA,aACA6M,SAAA,UACAE,QACA,mBACA,yCAEAD,YAAA,4OACAE,UACA,0BACA,6CACA,mCACA,6BACA,uBACA,iBACA,wBACA,mBAEAK,SACA,WAAA,QAAA,c9Ci/QMwD,IAAI,SAASpoB,EAAQkB,EAAOJ,G+CpgRlCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,UACAE,QACA,kBAEAD,YACA,iHACAE,UACA,oBACA,cACA,oBAEAK,SACA,MAAA,UAAA,SAAA,SAAA,gB/CygRMyD,IAAI,SAASroB,EAAQkB,EAAOJ,GgDvhRlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,UACAE,QACA,UAEAD,YACA,sIACAE,UACA,wBACA,gCACA,iCAEAK,SACA,UAAA,SAAA,SAAA,SAAA,SAAA,MAAA,YhD4hRM0D,IAAI,SAAStoB,EAAQkB,EAAOJ,GiD1iRlCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,UACAE,QACA,kBACA,oBAEAD,YAAA,gGACAE,UACA,oBACA,cACA,qBAEAK,SACA,MAAA,MAAA,SAAA,SAAA,SAAA,gBjD+iRM2D,IAAI,SAASvoB,EAAQkB,EAAOJ,GkD7jRlCI,EAAAJ,SACAyW,KAAA,KACA6M,SAAA,UACAE,QACA,SAEAD,YACA,uKACAE,UACA,4DAEAK,SACA,MAAA,MAAA,gBlDkkRM4D,IAAI,SAASxoB,EAAQkB,EAAOJ,GmD9kRlCI,EAAAJ,SACAyW,KAAA,WACA6M,SAAA,UACAE,QACA,iBACA,yBAEAD,YAAA,+BACAE,UACA,wBACA,qBACA,+BACA,2BACA,2BAEAK,SACA,aAAA,QAAA,cnDmlRM6D,IAAI,SAASzoB,EAAQkB,EAAOJ,GoDnmRlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,UACAE,QACA,4BAEAD,YAAA,wKACAE,UACA,2FAEAK,SACA,UAAA,SAAA,SAAA,SAAA,SAAA,MAAA,YpDwmRM8D,IAAI,SAAS1oB,EAAQkB,EAAOJ,GqDnnRlCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,UACAE,QACA,kBAEAD,YACA,iHACAE,UACA,oFAEAK,SACA,MAAA,UAAA,SAAA,SAAA,gBrDwnRM+D,IAAI,SAAS3oB,EAAQkB,EAAOJ,GsDpoRlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,aACAE,QACA,UAEAD,YAAA,8BACAE,UACA,WACA,aAEAK,SAAA,ctDwoRMgE,IAAI,SAAS5oB,EAAQkB,EAAOJ,GuDnpRlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,YACAE,QACA,QACA,aAEAD,YAAA,kBACAE,UACA,gBACA,UACA,SACA,gBACA,eAEAK,SACA,kBvDwpRMiE,IAAI,SAAS7oB,EAAQkB,EAAOJ,GwDxqRlCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,aACAE,QACA,UACA,qBAEAD,YACA,iQACAE,UACA,WACA,UACA,WACA,eACA,WACA,iBACA,gBAEAK,SACA,SACA,OACA,OACA,kBxD6qRMkE,IAAI,SAAS9oB,EAAQkB,EAAOJ,GyDnsRlCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,aACAE,QACA,WAEAD,YACA,wHACAE,UACA,YACA,YACA,cAEAK,SAAA,QAAA,MAAA,ezDusRMmE,IAAI,SAAS/oB,EAAQkB,EAAOJ,G0DptRlCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,aACAE,QACA,WAEAD,YAAA,2DACAE,UACA,UACA,MACA,aAEAK,SACA,WACA,SACA,a1DytRMoE,IAAI,SAAShpB,EAAQkB,EAAOJ,G2DxuRlCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,YACAE,QACA,QACA,gBAEAD,YAAA,qBACAE,UACA,YACA,QACA,UACA,YACA,cACA,eAEAK,SACA,kB3D6uRMqE,IAAI,SAASjpB,EAAQkB,EAAOJ,G4D9vRlCI,EAAAJ,SACAyW,KAAA,YACA6M,SAAA,YACAE,QACA,SACA,mBAEAD,YAAA,kCACAE,UACA,yBACA,yBACA,UAEAK,SACA,WACA,cACA,gB5DmwRMsE,IAAI,SAASlpB,EAAQkB,EAAOJ,G6DnxRlCI,EAAAJ,SACAyW,KAAA,cACA6M,SAAA,YACAE,QACA,SACA,qBAEAD,YAAA,oCACAE,UACA,yBACA,yBACA,UAEAK,SACA,WACA,SACA,mB7DwxRMuE,IAAI,SAASnpB,EAAQkB,EAAOJ,G8DxyRlCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,YACAE,QACA,SACA,gBAEAD,YACA,+CACAE,UACA,yBACA,UAEAK,SACA,a9D6yRMwE,IAAI,SAASppB,EAAQkB,EAAOJ,G+D3zRlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,aACAE,QACA,UAEAD,YAAA,qCACAE,UACA,WACA,UACA,gBACA,UACA,uDAEAK,SACA,MACA,a/Dg0RMyE,IAAI,SAASrpB,EAAQkB,EAAOJ,GgEh1RlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,aACAE,QACA,UAEAD,YACA,sGACAE,UACA,WACA,WACA,YACA,aAEAK,SAAA,OAAA,QAAA,ehEo1RM0E,IAAI,SAAStpB,EAAQkB,EAAOJ,GiEl2RlCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,aACAE,QACA,YAEAD,YACA,yHACAE,UACA,aACA,aACA,eAEAK,SAAA,OAAA,MAAA,ejEs2RM2E,IAAI,SAASvpB,EAAQkB,EAAOJ,GkEn3RlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,aACAE,QACA,YACA,qBAEAD,YAAA,uCACAE,UACA,aACA,aACA,oBAEAK,SAAA,MAAA,clEu3RM4E,IAAI,SAASxpB,EAAQkB,EAAOJ,GmEp4RlCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,aACAE,QACA,sBACA,yBAEAD,YAAA,mDACAE,UACA,cACA,kBACA,YACA,oBAEAK,SAAA,MAAA,cnEw4RM6E,IAAI,SAASzpB,EAAQkB,EAAOJ,GoEt5RlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,aACAE,QACA,aAEAD,YAAA,qCACAE,UACA,YACA,aACA,iBAEAK,SAAA,apE05RM8E,IAAI,SAAS1pB,EAAQkB,EAAOJ,GqEt6RlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,aACAE,QACA,SACA,gBAEAD,YAAA,8NACAE,UACA,WACA,eACA,SACA,SACA,iBACA,uBACA,mBACA,SAEAK,SACA,MACA,erE06RM+E,IAAI,SAAS3pB,EAAQkB,EAAOJ,GsE97RlCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,aACAE,QACA,YAEAD,YAAA,4CACAE,UACA,iBACA,eACA,SACA,uBACA,kBAEAK,SACA,MACA,atEm8RMgF,IAAI,SAAS5pB,EAAQkB,EAAOJ,GuEn9RlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,YACAE,QACA,QACA,UACA,aAEAD,YACA,gEACAE,UACA,QACA,SACA,WACA,4BACA,WACA,YAEAK,SAAA,gBvEu9RMiF,IAAI,SAAS7pB,EAAQkB,EAAOJ,GwEz+RlCI,EAAAJ,SACAyW,KAAA,WACA6M,SAAA,YACAE,QACA,QACA,kBAEAD,YAAA,uBACAE,UACA,gBACA,UACA,YACA,cACA,cAEAK,SACA,gBxE8+RMkF,IAAI,SAAS9pB,EAAQkB,EAAOJ,GyE9/RlCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,aACAE,QACA,UACA,cAEAD,YAAA,oDACAE,UACA,YACA,aACA,gBACA,6BACA,8BACA,kBACA,4BACA,gCACA,uCzEmgSMwF,IAAI,SAAS/pB,EAAQkB,EAAOJ,G0EphSlCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,aACAE,QACA,aACA,oBAEAD,YAAA,qJAGAE,UACA,QACA,iBACA,gBACA,WAEAK,SACA,OACA,a1EwhSMoF,IAAI,SAAShqB,EAAQkB,EAAOJ,G2E1iSlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,YACAE,QACA,QACA,aAEAD,YACA,uCACAE,UACA,UACA,QACA,oBAEAK,SAAA,kB3E8iSMqF,IAAI,SAASjqB,EAAQkB,EAAOJ,G4E5jSlCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,aACAE,QACA,WACA,eAEAD,YACA,4LACAE,UACA,aACA,aACA,cACA,cACA,eACA,uBAEAK,SAAA,OAAA,QAAA,a5EgkSMsF,IAAI,SAASlqB,EAAQkB,EAAOJ,G6EjlSlCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,aACAE,QACA,WAEAD,YACA,iGACAE,UACA,YACA,aACA,WAEAK,SACA,a7EslSMuF,IAAI,SAASnqB,EAAQkB,EAAOJ,G8EpmSlCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,aACAE,QACA,WAEAD,YACA,+EACAE,UACA,WACA,QACA,YAEAK,SACA,SACA,kB9EymSMwF,IAAI,SAASpqB,EAAQkB,EAAOJ,G+ExnSlCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,aACAE,QACA,aAEAD,YACA,2DACAE,UACA,YACA,UACA,MACA,SAEAK,SACA,WACA,MACA,OACA,c/E6nSMyF,IAAI,SAASrqB,EAAQkB,EAAOJ,GgF/oSlCI,EAAAJ,SACAyW,KAAA,WACA6M,SAAA,YACAE,QACA,QACA,kBAEAD,YAAA,uBACAE,UACA,cACA,QACA,YACA,YACA,iBAEAK,SACA,ahFopSM0F,IAAI,SAAStqB,EAAQkB,EAAOJ,GiFpqSlCI,EAAAJ,SACAyW,KAAA,aACA6M,SAAA,YACAE,QACA,KACA,iBAEAD,YACA,yEACAE,UACA,OACA,UACA,SAEAK,SACA,MAAA,WAAA,mBjFyqSM2F,IAAI,SAASvqB,EAAQkB,EAAOJ,GkFxrSlCI,EAAAJ,SACAyW,KAAA,YACA6M,SAAA,YACAE,QACA,KACA,gBAEAD,YACA,4CACAE,UACA,QACA,QAEAK,SACA,MAAA,WAAA,oBlF6rSM4F,IAAI,SAASxqB,EAAQkB,EAAOJ,GmF3sSlCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,aACAE,QACA,cAEAD,YAAA,gEACAE,UACA,cACA,aACA,sBAEAK,SAAA,MAAA,anF+sSM6F,IAAI,SAASzqB,EAAQkB,EAAOJ,GoF3tSlCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,UACAE,QACA,QACA,gBAEAD,YAAA,6QACAE,UACA,QACA,kBACA,oBAEAK,SACA,SAAA,QAAA,SAAA,YAAA,kBAAA,uBpFguSM8F,IAAI,SAAS1qB,EAAQkB,EAAOJ,GqF9uSlCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,UACAE,QACA,KACA,aAEAD,YAAA,8IACAE,UACA,KACA,KACA,sBAEAK,SACA,SAAA,QAAA,SAAA,YAAA,kBAAA,uBrFmvSM+F,IAAI,SAAS3qB,EAAQkB,EAAOJ,GsFjwSlCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,UACAE,QACA,QACA,eAEAD,YAAA,8PACAE,UACA,QACA,uBAEAK,SACA,SAAA,SAAA,SAAA,YAAA,kBAAA,uBtFswSMgG,IAAI,SAAS5qB,EAAQkB,EAAOJ,GuFnxSlCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,UACAE,QACA,gBAEAD,YAAA,mRACAE,UACA,cACA,wBAEAK,SACA,SAAA,SAAA,QAAA,YAAA,kBAAA,uBvFwxSMiG,IAAI,SAAS7qB,EAAQkB,EAAOJ,GwFpySlCI,EAAAJ,SACAyW,KAAA,YACA6M,SAAA,UACAE,QACA,SACA,mBAEAD,YAAA,+DACAE,UACA,SACA,UAEAK,SACA,SAAA,SAAA,QAAA,SAAA,kBAAA,uBxFyySMkG,IAAI,SAAS9qB,EAAQkB,EAAOJ,GyFtzSlCI,EAAAJ,SACAyW,KAAA,kBACA6M,SAAA,UACAE,QACA,SACA,mBAEAD,YAAA,mEACAE,UACA,SACA,SACA,YAEAK,SACA,SAAA,SAAA,QAAA,SAAA,YAAA,uBzF2zSMmG,IAAI,SAAS/qB,EAAQkB,EAAOJ,G0Fz0SlCI,EAAAJ,SACAyW,KAAA,gBACA6M,SAAA,UACAE,QACA,SACA,mBAEAD,YAAA,gEACAE,UACA,UACA,SACA,aAEAK,SACA,SAAA,SAAA,QAAA,SAAA,YAAA,yB1F80SMoG,IAAI,SAAShrB,EAAQkB,EAAOJ,G2F51SlCI,EAAAJ,SACAyW,KAAA,cACA6M,SAAA,gBACAE,QACA,kBAEAD,YAAA,2NACAE,UACA,iBACA,kBAEAK,SAAA,oB3F+1SMqG,IAAI,SAASjrB,EAAQkB,EAAOJ,G4F12SlCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,gBACAE,QACA,cAEAD,YAAA,0KACAE,UACA,aACA,cAEAK,SAAA,qB5F62SMsG,IAAI,SAASlrB,EAAQkB,EAAOJ,G6Fx3SlCI,EAAAJ,SACAyW,KAAA,cACA6M,SAAA,gBACAE,QACA,qBAEAD,YAAA,wIACAE,UACA,qBAEAK,SAAA,sB7F23SMuG,IAAI,SAASnrB,EAAQkB,EAAOJ,G8Fr4SlCI,EAAAJ,SACAyW,KAAA,aACA6M,SAAA,gBACAE,QACA,oBAEAD,YAAA,kRACAE,UACA,oBAEAK,SAAA,qB9Fy4SMwG,IAAI,SAASprB,EAAQkB,EAAOJ,G+Fn5SlCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,UACAE,QACA,UAEAD,YACA,iGACAE,UACA,cACA,cACA,eAEAK,SACA,KACA,KACA,OACA,a/Fw5SMyG,IAAI,SAASrrB,EAAQkB,EAAOJ,GgGz6SlCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,UACAE,QACA,WAEAD,YACA,gGACAE,UACA,eACA,eACA,eAEAK,SACA,KACA,KACA,MACA,ahG86SM0G,IAAI,SAAStrB,EAAQkB,EAAOJ,GiG/7SlCI,EAAAJ,SACAyW,KAAA,KACA6M,SAAA,UACAE,QACA,SAEAD,YAAA,8CACAE,UACA,aACA,aACA,YACA,WAEAK,SACA,KACA,OACA,MACA,ajGo8SM2G,IAAI,SAASvrB,EAAQkB,EAAOJ,GkGr9SlCI,EAAAJ,SACAyW,KAAA,KACA6M,SAAA,UACAE,QACA,SAEAD,YAAA,yCACAE,UACA,aACA,aACA,YACA,WAEAK,SACA,KACA,OACA,MACA,alG09SM4G,KAAK,SAASxrB,EAAQkB,EAAOJ,GmG3+SnCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,aACAE,QACA,mBACA,oCAEAD,YAAA,uDACAE,UACA,gBACA,2BAEAK,iBnG++SM6G,KAAK,SAASzrB,EAAQkB,EAAOJ,GoG3/SnCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,aACAE,QACA,eACA,gBAEAD,YAAA,oDACAE,UACA,aACA,mBAEAK,iBpG+/SM8G,KAAK,SAAS1rB,EAAQkB,EAAOJ,GqG3gTnCI,EAAAJ,SACAyW,KAAA,WACA6M,SAAA,WACAE,QACA,+BACA,iCAEAD,YAAA,wDACAE,UACA,yBACA,4BAEAK,iBrG+gTM+G,KAAK,SAAS3rB,EAAQkB,EAAOJ,GsG3hTnCI,EAAAJ,SACAyW,KAAA,YACA6M,SAAA,WACAE,QACA,wCACA,kCAEAD,YAAA,0DACAE,UACA,gDACA,mDAEAK,iBtG+hTMgH,KAAK,SAAS5rB,EAAQkB,EAAOJ,GuG3iTnCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,UACAE,QACA,UACA,aAEAD,YAAA,uFACAE,UACA,iBACA,gBACA,WAEAK,SACA,MAAA,KAAA,avGgjTMiH,KAAK,SAAS7rB,EAAQkB,EAAOJ,GwG9jTnCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,UACAE,QACA,QACA,UAEAD,YAAA,0DACAE,UACA,WACA,YACA,QACA,SAEAK,SACA,MAAA,KAAA,axGmkTMkH,KAAK,SAAS9rB,EAAQkB,EAAOJ,GyGllTnCI,EAAAJ,SACAyW,KAAA,KACA6M,SAAA,UACAE,QACA,SACA,YAEAD,YAAA,mFACAE,UACA,gBACA,iBACA,UAEAK,SACA,MAAA,MAAA,azGulTMmH,KAAK,SAAS/rB,EAAQkB,EAAOJ,G0GrmTnCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,UACAE,QACA,SACA,YAEAD,YAAA,2GACAE,UACA,iBACA,kBACA,gBACA,UAEAK,SACA,MAAA,MAAA,Y1G0mTMoH,KAAK,SAAShsB,EAAQkB,EAAOJ,G2GznTnCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,SACAE,QACA,uBACA,6BAEAD,YAAA,iKACAE,UACA,mBACA,mBACA,eACA,kBACA,mBAEAK,SACA,MAAA,OAAA,MAAA,MAAA,OAAA,QAAA,OAAA,UAAA,SAAA,QAAA,YAAA,e3G8nTMqH,KAAK,SAASjsB,EAAQkB,EAAOJ,G4G9oTnCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,SACAE,QACA,eAEAD,YAAA,0EACAE,UACA,+BACA,+BACA,gCAEAK,SACA,WACA,a5GmpTMsH,KAAK,SAASlsB,EAAQkB,EAAOJ,G6GjqTnCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,SACAE,QACA,UAEAD,YAAA,wCACAE,UACA,oBACA,uCAEAK,SACA,SAAA,OAAA,MAAA,MAAA,OAAA,QAAA,OAAA,UAAA,SAAA,QAAA,YAAA,e7GsqTMuH,KAAK,SAASnsB,EAAQkB,EAAOJ,G8GlrTnCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,SACAE,QACA,UACA,cAEAD,YAAA,4aACAE,UACA,YACA,eACA,kCACA,WAEAK,SACA,SAAA,MAAA,MAAA,MAAA,OAAA,QAAA,OAAA,UAAA,SAAA,QAAA,YAAA,e9GurTMwH,KAAK,SAASpsB,EAAQkB,EAAOJ,G+GtsTnCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,SACAE,QACA,aAEAD,YAAA,6LAGAE,UACA,4BACA,yBAEAK,SACA,WACA,e/G2sTMyH,KAAK,SAASrsB,EAAQkB,EAAOJ,GgH1tTnCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,SACAE,QACA,SACA,YACA,cACA,OAEAD,YAAA,yGACAE,UACA,SACA,YACA,yBACA,gBAEAK,SACA,SAAA,MAAA,OAAA,MAAA,OAAA,QAAA,OAAA,UAAA,SAAA,QAAA,YAAA,ehH+tTM0H,KAAK,SAAStsB,EAAQkB,EAAOJ,GiHhvTnCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,SACAE,QACA,mBAEAD,YAAA,4BACAE,UACA,wBACA,wCACA,oCAEAK,SAAA,OAAA,MAAA,iBjHovTM2H,KAAK,SAASvsB,EAAQkB,EAAOJ,GkHhwTnCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,SACAE,QACA,cAEAD,YAAA,uEACAE,UACA,yBACA,UACA,iBACA,WAEAK,SACA,SAAA,SAAA,OAAA,iBlHqwTM4H,KAAK,SAASxsB,EAAQkB,EAAOJ,GmHnxTnCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,SACAE,QACA,wBAEAD,YAAA,0FACAE,UACA,0DAEAK,SAAA,MAAA,OAAA,gBnHuxTM6H,KAAK,SAASzsB,EAAQkB,EAAOJ,GoHjyTnCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,SACAE,QACA,UAEAD,YAAA,oCACAE,UACA,oBACA,SACA,SAEAK,SACA,SAAA,MAAA,OAAA,MAAA,OAAA,QAAA,OAAA,UAAA,SAAA,QAAA,YAAA,epHsyTM8H,KAAK,SAAS1sB,EAAQkB,EAAOJ,GqHnzTnCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,SACAE,QACA,mBAEAD,YAAA,6DACAE,UACA,2CACA,wBAEAK,SACA,WAAA,MAAA,erHwzTM+H,KAAK,SAAS3sB,EAAQkB,EAAOJ,GsHp0TnCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,SACAE,QACA,oBAEAD,YAAA,qHACAE,UACA,0DAEAK,SAAA,SAAA,iBtHw0TMgI,KAAK,SAAS5sB,EAAQkB,EAAOJ,GuHl1TnCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,SACAE,QACA,UACA,aACA,qBACA,YACA,eACA,uBACA,QAEAD,YAAA,mCACAE,UACA,UACA,aACA,oBACA,yBACA,iBAEAK,SACA,SAAA,MAAA,OAAA,MAAA,MAAA,QAAA,OAAA,UAAA,SAAA,QAAA,YAAA,evHu1TMiI,KAAK,SAAS7sB,EAAQkB,EAAOJ,GwH52TnCI,EAAAJ,SACAyW,KAAA,kBACA6M,SAAA,SACAE,QACA,wBACA,kCAEAD,YAAA,uIACAE,UACA,iCACA,4CAEAK,SAAA,cxHg3TMkI,KAAK,SAAS9sB,EAAQkB,EAAOJ,GyH53TnCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,OACAE,QACA,YACA,iBACA,oBACA,0BACA,iBAEAD,YACA,iFACAE,UACA,MACA,UACA,cACA,kBACA,gBACA,+BACA,eAEAK,SACA,SAAA,MAAA,OAAA,MAAA,MAAA,OAAA,OAAA,UAAA,SAAA,QAAA,YAAA,ezHi4TMmI,KAAK,SAAS/sB,EAAQkB,EAAOJ,G0Hv5TnCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,SACAE,QACA,qBAEAD,YAAA,qEACAE,UACA,sCACA,oCACA,kCAEAK,SACA,OAAA,UAAA,gB1H45TMoI,KAAK,SAAShtB,EAAQkB,EAAOJ,G2Hz6TnCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,SACAE,QACA,kBACA,iCAEAD,YAAA,mBACAE,UACA,2BACA,uBACA,2BACA,oBACA,6BAEAK,SACA,OAAA,SAAA,UAAA,iB3H86TMqI,KAAK,SAASjtB,EAAQkB,EAAOJ,G4H97TnCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,SACAE,QACA,WAEAD,YAAA,kCACAE,UACA,YACA,sBACA,yBACA,UACA,aAEAK,SACA,SAAA,MAAA,OAAA,MAAA,MAAA,OAAA,QAAA,UAAA,SAAA,QAAA,YAAA,e5Hm8TMsI,KAAK,SAASltB,EAAQkB,EAAOJ,G6Hl9TnCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,SACAE,QACA,UACA,oBAEAD,YAAA,2GACAE,UACA,mBACA,6BACA,+CACA,iDACA,qCAEAK,SAAA,MAAA,SAAA,iB7Hs9TMuI,KAAK,SAASntB,EAAQkB,EAAOJ,G8Hr+TnCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,SACAE,QACA,cAEAD,YAAA,6DACAE,UACA,mBACA,mBACA,mBACA,oBAEAK,SACA,SAAA,MAAA,OAAA,MAAA,MAAA,OAAA,QAAA,OAAA,SAAA,QAAA,YAAA,e9H0+TMwI,KAAK,SAASptB,EAAQkB,EAAOJ,G+Hx/TnCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,SACAE,QACA,eACA,6BACA,yBACA,uCAEAD,YAAA,8HAGAE,UACA,mBACA,SACA,qBACA,mBACA,YACA,UACA,WAEAK,SACA,SAAA,MAAA,OAAA,MAAA,MAAA,OAAA,QAAA,OAAA,UAAA,QAAA,YAAA,e/H6/TMyI,KAAK,SAASrtB,EAAQkB,EAAOJ,GgInhUnCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,SACAE,QACA,YAEAD,YAAA,oGACAE,UACA,mCACA,YAEAK,SACA,SAAA,MAAA,OAAA,MAAA,MAAA,OAAA,QAAA,OAAA,UAAA,SAAA,YAAA,ehIwhUM0I,KAAK,SAASttB,EAAQkB,EAAOJ,GiIpiUnCI,EAAAJ,SACAyW,KAAA,YACA6M,SAAA,SACAE,QACA,KACA,gBAEAD,YAAA,qBACAE,UACA,yBACA,KACA,gBAEAK,SACA,SAAA,MAAA,OAAA,MAAA,MAAA,OAAA,QAAA,OAAA,UAAA,SAAA,QAAA,ejIyiUM2I,KAAK,SAASvtB,EAAQkB,EAAOJ,GkIvjUnCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,SACAE,QACA,WACA,cACA,sBACA,aACA,gBACA,wBACA,SAEAD,YAAA,oCACAE,UACA,WACA,cACA,yBACA,kBAEAK,SACA,SAAA,MAAA,OAAA,MAAA,MAAA,OAAA,QAAA,OAAA,UAAA,SAAA,QAAA,mBlI4jUM4I,KAAK,SAASxtB,EAAQkB,EAAOJ,GmIhlUnCI,EAAAJ,SACAyW,KAAA,eACA6M,SAAA,cACAE,QACA,sBAEAD,YAAA;AACAE,UACA,sBAEAK,SAAA,eAAA,mBnIolUM6I,KAAK,SAASztB,EAAQkB,EAAOJ,GoI9lUnCI,EAAAJ,SACAyW,KAAA,YACA6M,SAAA,cACAE,QACA,sBAEAD,YAAA,mCACAE,UACA,KACA,oBACA,MAEAK,SAAA,eAAA,eAAA,epIkmUM8I,KAAK,SAAS1tB,EAAQkB,EAAOJ,GqI9mUnCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,cACAE,QACA,YAEAD,YAAA,6IACAE,UACA,WACA,KACA,aACA,YAEAK,SAAA,mBrIknUM+I,KAAK,SAAS3tB,EAAQkB,EAAOJ,GsI/nUnCI,EAAAJ,SACAyW,KAAA,eACA6M,SAAA,cACAE,QACA,KACA,gBAEAD,YAAA,6EACAE,UACA,mDAEAK,iBtImoUMgJ,KAAK,SAAS5tB,EAAQkB,EAAOJ,GuI9oUnCI,EAAAJ,SACAyW,KAAA,cACA6M,SAAA,cACAE,QACA,kBAEAD,YAAA,6OACAE,UACA,0BAEAK,SAAA,eAAA,mBvIipUMiJ,KAAK,SAAS7tB,EAAQkB,EAAOJ,GwI3pUnCI,EAAAJ,SACAyW,KAAA,eACA6M,SAAA,cACAE,QACA,kBACA,sBAEAD,YAAA,kEACAE,UACA,kBACA,sBAEAK,SAAA,eAAA,mBxI+pUMkJ,KAAK,SAAS9tB,EAAQkB,EAAOJ,GyI3qUnCI,EAAAJ,SACAyW,KAAA,aACA6M,SAAA,cACAE,QACA,oBACA,4BACA,6BACA,qCACA,sCAEAD,YACA,0CACAE,UACA,mBACA,2BACA,8BACA,yCACA,4CACA,6CAEAK,SAAA,SAAA,mBzI+qUMmJ,KAAK,SAAS/tB,EAAQkB,EAAOJ,G0InsUnCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,cACAE,QACA,WACA,cACA,mBACA,eACA,oBACA,0BAEAD,YACA,0BACAE,UACA,WACA,iBACA,kBAEAK,SAAA,aAAA,mB1IusUMoJ,KAAK,SAAShuB,EAAQkB,EAAOJ,G2IztUnCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,cACAE,QACA,eACA,oBACA,gBACA,qBACA,2BAEAD,YACA,iCACAE,UACA,kBACA,uBAEAK,SAAA,aAAA,gB3I4tUMqJ,KAAK,SAASjuB,EAAQkB,EAAOJ,G4I5uUnCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,aACAE,QACA,iBAEAD,YACA,8GACAE,UACA,gBACA,gBACA,gBACA,qBACA,yBAEAK,SACA,QAAA,UAAA,UAAA,YAAA,WAAA,wB5IivUMsJ,KAAK,SAASluB,EAAQkB,EAAOJ,G6IjwUnCI,EAAAJ,SACAyW,KAAA,iBACA6M,SAAA,aACAE,QACA,wBAEAD,YAAA,kEACAE,UACA,gBACA,gBACA,gBACA,qBACA,qBACA,0BACA,gCACA,6BACA,0BACA,2BAEAK,SACA,QAAA,UAAA,UAAA,YAAA,WAAA,iB7IswUMuJ,KAAK,SAASnuB,EAAQkB,EAAOJ,G8I1xUnCI,EAAAJ,SACAyW,KAAA,YACA6M,SAAA,aACAE,QACA,mBAEAD,YACA,+IACAE,UACA,qBACA,oBAEAK,SACA,QAAA,UAAA,UAAA,SAAA,YAAA,WAAA,iB9I+xUMwJ,KAAK,SAASpuB,EAAQkB,EAAOJ,G+I5yUnCI,EAAAJ,SACAyW,KAAA,QACA6M,SAAA,aACAE,QACA,SACA,eAEAD,YACA,wFACAE,UACA,WACA,WACA,UACA,YACA,SACA,gBAEAK,SACA,UAAA,UAAA,SAAA,YAAA,WAAA,UAAA,mB/IizUMyJ,KAAK,SAASruB,EAAQkB,EAAOJ,GgJn0UnCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,aACAE,QACA,QACA,gBAEAD,YACA,2FACAE,UACA,QACA,UACA,UACA,YACA,UACA,UACA,iBAEAK,SACA,QAAA,UAAA,UAAA,YAAA,WAAA,iBhJw0UM0J,KAAK,SAAStuB,EAAQkB,EAAOJ,GiJ31UnCI,EAAAJ,SACAyW,KAAA,WACA6M,SAAA,aACAE,QACA,SACA,kBAEAD,YACA,yGACAE,UACA,UACA,WACA,UACA,YACA,WAEAK,SACA,QAAA,UAAA,YAAA,UAAA,WAAA,iBjJg2UM2J,KAAK,SAASvuB,EAAQkB,EAAOJ,GkJj3UnCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,aACAE,QACA,QACA,iBAEAD,YACA,mGACAE,UACA,QACA,UACA,UACA,YACA,UACA,iBAEAK,SACA,QAAA,UAAA,SAAA,YAAA,WAAA,iBlJs3UM4J,KAAK,SAASxuB,EAAQkB,EAAOJ,GmJx4UnCI,EAAAJ,SACAyW,KAAA,YACA6M,SAAA,aACAE,QACA,SACA,mBAEAD,YACA,0GACAE,UACA,UACA,WACA,UACA,YACA,WAEAK,SACA,QAAA,UAAA,SAAA,UAAA,WAAA,iBnJ64UM6J,KAAK,SAASzuB,EAAQkB,EAAOJ,GoJ95UnCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,aACAE,QACA,SACA,iBAEAD,YACA,uGACAE,UACA,WACA,WACA,UACA,YACA,SACA,eACA,kBAEAK,SACA,QAAA,UAAA,SAAA,YAAA,WAAA,UAAA,mBpJm6UM8J,KAAK,SAAS1uB,EAAQkB,EAAOJ,GqJt7UnCI,EAAAJ,SACAyW,KAAA,eACA6M,SAAA,MACAE,QACA,4BAEAD,YACA,6IACAE,UACA,gCAEAK,SACA,WAAA,eAAA,gBAAA,qBrJ27UM+J,KAAK,SAAS3uB,EAAQkB,EAAOJ,GsJv8UnCI,EAAAJ,SACAyW,KAAA,gBACA6M,SAAA,MACAE,QACA,6BAEAD,YACA,8LACAE,UACA,4CACA,qDAEAK,SACA,WAAA,eAAA,0BtJ48UMgK,KAAK,SAAS5uB,EAAQkB,EAAOJ,GuJz9UnCI,EAAAJ,SACAyW,KAAA,cACA6M,SAAA,MACAE,QACA,oBAEAD,YACA,2IACAE,UACA,mCAEAK,SACA,yBvJ89UMiK,KAAK,SAAS7uB,EAAQkB,EAAOJ,GwJ1+UnCI,EAAAJ,SACAyW,KAAA,eACA6M,SAAA,MACAE,QACA,4BAEAD,YACA,wIACAE,UACA,2CACA,oDAEAK,SACA,WAAA,uBxJ++UMkK,KAAK,SAAS9uB,EAAQkB,EAAOJ,GyJ5/UnCI,EAAAJ,SACAyW,KAAA,cACA6M,SAAA,MACAE,QACA,2BAEAD,YACA,wMACAE,UACA,oCACA,qCAEAK,SACA,WAAA,eAAA,uBzJigVMmK,KAAK,SAAS/uB,EAAQkB,EAAOJ,G0J9gVnCI,EAAAJ,SACAyW,KAAA,kBACA6M,SAAA,MACAE,QACA,iCAEAD,YACA,kJACAE,UACA,mCACA,oCAEAK,SACA,cAAA,iB1JmhVMoK,KAAK,SAAShvB,EAAQkB,EAAOJ,G2JhiVnCI,EAAAJ,SACAyW,KAAA,cACA6M,SAAA,MACAE,QACA,oBAEAD,YACA,gMACAE,UACA,0BAEAK,SACA,sB3JqiVMqK,KAAK,SAASjvB,EAAQkB,EAAOJ,G4JjjVnCI,EAAAJ,SACAyW,KAAA,UACA6M,SAAA,MACAE,QACA,eACA,wBAEAD,YACA,sNACAE,UACA,wBACA,+BAEAK,SACA,WAAA,eAAA,uB5JsjVMsK,KAAK,SAASlvB,EAAQkB,EAAOJ,G6JpkVnCI,EAAAJ,SACAyW,KAAA,mBACA6M,SAAA,MACAE,QACA,gCAEAD,YACA,gJACAE,UACA,+CACA,wDAEAK,SACA,WAAA,eAAA,uB7JykVMuK,KAAK,SAASnvB,EAAQkB,EAAOJ,G8JtlVnCI,EAAAJ,SACAyW,KAAA,WACA6M,SAAA,MACAE,QACA,wBAEAD,YACA,iIACAE,UACA,uCACA,gDAEAK,SACA,eAAA,uB9J2lVMwK,KAAK,SAASpvB,EAAQkB,EAAOJ,G+JxmVnCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,UACAE,QACA,UAEAD,YAAA,6GACAE,UACA,WACA,YACA,UAEAK,iB/J4mVMyK,KAAK,SAASrvB,EAAQkB,EAAOJ,GgKxnVnCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,aACAE,QACA,oBACA,UAEAD,YAAA,8KACAE,UACA,kBACA,iBACA,mBAEAK,SACA,OACA,SACA,MACA,ahK6nVM0K,KAAK,SAAStvB,EAAQkB,EAAOJ,GiK9oVnCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,aACAE,QACA,oBACA,SACA,eAEAD,YAAA,iDACAE,UACA,kBACA,oBACA,oBACA,uBACA,uBACA,gCACA,iCAEAK,SACA,OACA,SACA,MACA,OACA,MACA,MACA,ajKmpVM2K,KAAK,SAASvvB,EAAQkB,EAAOJ,GkK5qVnCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,aACAE,QACA,qBACA,UACA,gBAEAD,YAAA,mDACAE,UACA,mBACA,qBACA,qBACA,wBACA,wBACA,8BAEAK,SACA,MACA,SACA,MACA,OACA,MACA,MACA,alKirVM4K,KAAK,SAASxvB,EAAQkB,EAAOJ,GmKzsVnCI,EAAAJ,SACAyW,KAAA,SACA6M,SAAA,aACAE,QACA,uBACA,aAEAD,YAAA,mLACAE,UACA,kBACA,yBAEAK,SACA,MACA,OACA,MACA,OACA,MACA,MACA,MACA,qBnK8sVM6K,KAAK,SAASzvB,EAAQkB,EAAOJ,GoKluVnCI,EAAAJ,SACAyW,KAAA,MACA6M,SAAA,aACAE,QACA,oBACA,SACA,eAEAD,YAAA,iDACAE,UACA,kBACA,oBACA,oBACA,uBACA,uBACA,gCACA,iCAEAK,SACA,MACA,OACA,SACA,OACA,MACA,MACA,apKuuVM8K,KAAK,SAAS1vB,EAAQkB,EAAOJ,GqKhwVnCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,aACAE,QACA,qBACA,UACA,4BAEAD,YAAA,2HACAE,UACA,gBACA,uBAEAK,SACA,MACA,OACA,MACA,SACA,OACA,MACA,MACA,arKqwVM+K,KAAK,SAAS3vB,EAAQkB,EAAOJ,GsK1xVnCI,EAAAJ,SACAyW,KAAA,OACA6M,SAAA,aACAE,QACA,qBACA,WAEAD,YAAA,qCACAE,UACA,gBACA,kBACA,sBAEAK,SACA,MACA,OACA,MACA,SACA,MACA,MACA,MACA,atK+xVMgL,KAAK,SAAS5vB,EAAQkB,EAAOJ,GuKpzVnCI,EAAAJ,SACAyW,KAAA,cACA6M,SAAA,aACAE,QACA,iCACA,gDACA,+BAEAD,YAAA,sWACAE,UACA,kCACA,yCACA,gCACA,yCAEAK,SACA,OACA,SACA,MACA,MACA,OACA,MACA,MACA,avKwzVMiL,KA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","file":"sd-expression-engine.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * @license Complex.js v2.0.3 11/02/2016\n *\n * Copyright (c) 2016, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class allows the manipulation of complex numbers.\n * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\n *\n * Object form\n * { re: <real>, im: <imaginary> }\n * { arg: <angle>, abs: <radius> }\n * { phi: <angle>, r: <radius> }\n *\n * Array / Vector form\n * [ real, imaginary ]\n *\n * Double form\n * 99.3 - Single double value\n *\n * String form\n * '23.1337' - Simple real number\n * '15+3i' - a simple complex number\n * '3-i' - a simple complex number\n *\n * Example:\n *\n * var c = new Complex('99.3+8i');\n * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);\n *\n */\n\n(function(root) {\n\n  'use strict';\n\n  var P = {'re': 0, 'im': 0};\n\n  var cosh = function(x) {\n    return (Math.exp(x) + Math.exp(-x)) * 0.5;\n  };\n\n  var sinh = function(x) {\n    return (Math.exp(x) - Math.exp(-x)) * 0.5;\n  };\n\n  var hypot = function(x, y) {\n\n      var a = Math.abs(x);\n      var b = Math.abs(y);\n\n      if (a < 3000 && b < 3000) {\n        return Math.sqrt(a * a + b * b);\n      }\n\n      if (a < b) {\n        a = b;\n        b = x / y;\n      } else {\n        b = y / x;\n      }\n      return a * Math.sqrt(1 + b * b);\n  };\n\n  var parser_exit = function() {\n    throw SyntaxError('Invalid Param');\n  };\n\n  /**\n   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n   *\n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n  function logHypot(a, b) {\n\n    var _a = Math.abs(a);\n    var _b = Math.abs(b);\n\n    if (a === 0) {\n      return Math.log(_b);\n    }\n\n    if (b === 0) {\n      return Math.log(_a);\n    }\n\n    if (_a < 3000 && _b < 3000) {\n      return Math.log(a * a + b * b) * 0.5;\n    }\n\n    /* I got 4 ideas to compute this property without overflow:\n     *\n     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate\n     *\n     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)\n\n     Math.log(a * a + b * b) / 2\n\n     *\n     *\n     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)\n\n     var fn = function(a, b) {\n     a = Math.abs(a);\n     b = Math.abs(b);\n     var t = Math.min(a, b);\n     a = Math.max(a, b);\n     t = t / a;\n\n     return Math.log(a) + Math.log(1 + t * t) / 2;\n     };\n\n     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)\n\n     Math.log(a / Math.cos(Math.atan2(b, a)))\n\n     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)\n\n     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))\n\n     */\n\n    return Math.log(a / Math.cos(Math.atan2(b, a)));\n  }\n\n  var parse = function(a, b) {\n\n    if (a === undefined || a === null) {\n      P['re'] =\n      P['im'] = 0;\n    } else if (b !== undefined) {\n      P['re'] = a;\n      P['im'] = b;\n    } else switch (typeof a) {\n\n      case 'object':\n\n        if ('im' in a && 're' in a) {\n          P['re'] = a['re'];\n          P['im'] = a['im'];\n        } else if ('abs' in a && 'arg' in a) {\n          P['re'] = a['abs'] * Math.cos(a['arg']);\n          P['im'] = a['abs'] * Math.sin(a['arg']);\n        } else if ('r' in a && 'phi' in a) {\n          P['re'] = a['r'] * Math.cos(a['phi']);\n          P['im'] = a['r'] * Math.sin(a['phi']);\n        } else if (a.length === 2) { // Quick array check\n          P['re'] = a[0];\n          P['im'] = a[1];\n        } else {\n          parser_exit();\n        }\n        break;\n\n      case 'string':\n\n        P['im'] = /* void */\n        P['re'] = 0;\n\n        var tokens = a.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n        var plus = 1;\n        var minus = 0;\n\n        if (tokens === null) {\n          parser_exit();\n        }\n\n        for (var i = 0; i < tokens.length; i++) {\n\n          var c = tokens[i];\n\n          if (c === ' ' || c === '\\t' || c === '\\n') {\n            /* void */\n          } else if (c === '+') {\n            plus++;\n          } else if (c === '-') {\n            minus++;\n          } else if (c === 'i' || c === 'I') {\n\n            if (plus + minus === 0) {\n              parser_exit();\n            }\n\n            if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {\n              P['im']+= parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);\n              i++;\n            } else {\n              P['im']+= parseFloat((minus % 2 ? '-' : '') + '1');\n            }\n            plus = minus = 0;\n\n          } else {\n\n            if (plus + minus === 0 || isNaN(c)) {\n              parser_exit();\n            }\n\n            if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {\n              P['im']+= parseFloat((minus % 2 ? '-' : '') + c);\n              i++;\n            } else {\n              P['re']+= parseFloat((minus % 2 ? '-' : '') + c);\n            }\n            plus = minus = 0;\n          }\n        }\n\n        // Still something on the stack\n        if (plus + minus > 0) {\n          parser_exit();\n        }\n        break;\n\n      case 'number':\n        P['im'] = 0;\n        P['re'] = a;\n        break;\n\n      default:\n        parser_exit();\n    }\n\n    if (isNaN(P['re']) || isNaN(P['im'])) {\n      // If a calculation is NaN, we treat it as NaN and don't throw\n      //parser_exit();\n    }\n  };\n\n  /**\n   * @constructor\n   * @returns {Complex}\n   */\n  function Complex(a, b) {\n\n    if (!(this instanceof Complex)) {\n      return new Complex(a, b);\n    }\n\n    parse(a, b); // mutates P\n\n    this['re'] = P['re'];\n    this['im'] = P['im'];\n  }\n\n  Complex.prototype = {\n\n    're': 0,\n    'im': 0,\n\n    /**\n     * Calculates the sign of a complex number, which is a normalized complex\n     *\n     * @returns {Complex}\n     */\n    'sign': function() {\n\n      var abs = this['abs']();\n\n      return new Complex(\n              this['re'] / abs,\n              this['im'] / abs);\n    },\n\n    /**\n     * Adds two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'add': function(a, b) {\n\n      parse(a, b); // mutates P\n\n      return new Complex(\n              this['re'] + P['re'],\n              this['im'] + P['im']);\n    },\n\n    /**\n     * Subtracts two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'sub': function(a, b) {\n\n      parse(a, b); // mutates P\n\n      return new Complex(\n              this['re'] - P['re'],\n              this['im'] - P['im']);\n    },\n\n    /**\n     * Multiplies two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'mul': function(a, b) {\n\n      parse(a, b); // mutates P\n\n      // Besides the addition/subtraction, this helps having a solution for real Infinity\n      if (P['im'] === 0 && this['im'] === 0) {\n        return new Complex(this['re'] * P['re'], 0);\n      }\n\n      return new Complex(\n              this['re'] * P['re'] - this['im'] * P['im'],\n              this['re'] * P['im'] + this['im'] * P['re']);\n    },\n\n    /**\n     * Divides two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'div': function(a, b) {\n\n      parse(a, b); // mutates P\n\n      a = this['re'];\n      b = this['im'];\n\n      var c = P['re'];\n      var d = P['im'];\n      var t, x;\n\n      if (0 === d) {\n        if (0 === c) {\n          // Divisor is zero\n          return new Complex(\n                (a !== 0) ? (a / 0) : 0,\n                (b !== 0) ? (b / 0) : 0);\n        } else {\n          // Divisor is real\n          return new Complex(a / c, b / c);\n        }\n      }\n\n      if (Math.abs(c) < Math.abs(d)) {\n\n        x = c / d;\n        t = c * x + d;\n\n        return new Complex(\n                (a * x + b) / t,\n                (b * x - a) / t);\n\n      } else {\n\n        x = d / c;\n        t = d * x + c;\n\n        return new Complex(\n                (a + b * x) / t,\n                (b - a * x) / t);\n      }\n    },\n\n    /**\n     * Calculate the power of two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'pow': function(a, b) {\n\n      parse(a, b); // mutates P\n\n      a = this['re'];\n      b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return Complex['ZERO'];\n      }\n\n      // If the exponent is real\n      if (P['im'] === 0) {\n\n        if (b === 0 && a >= 0) {\n\n          return new Complex(Math.pow(a, P['re']), 0);\n\n        } else if (a === 0) { // If base is fully imaginary\n\n          switch ((P['re'] % 4 + 4) % 4) {\n            case 0:\n              return new Complex(Math.pow(b, P['re']), 0);\n            case 1:\n              return new Complex(0, Math.pow(b, P['re']));\n            case 2:\n              return new Complex(-Math.pow(b, P['re']), 0);\n            case 3:\n              return new Complex(0, -Math.pow(b, P['re']));\n          }\n        }\n      }\n\n      /* I couldn't find a good formula, so here is a derivation and optimization\n       *\n       * z_1^z_2 = (a + bi)^(c + di)\n       *         = exp((c + di) * log(a + bi)\n       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))\n       * =>...\n       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       *\n       * =>...\n       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       *\n       * =>\n       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))\n       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))\n       *\n       */\n\n      var arg = Math.atan2(b, a);\n      var loh = logHypot(a, b);\n\n      a = Math.exp(P['re'] * loh - P['im'] * arg);\n      b = P['im'] * loh + P['re'] * arg;\n      return new Complex(\n              a * Math.cos(b),\n              a * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex square root\n     *\n     * @returns {Complex}\n     */\n    'sqrt': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var r = this['abs']();\n\n      var re, im;\n\n      if (a >= 0) {\n\n        if (b === 0) {\n          return new Complex(Math.sqrt(a), 0);\n        }\n\n        re = 0.5 * Math.sqrt(2.0 * (r + a));\n      } else {\n        re = Math.abs(b) / Math.sqrt(2 * (r - a));\n      }\n\n      if (a <= 0) {\n        im = 0.5 * Math.sqrt(2.0 * (r - a));\n      } else {\n        im = Math.abs(b) / Math.sqrt(2 * (r + a));\n      }\n\n      return new Complex(re, b < 0 ? -im : im);\n    },\n\n    /**\n     * Calculate the complex exponent\n     *\n     * @returns {Complex}\n     */\n    'exp': function() {\n\n      var tmp = Math.exp(this['re']);\n\n      if (this['im'] === 0) {\n        //return new Complex(tmp, 0);\n      }\n      return new Complex(\n              tmp * Math.cos(this['im']),\n              tmp * Math.sin(this['im']));\n    },\n\n    /**\n     * Calculate the natural log\n     *\n     * @returns {Complex}\n     */\n    'log': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0 && a > 0) {\n        //return new Complex(Math.log(a), 0);\n      }\n\n      return new Complex(\n              logHypot(a, b),\n              Math.atan2(b, a));\n    },\n\n    /**\n     * Calculate the magnitude of the complex number\n     *\n     * @returns {number}\n     */\n    'abs': function() {\n\n      return hypot(this['re'], this['im']);\n    },\n\n    /**\n     * Calculate the angle of the complex number\n     *\n     * @returns {number}\n     */\n    'arg': function() {\n\n      return Math.atan2(this['im'], this['re']);\n    },\n\n    /**\n     * Calculate the sine of the complex number\n     *\n     * @returns {Complex}\n     */\n    'sin': function() {\n\n      // sin(c) = (e^b - e^(-b)) / (2i)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n              Math.sin(a) * cosh(b),\n              Math.cos(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the cosine\n     *\n     * @returns {Complex}\n     */\n    'cos': function() {\n\n      // cos(z) = (e^b + e^(-b)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n              Math.cos(a) * cosh(b),\n             -Math.sin(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the tangent\n     *\n     * @returns {Complex}\n     */\n    'tan': function() {\n\n      // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) + cosh(b);\n\n      return new Complex(\n              Math.sin(a) / d,\n              sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cotangent\n     *\n     * @returns {Complex}\n     */\n    'cot': function() {\n\n      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) - cosh(b);\n\n      return new Complex(\n             -Math.sin(a) / d,\n              sinh(b) / d);\n    },\n\n    /**\n     * Calculate the secant\n     *\n     * @returns {Complex}\n     */\n    'sec': function() {\n\n      // sec(c) = 2 / (e^(ci) + e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n              Math.cos(a) * cosh(b) / d,\n              Math.sin(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cosecans\n     *\n     * @returns {Complex}\n     */\n    'csc': function() {\n\n      // csc(c) = 2i / (e^(ci) - e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n              Math.sin(a) * cosh(b) / d,\n             -Math.cos(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the complex arcus sinus\n     *\n     * @returns {Complex}\n     */\n    'asin': function() {\n\n      // asin(c) = -i * log(ci + sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n               b * b - a * a + 1,\n              -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n              t1['re'] - b,\n              t1['im'] + a)['log']();\n\n      return new Complex(t2['im'], -t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cosinus\n     *\n     * @returns {Complex}\n     */\n    'acos': function() {\n\n      // acos(c) = i * log(c - i * sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n               b * b - a * a + 1,\n              -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n              t1['re'] - b,\n              t1['im'] + a)['log']();\n\n      return new Complex(Math.PI / 2 - t2['im'], t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus tangent\n     *\n     * @returns {Complex}\n     */\n    'atan': function() {\n\n      // atan(c) = i / 2 log((i + x) / (i - x))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0) {\n\n        if (b === 1) {\n          return new Complex(0, Infinity);\n        }\n\n        if (b === -1) {\n          return new Complex(0, -Infinity);\n        }\n      }\n\n      var d = a * a + (1.0 - b) * (1.0 - b);\n\n      var t1 = new Complex(\n              (1 - b * b - a * a) / d,\n              -2 * a / d).log();\n\n      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cotangent\n     *\n     * @returns {Complex}\n     */\n    'acot': function() {\n\n      // acot(c) = i / 2 log((c - i) / (c + i))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n        return new Complex(Math.atan2(1, a), 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                     -b / d).atan()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ?-b / 0 : 0).atan();\n    },\n\n    /**\n     * Calculate the complex arcus secant\n     *\n     * @returns {Complex}\n     */\n    'asec': function() {\n\n      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                      -b / d).acos()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ?-b / 0 : 0).acos();\n    },\n\n    /**\n     * Calculate the complex arcus cosecans\n     *\n     * @returns {Complex}\n     */\n    'acsc': function() {\n\n      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(Math.PI / 2, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                     -b / d).asin()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ?-b / 0 : 0).asin();\n    },\n\n    /**\n     * Calculate the complex sinh\n     *\n     * @returns {Complex}\n     */\n    'sinh': function() {\n\n      // sinh(c) = (e^c - e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n              sinh(a) * Math.cos(b),\n              cosh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex cosh\n     *\n     * @returns {Complex}\n     */\n    'cosh': function() {\n\n      // cosh(c) = (e^c + e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n              cosh(a) * Math.cos(b),\n              sinh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex tanh\n     *\n     * @returns {Complex}\n     */\n    'tanh': function() {\n\n      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) + Math.cos(b);\n\n      return new Complex(\n              sinh(a) / d,\n              Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'coth': function() {\n\n      // coth(c) = (e^c + e^-c) / (e^c - e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) - Math.cos(b);\n\n      return new Complex(\n              sinh(a) / d,\n             -Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'csch': function() {\n\n      // csch(c) = 2 / (e^c - e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) - cosh(2 * a);\n\n      return new Complex(\n           -2 * sinh(a) * Math.cos(b) / d,\n            2 * cosh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex sech\n     *\n     * @returns {Complex}\n     */\n    'sech': function() {\n\n      // sech(c) = 2 / (e^c + e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) + cosh(2 * a);\n\n      return new Complex(\n              2 * cosh(a) * Math.cos(b) / d,\n             -2 * sinh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex asinh\n     *\n     * @returns {Complex}\n     */\n    'asinh': function() {\n\n      // asinh(c) = log(c + sqrt(c^2 + 1))\n\n      var tmp = this['im'];\n      this['im'] = -this['re'];\n      this['re'] = tmp;\n      var res = this['asin']();\n\n      this['re'] = -this['im'];\n      this['im'] = tmp;\n      tmp = res['re'];\n\n      res['re'] = -res['im'];\n      res['im'] = tmp;\n      return res;\n    },\n\n    /**\n     * Calculate the complex asinh\n     *\n     * @returns {Complex}\n     */\n    'acosh': function() {\n\n      // acosh(c) = log(c + sqrt(c^2 - 1))\n\n      var tmp;\n      var res = this['acos']();\n      if (res['im'] <= 0) {\n        tmp = res['re'];\n        res['re'] = -res['im'];\n        res['im'] = tmp;\n      } else {\n        tmp = res['im'];\n        res['im'] = -res['re'];\n        res['re'] = tmp;\n      }\n      return res;\n    },\n\n    /**\n     * Calculate the complex atanh\n     *\n     * @returns {Complex}\n     */\n    'atanh': function() {\n\n      // atanh(c) = log((1+c) / (1-c)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var noIM = a > 1 && b === 0;\n      var oneMinus = 1 - a;\n      var onePlus = 1 + a;\n      var d = oneMinus * oneMinus + b * b;\n\n      var x = (d !== 0)\n              ? new Complex(\n                      (onePlus * oneMinus - b * b) / d,\n                      (b * oneMinus + onePlus * b) / d)\n              : new Complex(\n                      (a !== -1) ? (a / 0) : 0,\n                      (b !== 0) ? (b / 0) : 0);\n\n      var temp = x['re'];\n      x['re'] = logHypot(x['re'], x['im']) / 2;\n      x['im'] = Math.atan2(x['im'], temp) / 2;\n      if (noIM) {\n        x['im'] = -x['im'];\n      }\n      return x;\n    },\n\n    /**\n     * Calculate the complex acoth\n     *\n     * @returns {Complex}\n     */\n    'acoth': function() {\n\n      // acoth(c) = log((c+1) / (c-1)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n\n        return new Complex(0, Math.PI / 2);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                     -b / d).atanh()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ?-b / 0 : 0).atanh();\n    },\n\n    /**\n     * Calculate the complex acsch\n     *\n     * @returns {Complex}\n     */\n    'acsch': function() {\n\n      // acsch(c) = log((1+sqrt(1+c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n\n        return new Complex(\n                (a !== 0)\n                ? Math.log(a + Math.sqrt(a * a + 1))\n                : Infinity, 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                      -b / d).asinh()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ?-b / 0 : 0).asinh();\n    },\n\n    /**\n     * Calculate the complex asech\n     *\n     * @returns {Complex}\n     */\n    'asech': function() {\n\n      // asech(c) = log((1+sqrt(1-c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(Infinity, 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                     -b / d).acosh()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ?-b / 0 : 0).acosh();\n    },\n\n    /**\n     * Calculate the complex inverse 1/z\n     *\n     * @returns {Complex}\n     */\n    'inverse': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var d = a * a + b * b;\n\n      return new Complex(\n              a !== 0 ? a / d : 0,\n              b !== 0 ?-b / d : 0);\n    },\n\n    /**\n     * Returns the complex conjugate\n     *\n     * @returns {Complex}\n     */\n    'conjugate': function() {\n\n      return new Complex(this['re'], -this['im']);\n    },\n\n    /**\n     * Gets the negated complex number\n     *\n     * @returns {Complex}\n     */\n    'neg': function() {\n\n      return new Complex(-this['re'], -this['im']);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'ceil': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n              Math.ceil(this['re'] * places) / places,\n              Math.ceil(this['im'] * places) / places);\n    },\n\n    /**\n     * Floors the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'floor': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n              Math.floor(this['re'] * places) / places,\n              Math.floor(this['im'] * places) / places);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'round': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n              Math.round(this['re'] * places) / places,\n              Math.round(this['im'] * places) / places);\n    },\n\n    /**\n     * Compares two complex numbers\n     *\n     * @returns {boolean}\n     */\n    'equals': function(a, b) {\n\n      parse(a, b); // mutates P\n\n      return Math.abs(P['re'] - this['re']) <= Complex['EPSILON'] &&\n             Math.abs(P['im'] - this['im']) <= Complex['EPSILON'];\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * @returns {Complex}\n     */\n    'clone': function() {\n\n      return new Complex(this['re'], this['im']);\n    },\n\n    /**\n     * Gets a string of the actual complex number\n     *\n     * @returns {string}\n     */\n    'toString': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var ret = '';\n\n      if (isNaN(a) || isNaN(b)) {\n        return 'NaN';\n      }\n\n      if (a !== 0) {\n        ret+= a;\n      }\n\n      if (b !== 0) {\n\n        if (a !== 0) {\n          ret+= b < 0 ? ' - ' : ' + ';\n        } else if (b < 0) {\n          ret+= '-';\n        }\n\n        b = Math.abs(b);\n\n        if (1 !== b) {\n          ret+= b;\n        }\n        ret+= 'i';\n      }\n\n      if (!ret)\n        return '0';\n\n      return ret;\n    },\n\n    /**\n     * Returns the actual number as a vector\n     *\n     * @returns {Array}\n     */\n    'toVector': function() {\n\n      return [this['re'], this['im']];\n    },\n\n    /**\n     * Returns the actual real value of the current object\n     *\n     * @returns {number|null}\n     */\n    'valueOf': function() {\n\n      if (this['im'] === 0) {\n        return this['re'];\n      }\n      return null;\n    },\n\n    /**\n     * Checks if the given complex number is not a number\n     *\n     * @returns {boolean}\n     */\n    'isNaN': function() {\n      return isNaN(this['re']) || isNaN(this['im']);\n    },\n\n    /**\n     * Checks if the given complex number is finite\n     *\n     * @returns {boolean}\n     */\n    'isFinite': function() {\n      return isFinite(this['re']) && isFinite(this['im']);\n    }\n  };\n\n  Complex['ZERO'] = new Complex(0, 0);\n  Complex['ONE'] = new Complex(1, 0);\n  Complex['I'] = new Complex(0, 1);\n  Complex['PI'] = new Complex(Math.PI, 0);\n  Complex['E'] = new Complex(Math.E, 0);\n  Complex['EPSILON'] = 1e-16;\n\n  if (typeof define === 'function' && define['amd']) {\n    define([], function() {\n      return Complex;\n    });\n  } else if (typeof exports === 'object') {\n    module['exports'] = Complex;\n  } else {\n    root['Complex'] = Complex;\n  }\n\n})(this);\n","require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * @license Complex.js v2.0.3 11/02/2016\n *\n * Copyright (c) 2016, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class allows the manipulation of complex numbers.\n * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\n *\n * Object form\n * { re: <real>, im: <imaginary> }\n * { arg: <angle>, abs: <radius> }\n * { phi: <angle>, r: <radius> }\n *\n * Array / Vector form\n * [ real, imaginary ]\n *\n * Double form\n * 99.3 - Single double value\n *\n * String form\n * '23.1337' - Simple real number\n * '15+3i' - a simple complex number\n * '3-i' - a simple complex number\n *\n * Example:\n *\n * var c = new Complex('99.3+8i');\n * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);\n *\n */\n\n(function(root) {\n\n  'use strict';\n\n  var P = {'re': 0, 'im': 0};\n\n  var cosh = function(x) {\n    return (Math.exp(x) + Math.exp(-x)) * 0.5;\n  };\n\n  var sinh = function(x) {\n    return (Math.exp(x) - Math.exp(-x)) * 0.5;\n  };\n\n  var hypot = function(x, y) {\n\n      var a = Math.abs(x);\n      var b = Math.abs(y);\n\n      if (a < 3000 && b < 3000) {\n        return Math.sqrt(a * a + b * b);\n      }\n\n      if (a < b) {\n        a = b;\n        b = x / y;\n      } else {\n        b = y / x;\n      }\n      return a * Math.sqrt(1 + b * b);\n  };\n\n  var parser_exit = function() {\n    throw SyntaxError('Invalid Param');\n  };\n\n  /**\n   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n   *\n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n  function logHypot(a, b) {\n\n    var _a = Math.abs(a);\n    var _b = Math.abs(b);\n\n    if (a === 0) {\n      return Math.log(_b);\n    }\n\n    if (b === 0) {\n      return Math.log(_a);\n    }\n\n    if (_a < 3000 && _b < 3000) {\n      return Math.log(a * a + b * b) * 0.5;\n    }\n\n    /* I got 4 ideas to compute this property without overflow:\n     *\n     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate\n     *\n     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)\n\n     Math.log(a * a + b * b) / 2\n\n     *\n     *\n     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)\n\n     var fn = function(a, b) {\n     a = Math.abs(a);\n     b = Math.abs(b);\n     var t = Math.min(a, b);\n     a = Math.max(a, b);\n     t = t / a;\n\n     return Math.log(a) + Math.log(1 + t * t) / 2;\n     };\n\n     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)\n\n     Math.log(a / Math.cos(Math.atan2(b, a)))\n\n     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)\n\n     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))\n\n     */\n\n    return Math.log(a / Math.cos(Math.atan2(b, a)));\n  }\n\n  var parse = function(a, b) {\n\n    if (a === undefined || a === null) {\n      P['re'] =\n      P['im'] = 0;\n    } else if (b !== undefined) {\n      P['re'] = a;\n      P['im'] = b;\n    } else switch (typeof a) {\n\n      case 'object':\n\n        if ('im' in a && 're' in a) {\n          P['re'] = a['re'];\n          P['im'] = a['im'];\n        } else if ('abs' in a && 'arg' in a) {\n          P['re'] = a['abs'] * Math.cos(a['arg']);\n          P['im'] = a['abs'] * Math.sin(a['arg']);\n        } else if ('r' in a && 'phi' in a) {\n          P['re'] = a['r'] * Math.cos(a['phi']);\n          P['im'] = a['r'] * Math.sin(a['phi']);\n        } else if (a.length === 2) { // Quick array check\n          P['re'] = a[0];\n          P['im'] = a[1];\n        } else {\n          parser_exit();\n        }\n        break;\n\n      case 'string':\n\n        P['im'] = /* void */\n        P['re'] = 0;\n\n        var tokens = a.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n        var plus = 1;\n        var minus = 0;\n\n        if (tokens === null) {\n          parser_exit();\n        }\n\n        for (var i = 0; i < tokens.length; i++) {\n\n          var c = tokens[i];\n\n          if (c === ' ' || c === '\\t' || c === '\\n') {\n            /* void */\n          } else if (c === '+') {\n            plus++;\n          } else if (c === '-') {\n            minus++;\n          } else if (c === 'i' || c === 'I') {\n\n            if (plus + minus === 0) {\n              parser_exit();\n            }\n\n            if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {\n              P['im']+= parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);\n              i++;\n            } else {\n              P['im']+= parseFloat((minus % 2 ? '-' : '') + '1');\n            }\n            plus = minus = 0;\n\n          } else {\n\n            if (plus + minus === 0 || isNaN(c)) {\n              parser_exit();\n            }\n\n            if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {\n              P['im']+= parseFloat((minus % 2 ? '-' : '') + c);\n              i++;\n            } else {\n              P['re']+= parseFloat((minus % 2 ? '-' : '') + c);\n            }\n            plus = minus = 0;\n          }\n        }\n\n        // Still something on the stack\n        if (plus + minus > 0) {\n          parser_exit();\n        }\n        break;\n\n      case 'number':\n        P['im'] = 0;\n        P['re'] = a;\n        break;\n\n      default:\n        parser_exit();\n    }\n\n    if (isNaN(P['re']) || isNaN(P['im'])) {\n      // If a calculation is NaN, we treat it as NaN and don't throw\n      //parser_exit();\n    }\n  };\n\n  /**\n   * @constructor\n   * @returns {Complex}\n   */\n  function Complex(a, b) {\n\n    if (!(this instanceof Complex)) {\n      return new Complex(a, b);\n    }\n\n    parse(a, b); // mutates P\n\n    this['re'] = P['re'];\n    this['im'] = P['im'];\n  }\n\n  Complex.prototype = {\n\n    're': 0,\n    'im': 0,\n\n    /**\n     * Calculates the sign of a complex number, which is a normalized complex\n     *\n     * @returns {Complex}\n     */\n    'sign': function() {\n\n      var abs = this['abs']();\n\n      return new Complex(\n              this['re'] / abs,\n              this['im'] / abs);\n    },\n\n    /**\n     * Adds two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'add': function(a, b) {\n\n      parse(a, b); // mutates P\n\n      return new Complex(\n              this['re'] + P['re'],\n              this['im'] + P['im']);\n    },\n\n    /**\n     * Subtracts two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'sub': function(a, b) {\n\n      parse(a, b); // mutates P\n\n      return new Complex(\n              this['re'] - P['re'],\n              this['im'] - P['im']);\n    },\n\n    /**\n     * Multiplies two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'mul': function(a, b) {\n\n      parse(a, b); // mutates P\n\n      // Besides the addition/subtraction, this helps having a solution for real Infinity\n      if (P['im'] === 0 && this['im'] === 0) {\n        return new Complex(this['re'] * P['re'], 0);\n      }\n\n      return new Complex(\n              this['re'] * P['re'] - this['im'] * P['im'],\n              this['re'] * P['im'] + this['im'] * P['re']);\n    },\n\n    /**\n     * Divides two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'div': function(a, b) {\n\n      parse(a, b); // mutates P\n\n      a = this['re'];\n      b = this['im'];\n\n      var c = P['re'];\n      var d = P['im'];\n      var t, x;\n\n      if (0 === d) {\n        if (0 === c) {\n          // Divisor is zero\n          return new Complex(\n                (a !== 0) ? (a / 0) : 0,\n                (b !== 0) ? (b / 0) : 0);\n        } else {\n          // Divisor is real\n          return new Complex(a / c, b / c);\n        }\n      }\n\n      if (Math.abs(c) < Math.abs(d)) {\n\n        x = c / d;\n        t = c * x + d;\n\n        return new Complex(\n                (a * x + b) / t,\n                (b * x - a) / t);\n\n      } else {\n\n        x = d / c;\n        t = d * x + c;\n\n        return new Complex(\n                (a + b * x) / t,\n                (b - a * x) / t);\n      }\n    },\n\n    /**\n     * Calculate the power of two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'pow': function(a, b) {\n\n      parse(a, b); // mutates P\n\n      a = this['re'];\n      b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return Complex['ZERO'];\n      }\n\n      // If the exponent is real\n      if (P['im'] === 0) {\n\n        if (b === 0 && a >= 0) {\n\n          return new Complex(Math.pow(a, P['re']), 0);\n\n        } else if (a === 0) { // If base is fully imaginary\n\n          switch ((P['re'] % 4 + 4) % 4) {\n            case 0:\n              return new Complex(Math.pow(b, P['re']), 0);\n            case 1:\n              return new Complex(0, Math.pow(b, P['re']));\n            case 2:\n              return new Complex(-Math.pow(b, P['re']), 0);\n            case 3:\n              return new Complex(0, -Math.pow(b, P['re']));\n          }\n        }\n      }\n\n      /* I couldn't find a good formula, so here is a derivation and optimization\n       *\n       * z_1^z_2 = (a + bi)^(c + di)\n       *         = exp((c + di) * log(a + bi)\n       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))\n       * =>...\n       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       *\n       * =>...\n       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       *\n       * =>\n       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))\n       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))\n       *\n       */\n\n      var arg = Math.atan2(b, a);\n      var loh = logHypot(a, b);\n\n      a = Math.exp(P['re'] * loh - P['im'] * arg);\n      b = P['im'] * loh + P['re'] * arg;\n      return new Complex(\n              a * Math.cos(b),\n              a * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex square root\n     *\n     * @returns {Complex}\n     */\n    'sqrt': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var r = this['abs']();\n\n      var re, im;\n\n      if (a >= 0) {\n\n        if (b === 0) {\n          return new Complex(Math.sqrt(a), 0);\n        }\n\n        re = 0.5 * Math.sqrt(2.0 * (r + a));\n      } else {\n        re = Math.abs(b) / Math.sqrt(2 * (r - a));\n      }\n\n      if (a <= 0) {\n        im = 0.5 * Math.sqrt(2.0 * (r - a));\n      } else {\n        im = Math.abs(b) / Math.sqrt(2 * (r + a));\n      }\n\n      return new Complex(re, b < 0 ? -im : im);\n    },\n\n    /**\n     * Calculate the complex exponent\n     *\n     * @returns {Complex}\n     */\n    'exp': function() {\n\n      var tmp = Math.exp(this['re']);\n\n      if (this['im'] === 0) {\n        //return new Complex(tmp, 0);\n      }\n      return new Complex(\n              tmp * Math.cos(this['im']),\n              tmp * Math.sin(this['im']));\n    },\n\n    /**\n     * Calculate the natural log\n     *\n     * @returns {Complex}\n     */\n    'log': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0 && a > 0) {\n        //return new Complex(Math.log(a), 0);\n      }\n\n      return new Complex(\n              logHypot(a, b),\n              Math.atan2(b, a));\n    },\n\n    /**\n     * Calculate the magnitude of the complex number\n     *\n     * @returns {number}\n     */\n    'abs': function() {\n\n      return hypot(this['re'], this['im']);\n    },\n\n    /**\n     * Calculate the angle of the complex number\n     *\n     * @returns {number}\n     */\n    'arg': function() {\n\n      return Math.atan2(this['im'], this['re']);\n    },\n\n    /**\n     * Calculate the sine of the complex number\n     *\n     * @returns {Complex}\n     */\n    'sin': function() {\n\n      // sin(c) = (e^b - e^(-b)) / (2i)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n              Math.sin(a) * cosh(b),\n              Math.cos(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the cosine\n     *\n     * @returns {Complex}\n     */\n    'cos': function() {\n\n      // cos(z) = (e^b + e^(-b)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n              Math.cos(a) * cosh(b),\n             -Math.sin(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the tangent\n     *\n     * @returns {Complex}\n     */\n    'tan': function() {\n\n      // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) + cosh(b);\n\n      return new Complex(\n              Math.sin(a) / d,\n              sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cotangent\n     *\n     * @returns {Complex}\n     */\n    'cot': function() {\n\n      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) - cosh(b);\n\n      return new Complex(\n             -Math.sin(a) / d,\n              sinh(b) / d);\n    },\n\n    /**\n     * Calculate the secant\n     *\n     * @returns {Complex}\n     */\n    'sec': function() {\n\n      // sec(c) = 2 / (e^(ci) + e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n              Math.cos(a) * cosh(b) / d,\n              Math.sin(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cosecans\n     *\n     * @returns {Complex}\n     */\n    'csc': function() {\n\n      // csc(c) = 2i / (e^(ci) - e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n              Math.sin(a) * cosh(b) / d,\n             -Math.cos(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the complex arcus sinus\n     *\n     * @returns {Complex}\n     */\n    'asin': function() {\n\n      // asin(c) = -i * log(ci + sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n               b * b - a * a + 1,\n              -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n              t1['re'] - b,\n              t1['im'] + a)['log']();\n\n      return new Complex(t2['im'], -t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cosinus\n     *\n     * @returns {Complex}\n     */\n    'acos': function() {\n\n      // acos(c) = i * log(c - i * sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n               b * b - a * a + 1,\n              -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n              t1['re'] - b,\n              t1['im'] + a)['log']();\n\n      return new Complex(Math.PI / 2 - t2['im'], t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus tangent\n     *\n     * @returns {Complex}\n     */\n    'atan': function() {\n\n      // atan(c) = i / 2 log((i + x) / (i - x))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0) {\n\n        if (b === 1) {\n          return new Complex(0, Infinity);\n        }\n\n        if (b === -1) {\n          return new Complex(0, -Infinity);\n        }\n      }\n\n      var d = a * a + (1.0 - b) * (1.0 - b);\n\n      var t1 = new Complex(\n              (1 - b * b - a * a) / d,\n              -2 * a / d).log();\n\n      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cotangent\n     *\n     * @returns {Complex}\n     */\n    'acot': function() {\n\n      // acot(c) = i / 2 log((c - i) / (c + i))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n        return new Complex(Math.atan2(1, a), 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                     -b / d).atan()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ?-b / 0 : 0).atan();\n    },\n\n    /**\n     * Calculate the complex arcus secant\n     *\n     * @returns {Complex}\n     */\n    'asec': function() {\n\n      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                      -b / d).acos()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ?-b / 0 : 0).acos();\n    },\n\n    /**\n     * Calculate the complex arcus cosecans\n     *\n     * @returns {Complex}\n     */\n    'acsc': function() {\n\n      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(Math.PI / 2, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                     -b / d).asin()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ?-b / 0 : 0).asin();\n    },\n\n    /**\n     * Calculate the complex sinh\n     *\n     * @returns {Complex}\n     */\n    'sinh': function() {\n\n      // sinh(c) = (e^c - e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n              sinh(a) * Math.cos(b),\n              cosh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex cosh\n     *\n     * @returns {Complex}\n     */\n    'cosh': function() {\n\n      // cosh(c) = (e^c + e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n              cosh(a) * Math.cos(b),\n              sinh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex tanh\n     *\n     * @returns {Complex}\n     */\n    'tanh': function() {\n\n      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) + Math.cos(b);\n\n      return new Complex(\n              sinh(a) / d,\n              Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'coth': function() {\n\n      // coth(c) = (e^c + e^-c) / (e^c - e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) - Math.cos(b);\n\n      return new Complex(\n              sinh(a) / d,\n             -Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'csch': function() {\n\n      // csch(c) = 2 / (e^c - e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) - cosh(2 * a);\n\n      return new Complex(\n           -2 * sinh(a) * Math.cos(b) / d,\n            2 * cosh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex sech\n     *\n     * @returns {Complex}\n     */\n    'sech': function() {\n\n      // sech(c) = 2 / (e^c + e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) + cosh(2 * a);\n\n      return new Complex(\n              2 * cosh(a) * Math.cos(b) / d,\n             -2 * sinh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex asinh\n     *\n     * @returns {Complex}\n     */\n    'asinh': function() {\n\n      // asinh(c) = log(c + sqrt(c^2 + 1))\n\n      var tmp = this['im'];\n      this['im'] = -this['re'];\n      this['re'] = tmp;\n      var res = this['asin']();\n\n      this['re'] = -this['im'];\n      this['im'] = tmp;\n      tmp = res['re'];\n\n      res['re'] = -res['im'];\n      res['im'] = tmp;\n      return res;\n    },\n\n    /**\n     * Calculate the complex asinh\n     *\n     * @returns {Complex}\n     */\n    'acosh': function() {\n\n      // acosh(c) = log(c + sqrt(c^2 - 1))\n\n      var tmp;\n      var res = this['acos']();\n      if (res['im'] <= 0) {\n        tmp = res['re'];\n        res['re'] = -res['im'];\n        res['im'] = tmp;\n      } else {\n        tmp = res['im'];\n        res['im'] = -res['re'];\n        res['re'] = tmp;\n      }\n      return res;\n    },\n\n    /**\n     * Calculate the complex atanh\n     *\n     * @returns {Complex}\n     */\n    'atanh': function() {\n\n      // atanh(c) = log((1+c) / (1-c)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var noIM = a > 1 && b === 0;\n      var oneMinus = 1 - a;\n      var onePlus = 1 + a;\n      var d = oneMinus * oneMinus + b * b;\n\n      var x = (d !== 0)\n              ? new Complex(\n                      (onePlus * oneMinus - b * b) / d,\n                      (b * oneMinus + onePlus * b) / d)\n              : new Complex(\n                      (a !== -1) ? (a / 0) : 0,\n                      (b !== 0) ? (b / 0) : 0);\n\n      var temp = x['re'];\n      x['re'] = logHypot(x['re'], x['im']) / 2;\n      x['im'] = Math.atan2(x['im'], temp) / 2;\n      if (noIM) {\n        x['im'] = -x['im'];\n      }\n      return x;\n    },\n\n    /**\n     * Calculate the complex acoth\n     *\n     * @returns {Complex}\n     */\n    'acoth': function() {\n\n      // acoth(c) = log((c+1) / (c-1)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n\n        return new Complex(0, Math.PI / 2);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                     -b / d).atanh()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ?-b / 0 : 0).atanh();\n    },\n\n    /**\n     * Calculate the complex acsch\n     *\n     * @returns {Complex}\n     */\n    'acsch': function() {\n\n      // acsch(c) = log((1+sqrt(1+c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n\n        return new Complex(\n                (a !== 0)\n                ? Math.log(a + Math.sqrt(a * a + 1))\n                : Infinity, 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                      -b / d).asinh()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ?-b / 0 : 0).asinh();\n    },\n\n    /**\n     * Calculate the complex asech\n     *\n     * @returns {Complex}\n     */\n    'asech': function() {\n\n      // asech(c) = log((1+sqrt(1-c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(Infinity, 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n              ? new Complex(\n                      a / d,\n                     -b / d).acosh()\n              : new Complex(\n                      (a !== 0) ? a / 0 : 0,\n                      (b !== 0) ?-b / 0 : 0).acosh();\n    },\n\n    /**\n     * Calculate the complex inverse 1/z\n     *\n     * @returns {Complex}\n     */\n    'inverse': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var d = a * a + b * b;\n\n      return new Complex(\n              a !== 0 ? a / d : 0,\n              b !== 0 ?-b / d : 0);\n    },\n\n    /**\n     * Returns the complex conjugate\n     *\n     * @returns {Complex}\n     */\n    'conjugate': function() {\n\n      return new Complex(this['re'], -this['im']);\n    },\n\n    /**\n     * Gets the negated complex number\n     *\n     * @returns {Complex}\n     */\n    'neg': function() {\n\n      return new Complex(-this['re'], -this['im']);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'ceil': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n              Math.ceil(this['re'] * places) / places,\n              Math.ceil(this['im'] * places) / places);\n    },\n\n    /**\n     * Floors the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'floor': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n              Math.floor(this['re'] * places) / places,\n              Math.floor(this['im'] * places) / places);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'round': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n              Math.round(this['re'] * places) / places,\n              Math.round(this['im'] * places) / places);\n    },\n\n    /**\n     * Compares two complex numbers\n     *\n     * @returns {boolean}\n     */\n    'equals': function(a, b) {\n\n      parse(a, b); // mutates P\n\n      return Math.abs(P['re'] - this['re']) <= Complex['EPSILON'] &&\n             Math.abs(P['im'] - this['im']) <= Complex['EPSILON'];\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * @returns {Complex}\n     */\n    'clone': function() {\n\n      return new Complex(this['re'], this['im']);\n    },\n\n    /**\n     * Gets a string of the actual complex number\n     *\n     * @returns {string}\n     */\n    'toString': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var ret = '';\n\n      if (isNaN(a) || isNaN(b)) {\n        return 'NaN';\n      }\n\n      if (a !== 0) {\n        ret+= a;\n      }\n\n      if (b !== 0) {\n\n        if (a !== 0) {\n          ret+= b < 0 ? ' - ' : ' + ';\n        } else if (b < 0) {\n          ret+= '-';\n        }\n\n        b = Math.abs(b);\n\n        if (1 !== b) {\n          ret+= b;\n        }\n        ret+= 'i';\n      }\n\n      if (!ret)\n        return '0';\n\n      return ret;\n    },\n\n    /**\n     * Returns the actual number as a vector\n     *\n     * @returns {Array}\n     */\n    'toVector': function() {\n\n      return [this['re'], this['im']];\n    },\n\n    /**\n     * Returns the actual real value of the current object\n     *\n     * @returns {number|null}\n     */\n    'valueOf': function() {\n\n      if (this['im'] === 0) {\n        return this['re'];\n      }\n      return null;\n    },\n\n    /**\n     * Checks if the given complex number is not a number\n     *\n     * @returns {boolean}\n     */\n    'isNaN': function() {\n      return isNaN(this['re']) || isNaN(this['im']);\n    },\n\n    /**\n     * Checks if the given complex number is finite\n     *\n     * @returns {boolean}\n     */\n    'isFinite': function() {\n      return isFinite(this['re']) && isFinite(this['im']);\n    }\n  };\n\n  Complex['ZERO'] = new Complex(0, 0);\n  Complex['ONE'] = new Complex(1, 0);\n  Complex['I'] = new Complex(0, 1);\n  Complex['PI'] = new Complex(Math.PI, 0);\n  Complex['E'] = new Complex(Math.E, 0);\n  Complex['EPSILON'] = 1e-16;\n\n  if (typeof define === 'function' && define['amd']) {\n    define([], function() {\n      return Complex;\n    });\n  } else if (typeof exports === 'object') {\n    module['exports'] = Complex;\n  } else {\n    root['Complex'] = Complex;\n  }\n\n})(this);\n\n},{}],2:[function(require,module,exports){\n/*! decimal.js v7.2.3 https://github.com/MikeMcl/decimal.js/LICENCE */\r\n;(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js v7.2.3\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    Decimal = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = {};\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or ±Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * Math.pow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = Math.pow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = Math.pow(4, -k).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(Math.pow(5, -k));\r\n\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var halfPi,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.asin();\r\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return halfPi.minus(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is ±Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with different signs.\r\n      // Return NaN if both are ±Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is ±Infinity or x is ±0.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with the same sign.\r\n      // Return NaN if both are ±Infinity with different signs.\r\n      // Return y if x is finite and y is ±Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '1e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, ±Infinity or ±0...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n        ? NaN\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        // Return ±0 if either is ±0.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of the magnitude of `y` to the value\r\n   * of this Decimal.\r\n   *\r\n   * If the value of this Decimal is equidistant from two multiples of `y`, the rounding mode `rm`,\r\n   * or `Decimal.rounding` if `rm` is omitted, determines the direction of the nearest multiple.\r\n   *\r\n   * In the context of this method, rounding mode 4 (ROUND_HALF_UP) is the same as rounding mode 0\r\n   * (ROUND_UP), and so on.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm !== void 0) checkInt32(rm, 0, 8);\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      if (rm < 4) rm = [4, 5, 7, 8][rm];\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either ±Infinity, NaN or ±0?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n  // Add aliases to match BigDecimal method names.\r\n  // P.add = P.plus;\r\n  P.subtract = P.minus;\r\n  P.multiply = P.times;\r\n  P.divide = P.div;\r\n  P.remainder = P.mod;\r\n  P.compareTo = P.cmp;\r\n  P.negate = P.neg;\r\n   */\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, y,\r\n      len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = Math.pow(4, -k).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\r\n  function maxOrMin(Ctor, args, ltgt) {\r\n    var y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      } else if (x[ltgt](y)) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // ±Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) return taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    // Max k before Math.pow precision loss is 22\r\n    x = x.times(Math.pow(5, -k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both ±Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is ±Infinity or y is ±0\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is ±Infinity or x is ±0\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if ((v = obj[p = ps[i]]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if ((v = obj[p = 'crypto']) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (v instanceof Decimal) {\r\n        x.s = v.s;\r\n        x.e = v.e;\r\n        x.d = (v = v.d) ? v.slice() : v;\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n          x.e = e;\r\n          x.d = [v];\r\n          return;\r\n\r\n        // Infinity, NaN.\r\n        } else if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n\r\n      } else if (t !== 'string') {\r\n        throw Error(invalidArgument + v);\r\n      }\r\n\r\n      // Minus sign?\r\n      if (v.charCodeAt(0) === 45) {\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, 'lt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 'gt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(Decimal);\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self\r\n        ? self : Function('return this')();\r\n    }\r\n\r\n    noConflict = globalScope.Decimal;\r\n    Decimal.noConflict = function () {\r\n      globalScope.Decimal = noConflict;\r\n      return Decimal;\r\n    };\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n\n},{}],3:[function(require,module,exports){\n/**\n * @license Fraction.js v4.0.2 09/09/2015\n * http://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function (root) {\n\n  \"use strict\";\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  var MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function createError(name) {\n    var errorConstructor = function () {\n      var temp = Error.apply(this, arguments);\n      temp.name = this.name = name;\n      this.stack = temp.stack;\n      this.message = temp.message;\n    };\n\n    var IntermediateInheritor = function () {};\n    IntermediateInheritor.prototype = Error.prototype;\n    errorConstructor.prototype = new IntermediateInheritor();\n\n    return errorConstructor;\n  }\n\n  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');\n  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');\n\n  function assign(n, s) {\n\n    if (isNaN(n = parseInt(n, 10))) {\n      throwInvalidParam();\n    }\n    return n * s;\n  }\n\n  function throwInvalidParam() {\n    throw new InvalidParameter();\n  }\n\n  var parse = function (p1, p2) {\n\n    var n = 0, d = 1, s = 1;\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n    var A = 0, B = 1;\n    var C = 1, D = 1;\n\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n    } else\n      switch (typeof p1) {\n\n        case \"object\":\n        {\n          if (\"d\" in p1 && \"n\" in p1) {\n            n = p1[\"n\"];\n            d = p1[\"d\"];\n            if (\"s\" in p1)\n              n*= p1[\"s\"];\n          } else if (0 in p1) {\n            n = p1[0];\n            if (1 in p1)\n              d = p1[1];\n          } else {\n            throwInvalidParam();\n          }\n          s = n * d;\n          break;\n        }\n        case \"number\":\n        {\n          if (p1 < 0) {\n            s = p1;\n            p1 = -p1;\n          }\n\n          if (p1 % 1 === 0) {\n            n = p1;\n          } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n            if (p1 >= 1) {\n              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n              p1/= z;\n            }\n\n            // Using Farey Sequences\n            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n            while (B <= N && D <= N) {\n              M = (A + C) / (B + D);\n\n              if (p1 === M) {\n                if (B + D <= N) {\n                  n = A + C;\n                  d = B + D;\n                } else if (D > B) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n                break;\n\n              } else {\n\n                if (p1 > M) {\n                  A+= C;\n                  B+= D;\n                } else {\n                  C+= A;\n                  D+= B;\n                }\n\n                if (B > N) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n              }\n            }\n            n*= z;\n          } else if (isNaN(p1) || isNaN(p2)) {\n            d = n = NaN;\n          }\n          break;\n        }\n        case \"string\":\n        {\n          B = p1.match(/\\d+|./g);\n\n          if (B[A] === '-') {// Check for minus sign at the beginning\n            s = -1;\n            A++;\n          } else if (B[A] === '+') {// Check for plus sign at the beginning\n            A++;\n          }\n\n          if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n            w = assign(B[A++], s);\n          } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n            if (B[A] !== '.') { // Handle 0.5 and .5\n              v = assign(B[A++], s);\n            }\n            A++;\n\n            // Check for decimal places\n            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n              w = assign(B[A], s);\n              y = Math.pow(10, B[A].length);\n              A++;\n            }\n\n            // Check for repeating places\n            if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n              x = assign(B[A + 1], s);\n              z = Math.pow(10, B[A + 1].length) - 1;\n              A+= 3;\n            }\n\n          } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n            w = assign(B[A], s);\n            y = assign(B[A + 2], 1);\n            A+= 3;\n          } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n            v = assign(B[A], s);\n            w = assign(B[A + 2], s);\n            y = assign(B[A + 4], 1);\n            A+= 5;\n          }\n\n          if (B.length <= A) { // Check for more tokens on the stack\n            d = y * z;\n            s = /* void */\n                    n = x + d * v + z * w;\n            break;\n          }\n\n          /* Fall through on error */\n        }\n        default:\n          throwInvalidParam();\n      }\n\n    if (d === 0) {\n      throw new DivisionByZero();\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  var modpow = function (b, e, m) {\n\n    for (var r = 1; e > 0; b = (b * b) % m, e >>= 1) {\n\n      if (e & 1) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  };\n\n  var cycleLen = function (n, d) {\n\n    for (; d % 2 === 0;\n            d/= 2) {}\n\n    for (; d % 5 === 0;\n            d/= 5) {}\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n\n    for (var t = 1; rem !== 1; t++) {\n      rem = rem * 10 % d;\n\n      if (t > MAX_CYCLE_LEN)\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return t;\n  };\n\n  var cycleStart = function (n, d, len) {\n\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2)\n        return t;\n\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n    return 0;\n  };\n\n  var gcd = function (a, b) {\n\n    if (!a) return b;\n    if (!b) return a;\n\n    while (1) {\n      a%= b;\n      if (!a) return b;\n      b%= a;\n      if (!b) return a;\n    }\n  };\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n\n    if (!(this instanceof Fraction)) {\n      return new Fraction(a, b);\n    }\n\n    parse(a, b);\n\n    if (Fraction['REDUCE']) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\n    } else {\n      a = 1;\n    }\n\n    this[\"s\"] = P[\"s\"];\n    this[\"n\"] = P[\"n\"] / a;\n    this[\"d\"] = P[\"d\"] / a;\n  }\n\n  /**\n   * Boolean global variable to be able to disable automatic reduction of the fraction\n   *\n   */\n  Fraction['REDUCE'] = 1;\n\n  Fraction.prototype = {\n\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function () {\n\n      return new Fraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function () {\n\n      return new Fraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function (a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n              this[\"d\"] * P[\"d\"]\n              );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function (a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n              this[\"d\"] * P[\"d\"]\n              );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function (a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n              this[\"d\"] * P[\"d\"]\n              );\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function (a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n              this[\"d\"] * P[\"n\"]\n              );\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function () {\n      return new Fraction(this);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function (a, b) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return new Fraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        Fraction(0, 0); // Throw DivisionByZero\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return new Fraction(\n              (this[\"s\"] * P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n              P[\"d\"] * this[\"d\"]\n              );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function (a, b) {\n\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return new Fraction(gcd(P[\"n\"], this[\"n\"]), P[\"d\"] * this[\"d\"] / gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function (a, b) {\n\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return new Fraction;\n      }\n      return new Fraction(P[\"n\"] * this[\"n\"] / gcd(P[\"n\"], this[\"n\"]), gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function (places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function (places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function (places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denumerator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function () {\n\n      return new Fraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some integer exponent\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function (m) {\n\n      if (m < 0) {\n        return new Fraction(Math.pow(this['s'] * this[\"d\"], -m), Math.pow(this[\"n\"], -m));\n      } else {\n        return new Fraction(Math.pow(this['s'] * this[\"n\"], m), Math.pow(this[\"d\"], m));\n      }\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function (a, b) {\n\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function (a, b) {\n\n      parse(a, b);\n      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n      return (0 < t) - (t < 0);\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function (a, b) {\n\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function () {\n\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n     **/\n    'toFraction': function (excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str+= '-';\n      }\n\n      if (d === 1) {\n        str+= n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str+= whole;\n          str+= \" \";\n          n%= d;\n        }\n\n        str+= n;\n        str+= '/';\n        str+= d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function (excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str+= '-';\n      }\n\n      if (d === 1) {\n        str+= n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str+= whole;\n          n%= d;\n        }\n\n        str+= \"\\\\frac{\";\n        str+= n;\n        str+= '}{';\n        str+= d;\n        str+= '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function () {\n\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function () {\n\n      var g;\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      if (!Fraction['REDUCE']) {\n        g = gcd(N, D);\n        N/= g;\n        D/= g;\n      }\n\n      var dec = 15; // 15 = decimal places when no repitation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] === -1 ? \"-\" : \"\";\n\n      str+= N / D | 0;\n\n      N%= D;\n      N*= 10;\n\n      if (N)\n        str+= \".\";\n\n      if (cycLen) {\n\n        for (var i = cycOff; i--; ) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n        str+= \"(\";\n        for (var i = cycLen; i--; ) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n        str+= \")\";\n      } else {\n        for (var i = dec; N && i--; ) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n      }\n      return str;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function () {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    module[\"exports\"] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n\n})(this);\n\n},{}],4:[function(require,module,exports){\n/*\r\n * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license\r\n * Author: Jim Palmer (based on chunking idea from Dave Koelle)\r\n */\r\n/*jshint unused:false */\r\nmodule.exports = function naturalSort (a, b) {\r\n\t\"use strict\";\r\n\tvar re = /(^([+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?$|^0x[0-9a-f]+$|\\d+)/gi,\r\n\t\tsre = /(^[ ]*|[ ]*$)/g,\r\n\t\tdre = /(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,\r\n\t\thre = /^0x[0-9a-f]+$/i,\r\n\t\tore = /^0/,\r\n\t\ti = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },\r\n\t\t// convert all to strings strip whitespace\r\n\t\tx = i(a).replace(sre, '') || '',\r\n\t\ty = i(b).replace(sre, '') || '',\r\n\t\t// chunk/tokenize\r\n\t\txN = x.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\tyN = y.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\t// numeric, hex or date detection\r\n\t\txD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),\r\n\t\tyD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,\r\n\t\toFxNcL, oFyNcL;\r\n\t// first try and sort Hex codes or Dates\r\n\tif (yD) {\r\n\t\tif ( xD < yD ) { return -1; }\r\n\t\telse if ( xD > yD ) { return 1; }\r\n\t}\r\n\t// natural sorting through split numeric strings and default strings\r\n\tfor(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\r\n\t\t// find floats not starting with '0', string or 0 if not defined (Clint Priest)\r\n\t\toFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;\r\n\t\toFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;\r\n\t\t// handle numeric vs string comparison - number < string - (Kyle Adams)\r\n\t\tif (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }\r\n\t\t// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\r\n\t\telse if (typeof oFxNcL !== typeof oFyNcL) {\r\n\t\t\toFxNcL += '';\r\n\t\t\toFyNcL += '';\r\n\t\t}\r\n\t\tif (oFxNcL < oFyNcL) { return -1; }\r\n\t\tif (oFxNcL > oFyNcL) { return 1; }\r\n\t}\r\n\treturn 0;\r\n};\r\n\n},{}],5:[function(require,module,exports){\nmodule.exports = require('./lib/core/core');\n},{\"./lib/core/core\":6}],6:[function(require,module,exports){\nvar isFactory = require('./../utils/object').isFactory;\nvar typedFactory = require('./typed');\nvar emitter = require('./../utils/emitter');\n\nvar importFactory = require('./function/import');\nvar configFactory = require('./function/config');\n\n/**\n * Math.js core. Creates a new, empty math.js instance\n * @param {Object} [options] Available options:\n *                            {number} epsilon\n *                              Minimum relative difference between two\n *                              compared values, used by all comparison functions.\n *                            {string} matrix\n *                              A string 'Matrix' (default) or 'Array'.\n *                            {string} number\n *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n *                            {number} precision\n *                              The number of significant digits for BigNumbers.\n *                              Not applicable for Numbers.\n *                            {boolean} predictable\n *                              Predictable output type of functions. When true,\n *                              output type depends only on the input types. When\n *                              false (default), output type can vary depending\n *                              on input values. For example `math.sqrt(-4)`\n *                              returns `complex('2i')` when predictable is false, and\n *                              returns `NaN` when true.\n *                            {string} randomSeed\n *                              Random seed for seeded pseudo random number generator.\n *                              Set to null to randomly seed.\n * @returns {Object} Returns a bare-bone math.js instance containing\n *                   functions:\n *                   - `import` to add new functions\n *                   - `config` to change configuration\n *                   - `on`, `off`, `once`, `emit` for events\n */\nexports.create = function create (options) {\n  // simple test for ES5 support\n  if (typeof Object.create !== 'function') {\n    throw new Error('ES5 not supported by this JavaScript engine. ' +\n    'Please load the es5-shim and es5-sham library for compatibility.');\n  }\n\n  // cached factories and instances\n  var factories = [];\n  var instances = [];\n\n  // create a namespace for the mathjs instance, and attach emitter functions\n  var math = emitter.mixin({});\n  math.type = {};\n  math.expression = {\n    transform: {},\n    mathWithTransform: {}\n  };\n\n  // create a new typed instance\n  math.typed = typedFactory.create(math.type);\n\n  // create configuration options. These are private\n  var _config = {\n    // minimum relative difference between two compared values,\n    // used by all comparison functions\n    epsilon: 1e-12,\n\n    // type of default matrix output. Choose 'matrix' (default) or 'array'\n    matrix: 'Matrix',\n\n    // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction\n    number: 'number',\n\n    // number of significant digits in BigNumbers\n    precision: 64,\n\n    // predictable output type of functions. When true, output type depends only\n    // on the input types. When false (default), output type can vary depending\n    // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when\n    // predictable is false, and returns `NaN` when true.\n    predictable: false,\n\n    // random seed for seeded pseudo random number generation\n    // null = randomly seed\n    randomSeed: null\n  };\n\n  /**\n   * Load a function or data type from a factory.\n   * If the function or data type already exists, the existing instance is\n   * returned.\n   * @param {{type: string, name: string, factory: Function}} factory\n   * @returns {*}\n   */\n  function load (factory) {\n    if (!isFactory(factory)) {\n      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');\n    }\n\n    var index = factories.indexOf(factory);\n    var instance;\n    if (index === -1) {\n      // doesn't yet exist\n      if (factory.math === true) {\n        // pass with math namespace\n        instance = factory.factory(math.type, _config, load, math.typed, math);\n      }\n      else {\n        instance = factory.factory(math.type, _config, load, math.typed);\n      }\n\n      // append to the cache\n      factories.push(factory);\n      instances.push(instance);\n    }\n    else {\n      // already existing function, return the cached instance\n      instance = instances[index];\n    }\n\n    return instance;\n  }\n\n  // load the import and config functions\n  math['import'] = load(importFactory);\n  math['config'] = load(configFactory);\n  math.expression.mathWithTransform['config'] = math['config']\n\n  // apply options\n  if (options) {\n    math.config(options);\n  }\n\n  return math;\n};\n\n},{\"./../utils/emitter\":528,\"./../utils/object\":533,\"./function/config\":7,\"./function/import\":8,\"./typed\":9}],7:[function(require,module,exports){\n'use strict';\n\nvar object = require('../../utils/object');\n\nfunction factory (type, config, load, typed, math) {\n  var MATRIX = ['Matrix', 'Array'];                   // valid values for option matrix\n  var NUMBER = ['number', 'BigNumber', 'Fraction'];   // valid values for option number\n\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *     math.config().number;                // outputs 'number'\n   *     math.eval('0.4');                    // outputs number 0.4\n   *     math.config({number: 'Fraction'});\n   *     math.eval('0.4');                    // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} epsilon\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n  function _config(options) {\n    if (options) {\n      var prev = object.map(config, object.clone);\n\n      // validate some of the options\n      validateOption(options, 'matrix', MATRIX);\n      validateOption(options, 'number', NUMBER);\n\n      // merge options\n      object.deepExtend(config, options);\n\n      var curr = object.map(config, object.clone);\n\n      var changes = object.map(options, object.clone);\n\n      // emit 'config' event\n      math.emit('config', curr, prev, changes);\n\n      return curr;\n    }\n    else {\n      return object.map(config, object.clone);\n    }\n  }\n\n  // attach the valid options to the function so they can be extended\n  _config.MATRIX = MATRIX;\n  _config.NUMBER = NUMBER;\n\n  return _config;\n}\n\n/**\n * Test whether an Array contains a specific item.\n * @param {Array.<string>} array\n * @param {string} item\n * @return {boolean}\n */\nfunction contains (array, item) {\n  return array.indexOf(item) !== -1;\n}\n\n/**\n * Find a string in an array. Case insensitive search\n * @param {Array.<string>} array\n * @param {string} item\n * @return {number} Returns the index when found. Returns -1 when not found\n */\nfunction findIndex (array, item) {\n  return array\n      .map(function (i) {\n        return i.toLowerCase();\n      })\n      .indexOf(item.toLowerCase());\n}\n\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    var index = findIndex(values, options[name]);\n    if (index !== -1) {\n      // right value, wrong casing\n      // TODO: lower case values are deprecated since v3, remove this warning some day.\n      console.warn('Warning: Wrong casing for configuration option \"' + name + '\", should be \"' + values[index] + '\" instead of \"' + options[name] + '\".');\n\n      options[name] = values[index]; // change the option to the right casing\n    }\n    else {\n      // unknown value\n      console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". Available options: ' + values.map(JSON.stringify).join(', ') + '.');\n    }\n  }\n}\n\nexports.name = 'config';\nexports.math = true; // request the math namespace as fifth argument\nexports.factory = factory;\n\n},{\"../../utils/object\":533}],8:[function(require,module,exports){\n'use strict';\n\nvar lazy = require('../../utils/object').lazy;\nvar isFactory = require('../../utils/object').isFactory;\nvar traverse = require('../../utils/object').traverse;\nvar ArgumentsError = require('../../error/ArgumentsError');\n\nfunction factory (type, config, load, typed, math) {\n  /**\n   * Import functions from an object or a module\n   *\n   * Syntax:\n   *\n   *    math.import(object)\n   *    math.import(object, options)\n   *\n   * Where:\n   *\n   * - `object: Object`\n   *   An object with functions to be imported.\n   * - `options: Object` An object with import options. Available options:\n   *   - `override: boolean`\n   *     If true, existing functions will be overwritten. False by default.\n   *   - `silent: boolean`\n   *     If true, the function will not throw errors on duplicates or invalid\n   *     types. False by default.\n   *   - `wrap: boolean`\n   *     If true, the functions will be wrapped in a wrapper function\n   *     which converts data types like Matrix to primitive data types like Array.\n   *     The wrapper is needed when extending math.js with libraries which do not\n   *     support these data type. False by default.\n   *\n   * Examples:\n   *\n   *    // define new functions and variables\n   *    math.import({\n   *      myvalue: 42,\n   *      hello: function (name) {\n   *        return 'hello, ' + name + '!';\n   *      }\n   *    });\n   *\n   *    // use the imported function and variable\n   *    math.myvalue * 2;               // 84\n   *    math.hello('user');             // 'hello, user!'\n   *\n   *    // import the npm module 'numbers'\n   *    // (must be installed first with `npm install numbers`)\n   *    math.import(require('numbers'), {wrap: true});\n   *\n   *    math.fibonacci(7); // returns 13\n   *\n   * @param {Object | Array} object   Object with functions to be imported.\n   * @param {Object} [options]        Import options.\n   */\n  function math_import(object, options) {\n    var num = arguments.length;\n    if (num !== 1 && num !== 2) {\n      throw new ArgumentsError('import', num, 1, 2);\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (isFactory(object)) {\n      _importFactory(object, options);\n    }\n    // TODO: allow a typed-function with name too\n    else if (Array.isArray(object)) {\n      object.forEach(function (entry) {\n        math_import(entry, options);\n      });\n    }\n    else if (typeof object === 'object') {\n      // a map with functions\n      for (var name in object) {\n        if (object.hasOwnProperty(name)) {\n          var value = object[name];\n          if (isSupportedType(value)) {\n            _import(name, value, options);\n          }\n          else if (isFactory(object)) {\n            _importFactory(object, options);\n          }\n          else {\n            math_import(value, options);\n          }\n        }\n      }\n    }\n    else {\n      if (!options.silent) {\n        throw new TypeError('Factory, Object, or Array expected');\n      }\n    }\n  }\n\n  /**\n   * Add a property to the math namespace and create a chain proxy for it.\n   * @param {string} name\n   * @param {*} value\n   * @param {Object} options  See import for a description of the options\n   * @private\n   */\n  function _import(name, value, options) {\n    // TODO: refactor this function, it's to complicated and contains duplicate code\n    if (options.wrap && typeof value === 'function') {\n      // create a wrapper around the function\n      value = _wrap(value);\n    }\n\n    if (isTypedFunction(math[name]) && isTypedFunction(value)) {\n      if (options.override) {\n        // give the typed function the right name\n        value = typed(name, value.signatures);\n      }\n      else {\n        // merge the existing and typed function\n        value = typed(math[name], value);\n      }\n\n      math[name] = value;\n      _importTransform(name, value);\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n\n    if (math[name] === undefined || options.override) {\n      math[name] = value;\n      _importTransform(name, value);\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n\n    if (!options.silent) {\n      throw new Error('Cannot import \"' + name + '\": already exists');\n    }\n  }\n\n  function _importTransform (name, value) {\n    if (value && typeof value.transform === 'function') {\n      math.expression.transform[name] = value.transform;\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value.transform\n      }\n    }\n    else {\n      // remove existing transform\n      delete math.expression.transform[name]\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value\n      }\n    }\n  }\n\n  /**\n   * Create a wrapper a round an function which converts the arguments\n   * to their primitive values (like convert a Matrix to Array)\n   * @param {Function} fn\n   * @return {Function} Returns the wrapped function\n   * @private\n   */\n  function _wrap (fn) {\n    var wrapper = function wrapper () {\n      var args = [];\n      for (var i = 0, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        args[i] = arg && arg.valueOf();\n      }\n      return fn.apply(math, args);\n    };\n\n    if (fn.transform) {\n      wrapper.transform = fn.transform;\n    }\n\n    return wrapper;\n  }\n\n  /**\n   * Import an instance of a factory into math.js\n   * @param {{factory: Function, name: string, path: string, math: boolean}} factory\n   * @param {Object} options  See import for a description of the options\n   * @private\n   */\n  function _importFactory(factory, options) {\n    if (typeof factory.name === 'string') {\n      var name = factory.name;\n      var existingTransform = name in math.expression.transform\n      var namespace = factory.path ? traverse(math, factory.path) : math;\n      var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;\n\n      var resolver = function () {\n        var instance = load(factory);\n        if (instance && typeof instance.transform === 'function') {\n          throw new Error('Transforms cannot be attached to factory functions. ' +\n              'Please create a separate function for it with exports.path=\"expression.transform\"');\n        }\n\n        if (isTypedFunction(existing) && isTypedFunction(instance)) {\n          if (options.override) {\n            // replace the existing typed function (nothing to do)\n          }\n          else {\n            // merge the existing and new typed function\n            instance = typed(existing, instance);\n          }\n\n          return instance;\n        }\n\n        if (existing === undefined || options.override) {\n          return instance;\n        }\n\n        if (!options.silent) {\n          throw new Error('Cannot import \"' + name + '\": already exists');\n        }\n      };\n\n      if (factory.lazy !== false) {\n        lazy(namespace, name, resolver);\n\n        if (!existingTransform) {\n          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {\n            lazy(math.expression.mathWithTransform, name, resolver);\n          }\n        }\n      }\n      else {\n        namespace[name] = resolver();\n\n        if (!existingTransform) {\n          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {\n            math.expression.mathWithTransform[name] = resolver();\n          }\n        }\n      }\n\n      math.emit('import', name, resolver, factory.path);\n    }\n    else {\n      // unnamed factory.\n      // no lazy loading\n      load(factory);\n    }\n  }\n\n  /**\n   * Check whether given object is a type which can be imported\n   * @param {Function | number | string | boolean | null | Unit | Complex} object\n   * @return {boolean}\n   * @private\n   */\n  function isSupportedType(object) {\n    return typeof object === 'function'\n        || typeof object === 'number'\n        || typeof object === 'string'\n        || typeof object === 'boolean'\n        || object === null\n        || (object && object.isUnit === true)\n        || (object && object.isComplex === true)\n        || (object && object.isBigNumber === true)\n        || (object && object.isFraction === true)\n        || (object && object.isMatrix === true)\n        || (object && Array.isArray(object) === true)\n  }\n\n  /**\n   * Test whether a given thing is a typed-function\n   * @param {*} fn\n   * @return {boolean} Returns true when `fn` is a typed-function\n   */\n  function isTypedFunction (fn) {\n    return typeof fn === 'function' && typeof fn.signatures === 'object';\n  }\n\n  function allowedInExpressions (name) {\n    return !unsafe.hasOwnProperty(name);\n  }\n\n  function factoryAllowedInExpressions (factory) {\n    return factory.path === undefined && !unsafe.hasOwnProperty(factory.name);\n  }\n\n  // namespaces and functions not available in the parser for safety reasons\n  var unsafe = {\n    'expression': true,\n    'type': true,\n    'docs': true,\n    'error': true,\n    'json': true,\n    'chain': true // chain method not supported. Note that there is a unit chain too.\n  };\n\n  return math_import;\n}\n\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\nexports.name = 'import';\nexports.factory = factory;\nexports.lazy = true;\n\n},{\"../../error/ArgumentsError\":10,\"../../utils/object\":533}],9:[function(require,module,exports){\nvar typedFunction = require('typed-function');\nvar digits = require('./../utils/number').digits;\n\n// returns a new instance of typed-function\nvar createTyped = function () {\n  // initially, return the original instance of typed-function\n  // consecutively, return a new instance from typed.create.\n  createTyped = typedFunction.create;\n  return typedFunction;\n};\n\n/**\n * Factory function for creating a new typed instance\n * @param {Object} type   Object with data types like Complex and BigNumber\n * @returns {Function}\n */\nexports.create = function create(type) {\n  // TODO: typed-function must be able to silently ignore signatures with unknown data types\n\n  // get a new instance of typed-function\n  var typed = createTyped();\n\n  // define all types. The order of the types determines in which order function\n  // arguments are type-checked (so for performance it's important to put the\n  // most used types first).\n  typed.types = [\n    { name: 'number',          test: function (x) { return typeof x === 'number' } },\n    { name: 'Complex',         test: function (x) { return x && x.isComplex } },\n    { name: 'BigNumber',       test: function (x) { return x && x.isBigNumber } },\n    { name: 'Fraction',        test: function (x) { return x && x.isFraction } },\n    { name: 'Unit',            test: function (x) { return x && x.isUnit } },\n    { name: 'string',          test: function (x) { return typeof x === 'string' } },\n    { name: 'Array',           test: Array.isArray },\n    { name: 'Matrix',          test: function (x) { return x && x.isMatrix } },\n    { name: 'DenseMatrix',     test: function (x) { return x && x.isDenseMatrix } },\n    { name: 'SparseMatrix',    test: function (x) { return x && x.isSparseMatrix } },\n    { name: 'Range',           test: function (x) { return x && x.isRange } },\n    { name: 'Index',           test: function (x) { return x && x.isIndex } },\n    { name: 'boolean',         test: function (x) { return typeof x === 'boolean' } },\n    { name: 'ResultSet',       test: function (x) { return x && x.isResultSet } },\n    { name: 'Help',            test: function (x) { return x && x.isHelp } },\n    { name: 'function',        test: function (x) { return typeof x === 'function'} },\n    { name: 'Date',            test: function (x) { return x instanceof Date } },\n    { name: 'RegExp',          test: function (x) { return x instanceof RegExp } },\n    { name: 'Object',          test: function (x) { return typeof x === 'object' } },\n    { name: 'null',            test: function (x) { return x === null } },\n    { name: 'undefined',       test: function (x) { return x === undefined } },\n\n    { name: 'OperatorNode',    test: function (x) { return x && x.isOperatorNode } },\n    { name: 'ConstantNode',    test: function (x) { return x && x.isConstantNode } },\n    { name: 'SymbolNode',      test: function (x) { return x && x.isSymbolNode } },\n    { name: 'ParenthesisNode', test: function (x) { return x && x.isParenthesisNode } },\n    { name: 'FunctionNode',    test: function (x) { return x && x.isFunctionNode } },\n    { name: 'FunctionAssignmentNode',    test: function (x) { return x && x.isFunctionAssignmentNode } },\n    { name: 'ArrayNode',                 test: function (x) { return x && x.isArrayNode } },\n    { name: 'AssignmentNode',            test: function (x) { return x && x.isAssignmentNode } },\n    { name: 'BlockNode',                 test: function (x) { return x && x.isBlockNode } },\n    { name: 'ConditionalNode',           test: function (x) { return x && x.isConditionalNode } },\n    { name: 'IndexNode',                 test: function (x) { return x && x.isIndexNode } },\n    { name: 'RangeNode',                 test: function (x) { return x && x.isRangeNode } },\n    { name: 'UpdateNode',                test: function (x) { return x && x.isUpdateNode } },\n    { name: 'Node',                      test: function (x) { return x && x.isNode } }\n  ];\n\n  // TODO: add conversion from BigNumber to number?\n  typed.conversions = [\n    {\n      from: 'number',\n      to: 'BigNumber',\n      convert: function (x) {\n        // note: conversion from number to BigNumber can fail if x has >15 digits\n        if (digits(x) > 15) {\n          throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' +\n          '(value: ' + x + '). ' +\n          'Use function bignumber(x) to convert to BigNumber.');\n        }\n        return new type.BigNumber(x);\n      }\n    }, {\n      from: 'number',\n      to: 'Complex',\n      convert: function (x) {\n        return new type.Complex(x, 0);\n      }\n    }, {\n      from: 'number',\n      to: 'string',\n      convert: function (x) {\n        return x + '';\n      }\n    }, {\n      from: 'BigNumber',\n      to: 'Complex',\n      convert: function (x) {\n        return new type.Complex(x.toNumber(), 0);\n      }\n    }, {\n      from: 'Fraction',\n      to: 'BigNumber',\n      convert: function (x) {\n        throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' +\n            'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');\n      }\n    }, {\n      from: 'Fraction',\n      to: 'Complex',\n      convert: function (x) {\n        return new type.Complex(x.valueOf(), 0);\n      }\n    }, {\n      from: 'number',\n      to: 'Fraction',\n      convert: function (x) {\n        var f = new type.Fraction(x);\n        if (f.valueOf() !== x) {\n          throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' +\n              '(value: ' + x + '). ' +\n              'Use function fraction(x) to convert to Fraction.');\n        }\n        return new type.Fraction(x);\n      }\n    }, {\n    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`\n    //  from: 'Fraction',\n    //  to: 'number',\n    //  convert: function (x) {\n    //    return x.valueOf();\n    //  }\n    //}, {\n      from: 'string',\n      to: 'number',\n      convert: function (x) {\n        var n = Number(x);\n        if (isNaN(n)) {\n          throw new Error('Cannot convert \"' + x + '\" to a number');\n        }\n        return n;\n      }\n    }, {\n      from: 'string',\n      to: 'BigNumber',\n      convert: function (x) {\n        try {\n          return new type.BigNumber(x);\n        }\n        catch (err) {\n          throw new Error('Cannot convert \"' + x + '\" to BigNumber');\n        }\n      }\n    }, {\n      from: 'string',\n      to: 'Fraction',\n      convert: function (x) {\n        try {\n          return new type.Fraction(x);\n        }\n        catch (err) {\n          throw new Error('Cannot convert \"' + x + '\" to Fraction');\n        }\n      }\n    }, {\n      from: 'string',\n      to: 'Complex',\n      convert: function (x) {\n        try {\n          return new type.Complex(x);\n        }\n        catch (err) {\n          throw new Error('Cannot convert \"' + x + '\" to Complex');\n        }\n      }\n    }, {\n      from: 'boolean',\n      to: 'number',\n      convert: function (x) {\n        return +x;\n      }\n    }, {\n      from: 'boolean',\n      to: 'BigNumber',\n      convert: function (x) {\n        return new type.BigNumber(+x);\n      }\n    }, {\n      from: 'boolean',\n      to: 'Fraction',\n      convert: function (x) {\n        return new type.Fraction(+x);\n      }\n    }, {\n      from: 'boolean',\n      to: 'string',\n      convert: function (x) {\n        return +x;\n      }\n    }, {\n      from: 'null',\n      to: 'number',\n      convert: function () {\n        return 0;\n      }\n    }, {\n      from: 'null',\n      to: 'string',\n      convert: function () {\n        return 'null';\n      }\n    }, {\n      from: 'null',\n      to: 'BigNumber',\n      convert: function () {\n        return new type.BigNumber(0);\n      }\n    }, {\n      from: 'null',\n      to: 'Fraction',\n      convert: function () {\n        return new type.Fraction(0);\n      }\n    }, {\n      from: 'Array',\n      to: 'Matrix',\n      convert: function (array) {\n        // TODO: how to decide on the right type of matrix to create?\n        return new type.DenseMatrix(array);\n      }\n    }, {\n      from: 'Matrix',\n      to: 'Array',\n      convert: function (matrix) {\n        return matrix.valueOf();\n      }\n    }\n  ];\n\n  return typed;\n};\n\n},{\"./../utils/number\":532,\"typed-function\":538}],10:[function(require,module,exports){\n'use strict';\n\n/**\n * Create a syntax error with the message:\n *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\n * @param {string} fn     Function name\n * @param {number} count  Actual argument count\n * @param {number} min    Minimum required argument count\n * @param {number} [max]  Maximum required argument count\n * @extends Error\n */\nfunction ArgumentsError(fn, count, min, max) {\n  if (!(this instanceof ArgumentsError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.fn = fn;\n  this.count = count;\n  this.min = min;\n  this.max = max;\n\n  this.message = 'Wrong number of arguments in function ' + fn +\n      ' (' + count + ' provided, ' +\n      min + ((max != undefined) ? ('-' + max) : '') + ' expected)';\n\n  this.stack = (new Error()).stack;\n}\n\nArgumentsError.prototype = new Error();\nArgumentsError.prototype.constructor = Error;\nArgumentsError.prototype.name = 'ArgumentsError';\nArgumentsError.prototype.isArgumentsError = true;\n\nmodule.exports = ArgumentsError;\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\n/**\n * Create a range error with the message:\n *     'Dimension mismatch (<actual size> != <expected size>)'\n * @param {number | number[]} actual        The actual size\n * @param {number | number[]} expected      The expected size\n * @param {string} [relation='!=']          Optional relation between actual\n *                                          and expected size: '!=', '<', etc.\n * @extends RangeError\n */\nfunction DimensionError(actual, expected, relation) {\n  if (!(this instanceof DimensionError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.actual   = actual;\n  this.expected = expected;\n  this.relation = relation;\n\n  this.message = 'Dimension mismatch (' +\n      (Array.isArray(actual) ? ('[' + actual.join(', ') + ']') : actual) +\n      ' ' + (this.relation || '!=') + ' ' +\n      (Array.isArray(expected) ? ('[' + expected.join(', ') + ']') : expected) +\n      ')';\n\n  this.stack = (new Error()).stack;\n}\n\nDimensionError.prototype = new RangeError();\nDimensionError.prototype.constructor = RangeError;\nDimensionError.prototype.name = 'DimensionError';\nDimensionError.prototype.isDimensionError = true;\n\nmodule.exports = DimensionError;\n\n},{}],12:[function(require,module,exports){\n'use strict';\n\n/**\n * Create a range error with the message:\n *     'Index out of range (index < min)'\n *     'Index out of range (index < max)'\n *\n * @param {number} index     The actual index\n * @param {number} [min=0]   Minimum index (included)\n * @param {number} [max]     Maximum index (excluded)\n * @extends RangeError\n */\nfunction IndexError(index, min, max) {\n  if (!(this instanceof IndexError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.index = index;\n  if (arguments.length < 3) {\n    this.min = 0;\n    this.max = min;\n  }\n  else {\n    this.min = min;\n    this.max = max;\n  }\n\n  if (this.min !== undefined && this.index < this.min) {\n    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';\n  }\n  else if (this.max !== undefined && this.index >= this.max) {\n    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';\n  }\n  else {\n    this.message = 'Index out of range (' + this.index + ')';\n  }\n\n  this.stack = (new Error()).stack;\n}\n\nIndexError.prototype = new RangeError();\nIndexError.prototype.constructor = RangeError;\nIndexError.prototype.name = 'IndexError';\nIndexError.prototype.isIndexError = true;\n\nmodule.exports = IndexError;\n\n},{}],13:[function(require,module,exports){\n'use strict';\n\nvar object = require('../utils/object');\nvar string = require('../utils/string');\n\nfunction factory (type, config, load, typed) {\n  var parser = load(require('./function/parser'))();\n\n  /**\n   * Documentation object\n   * @param {Object} doc  Object containing properties:\n   *                      {string} name\n   *                      {string} category\n   *                      {string} description\n   *                      {string[]} syntax\n   *                      {string[]} examples\n   *                      {string[]} seealso\n   * @constructor\n   */\n  function Help(doc) {\n    if (!(this instanceof Help)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!doc)  throw new Error('Argument \"doc\" missing');\n\n    this.doc = doc;\n  }\n\n  /**\n   * Attach type information\n   */\n  Help.prototype.type = 'Help';\n  Help.prototype.isHelp = true;\n\n  /**\n   * Generate a string representation of the Help object\n   * @return {string} Returns a string\n   * @private\n   */\n  Help.prototype.toString = function () {\n    var doc = this.doc || {};\n    var desc = '\\n';\n\n    if (doc.name) {\n      desc += 'Name: ' + doc.name + '\\n\\n';\n    }\n    if (doc.category) {\n      desc += 'Category: ' + doc.category + '\\n\\n';\n    }\n    if (doc.description) {\n      desc += 'Description:\\n    ' + doc.description + '\\n\\n';\n    }\n    if (doc.syntax) {\n      desc += 'Syntax:\\n    ' + doc.syntax.join('\\n    ') + '\\n\\n';\n    }\n    if (doc.examples) {\n      desc += 'Examples:\\n';\n      for (var i = 0; i < doc.examples.length; i++) {\n        var expr = doc.examples[i];\n        desc += '    ' + expr + '\\n';\n\n        var res;\n        try {\n          res = parser.eval(expr);\n        }\n        catch (e) {\n          res = e;\n        }\n        if (res && !res.isHelp) {\n          desc += '        ' + string.format(res, {precision: 14}) + '\\n';\n        }\n      }\n      desc += '\\n';\n    }\n    if (doc.seealso) {\n      desc += 'See also: ' + doc.seealso.join(', ') + '\\n';\n    }\n\n    return desc;\n  };\n\n  /**\n   * Export the help object to JSON\n   */\n  Help.prototype.toJSON = function () {\n    var obj = object.clone(this.doc);\n    obj.mathjs = 'Help';\n    return obj;\n  };\n\n  /**\n   * Instantiate a Help object from a JSON object\n   * @param {Object} json\n   * @returns {Help} Returns a new Help object\n   */\n  Help.fromJSON = function (json) {\n    var doc = {};\n    for (var prop in json) {\n      if (prop !== 'mathjs') { // ignore mathjs field\n        doc[prop] = json[prop];\n      }\n    }\n    return new Help(doc);\n  };\n\n  /**\n   * Returns a string representation of the Help object\n   */\n  Help.prototype.valueOf = Help.prototype.toString;\n\n  return Help;\n}\n\nexports.name = 'Help';\nexports.path = 'type';\nexports.factory = factory;\n\n},{\"../utils/object\":533,\"../utils/string\":534,\"./function/parser\":214}],14:[function(require,module,exports){\n'use strict';\n\nvar extend = require('../utils/object').extend;\nvar customs = require('../utils/customs');\n\nfunction factory (type, config, load, typed, math) {\n  var _parse = load(require('./parse'));\n\n  /**\n   * @constructor Parser\n   * Parser contains methods to evaluate or parse expressions, and has a number\n   * of convenience methods to get, set, and remove variables from memory. Parser\n   * keeps a scope containing variables in memory, which is used for all\n   * evaluations.\n   *\n   * Methods:\n   *    var result = parser.eval(expr);    // evaluate an expression\n   *    var value = parser.get(name);      // retrieve a variable from the parser\n   *    var values = parser.getAll();      // retrieve all defined variables\n   *    parser.set(name, value);           // set a variable in the parser\n   *    parser.remove(name);               // clear a variable from the\n   *                                       // parsers scope\n   *    parser.clear();                    // clear the parsers scope\n   *\n   * Example usage:\n   *    var parser = new Parser();\n   *    // Note: there is a convenience method which can be used instead:\n   *    // var parser = new math.parser();\n   *\n   *    // evaluate expressions\n   *    parser.eval('sqrt(3^2 + 4^2)');         // 5\n   *    parser.eval('sqrt(-4)');                // 2i\n   *    parser.eval('2 inch in cm');            // 5.08 cm\n   *    parser.eval('cos(45 deg)');             // 0.7071067811865476\n   *\n   *    // define variables and functions\n   *    parser.eval('x = 7 / 2');               // 3.5\n   *    parser.eval('x + 3');                   // 6.5\n   *    parser.eval('function f(x, y) = x^y');  // f(x, y)\n   *    parser.eval('f(2, 3)');                 // 8\n   *\n   *    // get and set variables and functions\n   *    var x = parser.get('x');                // 7\n   *    var f = parser.get('f');                // function\n   *    var g = f(3, 2);                        // 9\n   *    parser.set('h', 500);\n   *    var i = parser.eval('h / 2');           // 250\n   *    parser.set('hello', function (name) {\n   *        return 'hello, ' + name + '!';\n   *    });\n   *    parser.eval('hello(\"user\")');           // \"hello, user!\"\n   *\n   *    // clear defined functions and variables\n   *    parser.clear();\n   *\n   */\n  function Parser() {\n    if (!(this instanceof Parser)) {\n      throw new SyntaxError(\n          'Constructor must be called with the new operator');\n    }\n    this.scope = {};\n  }\n\n  /**\n   * Attach type information\n   */\n  Parser.prototype.type = 'Parser';\n  Parser.prototype.isParser = true;\n\n  /**\n   * Parse an expression and return the parsed function node.\n   * The node tree can be compiled via `code = node.compile(math)`,\n   * and the compiled code can be executed as `code.eval([scope])`\n   * @param {string} expr\n   * @return {Node} node\n   * @throws {Error}\n   */\n  Parser.prototype.parse = function (expr) {\n    throw new Error('Parser.parse is deprecated. Use math.parse instead.');\n  };\n\n  /**\n   * Parse and compile an expression, return the compiled javascript code.\n   * The node can be evaluated via code.eval([scope])\n   * @param {string} expr\n   * @return {{eval: function}} code\n   * @throws {Error}\n   */\n  Parser.prototype.compile = function (expr) {\n    throw new Error('Parser.compile is deprecated. Use math.compile instead.');\n  };\n\n  /**\n   * Parse and evaluate the given expression\n   * @param {string} expr   A string containing an expression, for example \"2+3\"\n   * @return {*} result     The result, or undefined when the expression was empty\n   * @throws {Error}\n   */\n  Parser.prototype.eval = function (expr) {\n    // TODO: validate arguments\n    return _parse(expr)\n        .compile()\n        .eval(this.scope);\n  };\n\n  /**\n   * Get a variable (a function or variable) by name from the parsers scope.\n   * Returns undefined when not found\n   * @param {string} name\n   * @return {* | undefined} value\n   */\n  Parser.prototype.get = function (name) {\n    // TODO: validate arguments\n    return name in this.scope\n        ? customs.getSafeProperty(this.scope, name)\n        : undefined;\n  };\n\n  /**\n   * Get a map with all defined variables\n   * @return {Object} values\n   */\n  Parser.prototype.getAll = function () {\n    return extend({}, this.scope);\n  };\n\n  /**\n   * Set a symbol (a function or variable) by name from the parsers scope.\n   * @param {string} name\n   * @param {* | undefined} value\n   */\n  Parser.prototype.set = function (name, value) {\n    // TODO: validate arguments\n    return customs.setSafeProperty(this.scope, name, value);\n  };\n\n  /**\n   * Remove a variable from the parsers scope\n   * @param {string} name\n   */\n  Parser.prototype.remove = function (name) {\n    // TODO: validate arguments\n    delete this.scope[name];\n  };\n\n  /**\n   * Clear the scope with variables and functions\n   */\n  Parser.prototype.clear = function () {\n    for (var name in this.scope) {\n      if (this.scope.hasOwnProperty(name)) {\n        delete this.scope[name];\n      }\n    }\n  };\n\n  return Parser;\n}\n\nexports.name = 'Parser';\nexports.path = 'expression';\nexports.factory = factory;\nexports.math = true; // requires the math namespace as 5th argument\n\n},{\"../utils/customs\":527,\"../utils/object\":533,\"./parse\":239}],15:[function(require,module,exports){\nmodule.exports = {\n  'name': 'Infinity',\n  'category': 'Constants',\n  'syntax': [\n    'Infinity'\n  ],\n  'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',\n  'examples': [\n    'Infinity',\n    '1 / 0'\n  ],\n  'seealso': []\n};\n\n},{}],16:[function(require,module,exports){\nmodule.exports = {\n  'name': 'LN10',\n  'category': 'Constants',\n  'syntax': [\n    'LN10'\n  ],\n  'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',\n  'examples': [\n    'LN10',\n    'log(10)'\n  ],\n  'seealso': []\n};\n\n},{}],17:[function(require,module,exports){\nmodule.exports = {\n  'name': 'LN2',\n  'category': 'Constants',\n  'syntax': [\n    'LN2'\n  ],\n  'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',\n  'examples': [\n    'LN2',\n    'log(2)'\n  ],\n  'seealso': []\n};\n\n},{}],18:[function(require,module,exports){\nmodule.exports = {\n  'name': 'LOG10E',\n  'category': 'Constants',\n  'syntax': [\n    'LOG10E'\n  ],\n  'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',\n  'examples': [\n    'LOG10E',\n    'log(e, 10)'\n  ],\n  'seealso': []\n};\n\n},{}],19:[function(require,module,exports){\nmodule.exports = {\n  'name': 'LOG2E',\n  'category': 'Constants',\n  'syntax': [\n    'LOG2E'\n  ],\n  'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',\n  'examples': [\n    'LOG2E',\n    'log(e, 2)'\n  ],\n  'seealso': []\n};\n\n},{}],20:[function(require,module,exports){\nmodule.exports = {\n  'name': 'NaN',\n  'category': 'Constants',\n  'syntax': [\n    'NaN'\n  ],\n  'description': 'Not a number',\n  'examples': [\n    'NaN',\n    '0 / 0'\n  ],\n  'seealso': []\n};\n\n},{}],21:[function(require,module,exports){\nmodule.exports = {\n  'name': 'SQRT1_2',\n  'category': 'Constants',\n  'syntax': [\n    'SQRT1_2'\n  ],\n  'description': 'Returns the square root of 1/2, approximately equal to 0.707',\n  'examples': [\n    'SQRT1_2',\n    'sqrt(1/2)'\n  ],\n  'seealso': []\n};\n\n},{}],22:[function(require,module,exports){\nmodule.exports = {\n  'name': 'SQRT2',\n  'category': 'Constants',\n  'syntax': [\n    'SQRT2'\n  ],\n  'description': 'Returns the square root of 2, approximately equal to 1.414',\n  'examples': [\n    'SQRT2',\n    'sqrt(2)'\n  ],\n  'seealso': []\n};\n\n},{}],23:[function(require,module,exports){\nmodule.exports = {\n  'name': 'e',\n  'category': 'Constants',\n  'syntax': [\n    'e'\n  ],\n  'description': 'Euler\\'s number, the base of the natural logarithm. Approximately equal to 2.71828',\n  'examples': [\n    'e',\n    'e ^ 2',\n    'exp(2)',\n    'log(e)'\n  ],\n  'seealso': ['exp']\n};\n\n},{}],24:[function(require,module,exports){\nmodule.exports = {\n  'name': 'false',\n  'category': 'Constants',\n  'syntax': [\n    'false'\n  ],\n  'description': 'Boolean value false',\n  'examples': [\n    'false'\n  ],\n  'seealso': ['true']\n};\n\n},{}],25:[function(require,module,exports){\nmodule.exports = {\n  'name': 'i',\n  'category': 'Constants',\n  'syntax': [\n    'i'\n  ],\n  'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',\n  'examples': [\n    'i',\n    'i * i',\n    'sqrt(-1)'\n  ],\n  'seealso': []\n};\n\n},{}],26:[function(require,module,exports){\nmodule.exports = {\n  'name': 'null',\n  'category': 'Constants',\n  'syntax': [\n    'null'\n  ],\n  'description': 'Value null',\n  'examples': [\n    'null'\n  ],\n  'seealso': ['true', 'false']\n};\n\n},{}],27:[function(require,module,exports){\nmodule.exports = {\n  'name': 'phi',\n  'category': 'Constants',\n  'syntax': [\n    'phi'\n  ],\n  'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',\n  'examples': [\n    'tau'\n  ],\n  'seealso': []\n};\n\n},{}],28:[function(require,module,exports){\nmodule.exports = {\n  'name': 'pi',\n  'category': 'Constants',\n  'syntax': [\n    'pi'\n  ],\n  'description': 'The number pi is a mathematical constant that is the ratio of a circle\\'s circumference to its diameter, and is approximately equal to 3.14159',\n  'examples': [\n    'pi',\n    'sin(pi/2)'\n  ],\n  'seealso': ['tau']\n};\n\n},{}],29:[function(require,module,exports){\nmodule.exports = {\n  'name': 'tau',\n  'category': 'Constants',\n  'syntax': [\n    'tau'\n  ],\n  'description': 'Tau is the ratio constant of a circle\\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',\n  'examples': [\n    'tau',\n    '2 * pi'\n  ],\n  'seealso': ['pi']\n};\n\n},{}],30:[function(require,module,exports){\nmodule.exports = {\n  'name': 'true',\n  'category': 'Constants',\n  'syntax': [\n    'true'\n  ],\n  'description': 'Boolean value true',\n  'examples': [\n    'true'\n  ],\n  'seealso': ['false']\n};\n\n},{}],31:[function(require,module,exports){\nmodule.exports = {\n  'name': 'version',\n  'category': 'Constants',\n  'syntax': [\n    'version'\n  ],\n  'description': 'A string with the version number of math.js',\n  'examples': [\n    'version'\n  ],\n  'seealso': []\n};\n\n},{}],32:[function(require,module,exports){\nmodule.exports = {\n  'name': 'bignumber',\n  'category': 'Construction',\n  'syntax': [\n    'bignumber(x)'\n  ],\n  'description':\n      'Create a big number from a number or string.',\n  'examples': [\n    '0.1 + 0.2',\n    'bignumber(0.1) + bignumber(0.2)',\n    'bignumber(\"7.2\")',\n    'bignumber(\"7.2e500\")',\n    'bignumber([0.1, 0.2, 0.3])'\n  ],\n  'seealso': [\n    'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'\n  ]\n};\n\n},{}],33:[function(require,module,exports){\nmodule.exports = {\n  'name': 'boolean',\n  'category': 'Construction',\n  'syntax': [\n    'x',\n    'boolean(x)'\n  ],\n  'description':\n      'Convert a string or number into a boolean.',\n  'examples': [\n    'boolean(0)',\n    'boolean(1)',\n    'boolean(3)',\n    'boolean(\"true\")',\n    'boolean(\"false\")',\n    'boolean([1, 0, 1, 1])'\n  ],\n  'seealso': [\n    'bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit'\n  ]\n};\n\n},{}],34:[function(require,module,exports){\nmodule.exports = {\n  'name': 'complex',\n  'category': 'Construction',\n  'syntax': [\n    'complex()',\n    'complex(re, im)',\n    'complex(string)'\n  ],\n  'description':\n      'Create a complex number.',\n  'examples': [\n    'complex()',\n    'complex(2, 3)',\n    'complex(\"7 - 2i\")'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit'\n  ]\n};\n\n},{}],35:[function(require,module,exports){\nmodule.exports = {\n  'name': 'createUnit',\n  'category': 'Construction',\n  'syntax': [\n    'createUnit(definitions)',\n    'createUnit(name, definition)'\n  ],\n  'description':\n      'Create a user-defined unit and register it with the Unit type.',\n  'examples': [\n    'createUnit(\"foo\")',\n    'createUnit(\"knot\", {definition: \"0.514444444 m/s\", aliases: [\"knots\", \"kt\", \"kts\"]})',\n    'createUnit(\"mph\", \"1 mile/hour\")'\n  ],\n  'seealso': [\n    'unit', 'splitUnit'\n  ]\n};\n\n},{}],36:[function(require,module,exports){\nmodule.exports = {\n  'name': 'fraction',\n  'category': 'Construction',\n  'syntax': [\n    'fraction(num)',\n    'fraction(num,den)'\n  ],\n  'description':\n    'Create a fraction from a number or from a numerator and denominator.',\n  'examples': [\n    'fraction(0.125)',\n    'fraction(1, 3) + fraction(2, 5)'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit'\n  ]\n};\n\n},{}],37:[function(require,module,exports){\nmodule.exports = {\n  'name': 'index',\n  'category': 'Construction',\n  'syntax': [\n    '[start]',\n    '[start:end]',\n    '[start:step:end]',\n    '[start1, start 2, ...]',\n    '[start1:end1, start2:end2, ...]',\n    '[start1:step1:end1, start2:step2:end2, ...]'\n  ],\n  'description':\n      'Create an index to get or replace a subset of a matrix',\n  'examples': [\n    '[]',\n    '[1, 2, 3]',\n    'A = [1, 2, 3; 4, 5, 6]',\n    'A[1, :]',\n    'A[1, 2] = 50',\n    'A[0:2, 0:2] = ones(2, 2)'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit'\n  ]\n};\n\n},{}],38:[function(require,module,exports){\nmodule.exports = {\n  'name': 'matrix',\n  'category': 'Construction',\n  'syntax': [\n    '[]',\n    '[a1, b1, ...; a2, b2, ...]',\n    'matrix()',\n    'matrix(\"dense\")',\n    'matrix([...])'\n  ],\n  'description':\n      'Create a matrix.',\n  'examples': [\n    '[]',\n    '[1, 2, 3]',\n    '[1, 2, 3; 4, 5, 6]',\n    'matrix()',\n    'matrix([3, 4])',\n    'matrix([3, 4; 5, 6], \"sparse\")',\n    'matrix([3, 4; 5, 6], \"sparse\", \"number\")'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse'\n  ]\n};\n\n},{}],39:[function(require,module,exports){\nmodule.exports = {\n  'name': 'number',\n  'category': 'Construction',\n  'syntax': [\n    'x',\n    'number(x)'\n  ],\n  'description':\n      'Create a number or convert a string or boolean into a number.',\n  'examples': [\n    '2',\n    '2e3',\n    '4.05',\n    'number(2)',\n    'number(\"7.2\")',\n    'number(true)',\n    'number([true, false, true, true])',\n    'number(\"52cm\", \"m\")'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'\n  ]\n};\n\n},{}],40:[function(require,module,exports){\nmodule.exports = {\n  'name': 'sparse',\n  'category': 'Construction',\n  'syntax': [\n    'sparse()',\n    'sparse([a1, b1, ...; a1, b2, ...])',\n    'sparse([a1, b1, ...; a1, b2, ...], \"number\")'\n  ],\n  'description':\n  'Create a sparse matrix.',\n  'examples': [\n    'sparse()',\n    'sparse([3, 4; 5, 6])',\n    'sparse([3, 0; 5, 0], \"number\")'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix'\n  ]\n};\n\n},{}],41:[function(require,module,exports){\nmodule.exports = {\n  'name': 'splitUnit',\n  'category': 'Construction',\n  'syntax': [\n    'splitUnit(unit: Unit, parts: Unit[])'\n  ],\n  'description':\n      'Split a unit in an array of units whose sum is equal to the original unit.',\n  'examples': [\n    'splitUnit(1 m, [\"feet\", \"inch\"])'\n  ],\n  'seealso': [\n    'unit', 'createUnit'\n  ]\n};\n\n},{}],42:[function(require,module,exports){\nmodule.exports = {\n  'name': 'string',\n  'category': 'Construction',\n  'syntax': [\n    '\"text\"',\n    'string(x)'\n  ],\n  'description':\n      'Create a string or convert a value to a string',\n  'examples': [\n    '\"Hello World!\"',\n    'string(4.2)',\n    'string(3 + 2i)'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit'\n  ]\n};\n\n},{}],43:[function(require,module,exports){\nmodule.exports = {\n  'name': 'unit',\n  'category': 'Construction',\n  'syntax': [\n    'value unit',\n    'unit(value, unit)',\n    'unit(string)'\n  ],\n  'description':\n      'Create a unit.',\n  'examples': [\n    '5.5 mm',\n    '3 inch',\n    'unit(7.1, \"kilogram\")',\n    'unit(\"23 deg\")'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string'\n  ]\n};\n\n},{}],44:[function(require,module,exports){\nmodule.exports = {\n  'name': 'config',\n  'category': 'Core',\n  'syntax': [\n    'config()',\n    'config(options)'\n  ],\n  'description': 'Get configuration or change configuration.',\n  'examples': [\n    'config()',\n    '1/3 + 1/4',\n    'config({number: \"Fraction\"})',\n    '1/3 + 1/4'\n  ],\n  'seealso': []\n};\n\n},{}],45:[function(require,module,exports){\nmodule.exports = {\n  'name': 'import',\n  'category': 'Core',\n  'syntax': [\n    'import(functions)',\n    'import(functions, options)'\n  ],\n  'description': 'Import functions or constants from an object.',\n  'examples': [\n    'import({myFn: f(x)=x^2, myConstant: 32 })',\n    'myFn(2)',\n    'myConstant'\n  ],\n  'seealso': []\n};\n\n},{}],46:[function(require,module,exports){\nmodule.exports = {\n  'name': 'typed',\n  'category': 'Core',\n  'syntax': [\n    'typed(signatures)',\n    'typed(name, signatures)'\n  ],\n  'description': 'Create a typed function.',\n  'examples': [\n    'double = typed({ \"number, number\": f(x)=x+x })',\n    'double(2)',\n    'double(\"hello\")'\n  ],\n  'seealso': []\n};\n\n},{}],47:[function(require,module,exports){\nmodule.exports = {\n  'name': 'derivative',\n  'category': 'Algebra',\n  'syntax': [\n    'derivative(expr)',\n    'derivative(expr, {simplify: boolean})'\n  ],\n  'description': 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',\n  'examples': [\n    'derivative(\"2x^3\", \"x\")',\n    'derivative(\"2x^3\", \"x\", {simplify: false})',\n    'derivative(\"2x^2 + 3x + 4\", \"x\")',\n    'derivative(\"sin(2x)\", \"x\")',\n    'f = parse(\"x^2 + x\")',\n    'x = parse(\"x\")',\n    'df = derivative(f, x)',\n    'df.eval({x: 3})'\n  ],\n  'seealso': [\n    'simplify', 'parse', 'eval'\n  ]\n};\n\n},{}],48:[function(require,module,exports){\nmodule.exports = {\n  'name': 'lsolve',\n  'category': 'Algebra',\n  'syntax': [\n    'x=lsolve(L, b)'\n  ],\n  'description':\n  'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',\n  'examples': [\n    'a = [-2, 3; 2, 1]',\n    'b = [11, 9]',\n    'x = lsolve(a, b)'\n  ],\n  'seealso': [\n    'lup', 'lusolve', 'usolve', 'matrix', 'sparse'\n  ]\n};\n\n},{}],49:[function(require,module,exports){\nmodule.exports = {\n  'name': 'lup',\n  'category': 'Algebra',\n  'syntax': [\n    'lup(m)'\n  ],\n  'description':\n  'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',\n  'examples': [\n    'lup([[2, 1], [1, 4]])',\n    'lup(matrix([[2, 1], [1, 4]]))',\n    'lup(sparse([[2, 1], [1, 4]]))'\n  ],\n  'seealso': [\n    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr'\n  ]\n};\n\n},{}],50:[function(require,module,exports){\nmodule.exports = {\n  'name': 'lusolve',\n  'category': 'Algebra',\n  'syntax': [\n    'x=lusolve(A, b)',\n    'x=lusolve(lu, b)'\n  ],\n  'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',\n  'examples': [\n    'a = [-2, 3; 2, 1]',\n    'b = [11, 9]',\n    'x = lusolve(a, b)'\n  ],\n  'seealso': [\n    'lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse'\n  ]\n};\n\n},{}],51:[function(require,module,exports){\nmodule.exports = {\n  'name': 'qr',\n  'category': 'Algebra',\n  'syntax': [\n    'qr(A)'\n  ],\n  'description':\n  'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',\n  'examples': [\n    'qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'\n  ],\n  'seealso': [\n    'lup', 'slu', 'matrix'\n  ]\n};\n\n},{}],52:[function(require,module,exports){\nmodule.exports = {\n  'name': 'simplify',\n  'category': 'Algebra',\n  'syntax': [\n    'simplify(expr)',\n    'simplify(expr, rules)'\n  ],\n  'description': 'Simplify an expression tree.',\n  'examples': [\n    'simplify(\"3 + 2 / 4\")',\n    'simplify(\"2x + x\")',\n    'f = parse(\"x * (x + 2 + x)\")',\n    'simplified = simplify(f)',\n    'simplified.eval({x: 2})'\n  ],\n  'seealso': [\n    'derivative', 'parse', 'eval'\n  ]\n};\n\n},{}],53:[function(require,module,exports){\nmodule.exports = {\n  'name': 'slu',\n  'category': 'Algebra',\n  'syntax': [\n    'slu(A, order, threshold)'\n  ],\n  'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',\n  'examples': [\n    'slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'\n  ],\n  'seealso': [\n    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr'\n  ]\n};\n\n},{}],54:[function(require,module,exports){\nmodule.exports = {\n  'name': 'usolve',\n  'category': 'Algebra',\n  'syntax': [\n    'x=usolve(U, b)'\n  ],\n  'description':\n  'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',\n  'examples': [\n    'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'\n  ],\n  'seealso': [\n    'lup', 'lusolve', 'lsolve', 'matrix', 'sparse'\n  ]\n};\n\n},{}],55:[function(require,module,exports){\nmodule.exports = {\n  'name': 'abs',\n  'category': 'Arithmetic',\n  'syntax': [\n    'abs(x)'\n  ],\n  'description': 'Compute the absolute value.',\n  'examples': [\n    'abs(3.5)',\n    'abs(-4.2)'\n  ],\n  'seealso': ['sign']\n};\n\n},{}],56:[function(require,module,exports){\nmodule.exports = {\n  'name': 'add',\n  'category': 'Operators',\n  'syntax': [\n    'x + y',\n    'add(x, y)'\n  ],\n  'description': 'Add two values.',\n  'examples': [\n    'a = 2.1 + 3.6',\n    'a - 3.6',\n    '3 + 2i',\n    '3 cm + 2 inch',\n    '\"2.3\" + \"4\"'\n  ],\n  'seealso': [\n    'subtract'\n  ]\n};\n\n},{}],57:[function(require,module,exports){\nmodule.exports = {\n  'name': 'cbrt',\n  'category': 'Arithmetic',\n  'syntax': [\n    'cbrt(x)',\n    'cbrt(x, allRoots)'\n  ],\n  'description':\n      'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',\n  'examples': [\n    'cbrt(64)',\n    'cube(4)',\n    'cbrt(-8)',\n    'cbrt(2 + 3i)',\n    'cbrt(8i)',\n    'cbrt(8i, true)',\n    'cbrt(27 m^3)'\n  ],\n  'seealso': [\n    'square',\n    'sqrt',\n    'cube',\n    'multiply'\n  ]\n};\n\n},{}],58:[function(require,module,exports){\nmodule.exports = {\n  'name': 'ceil',\n  'category': 'Arithmetic',\n  'syntax': [\n    'ceil(x)'\n  ],\n  'description':\n      'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',\n  'examples': [\n    'ceil(3.2)',\n    'ceil(3.8)',\n    'ceil(-4.2)'\n  ],\n  'seealso': ['floor', 'fix', 'round']\n};\n\n},{}],59:[function(require,module,exports){\nmodule.exports = {\n  'name': 'cube',\n  'category': 'Arithmetic',\n  'syntax': [\n    'cube(x)'\n  ],\n  'description': 'Compute the cube of a value. The cube of x is x * x * x.',\n  'examples': [\n    'cube(2)',\n    '2^3',\n    '2 * 2 * 2'\n  ],\n  'seealso': [\n    'multiply',\n    'square',\n    'pow'\n  ]\n};\n\n},{}],60:[function(require,module,exports){\nmodule.exports = {\n  'name': 'divide',\n  'category': 'Operators',\n  'syntax': [\n    'x / y',\n    'divide(x, y)'\n  ],\n  'description': 'Divide two values.',\n  'examples': [\n    'a = 2 / 3',\n    'a * 3',\n    '4.5 / 2',\n    '3 + 4 / 2',\n    '(3 + 4) / 2',\n    '18 km / 4.5'\n  ],\n  'seealso': [\n    'multiply'\n  ]\n};\n\n},{}],61:[function(require,module,exports){\nmodule.exports = {\n  'name': 'dotDivide',\n  'category': 'Operators',\n  'syntax': [\n    'x ./ y',\n    'dotDivide(x, y)'\n  ],\n  'description': 'Divide two values element wise.',\n  'examples': [\n    'a = [1, 2, 3; 4, 5, 6]',\n    'b = [2, 1, 1; 3, 2, 5]',\n    'a ./ b'\n  ],\n  'seealso': [\n    'multiply',\n    'dotMultiply',\n    'divide'\n  ]\n};\n\n},{}],62:[function(require,module,exports){\nmodule.exports = {\n  'name': 'dotMultiply',\n  'category': 'Operators',\n  'syntax': [\n    'x .* y',\n    'dotMultiply(x, y)'\n  ],\n  'description': 'Multiply two values element wise.',\n  'examples': [\n    'a = [1, 2, 3; 4, 5, 6]',\n    'b = [2, 1, 1; 3, 2, 5]',\n    'a .* b'\n  ],\n  'seealso': [\n    'multiply',\n    'divide',\n    'dotDivide'\n  ]\n};\n\n},{}],63:[function(require,module,exports){\nmodule.exports = {\n  'name': 'dotpow',\n  'category': 'Operators',\n  'syntax': [\n    'x .^ y',\n    'dotpow(x, y)'\n  ],\n  'description':\n      'Calculates the power of x to y element wise.',\n  'examples': [\n    'a = [1, 2, 3; 4, 5, 6]',\n    'a .^ 2'\n  ],\n  'seealso': [\n    'pow'\n  ]\n};\n\n},{}],64:[function(require,module,exports){\nmodule.exports = {\n  'name': 'exp',\n  'category': 'Arithmetic',\n  'syntax': [\n    'exp(x)'\n  ],\n  'description': 'Calculate the exponent of a value.',\n  'examples': [\n    'exp(1.3)',\n    'e ^ 1.3',\n    'log(exp(1.3))',\n    'x = 2.4',\n    '(exp(i*x) == cos(x) + i*sin(x))   # Euler\\'s formula'\n  ],\n  'seealso': [\n    'pow',\n    'log'\n  ]\n};\n\n},{}],65:[function(require,module,exports){\nmodule.exports = {\n  'name': 'fix',\n  'category': 'Arithmetic',\n  'syntax': [\n    'fix(x)'\n  ],\n  'description':\n      'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',\n  'examples': [\n    'fix(3.2)',\n    'fix(3.8)',\n    'fix(-4.2)',\n    'fix(-4.8)'\n  ],\n  'seealso': ['ceil', 'floor', 'round']\n};\n\n},{}],66:[function(require,module,exports){\nmodule.exports = {\n  'name': 'floor',\n  'category': 'Arithmetic',\n  'syntax': [\n    'floor(x)'\n  ],\n  'description':\n      'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',\n  'examples': [\n    'floor(3.2)',\n    'floor(3.8)',\n    'floor(-4.2)'\n  ],\n  'seealso': ['ceil', 'fix', 'round']\n};\n\n},{}],67:[function(require,module,exports){\nmodule.exports = {\n  'name': 'gcd',\n  'category': 'Arithmetic',\n  'syntax': [\n    'gcd(a, b)',\n    'gcd(a, b, c, ...)'\n  ],\n  'description': 'Compute the greatest common divisor.',\n  'examples': [\n    'gcd(8, 12)',\n    'gcd(-4, 6)',\n    'gcd(25, 15, -10)'\n  ],\n  'seealso': [ 'lcm', 'xgcd' ]\n};\n\n},{}],68:[function(require,module,exports){\nmodule.exports = {\n  'name': 'hypot',\n  'category': 'Arithmetic',\n  'syntax': [\n    'hypot(a, b, c, ...)',\n    'hypot([a, b, c, ...])'\n  ],\n  'description': 'Calculate the hypotenusa of a list with values. ',\n  'examples': [\n    'hypot(3, 4)',\n    'sqrt(3^2 + 4^2)',\n    'hypot(-2)',\n    'hypot([3, 4, 5])'\n  ],\n  'seealso': [ 'abs', 'norm' ]\n};\n\n},{}],69:[function(require,module,exports){\nmodule.exports = {\n  'name': 'lcm',\n  'category': 'Arithmetic',\n  'syntax': [\n    'lcm(x, y)'\n  ],\n  'description': 'Compute the least common multiple.',\n  'examples': [\n    'lcm(4, 6)',\n    'lcm(6, 21)',\n    'lcm(6, 21, 5)'\n  ],\n  'seealso': [ 'gcd' ]\n};\n\n},{}],70:[function(require,module,exports){\nmodule.exports = {\n  'name': 'log',\n  'category': 'Arithmetic',\n  'syntax': [\n    'log(x)',\n    'log(x, base)'\n  ],\n  'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',\n  'examples': [\n    'log(3.5)',\n    'a = log(2.4)',\n    'exp(a)',\n    '10 ^ 4',\n    'log(10000, 10)',\n    'log(10000) / log(10)',\n    'b = log(1024, 2)',\n    '2 ^ b'\n  ],\n  'seealso': [\n    'exp',\n    'log10'\n  ]\n};\n},{}],71:[function(require,module,exports){\nmodule.exports = {\n  'name': 'log10',\n  'category': 'Arithmetic',\n  'syntax': [\n    'log10(x)'\n  ],\n  'description': 'Compute the 10-base logarithm of a value.',\n  'examples': [\n    'log10(0.00001)',\n    'log10(10000)',\n    '10 ^ 4',\n    'log(10000) / log(10)',\n    'log(10000, 10)'\n  ],\n  'seealso': [\n    'exp',\n    'log'\n  ]\n};\n\n},{}],72:[function(require,module,exports){\nmodule.exports = {\n  'name': 'mod',\n  'category': 'Operators',\n  'syntax': [\n    'x % y',\n    'x mod y',\n    'mod(x, y)'\n  ],\n  'description':\n      'Calculates the modulus, the remainder of an integer division.',\n  'examples': [\n    '7 % 3',\n    '11 % 2',\n    '10 mod 4',\n    'function isOdd(x) = x % 2',\n    'isOdd(2)',\n    'isOdd(3)'\n  ],\n  'seealso': ['divide']\n};\n\n},{}],73:[function(require,module,exports){\nmodule.exports = {\n  'name': 'multiply',\n  'category': 'Operators',\n  'syntax': [\n    'x * y',\n    'multiply(x, y)'\n  ],\n  'description': 'multiply two values.',\n  'examples': [\n    'a = 2.1 * 3.4',\n    'a / 3.4',\n    '2 * 3 + 4',\n    '2 * (3 + 4)',\n    '3 * 2.1 km'\n  ],\n  'seealso': [\n    'divide'\n  ]\n};\n\n},{}],74:[function(require,module,exports){\nmodule.exports = {\n  'name': 'norm',\n  'category': 'Arithmetic',\n  'syntax': [\n    'norm(x)',\n    'norm(x, p)'\n  ],\n  'description': 'Calculate the norm of a number, vector or matrix.',\n  'examples': [\n    'abs(-3.5)',\n    'norm(-3.5)',\n    'norm(3 - 4i))',\n    'norm([1, 2, -3], Infinity)',\n    'norm([1, 2, -3], -Infinity)',\n    'norm([3, 4], 2)',\n    'norm([[1, 2], [3, 4]], 1)',\n    'norm([[1, 2], [3, 4]], \\'inf\\')',\n    'norm([[1, 2], [3, 4]], \\'fro\\')'\n  ]\n};\n\n},{}],75:[function(require,module,exports){\nmodule.exports = {\n  'name': 'nthRoot',\n  'category': 'Arithmetic',\n  'syntax': [\n    'nthRoot(a)',\n    'nthRoot(a, root)'\n  ],\n  'description': 'Calculate the nth root of a value. ' +\n      'The principal nth root of a positive real number A, ' +\n      'is the positive real solution of the equation \"x^root = A\".',\n  'examples': [\n    '4 ^ 3',\n    'nthRoot(64, 3)',\n    'nthRoot(9, 2)',\n    'sqrt(9)'\n  ],\n  'seealso': [\n    'sqrt',\n    'pow'\n  ]\n};\n},{}],76:[function(require,module,exports){\nmodule.exports = {\n  'name': 'pow',\n  'category': 'Operators',\n  'syntax': [\n    'x ^ y',\n    'pow(x, y)'\n  ],\n  'description':\n      'Calculates the power of x to y, x^y.',\n  'examples': [\n    '2^3 = 8',\n    '2*2*2',\n    '1 + e ^ (pi * i)'\n  ],\n  'seealso': [ 'multiply' ]\n};\n\n},{}],77:[function(require,module,exports){\nmodule.exports = {\n  'name': 'round',\n  'category': 'Arithmetic',\n  'syntax': [\n    'round(x)',\n    'round(x, n)'\n  ],\n  'description':\n      'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',\n  'examples': [\n    'round(3.2)',\n    'round(3.8)',\n    'round(-4.2)',\n    'round(-4.8)',\n    'round(pi, 3)',\n    'round(123.45678, 2)'\n  ],\n  'seealso': ['ceil', 'floor', 'fix']\n};\n\n},{}],78:[function(require,module,exports){\nmodule.exports = {\n  'name': 'sign',\n  'category': 'Arithmetic',\n  'syntax': [\n    'sign(x)'\n  ],\n  'description':\n      'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',\n  'examples': [\n    'sign(3.5)',\n    'sign(-4.2)',\n    'sign(0)'\n  ],\n  'seealso': [\n    'abs'\n  ]\n};\n\n},{}],79:[function(require,module,exports){\nmodule.exports = {\n  'name': 'sqrt',\n  'category': 'Arithmetic',\n  'syntax': [\n    'sqrt(x)'\n  ],\n  'description':\n      'Compute the square root value. If x = y * y, then y is the square root of x.',\n  'examples': [\n    'sqrt(25)',\n    '5 * 5',\n    'sqrt(-1)'\n  ],\n  'seealso': [\n    'square',\n    'multiply'\n  ]\n};\n\n},{}],80:[function(require,module,exports){\nmodule.exports = {\n  'name': 'square',\n  'category': 'Arithmetic',\n  'syntax': [\n    'square(x)'\n  ],\n  'description':\n      'Compute the square of a value. The square of x is x * x.',\n  'examples': [\n    'square(3)',\n    'sqrt(9)',\n    '3^2',\n    '3 * 3'\n  ],\n  'seealso': [\n    'multiply',\n    'pow',\n    'sqrt',\n    'cube'\n  ]\n};\n\n},{}],81:[function(require,module,exports){\nmodule.exports = {\n  'name': 'subtract',\n  'category': 'Operators',\n  'syntax': [\n    'x - y',\n    'subtract(x, y)'\n  ],\n  'description': 'subtract two values.',\n  'examples': [\n    'a = 5.3 - 2',\n    'a + 2',\n    '2/3 - 1/6',\n    '2 * 3 - 3',\n    '2.1 km - 500m'\n  ],\n  'seealso': [\n    'add'\n  ]\n};\n\n},{}],82:[function(require,module,exports){\nmodule.exports = {\n  'name': 'unaryMinus',\n  'category': 'Operators',\n  'syntax': [\n    '-x',\n    'unaryMinus(x)'\n  ],\n  'description':\n      'Inverse the sign of a value. Converts booleans and strings to numbers.',\n  'examples': [\n    '-4.5',\n    '-(-5.6)',\n    '-\"22\"'\n  ],\n  'seealso': [\n    'add', 'subtract', 'unaryPlus'\n  ]\n};\n\n},{}],83:[function(require,module,exports){\nmodule.exports = {\n  'name': 'unaryPlus',\n  'category': 'Operators',\n  'syntax': [\n    '+x',\n    'unaryPlus(x)'\n  ],\n  'description':\n      'Converts booleans and strings to numbers.',\n  'examples': [\n    '+true',\n    '+\"2\"'\n  ],\n  'seealso': [\n    'add', 'subtract', 'unaryMinus'\n  ]\n};\n\n},{}],84:[function(require,module,exports){\nmodule.exports = {\n  'name': 'xgcd',\n  'category': 'Arithmetic',\n  'syntax': [\n    'xgcd(a, b)'\n  ],\n  'description': 'Calculate the extended greatest common divisor for two values',\n  'examples': [\n    'xgcd(8, 12)',\n    'gcd(8, 12)',\n    'xgcd(36163, 21199)'\n  ],\n  'seealso': [ 'gcd', 'lcm' ]\n};\n\n},{}],85:[function(require,module,exports){\nmodule.exports = {\n  'name': 'bitAnd',\n  'category': 'Bitwise',\n  'syntax': [\n    'x & y',\n    'bitAnd(x, y)'\n  ],\n  'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',\n  'examples': [\n    '5 & 3',\n    'bitAnd(53, 131)',\n    '[1, 12, 31] & 42'\n  ],\n  'seealso': [\n    'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n  ]\n};\n\n},{}],86:[function(require,module,exports){\nmodule.exports = {\n  'name': 'bitNot',\n  'category': 'Bitwise',\n  'syntax': [\n    '~x',\n    'bitNot(x)'\n  ],\n  'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',\n  'examples': [\n    '~1',\n    '~2',\n    'bitNot([2, -3, 4])'\n  ],\n  'seealso': [\n    'bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n  ]\n};\n\n},{}],87:[function(require,module,exports){\nmodule.exports = {\n  'name': 'bitOr',\n  'category': 'Bitwise',\n  'syntax': [\n    'x | y',\n    'bitOr(x, y)'\n  ],\n  'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',\n  'examples': [\n    '5 | 3',\n    'bitOr([1, 2, 3], 4)'\n  ],\n  'seealso': [\n    'bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n  ]\n};\n\n},{}],88:[function(require,module,exports){\nmodule.exports = {\n  'name': 'bitXor',\n  'category': 'Bitwise',\n  'syntax': [\n    'bitXor(x, y)'\n  ],\n  'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',\n  'examples': [\n    'bitOr(1, 2)',\n    'bitXor([2, 3, 4], 4)'\n  ],\n  'seealso': [\n    'bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift'\n  ]\n};\n\n},{}],89:[function(require,module,exports){\nmodule.exports = {\n  'name': 'leftShift',\n  'category': 'Bitwise',\n  'syntax': [\n    'x << y',\n    'leftShift(x, y)'\n  ],\n  'description': 'Bitwise left logical shift of a value x by y number of bits.',\n  'examples': [\n    '4 << 1',\n    '8 >> 1'\n  ],\n  'seealso': [\n    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift'\n  ]\n};\n\n},{}],90:[function(require,module,exports){\nmodule.exports = {\n  'name': 'rightArithShift',\n  'category': 'Bitwise',\n  'syntax': [\n    'x >> y',\n    'leftShift(x, y)'\n  ],\n  'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',\n  'examples': [\n    '8 >> 1',\n    '4 << 1',\n    '-12 >> 2'\n  ],\n  'seealso': [\n    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift'\n  ]\n};\n\n},{}],91:[function(require,module,exports){\nmodule.exports = {\n  'name': 'rightLogShift',\n  'category': 'Bitwise',\n  'syntax': [\n    'x >> y',\n    'leftShift(x, y)'\n  ],\n  'description': 'Bitwise right logical shift of a value x by y number of bits.',\n  'examples': [\n    '8 >>> 1',\n    '4 << 1',\n    '-12 >>> 2'\n  ],\n  'seealso': [\n    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift'\n  ]\n};\n\n},{}],92:[function(require,module,exports){\nmodule.exports = {\n  'name': 'bellNumbers',\n  'category': 'Combinatorics',\n  'syntax': [\n    'bellNumbers(n)'\n  ],\n  'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',\n  'examples': [\n    'bellNumbers(3)',\n    'bellNumbers(8)'\n  ],\n  'seealso': ['stirlingS2']\n};\n},{}],93:[function(require,module,exports){\nmodule.exports = {\n  'name': 'catalan',\n  'category': 'Combinatorics',\n  'syntax': [\n    'catalan(n)'\n  ],\n  'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',\n  'examples': [\n    'catalan(3)',\n    'catalan(8)'\n  ],\n  'seealso': ['bellNumbers']\n};\n},{}],94:[function(require,module,exports){\nmodule.exports = {\n  'name': 'composition',\n  'category': 'Combinatorics',\n  'syntax': [\n    'composition(n, k)'\n  ],\n  'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',\n  'examples': [\n    'composition(5, 3)'\n  ],\n  'seealso': ['combinations']\n};\n},{}],95:[function(require,module,exports){\nmodule.exports = {\n  'name': 'stirlingS2',\n  'category': 'Combinatorics',\n  'syntax': [\n    'stirlingS2(n, k)'\n  ],\n  'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',\n  'examples': [\n    'stirlingS2(5, 3)'\n  ],\n  'seealso': ['bellNumbers']\n};\n\n},{}],96:[function(require,module,exports){\nmodule.exports = {\n  'name': 'arg',\n  'category': 'Complex',\n  'syntax': [\n    'arg(x)'\n  ],\n  'description':\n      'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',\n  'examples': [\n    'arg(2 + 2i)',\n    'atan2(3, 2)',\n    'arg(2 + 3i)'\n  ],\n  'seealso': [\n    're',\n    'im',\n    'conj',\n    'abs'\n  ]\n};\n\n},{}],97:[function(require,module,exports){\nmodule.exports = {\n  'name': 'conj',\n  'category': 'Complex',\n  'syntax': [\n    'conj(x)'\n  ],\n  'description':\n      'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',\n  'examples': [\n    'conj(2 + 3i)',\n    'conj(2 - 3i)',\n    'conj(-5.2i)'\n  ],\n  'seealso': [\n    're',\n    'im',\n    'abs',\n    'arg'\n  ]\n};\n\n},{}],98:[function(require,module,exports){\nmodule.exports = {\n  'name': 'im',\n  'category': 'Complex',\n  'syntax': [\n    'im(x)'\n  ],\n  'description': 'Get the imaginary part of a complex number.',\n  'examples': [\n    'im(2 + 3i)',\n    're(2 + 3i)',\n    'im(-5.2i)',\n    'im(2.4)'\n  ],\n  'seealso': [\n    're',\n    'conj',\n    'abs',\n    'arg'\n  ]\n};\n\n},{}],99:[function(require,module,exports){\nmodule.exports = {\n  'name': 're',\n  'category': 'Complex',\n  'syntax': [\n    're(x)'\n  ],\n  'description': 'Get the real part of a complex number.',\n  'examples': [\n    're(2 + 3i)',\n    'im(2 + 3i)',\n    're(-5.2i)',\n    're(2.4)'\n  ],\n  'seealso': [\n    'im',\n    'conj',\n    'abs',\n    'arg'\n  ]\n};\n\n},{}],100:[function(require,module,exports){\nmodule.exports = {\n  'name': 'eval',\n  'category': 'Expression',\n  'syntax': [\n    'eval(expression)',\n    'eval([expr1, expr2, expr3, ...])'\n  ],\n  'description': 'Evaluate an expression or an array with expressions.',\n  'examples': [\n    'eval(\"2 + 3\")',\n    'eval(\"sqrt(\" + 4 + \")\")'\n  ],\n  'seealso': []\n};\n\n},{}],101:[function(require,module,exports){\nmodule.exports = {\n  'name': 'help',\n  'category': 'Expression',\n  'syntax': [\n    'help(object)',\n    'help(string)'\n  ],\n  'description': 'Display documentation on a function or data type.',\n  'examples': [\n    'help(sqrt)',\n    'help(\"complex\")'\n  ],\n  'seealso': []\n};\n\n},{}],102:[function(require,module,exports){\nmodule.exports = {\n  'name': 'distance',\n  'category': 'Geometry',\n  'syntax': [\n    'distance([x1, y1], [x2, y2])',\n    'distance([[x1, y1], [x2, y2])'\n  ],\n  'description': 'Calculates the Euclidean distance between two points.',\n  'examples': [\n    'distance([0,0], [4,4])',\n    'distance([[0,0], [4,4]])'\n  ],\n  'seealso': []\n};\n\n},{}],103:[function(require,module,exports){\nmodule.exports = {\n  'name': 'intersect',\n  'category': 'Geometry',\n  'syntax': [\n    'intersect(expr1, expr2, expr3, expr4)',\n    'intersect(expr1, expr2, expr3)'\n  ],\n  'description': 'Computes the intersection point of lines and/or planes.',\n  'examples': [\n    'intersect([0, 0], [10, 10], [10, 0], [0, 10])',\n    'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'\n  ],\n  'seealso': []\n};\n\n},{}],104:[function(require,module,exports){\nmodule.exports = {\n  'name': 'and',\n  'category': 'Logical',\n  'syntax': [\n    'x and y',\n    'and(x, y)'\n  ],\n  'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',\n  'examples': [\n    'true and false',\n    'true and true',\n    '2 and 4'\n  ],\n  'seealso': [\n    'not', 'or', 'xor'\n  ]\n};\n\n},{}],105:[function(require,module,exports){\nmodule.exports = {\n  'name': 'not',\n  'category': 'Logical',\n  'syntax': [\n    'not x',\n    'not(x)'\n  ],\n  'description': 'Logical not. Flips the boolean value of given argument.',\n  'examples': [\n    'not true',\n    'not false',\n    'not 2',\n    'not 0'\n  ],\n  'seealso': [\n    'and', 'or', 'xor'\n  ]\n};\n\n},{}],106:[function(require,module,exports){\nmodule.exports = {\n  'name': 'or',\n  'category': 'Logical',\n  'syntax': [\n    'x or y',\n    'or(x, y)'\n  ],\n  'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',\n  'examples': [\n    'true or false',\n    'false or false',\n    '0 or 4'\n  ],\n  'seealso': [\n    'not', 'and', 'xor'\n  ]\n};\n\n},{}],107:[function(require,module,exports){\nmodule.exports = {\n  'name': 'xor',\n  'category': 'Logical',\n  'syntax': [\n    'x or y',\n    'or(x, y)'\n  ],\n  'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',\n  'examples': [\n    'true xor false',\n    'false xor false',\n    'true xor true',\n    '0 or 4'\n  ],\n  'seealso': [\n    'not', 'and', 'or'\n  ]\n};\n\n},{}],108:[function(require,module,exports){\nmodule.exports = {\n  'name': 'concat',\n  'category': 'Matrix',\n  'syntax': [\n    'concat(A, B, C, ...)',\n    'concat(A, B, C, ..., dim)'\n  ],\n  'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',\n  'examples': [\n    'A = [1, 2; 5, 6]',\n    'B = [3, 4; 7, 8]',\n    'concat(A, B)',\n    'concat(A, B, 1)',\n    'concat(A, B, 2)'\n  ],\n  'seealso': [\n    'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n\n},{}],109:[function(require,module,exports){\nmodule.exports = {\n  'name': 'cross',\n  'category': 'Matrix',\n  'syntax': [\n    'cross(A, B)'\n  ],\n  'description': 'Calculate the cross product for two vectors in three dimensional space.',\n  'examples': [\n    'cross([1, 1, 0],  [0, 1, 1])',\n    'cross([3, -3, 1], [4, 9, 2])',\n    'cross([2, 3, 4],  [5, 6, 7])'\n  ],\n  'seealso': [\n    'multiply',\n    'dot'\n  ]\n};\n\n},{}],110:[function(require,module,exports){\nmodule.exports = {\n  'name': 'det',\n  'category': 'Matrix',\n  'syntax': [\n    'det(x)'\n  ],\n  'description': 'Calculate the determinant of a matrix',\n  'examples': [\n    'det([1, 2; 3, 4])',\n    'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'\n  ],\n  'seealso': [\n    'concat', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n\n},{}],111:[function(require,module,exports){\nmodule.exports = {\n  'name': 'diag',\n  'category': 'Matrix',\n  'syntax': [\n    'diag(x)',\n    'diag(x, k)'\n  ],\n  'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',\n  'examples': [\n    'diag(1:3)',\n    'diag(1:3, 1)',\n    'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]',\n    'diag(a)'\n  ],\n  'seealso': [\n    'concat', 'det', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n\n},{}],112:[function(require,module,exports){\nmodule.exports = {\n  'name': 'dot',\n  'category': 'Matrix',\n  'syntax': [\n    'dot(A, B)'\n  ],\n  'description': 'Calculate the dot product of two vectors. ' +\n      'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' +\n      'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',\n  'examples': [\n    'dot([2, 4, 1], [2, 2, 3])',\n    '[2, 4, 1] * [2, 2, 3]'\n  ],\n  'seealso': [\n    'multiply',\n    'cross'\n  ]\n};\n\n},{}],113:[function(require,module,exports){\nmodule.exports = {\n  'name': 'eye',\n  'category': 'Matrix',\n  'syntax': [\n    'eye(n)',\n    'eye(m, n)',\n    'eye([m, n])',\n    'eye'\n  ],\n  'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',\n  'examples': [\n    'eye(3)',\n    'eye(3, 5)',\n    'a = [1, 2, 3; 4, 5, 6]',\n    'eye(size(a))'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n\n},{}],114:[function(require,module,exports){\nmodule.exports = {\n  'name': 'filter',\n  'category': 'Matrix',\n  'syntax': [\n    'filter(x, test)'\n  ],\n  'description': 'Filter items in a matrix.',\n  'examples': [\n    'isPositive(x) = x > 0',\n    'filter([6, -2, -1, 4, 3], isPositive)',\n    'filter([6, -2, 0, 1, 0], x != 0)'\n  ],\n  'seealso': ['sort', 'map', 'forEach']\n};\n\n},{}],115:[function(require,module,exports){\nmodule.exports = {\n  'name': 'flatten',\n  'category': 'Matrix',\n  'syntax': [\n    'flatten(x)'\n  ],\n  'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',\n  'examples': [\n    'a = [1, 2, 3; 4, 5, 6]',\n    'size(a)',\n    'b = flatten(a)',\n    'size(b)'\n  ],\n  'seealso': [\n    'concat', 'resize', 'size', 'squeeze'\n  ]\n};\n\n},{}],116:[function(require,module,exports){\nmodule.exports = {\n  'name': 'forEach',\n  'category': 'Matrix',\n  'syntax': [\n    'forEach(x, callback)'\n  ],\n  'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',\n  'examples': [\n    'forEach([1, 2, 3], function(val) { console.log(val) })'\n  ],\n  'seealso': ['map', 'sort', 'filter']\n};\n\n},{}],117:[function(require,module,exports){\nmodule.exports = {\n  'name': 'inv',\n  'category': 'Matrix',\n  'syntax': [\n    'inv(x)'\n  ],\n  'description': 'Calculate the inverse of a matrix',\n  'examples': [\n    'inv([1, 2; 3, 4])',\n    'inv(4)',\n    '1 / 4'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n\n},{}],118:[function(require,module,exports){\nmodule.exports = {\n  'name': 'kron',\n  'category': 'Matrix',\n  'syntax': [\n    'math.kron(x, y)'\n  ],\n  'description': 'Calculates the kronecker product of 2 matrices or vectors.',\n  'examples': [\n    'kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])',\n    'kron([1,1], [2,3,4])'\n  ],\n  'seealso': [\n    'multiply', 'dot', 'cross'\n  ]\n};\n\n},{}],119:[function(require,module,exports){\nmodule.exports = {\n  'name': 'map',\n  'category': 'Matrix',\n  'syntax': [\n    'map(x, callback)'\n  ],\n  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',\n  'examples': [\n    'map([1, 2, 3], function(val) { return value * value })'\n  ],\n  'seealso': ['filter', 'forEach']\n};\n\n},{}],120:[function(require,module,exports){\nmodule.exports = {\n  'name': 'ones',\n  'category': 'Matrix',\n  'syntax': [\n    'ones(m)',\n    'ones(m, n)',\n    'ones(m, n, p, ...)',\n    'ones([m])',\n    'ones([m, n])',\n    'ones([m, n, p, ...])',\n    'ones'\n  ],\n  'description': 'Create a matrix containing ones.',\n  'examples': [\n    'ones(3)',\n    'ones(3, 5)',\n    'ones([2,3]) * 4.5',\n    'a = [1, 2, 3; 4, 5, 6]',\n    'ones(size(a))'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n\n},{}],121:[function(require,module,exports){\nmodule.exports = {\n  'name': 'partitionSelect',\n  'category': 'Matrix',\n  'syntax': [\n    'partitionSelect(x, k)',\n    'partitionSelect(x, k, compare)'\n  ],\n  'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',\n  'examples': [\n    'partitionSelect([5, 10, 1], 2)',\n    'partitionSelect([\"C\", \"B\", \"A\", \"D\"], 1)'\n  ],\n  'seealso': ['sort']\n};\n\n},{}],122:[function(require,module,exports){\nmodule.exports = {\n  'name': 'range',\n  'category': 'Type',\n  'syntax': [\n    'start:end',\n    'start:step:end',\n    'range(start, end)',\n    'range(start, end, step)',\n    'range(string)'\n  ],\n  'description':\n      'Create a range. Lower bound of the range is included, upper bound is excluded.',\n  'examples': [\n    '1:5',\n    '3:-1:-3',\n    'range(3, 7)',\n    'range(0, 12, 2)',\n    'range(\"4:10\")',\n    'a = [1, 2, 3, 4; 5, 6, 7, 8]',\n    'a[1:2, 1:2]'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n\n},{}],123:[function(require,module,exports){\nmodule.exports = {\n  'name': 'reshape',\n  'category': 'Matrix',\n  'syntax': [\n    'reshape(x, sizes)'\n  ],\n  'description': 'Reshape a multi dimensional array to fit the specified dimensions.',\n  'examples': [\n    'reshape([1, 2, 3, 4, 5, 6], [2, 3])',\n    'reshape([[1, 2], [3, 4]], [1, 4])',\n    'reshape([[1, 2], [3, 4]], [4])'\n  ],\n  'seealso': [\n    'size', 'squeeze', 'resize'\n  ]\n};\n\n},{}],124:[function(require,module,exports){\nmodule.exports = {\n  'name': 'resize',\n  'category': 'Matrix',\n  'syntax': [\n    'resize(x, size)',\n    'resize(x, size, defaultValue)'\n  ],\n  'description': 'Resize a matrix.',\n  'examples': [\n    'resize([1,2,3,4,5], [3])',\n    'resize([1,2,3], [5])',\n    'resize([1,2,3], [5], -1)',\n    'resize(2, [2, 3])',\n    'resize(\"hello\", [8], \"!\")'\n  ],\n  'seealso': [\n    'size', 'subset', 'squeeze', 'reshape'\n  ]\n};\n\n},{}],125:[function(require,module,exports){\nmodule.exports = {\n  'name': 'size',\n  'category': 'Matrix',\n  'syntax': [\n    'size(x)'\n  ],\n  'description': 'Calculate the size of a matrix.',\n  'examples': [\n    'size(2.3)',\n    'size(\"hello world\")',\n    'a = [1, 2; 3, 4; 5, 6]',\n    'size(a)',\n    'size(1:6)'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n\n},{}],126:[function(require,module,exports){\nmodule.exports = {\n  'name': 'sort',\n  'category': 'Matrix',\n  'syntax': [\n    'sort(x)',\n    'sort(x, compare)'\n  ],\n  'description': 'Sort the items in a matrix. Compare can be a string \"asc\", \"desc\", \"natural\", or a custom sort function.',\n  'examples': [\n    'sort([5, 10, 1])',\n    'sort([\"C\", \"B\", \"A\", \"D\"])',\n    'sortByLength(a, b) = size(a)[1] - size(b)[1]',\n    'sort([\"Langdon\", \"Tom\", \"Sara\"], sortByLength)',\n    'sort([\"10\", \"1\", \"2\"], \"natural\")'\n  ],\n  'seealso': ['map', 'filter', 'forEach']\n};\n\n},{}],127:[function(require,module,exports){\nmodule.exports = {\n  'name': 'squeeze',\n  'category': 'Matrix',\n  'syntax': [\n    'squeeze(x)'\n  ],\n  'description': 'Remove inner and outer singleton dimensions from a matrix.',\n  'examples': [\n    'a = zeros(3,2,1)',\n    'size(squeeze(a))',\n    'b = zeros(1,1,3)',\n    'size(squeeze(b))'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n\n},{}],128:[function(require,module,exports){\nmodule.exports = {\n  'name': 'subset',\n  'category': 'Matrix',\n  'syntax': [\n    'value(index)',\n    'value(index) = replacement',\n    'subset(value, [index])',\n    'subset(value, [index], replacement)'\n  ],\n  'description': 'Get or set a subset of a matrix or string. ' +\n      'Indexes are one-based. ' +\n      'Both the ranges lower-bound and upper-bound are included.',\n  'examples': [\n    'd = [1, 2; 3, 4]',\n    'e = []',\n    'e[1, 1:2] = [5, 6]',\n    'e[2, :] = [7, 8]',\n    'f = d * e',\n    'f[2, 1]',\n    'f[:, 1]'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros'\n  ]\n};\n\n},{}],129:[function(require,module,exports){\nmodule.exports = {\n  'name': 'trace',\n  'category': 'Matrix',\n  'syntax': [\n    'trace(A)'\n  ],\n  'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',\n  'examples': [\n    'A = [1, 2, 3; -1, 2, 3; 2, 0, 3]',\n    'trace(A)'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros'\n  ]\n};\n\n},{}],130:[function(require,module,exports){\nmodule.exports = {\n  'name': 'transpose',\n  'category': 'Matrix',\n  'syntax': [\n    'x\\'',\n    'transpose(x)'\n  ],\n  'description': 'Transpose a matrix',\n  'examples': [\n    'a = [1, 2, 3; 4, 5, 6]',\n    'a\\'',\n    'transpose(a)'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros'\n  ]\n};\n\n},{}],131:[function(require,module,exports){\nmodule.exports = {\n  'name': 'zeros',\n  'category': 'Matrix',\n  'syntax': [\n    'zeros(m)',\n    'zeros(m, n)',\n    'zeros(m, n, p, ...)',\n    'zeros([m])',\n    'zeros([m, n])',\n    'zeros([m, n, p, ...])',\n    'zeros'\n  ],\n  'description': 'Create a matrix containing zeros.',\n  'examples': [\n    'zeros(3)',\n    'zeros(3, 5)',\n    'a = [1, 2, 3; 4, 5, 6]',\n    'zeros(size(a))'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose'\n  ]\n};\n\n},{}],132:[function(require,module,exports){\nmodule.exports = {\n  'name': 'combinations',\n  'category': 'Probability',\n  'syntax': [\n    'combinations(n, k)'\n  ],\n  'description': 'Compute the number of combinations of n items taken k at a time',\n  'examples': [\n    'combinations(7, 5)'\n  ],\n  'seealso': ['permutations', 'factorial']\n};\n\n},{}],133:[function(require,module,exports){\nmodule.exports = {\n  'name': 'factorial',\n  'category': 'Probability',\n  'syntax': [\n    'kldivergence(x, y)'\n  ],\n  'description': 'Compute the factorial of a value',\n  'examples': [\n    '5!',\n    '5 * 4 * 3 * 2 * 1',\n    '3!'\n  ],\n  'seealso': ['combinations', 'permutations', 'gamma']\n};\n\n},{}],134:[function(require,module,exports){\nmodule.exports = {\n  'name': 'gamma',\n  'category': 'Probability',\n  'syntax': [\n    'gamma(n)'\n  ],\n  'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',\n  'examples': [\n    'gamma(4)',\n    '3!',\n    'gamma(1/2)',\n    'sqrt(pi)'\n  ],\n  'seealso': ['factorial']\n};\n\n},{}],135:[function(require,module,exports){\nmodule.exports = {\n  'name': 'kldivergence',\n  'category': 'Probability',\n  'syntax': [\n    'n!',\n    'factorial(n)'\n  ],\n  'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',\n  'examples': [\n    'math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'\n  ],\n  'seealso': []\n};\n\n},{}],136:[function(require,module,exports){\nmodule.exports = {\n  'name': 'multinomial',\n  'category': 'Probability',\n  'syntax': [\n    'multinomial(A)'\n  ],\n  'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai <= 0.',\n  'examples': [\n    'multinomial([1, 2, 1])'\n  ],\n  'seealso': ['combinations', 'factorial']\n};\n},{}],137:[function(require,module,exports){\nmodule.exports = {\n  'name': 'permutations',\n  'category': 'Probability',\n  'syntax': [\n    'permutations(n)',\n    'permutations(n, k)'\n  ],\n  'description': 'Compute the number of permutations of n items taken k at a time',\n  'examples': [\n    'permutations(5)',\n    'permutations(5, 3)'\n  ],\n  'seealso': ['combinations', 'factorial']\n};\n\n},{}],138:[function(require,module,exports){\nmodule.exports = {\n  'name': 'pickRandom',\n  'category': 'Probability',\n  'syntax': [\n    'pickRandom(array)',\n    'pickRandom(array, number)',\n    'pickRandom(array, weights)',\n    'pickRandom(array, number, weights)',\n    'pickRandom(array, weights, number)'\n  ],\n  'description':\n      'Pick a random entry from a given array.',\n  'examples': [\n    'pickRandom(0:10)',\n    'pickRandom([1, 3, 1, 6])',\n    'pickRandom([1, 3, 1, 6], 2)',\n    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])',\n    'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])',\n    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'\n  ],\n  'seealso': ['random', 'randomInt']\n};\n\n},{}],139:[function(require,module,exports){\nmodule.exports = {\n  'name': 'random',\n  'category': 'Probability',\n  'syntax': [\n    'random()',\n    'random(max)',\n    'random(min, max)',\n    'random(size)',\n    'random(size, max)',\n    'random(size, min, max)'\n  ],\n  'description':\n      'Return a random number.',\n  'examples': [\n    'random()',\n    'random(10, 20)',\n    'random([2, 3])'\n  ],\n  'seealso': ['pickRandom', 'randomInt']\n};\n\n},{}],140:[function(require,module,exports){\nmodule.exports = {\n  'name': 'randInt',\n  'category': 'Probability',\n  'syntax': [\n    'randInt(max)',\n    'randInt(min, max)',\n    'randInt(size)',\n    'randInt(size, max)',\n    'randInt(size, min, max)'\n  ],\n  'description':\n      'Return a random integer number',\n  'examples': [\n    'randInt(10, 20)',\n    'randInt([2, 3], 10)'\n  ],\n  'seealso': ['pickRandom', 'random']\n};\n},{}],141:[function(require,module,exports){\nmodule.exports = {\n  'name': 'compare',\n  'category': 'Relational',\n  'syntax': [\n    'compare(x, y)'\n  ],\n  'description':\n      'Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.',\n  'examples': [\n    'compare(2, 3)',\n    'compare(3, 2)',\n    'compare(2, 2)',\n    'compare(5cm, 40mm)',\n    'compare(2, [1, 2, 3])'\n  ],\n  'seealso': [\n    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compareNatural'\n  ]\n};\n\n},{}],142:[function(require,module,exports){\nmodule.exports = {\n  'name': 'compareNatural',\n  'category': 'Relational',\n  'syntax': [\n    'compareNatural(x, y)'\n  ],\n  'description': 'Compare two values of any type in a deterministic, natural way.',\n  'examples': [\n    'compare(2, 3)',\n    'compare(3, 2)',\n    'compare(2, 2)',\n    'compare(5cm, 40mm)',\n    'compare(\"2\", \"10\")',\n    'compare(2 + 3i, 2 + 4i)',\n    'compare([1, 2, 4], [1, 2, 3])',\n    'compare([1, 5], [1, 2, 3])',\n    'compare([1, 2], [1, 2])',\n    'compare({a: 2}, {a: 4})'\n  ],\n  'seealso': [\n    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'\n  ]\n};\n\n},{}],143:[function(require,module,exports){\nmodule.exports = {\n  'name': 'deepEqual',\n  'category': 'Relational',\n  'syntax': [\n    'deepEqual(x, y)'\n  ],\n  'description':\n      'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',\n  'examples': [\n    '[1,3,4] == [1,3,4]',\n    '[1,3,4] == [1,3]'\n  ],\n  'seealso': [\n    'equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare'\n  ]\n};\n\n},{}],144:[function(require,module,exports){\nmodule.exports = {\n  'name': 'equal',\n  'category': 'Relational',\n  'syntax': [\n    'x == y',\n    'equal(x, y)'\n  ],\n  'description':\n      'Check equality of two values. Returns true if the values are equal, and false if not.',\n  'examples': [\n    '2+2 == 3',\n    '2+2 == 4',\n    'a = 3.2',\n    'b = 6-2.8',\n    'a == b',\n    '50cm == 0.5m'\n  ],\n  'seealso': [\n    'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'\n  ]\n};\n\n},{}],145:[function(require,module,exports){\nmodule.exports = {\n  'name': 'larger',\n  'category': 'Relational',\n  'syntax': [\n    'x > y',\n    'larger(x, y)'\n  ],\n  'description':\n      'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',\n  'examples': [\n    '2 > 3',\n    '5 > 2*2',\n    'a = 3.3',\n    'b = 6-2.8',\n    '(a > b)',\n    '(b < a)',\n    '5 cm > 2 inch'\n  ],\n  'seealso': [\n    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'\n  ]\n};\n\n},{}],146:[function(require,module,exports){\nmodule.exports = {\n  'name': 'largerEq',\n  'category': 'Relational',\n  'syntax': [\n    'x >= y',\n    'largerEq(x, y)'\n  ],\n  'description':\n      'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',\n  'examples': [\n    '2 > 1+1',\n    '2 >= 1+1',\n    'a = 3.2',\n    'b = 6-2.8',\n    '(a > b)'\n  ],\n  'seealso': [\n    'equal', 'unequal', 'smallerEq', 'smaller', 'largerEq', 'compare'\n  ]\n};\n\n},{}],147:[function(require,module,exports){\nmodule.exports = {\n  'name': 'smaller',\n  'category': 'Relational',\n  'syntax': [\n    'x < y',\n    'smaller(x, y)'\n  ],\n  'description':\n      'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',\n  'examples': [\n    '2 < 3',\n    '5 < 2*2',\n    'a = 3.3',\n    'b = 6-2.8',\n    '(a < b)',\n    '5 cm < 2 inch'\n  ],\n  'seealso': [\n    'equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare'\n  ]\n};\n\n},{}],148:[function(require,module,exports){\nmodule.exports = {\n  'name': 'smallerEq',\n  'category': 'Relational',\n  'syntax': [\n    'x <= y',\n    'smallerEq(x, y)'\n  ],\n  'description':\n      'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',\n  'examples': [\n    '2 < 1+1',\n    '2 <= 1+1',\n    'a = 3.2',\n    'b = 6-2.8',\n    '(a < b)'\n  ],\n  'seealso': [\n    'equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare'\n  ]\n};\n\n},{}],149:[function(require,module,exports){\nmodule.exports = {\n  'name': 'unequal',\n  'category': 'Relational',\n  'syntax': [\n    'x != y',\n    'unequal(x, y)'\n  ],\n  'description':\n      'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',\n  'examples': [\n    '2+2 != 3',\n    '2+2 != 4',\n    'a = 3.2',\n    'b = 6-2.8',\n    'a != b',\n    '50cm != 0.5m',\n    '5 cm != 2 inch'\n  ],\n  'seealso': [\n    'equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'\n  ]\n};\n\n},{}],150:[function(require,module,exports){\nmodule.exports = {\n  'name': 'setCartesian',\n  'category': 'Set',\n  'syntax': [\n    'setCartesian(set1, set2)'\n  ],\n  'description':\n      'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  'examples': [\n    'setCartesian([1, 2], [3, 4])'\n  ],\n  'seealso': [\n    'setUnion', 'setIntersect', 'setDifference', 'setPowerset'\n  ]\n};\n\n},{}],151:[function(require,module,exports){\nmodule.exports = {\n  'name': 'setDifference',\n  'category': 'Set',\n  'syntax': [\n    'setDifference(set1, set2)'\n  ],\n  'description':\n      'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  'examples': [\n    'setDifference([1, 2, 3, 4], [3, 4, 5, 6])',\n    'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'\n  ],\n  'seealso': [\n    'setUnion', 'setIntersect', 'setSymDifference'\n  ]\n};\n\n},{}],152:[function(require,module,exports){\nmodule.exports = {\n  'name': 'setDistinct',\n  'category': 'Set',\n  'syntax': [\n    'setDistinct(set)'\n  ],\n  'description':\n      'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',\n  'examples': [\n    'setDistinct([1, 1, 1, 2, 2, 3])'\n  ],\n  'seealso': [\n    'setMultiplicity'\n  ]\n};\n\n},{}],153:[function(require,module,exports){\nmodule.exports = {\n  'name': 'setIntersect',\n  'category': 'Set',\n  'syntax': [\n    'setIntersect(set1, set2)'\n  ],\n  'description':\n      'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  'examples': [\n    'setIntersect([1, 2, 3, 4], [3, 4, 5, 6])',\n    'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'\n  ],\n  'seealso': [\n    'setUnion', 'setDifference'\n  ]\n};\n\n},{}],154:[function(require,module,exports){\nmodule.exports = {\n  'name': 'setIsSubset',\n  'category': 'Set',\n  'syntax': [\n    'setIsSubset(set1, set2)'\n  ],\n  'description':\n      'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  'examples': [\n    'setIsSubset([1, 2], [3, 4, 5, 6])',\n    'setIsSubset([3, 4], [3, 4, 5, 6])'\n  ],\n  'seealso': [\n    'setUnion', 'setIntersect', 'setDifference'\n  ]\n};\n\n},{}],155:[function(require,module,exports){\nmodule.exports = {\n  'name': 'setMultiplicity',\n  'category': 'Set',\n  'syntax': [\n    'setMultiplicity(element, set)'\n  ],\n  'description':\n      'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',\n  'examples': [\n    'setMultiplicity(1, [1, 2, 2, 4])',\n    'setMultiplicity(2, [1, 2, 2, 4])'\n  ],\n  'seealso': [\n    'setDistinct', 'setSize'\n  ]\n};\n\n},{}],156:[function(require,module,exports){\nmodule.exports = {\n  'name': 'setPowerset',\n  'category': 'Set',\n  'syntax': [\n    'setPowerset(set)'\n  ],\n  'description':\n      'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',\n  'examples': [\n    'setPowerset([1, 2, 3])'\n  ],\n  'seealso': [\n    'setCartesian'\n  ]\n};\n\n},{}],157:[function(require,module,exports){\nmodule.exports = {\n  'name': 'setSize',\n  'category': 'Set',\n  'syntax': [\n    'setSize(set)',\n    'setSize(set, unique)'\n  ],\n  'description':\n      'Count the number of elements of a (multi)set. When the second parameter \"unique\" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',\n  'examples': [\n    'setSize([1, 2, 2, 4])',\n    'setSize([1, 2, 2, 4], true)'\n  ],\n  'seealso': [\n    'setUnion', 'setIntersect', 'setDifference'\n  ]\n};\n\n},{}],158:[function(require,module,exports){\nmodule.exports = {\n  'name': 'setSymDifference',\n  'category': 'Set',\n  'syntax': [\n    'setSymDifference(set1, set2)'\n  ],\n  'description':\n      'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  'examples': [\n    'setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])',\n    'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'\n  ],\n  'seealso': [\n    'setUnion', 'setIntersect', 'setDifference'\n  ]\n};\n\n},{}],159:[function(require,module,exports){\nmodule.exports = {\n  'name': 'setUnion',\n  'category': 'Set',\n  'syntax': [\n    'setUnion(set1, set2)'\n  ],\n  'description':\n      'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  'examples': [\n    'setUnion([1, 2, 3, 4], [3, 4, 5, 6])',\n    'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'\n  ],\n  'seealso': [\n    'setIntersect', 'setDifference'\n  ]\n};\n\n},{}],160:[function(require,module,exports){\nmodule.exports = {\n  'name': 'erf',\n  'category': 'Special',\n  'syntax': [\n    'erf(x)'\n  ],\n  'description': 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',\n  'examples': [\n    'erf(0.2)',\n    'erf(-0.5)',\n    'erf(4)'\n  ],\n  'seealso': []\n};\n\n},{}],161:[function(require,module,exports){\nmodule.exports = {\n  'name': 'mad',\n  'category': 'Statistics',\n  'syntax': [\n    'mad(a, b, c, ...)',\n    'mad(A)'\n  ],\n  'description': 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',\n  'examples': [\n    'mad(10, 20, 30)',\n    'mad([1, 2, 3])',\n    'mad(10, 20, 30)'\n  ],\n  'seealso': [\n    'mean',\n    'median',\n    'std',\n    'abs'\n  ]\n};\n\n},{}],162:[function(require,module,exports){\nmodule.exports = {\n  'name': 'max',\n  'category': 'Statistics',\n  'syntax': [\n    'max(a, b, c, ...)',\n    'max(A)',\n    'max(A, dim)'\n  ],\n  'description': 'Compute the maximum value of a list of values.',\n  'examples': [\n    'max(2, 3, 4, 1)',\n    'max([2, 3, 4, 1])',\n    'max([2, 5; 4, 3])',\n    'max([2, 5; 4, 3], 1)',\n    'max([2, 5; 4, 3], 2)',\n    'max(2.7, 7.1, -4.5, 2.0, 4.1)',\n    'min(2.7, 7.1, -4.5, 2.0, 4.1)'\n  ],\n  'seealso': [\n    'mean',\n    'median',\n    'min',\n    'prod',\n    'std',\n    'sum',\n    'var'\n  ]\n};\n\n},{}],163:[function(require,module,exports){\nmodule.exports = {\n  'name': 'mean',\n  'category': 'Statistics',\n  'syntax': [\n    'mean(a, b, c, ...)',\n    'mean(A)',\n    'mean(A, dim)'\n  ],\n  'description': 'Compute the arithmetic mean of a list of values.',\n  'examples': [\n    'mean(2, 3, 4, 1)',\n    'mean([2, 3, 4, 1])',\n    'mean([2, 5; 4, 3])',\n    'mean([2, 5; 4, 3], 1)',\n    'mean([2, 5; 4, 3], 2)',\n    'mean([1.0, 2.7, 3.2, 4.0])'\n  ],\n  'seealso': [\n    'max',\n    'median',\n    'min',\n    'prod',\n    'std',\n    'sum',\n    'var'\n  ]\n};\n\n},{}],164:[function(require,module,exports){\nmodule.exports = {\n  'name': 'median',\n  'category': 'Statistics',\n  'syntax': [\n    'median(a, b, c, ...)',\n    'median(A)'\n  ],\n  'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',\n  'examples': [\n    'median(5, 2, 7)',\n    'median([3, -1, 5, 7])'\n  ],\n  'seealso': [\n    'max',\n    'mean',\n    'min',\n    'prod',\n    'std',\n    'sum',\n    'var',\n    'quantileSeq'\n  ]\n};\n\n},{}],165:[function(require,module,exports){\nmodule.exports = {\n  'name': 'min',\n  'category': 'Statistics',\n  'syntax': [\n    'min(a, b, c, ...)',\n    'min(A)',\n    'min(A, dim)'\n  ],\n  'description': 'Compute the minimum value of a list of values.',\n  'examples': [\n    'min(2, 3, 4, 1)',\n    'min([2, 3, 4, 1])',\n    'min([2, 5; 4, 3])',\n    'min([2, 5; 4, 3], 1)',\n    'min([2, 5; 4, 3], 2)',\n    'min(2.7, 7.1, -4.5, 2.0, 4.1)',\n    'max(2.7, 7.1, -4.5, 2.0, 4.1)'\n  ],\n  'seealso': [\n    'max',\n    'mean',\n    'median',\n    'prod',\n    'std',\n    'sum',\n    'var'\n  ]\n};\n\n},{}],166:[function(require,module,exports){\nmodule.exports = {\n  'name': 'mode',\n  'category': 'Statistics',\n  'syntax': [\n    'mode(a, b, c, ...)',\n    'mode(A)',\n    'mode(A, a, b, B, c, ...)'\n  ],\n  'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',\n  'examples': [\n    'mode(5, 2, 7)',\n    'mode([3, -1, 5, 7])'\n  ],\n  'seealso': [\n    'max',\n    'mean',\n    'min',\n    'median',\n    'prod',\n    'std',\n    'sum',\n    'var'\n  ]\n};\n\n},{}],167:[function(require,module,exports){\nmodule.exports = {\n  'name': 'prod',\n  'category': 'Statistics',\n  'syntax': [\n    'prod(a, b, c, ...)',\n    'prod(A)'\n  ],\n  'description': 'Compute the product of all values.',\n  'examples': [\n    'prod(2, 3, 4)',\n    'prod([2, 3, 4])',\n    'prod([2, 5; 4, 3])'\n  ],\n  'seealso': [\n    'max',\n    'mean',\n    'min',\n    'median',\n    'min',\n    'std',\n    'sum',\n    'var'\n  ]\n};\n\n},{}],168:[function(require,module,exports){\nmodule.exports = {\n  'name': 'quantileSeq',\n  'category': 'Statistics',\n  'syntax': [\n    'quantileSeq(A, prob[, sorted])',\n    'quantileSeq(A, [prob1, prob2, ...][, sorted])',\n    'quantileSeq(A, N[, sorted])'\n  ],\n  'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \\n\\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',\n  'examples': [\n    'quantileSeq([3, -1, 5, 7], 0.5)',\n    'quantileSeq([3, -1, 5, 7], [1/3, 2/3])',\n    'quantileSeq([3, -1, 5, 7], 2)',\n    'quantileSeq([-1, 3, 5, 7], 0.5, true)'\n  ],\n  'seealso': [\n    'mean',\n    'median',\n    'min',\n    'max',\n    'prod',\n    'std',\n    'sum',\n    'var'\n  ]\n};\n},{}],169:[function(require,module,exports){\nmodule.exports = {\n  'name': 'std',\n  'category': 'Statistics',\n  'syntax': [\n    'std(a, b, c, ...)',\n    'std(A)',\n    'std(A, normalization)'\n  ],\n  'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n  'examples': [\n    'std(2, 4, 6)',\n    'std([2, 4, 6, 8])',\n    'std([2, 4, 6, 8], \"uncorrected\")',\n    'std([2, 4, 6, 8], \"biased\")',\n    'std([1, 2, 3; 4, 5, 6])'\n  ],\n  'seealso': [\n    'max',\n    'mean',\n    'min',\n    'median',\n    'min',\n    'prod',\n    'sum',\n    'var'\n  ]\n};\n\n},{}],170:[function(require,module,exports){\nmodule.exports = {\n  'name': 'sum',\n  'category': 'Statistics',\n  'syntax': [\n    'sum(a, b, c, ...)',\n    'sum(A)'\n  ],\n  'description': 'Compute the sum of all values.',\n  'examples': [\n    'sum(2, 3, 4, 1)',\n    'sum([2, 3, 4, 1])',\n    'sum([2, 5; 4, 3])'\n  ],\n  'seealso': [\n    'max',\n    'mean',\n    'median',\n    'min',\n    'prod',\n    'std',\n    'sum',\n    'var'\n  ]\n};\n\n},{}],171:[function(require,module,exports){\nmodule.exports = {\n  'name': 'var',\n  'category': 'Statistics',\n  'syntax': [\n    'var(a, b, c, ...)',\n    'var(A)',\n    'var(A, normalization)'\n  ],\n  'description': 'Compute the variance of all values. Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n  'examples': [\n    'var(2, 4, 6)',\n    'var([2, 4, 6, 8])',\n    'var([2, 4, 6, 8], \"uncorrected\")',\n    'var([2, 4, 6, 8], \"biased\")',\n    'var([1, 2, 3; 4, 5, 6])'\n  ],\n  'seealso': [\n    'max',\n    'mean',\n    'min',\n    'median',\n    'min',\n    'prod',\n    'std',\n    'sum'\n  ]\n};\n\n},{}],172:[function(require,module,exports){\nmodule.exports = {\n  'name': 'acos',\n  'category': 'Trigonometry',\n  'syntax': [\n    'acos(x)'\n  ],\n  'description': 'Compute the inverse cosine of a value in radians.',\n  'examples': [\n    'acos(0.5)',\n    'acos(cos(2.3))'\n  ],\n  'seealso': [\n    'cos',\n    'atan',\n    'asin'\n  ]\n};\n\n},{}],173:[function(require,module,exports){\nmodule.exports = {\n  'name': 'acosh',\n  'category': 'Trigonometry',\n  'syntax': [\n    'acosh(x)'\n  ],\n  'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',\n  'examples': [\n    'acosh(1.5)'\n  ],\n  'seealso': [\n    'cosh',\n    'asinh',\n    'atanh'\n  ]\n};\n},{}],174:[function(require,module,exports){\nmodule.exports = {\n  'name': 'acot',\n  'category': 'Trigonometry',\n  'syntax': [\n    'acot(x)'\n  ],\n  'description': 'Calculate the inverse cotangent of a value.',\n  'examples': [\n    'acot(0.5)',\n    'acot(cot(0.5))',\n    'acot(2)'\n  ],\n  'seealso': [\n    'cot',\n    'atan'\n  ]\n};\n\n},{}],175:[function(require,module,exports){\nmodule.exports = {\n  'name': 'acoth',\n  'category': 'Trigonometry',\n  'syntax': [\n    'acoth(x)'\n  ],\n  'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',\n  'examples': [\n    'acoth(0.5)'\n  ],\n  'seealso': [\n    'acsch',\n    'asech'\n  ]\n};\n},{}],176:[function(require,module,exports){\nmodule.exports = {\n  'name': 'acsc',\n  'category': 'Trigonometry',\n  'syntax': [\n    'acsc(x)'\n  ],\n  'description': 'Calculate the inverse cotangent of a value.',\n  'examples': [\n    'acsc(0.5)',\n    'acsc(csc(0.5))',\n    'acsc(2)'\n  ],\n  'seealso': [\n    'csc',\n    'asin',\n    'asec'\n  ]\n};\n\n},{}],177:[function(require,module,exports){\nmodule.exports = {\n  'name': 'acsch',\n  'category': 'Trigonometry',\n  'syntax': [\n    'acsch(x)'\n  ],\n  'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',\n  'examples': [\n    'acsch(0.5)'\n  ],\n  'seealso': [\n    'asech',\n    'acoth'\n  ]\n};\n\n},{}],178:[function(require,module,exports){\nmodule.exports = {\n  'name': 'asec',\n  'category': 'Trigonometry',\n  'syntax': [\n    'asec(x)'\n  ],\n  'description': 'Calculate the inverse secant of a value.',\n  'examples': [\n    'asec(0.5)',\n    'asec(sec(0.5))',\n    'asec(2)'\n  ],\n  'seealso': [\n    'acos',\n    'acot',\n    'acsc'\n  ]\n};\n\n},{}],179:[function(require,module,exports){\nmodule.exports = {\n  'name': 'asech',\n  'category': 'Trigonometry',\n  'syntax': [\n    'asech(x)'\n  ],\n  'description': 'Calculate the inverse secant of a value.',\n  'examples': [\n    'asech(0.5)'\n  ],\n  'seealso': [\n    'acsch',\n    'acoth'\n  ]\n};\n\n},{}],180:[function(require,module,exports){\nmodule.exports = {\n  'name': 'asin',\n  'category': 'Trigonometry',\n  'syntax': [\n    'asin(x)'\n  ],\n  'description': 'Compute the inverse sine of a value in radians.',\n  'examples': [\n    'asin(0.5)',\n    'asin(sin(2.3))'\n  ],\n  'seealso': [\n    'sin',\n    'acos',\n    'atan'\n  ]\n};\n\n},{}],181:[function(require,module,exports){\nmodule.exports = {\n  'name': 'asinh',\n  'category': 'Trigonometry',\n  'syntax': [\n    'asinh(x)'\n  ],\n  'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',\n  'examples': [\n    'asinh(0.5)'\n  ],\n  'seealso': [\n    'acosh',\n    'atanh'\n  ]\n};\n\n},{}],182:[function(require,module,exports){\nmodule.exports = {\n  'name': 'atan',\n  'category': 'Trigonometry',\n  'syntax': [\n    'atan(x)'\n  ],\n  'description': 'Compute the inverse tangent of a value in radians.',\n  'examples': [\n    'atan(0.5)',\n    'atan(tan(2.3))'\n  ],\n  'seealso': [\n    'tan',\n    'acos',\n    'asin'\n  ]\n};\n\n},{}],183:[function(require,module,exports){\nmodule.exports = {\n  'name': 'atan2',\n  'category': 'Trigonometry',\n  'syntax': [\n    'atan2(y, x)'\n  ],\n  'description':\n      'Computes the principal value of the arc tangent of y/x in radians.',\n  'examples': [\n    'atan2(2, 2) / pi',\n    'angle = 60 deg in rad',\n    'x = cos(angle)',\n    'y = sin(angle)',\n    'atan2(y, x)'\n  ],\n  'seealso': [\n    'sin',\n    'cos',\n    'tan'\n  ]\n};\n\n},{}],184:[function(require,module,exports){\nmodule.exports = {\n  'name': 'atanh',\n  'category': 'Trigonometry',\n  'syntax': [\n    'atanh(x)'\n  ],\n  'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',\n  'examples': [\n    'atanh(0.5)'\n  ],\n  'seealso': [\n    'acosh',\n    'asinh'\n  ]\n};\n\n},{}],185:[function(require,module,exports){\nmodule.exports = {\n  'name': 'cos',\n  'category': 'Trigonometry',\n  'syntax': [\n    'cos(x)'\n  ],\n  'description': 'Compute the cosine of x in radians.',\n  'examples': [\n    'cos(2)',\n    'cos(pi / 4) ^ 2',\n    'cos(180 deg)',\n    'cos(60 deg)',\n    'sin(0.2)^2 + cos(0.2)^2'\n  ],\n  'seealso': [\n    'acos',\n    'sin',\n    'tan'\n  ]\n};\n\n},{}],186:[function(require,module,exports){\nmodule.exports = {\r\n  'name': 'cosh',\r\n  'category': 'Trigonometry',\r\n  'syntax': [\r\n    'cosh(x)'\r\n  ],\r\n  'description': 'Compute the hyperbolic cosine of x in radians.',\r\n  'examples': [\r\n    'cosh(0.5)'\r\n  ],\r\n  'seealso': [\r\n    'sinh',\r\n    'tanh',\r\n    'coth'\r\n  ]\r\n};\r\n\n},{}],187:[function(require,module,exports){\nmodule.exports = {\n  'name': 'cot',\n  'category': 'Trigonometry',\n  'syntax': [\n    'cot(x)'\n  ],\n  'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',\n  'examples': [\n    'cot(2)',\n    '1 / tan(2)'\n  ],\n  'seealso': [\n    'sec',\n    'csc',\n    'tan'\n  ]\n};\n\n},{}],188:[function(require,module,exports){\nmodule.exports = {\r\n  'name': 'coth',\r\n  'category': 'Trigonometry',\r\n  'syntax': [\r\n    'coth(x)'\r\n  ],\r\n  'description': 'Compute the hyperbolic cotangent of x in radians.',\r\n  'examples': [\r\n    'coth(2)',\r\n    '1 / tanh(2)'\r\n  ],\r\n  'seealso': [\r\n    'sech',\r\n    'csch',\r\n    'tanh'\r\n  ]\r\n};\r\n\n},{}],189:[function(require,module,exports){\nmodule.exports = {\n  'name': 'csc',\n  'category': 'Trigonometry',\n  'syntax': [\n    'csc(x)'\n  ],\n  'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',\n  'examples': [\n    'csc(2)',\n    '1 / sin(2)'\n  ],\n  'seealso': [\n    'sec',\n    'cot',\n    'sin'\n  ]\n};\n\n},{}],190:[function(require,module,exports){\nmodule.exports = {\r\n  'name': 'csch',\r\n  'category': 'Trigonometry',\r\n  'syntax': [\r\n    'csch(x)'\r\n  ],\r\n  'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',\r\n  'examples': [\r\n    'csch(2)',\r\n    '1 / sinh(2)'\r\n  ],\r\n  'seealso': [\r\n    'sech',\r\n    'coth',\r\n    'sinh'\r\n  ]\r\n};\r\n\n},{}],191:[function(require,module,exports){\nmodule.exports = {\n  'name': 'sec',\n  'category': 'Trigonometry',\n  'syntax': [\n    'sec(x)'\n  ],\n  'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',\n  'examples': [\n    'sec(2)',\n    '1 / cos(2)'\n  ],\n  'seealso': [\n    'cot',\n    'csc',\n    'cos'\n  ]\n};\n\n},{}],192:[function(require,module,exports){\nmodule.exports = {\r\n  'name': 'sech',\r\n  'category': 'Trigonometry',\r\n  'syntax': [\r\n    'sech(x)'\r\n  ],\r\n  'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',\r\n  'examples': [\r\n    'sech(2)',\r\n    '1 / cosh(2)'\r\n  ],\r\n  'seealso': [\r\n    'coth',\r\n    'csch',\r\n    'cosh'\r\n  ]\r\n};\r\n\n},{}],193:[function(require,module,exports){\nmodule.exports = {\n  'name': 'sin',\n  'category': 'Trigonometry',\n  'syntax': [\n    'sin(x)'\n  ],\n  'description': 'Compute the sine of x in radians.',\n  'examples': [\n    'sin(2)',\n    'sin(pi / 4) ^ 2',\n    'sin(90 deg)',\n    'sin(30 deg)',\n    'sin(0.2)^2 + cos(0.2)^2'\n  ],\n  'seealso': [\n    'asin',\n    'cos',\n    'tan'\n  ]\n};\n\n},{}],194:[function(require,module,exports){\nmodule.exports = {\r\n  'name': 'sinh',\r\n  'category': 'Trigonometry',\r\n  'syntax': [\r\n    'sinh(x)'\r\n  ],\r\n  'description': 'Compute the hyperbolic sine of x in radians.',\r\n  'examples': [\r\n    'sinh(0.5)'\r\n  ],\r\n  'seealso': [\r\n    'cosh',\r\n    'tanh'\r\n  ]\r\n};\r\n\n},{}],195:[function(require,module,exports){\nmodule.exports = {\n  'name': 'tan',\n  'category': 'Trigonometry',\n  'syntax': [\n    'tan(x)'\n  ],\n  'description': 'Compute the tangent of x in radians.',\n  'examples': [\n    'tan(0.5)',\n    'sin(0.5) / cos(0.5)',\n    'tan(pi / 4)',\n    'tan(45 deg)'\n  ],\n  'seealso': [\n    'atan',\n    'sin',\n    'cos'\n  ]\n};\n\n},{}],196:[function(require,module,exports){\nmodule.exports = {\r\n  'name': 'tanh',\r\n  'category': 'Trigonometry',\r\n  'syntax': [\r\n    'tanh(x)'\r\n  ],\r\n  'description': 'Compute the hyperbolic tangent of x in radians.',\r\n  'examples': [\r\n    'tanh(0.5)',\r\n    'sinh(0.5) / cosh(0.5)'\r\n  ],\r\n  'seealso': [\r\n    'sinh',\r\n    'cosh'\r\n  ]\r\n};\r\n\n},{}],197:[function(require,module,exports){\nmodule.exports = {\n  'name': 'to',\n  'category': 'Units',\n  'syntax': [\n    'x to unit',\n    'to(x, unit)'\n  ],\n  'description': 'Change the unit of a value.',\n  'examples': [\n    '5 inch to cm',\n    '3.2kg to g',\n    '16 bytes in bits'\n  ],\n  'seealso': []\n};\n\n},{}],198:[function(require,module,exports){\nmodule.exports = {\n  'name': 'clone',\n  'category': 'Utils',\n  'syntax': [\n    'clone(x)'\n  ],\n  'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',\n  'examples': [\n    'clone(3.5)',\n    'clone(2 - 4i)',\n    'clone(45 deg)',\n    'clone([1, 2; 3, 4])',\n    'clone(\"hello world\")'\n  ],\n  'seealso': []\n};\n\n},{}],199:[function(require,module,exports){\nmodule.exports = {\n  'name': 'format',\n  'category': 'Utils',\n  'syntax': [\n    'format(value)',\n    'format(value, precision)'\n  ],\n  'description': 'Format a value of any type as string.',\n  'examples': [\n    'format(2.3)',\n    'format(3 - 4i)',\n    'format([])',\n    'format(pi, 3)'\n  ],\n  'seealso': ['print']\n};\n\n},{}],200:[function(require,module,exports){\nmodule.exports = {\n  'name': 'isInteger',\n  'category': 'Utils',\n  'syntax': [\n    'isInteger(x)'\n  ],\n  'description': 'Test whether a value is an integer number.',\n  'examples': [\n    'isInteger(2)',\n    'isInteger(3.5)',\n    'isInteger([3, 0.5, -2])'\n  ],\n  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n};\n\n},{}],201:[function(require,module,exports){\nmodule.exports = {\n  'name': 'isNaN',\n  'category': 'Utils',\n  'syntax': [\n    'isNaN(x)'\n  ],\n  'description': 'Test whether a value is NaN (not a number)',\n  'examples': [\n    'isNaN(2)',\n    'isNaN(0 / 0)',\n    'isNaN(NaN)',\n    'isNaN(Infinity)'\n  ],\n  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n};\n\n},{}],202:[function(require,module,exports){\nmodule.exports = {\n  'name': 'isNegative',\n  'category': 'Utils',\n  'syntax': [\n    'isNegative(x)'\n  ],\n  'description': 'Test whether a value is negative: smaller than zero.',\n  'examples': [\n    'isNegative(2)',\n    'isNegative(0)',\n    'isNegative(-4)',\n    'isNegative([3, 0.5, -2])'\n  ],\n  'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']\n};\n\n},{}],203:[function(require,module,exports){\nmodule.exports = {\n  'name': 'isNumeric',\n  'category': 'Utils',\n  'syntax': [\n    'isNumeric(x)'\n  ],\n  'description': 'Test whether a value is a numeric value. ' +\n    'Returns true when the input is a number, BigNumber, Fraction, or boolean.',\n  'examples': [\n    'isNumeric(2)',\n    'isNumeric(0)',\n    'isNumeric(bignumber(500))',\n    'isNumeric(fraction(0.125))',\n    'isNumeric(\"3\")',\n    'isNumeric(2 + 3i)',\n    'isNumeric([2.3, \"foo\", false])'\n  ],\n  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN']\n};\n\n},{}],204:[function(require,module,exports){\nmodule.exports = {\n  'name': 'isPositive',\n  'category': 'Utils',\n  'syntax': [\n    'isPositive(x)'\n  ],\n  'description': 'Test whether a value is positive: larger than zero.',\n  'examples': [\n    'isPositive(2)',\n    'isPositive(0)',\n    'isPositive(-4)',\n    'isPositive([3, 0.5, -2])'\n  ],\n  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n};\n\n},{}],205:[function(require,module,exports){\nmodule.exports = {\n  'name': 'isPrime',\n  'category': 'Utils',\n  'syntax': [\n    'isPrime(x)'\n  ],\n  'description': 'Test whether a value is prime: has no divisors other than itself and one.',\n  'examples': [\n    'isPrime(3)',\n    'isPrime(-2)',\n    'isPrime([2, 17, 100])'\n  ],\n  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n};\n},{}],206:[function(require,module,exports){\nmodule.exports = {\n  'name': 'isZero',\n  'category': 'Utils',\n  'syntax': [\n    'isZero(x)'\n  ],\n  'description': 'Test whether a value is zero.',\n  'examples': [\n    'isZero(2)',\n    'isZero(0)',\n    'isZero(-4)',\n    'isZero([3, 0, -2, 0])'\n  ],\n  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']\n};\n\n},{}],207:[function(require,module,exports){\nmodule.exports = {\n  'name': 'typeof',\n  'category': 'Utils',\n  'syntax': [\n    'typeof(x)'\n  ],\n  'description': 'Get the type of a variable.',\n  'examples': [\n    'typeof(3.5)',\n    'typeof(2 - 4i)',\n    'typeof(45 deg)',\n    'typeof(\"hello world\")'\n  ],\n  'seealso': []\n};\n\n},{}],208:[function(require,module,exports){\nfunction factory (construction, config, load, typed) {\n  var docs = {};\n\n\n  // construction functions\n  docs.bignumber = require('./construction/bignumber');\n  docs['boolean'] = require('./construction/boolean');\n  docs.complex = require('./construction/complex');\n  docs.createUnit = require('./construction/createUnit');\n  docs.fraction = require('./construction/fraction');\n  docs.index = require('./construction/index');\n  docs.matrix = require('./construction/matrix');\n  docs.number = require('./construction/number');\n  docs.sparse = require('./construction/sparse');\n  docs.splitUnit = require('./construction/splitUnit');\n  docs.string = require('./construction/string');\n  docs.unit = require('./construction/unit');\n\n  // constants\n  docs.e = require('./constants/e');\n  docs.E = require('./constants/e');\n  docs['false'] = require('./constants/false');\n  docs.i = require('./constants/i');\n  docs['Infinity'] = require('./constants/Infinity');\n  docs.LN2 = require('./constants/LN2');\n  docs.LN10 = require('./constants/LN10');\n  docs.LOG2E = require('./constants/LOG2E');\n  docs.LOG10E = require('./constants/LOG10E');\n  docs.NaN = require('./constants/NaN');\n  docs['null'] = require('./constants/null');\n  docs.pi = require('./constants/pi');\n  docs.PI = require('./constants/pi');\n  docs.phi = require('./constants/phi');\n  docs.SQRT1_2 = require('./constants/SQRT1_2');\n  docs.SQRT2 = require('./constants/SQRT2');\n  docs.tau = require('./constants/tau');\n  docs['true'] = require('./constants/true');\n  docs.version = require('./constants/version');\n\n  // physical constants\n  // TODO: more detailed docs for physical constants\n  docs.speedOfLight = {description: 'Speed of light in vacuum', examples: ['speedOfLight']};\n  docs.gravitationConstant = {description: 'Newtonian constant of gravitation', examples: ['gravitationConstant']};\n  docs.planckConstant = {description: 'Planck constant', examples: ['planckConstant']};\n  docs.reducedPlanckConstant = {description: 'Reduced Planck constant', examples: ['reducedPlanckConstant']};\n\n  docs.magneticConstant = {description: 'Magnetic constant (vacuum permeability)', examples: ['magneticConstant']};\n  docs.electricConstant = {description: 'Electric constant (vacuum permeability)', examples: ['electricConstant']};\n  docs.vacuumImpedance = {description: 'Characteristic impedance of vacuum', examples: ['vacuumImpedance']};\n  docs.coulomb = {description: 'Coulomb\\'s constant', examples: ['coulomb']};\n  docs.elementaryCharge = {description: 'Elementary charge', examples: ['elementaryCharge']};\n  docs.bohrMagneton = {description: 'Borh magneton', examples: ['bohrMagneton']};\n  docs.conductanceQuantum = {description: 'Conductance quantum', examples: ['conductanceQuantum']};\n  docs.inverseConductanceQuantum = {description: 'Inverse conductance quantum', examples: ['inverseConductanceQuantum']};\n  //docs.josephson = {description: 'Josephson constant', examples: ['josephson']};\n  docs.magneticFluxQuantum = {description: 'Magnetic flux quantum', examples: ['magneticFluxQuantum']};\n  docs.nuclearMagneton = {description: 'Nuclear magneton', examples: ['nuclearMagneton']};\n  docs.klitzing = {description: 'Von Klitzing constant', examples: ['klitzing']};\n\n  docs.bohrRadius = {description: 'Borh radius', examples: ['bohrRadius']};\n  docs.classicalElectronRadius = {description: 'Classical electron radius', examples: ['classicalElectronRadius']};\n  docs.electronMass = {description: 'Electron mass', examples: ['electronMass']};\n  docs.fermiCoupling = {description: 'Fermi coupling constant', examples: ['fermiCoupling']};\n  docs.fineStructure = {description: 'Fine-structure constant', examples: ['fineStructure']};\n  docs.hartreeEnergy = {description: 'Hartree energy', examples: ['hartreeEnergy']};\n  docs.protonMass = {description: 'Proton mass', examples: ['protonMass']};\n  docs.deuteronMass = {description: 'Deuteron Mass', examples: ['deuteronMass']};\n  docs.neutronMass = {description: 'Neutron mass', examples: ['neutronMass']};\n  docs.quantumOfCirculation = {description: 'Quantum of circulation', examples: ['quantumOfCirculation']};\n  docs.rydberg = {description: 'Rydberg constant', examples: ['rydberg']};\n  docs.thomsonCrossSection = {description: 'Thomson cross section', examples: ['thomsonCrossSection']};\n  docs.weakMixingAngle = {description: 'Weak mixing angle', examples: ['weakMixingAngle']};\n  docs.efimovFactor = {description: 'Efimov factor', examples: ['efimovFactor']};\n\n  docs.atomicMass = {description: 'Atomic mass constant', examples: ['atomicMass']};\n  docs.avogadro = {description: 'Avogadro\\'s number', examples: ['avogadro']};\n  docs.boltzmann = {description: 'Boltzmann constant', examples: ['boltzmann']};\n  docs.faraday = {description: 'Faraday constant', examples: ['faraday']};\n  docs.firstRadiation = {description: 'First radiation constant', examples: ['firstRadiation']};\n  docs.loschmidt = {description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa', examples: ['loschmidt']};\n  docs.gasConstant = {description: 'Gas constant', examples: ['gasConstant']};\n  docs.molarPlanckConstant = {description: 'Molar Planck constant', examples: ['molarPlanckConstant']};\n  docs.molarVolume = {description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa', examples: ['molarVolume']};\n  docs.sackurTetrode = {description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa', examples: ['sackurTetrode']};\n  docs.secondRadiation = {description: 'Second radiation constant', examples: ['secondRadiation']};\n  docs.stefanBoltzmann = {description: 'Stefan-Boltzmann constant', examples: ['stefanBoltzmann']};\n  docs.wienDisplacement = {description: 'Wien displacement law constant', examples: ['wienDisplacement']};\n  //docs.spectralRadiance = {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']};\n\n  docs.molarMass = {description: 'Molar mass constant', examples: ['molarMass']};\n  docs.molarMassC12 = {description: 'Molar mass constant of carbon-12', examples: ['molarMassC12']};\n  docs.gravity = {description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)', examples: ['gravity']};\n\n  docs.planckLength = {description: 'Planck length', examples: ['planckLength']};\n  docs.planckMass = {description: 'Planck mass', examples: ['planckMass']};\n  docs.planckTime = {description: 'Planck time', examples: ['planckTime']};\n  docs.planckCharge = {description: 'Planck charge', examples: ['planckCharge']};\n  docs.planckTemperature = {description: 'Planck temperature', examples: ['planckTemperature']};\n\n  // functions - algebra\n  docs.derivative = require('./function/algebra/derivative');\n  docs.lsolve = require('./function/algebra/lsolve');\n  docs.lup = require('./function/algebra/lup');\n  docs.lusolve = require('./function/algebra/lusolve');\n  docs.simplify = require('./function/algebra/simplify');\n  docs.slu = require('./function/algebra/slu');\n  docs.usolve = require('./function/algebra/usolve');\n  docs.qr = require('./function/algebra/qr');\n\n  // functions - arithmetic\n  docs.abs = require('./function/arithmetic/abs');\n  docs.add = require('./function/arithmetic/add');\n  docs.cbrt = require('./function/arithmetic/cbrt');\n  docs.ceil = require('./function/arithmetic/ceil');\n  docs.cube = require('./function/arithmetic/cube');\n  docs.divide = require('./function/arithmetic/divide');\n  docs.dotDivide = require('./function/arithmetic/dotDivide');\n  docs.dotMultiply = require('./function/arithmetic/dotMultiply');\n  docs.dotPow = require('./function/arithmetic/dotPow');\n  docs.exp = require('./function/arithmetic/exp');\n  docs.fix = require('./function/arithmetic/fix');\n  docs.floor = require('./function/arithmetic/floor');\n  docs.gcd = require('./function/arithmetic/gcd');\n  docs.hypot = require('./function/arithmetic/hypot');\n  docs.lcm = require('./function/arithmetic/lcm');\n  docs.log = require('./function/arithmetic/log');\n  docs.log10 = require('./function/arithmetic/log10');\n  docs.mod = require('./function/arithmetic/mod');\n  docs.multiply = require('./function/arithmetic/multiply');\n  docs.norm = require('./function/arithmetic/norm');\n  docs.nthRoot = require('./function/arithmetic/nthRoot');\n  docs.pow = require('./function/arithmetic/pow');\n  docs.round = require('./function/arithmetic/round');\n  docs.sign = require('./function/arithmetic/sign');\n  docs.sqrt = require('./function/arithmetic/sqrt');\n  docs.square = require('./function/arithmetic/square');\n  docs.subtract = require('./function/arithmetic/subtract');\n  docs.unaryMinus = require('./function/arithmetic/unaryMinus');\n  docs.unaryPlus = require('./function/arithmetic/unaryPlus');\n  docs.xgcd = require('./function/arithmetic/xgcd');\n\n  // functions - bitwise\n  docs.bitAnd = require('./function/bitwise/bitAnd');\n  docs.bitNot = require('./function/bitwise/bitNot');\n  docs.bitOr = require('./function/bitwise/bitOr');\n  docs.bitXor = require('./function/bitwise/bitXor');\n  docs.leftShift = require('./function/bitwise/leftShift');\n  docs.rightArithShift = require('./function/bitwise/rightArithShift');\n  docs.rightLogShift = require('./function/bitwise/rightLogShift');\n\n  // functions - combinatorics\n  docs.bellNumbers = require('./function/combinatorics/bellNumbers');\n  docs.catalan = require('./function/combinatorics/catalan');\n  docs.composition = require('./function/combinatorics/composition');\n  docs.stirlingS2 = require('./function/combinatorics/stirlingS2');\n\n  // functions - core\n  docs['config'] =  require('./core/config');\n  docs['import'] =  require('./core/import');\n  docs['typed'] =  require('./core/typed');\n\n  // functions - complex\n  docs.arg = require('./function/complex/arg');\n  docs.conj = require('./function/complex/conj');\n  docs.re = require('./function/complex/re');\n  docs.im = require('./function/complex/im');\n\n  // functions - expression\n  docs['eval'] =  require('./function/expression/eval');\n  docs.help =  require('./function/expression/help');\n\n  // functions - geometry\n  docs.distance = require('./function/geometry/distance');\n  docs.intersect = require('./function/geometry/intersect');\n\n  // functions - logical\n  docs['and'] = require('./function/logical/and');\n  docs['not'] = require('./function/logical/not');\n  docs['or'] = require('./function/logical/or');\n  docs['xor'] = require('./function/logical/xor');\n\n  // functions - matrix\n  docs['concat'] = require('./function/matrix/concat');\n  docs.cross = require('./function/matrix/cross');\n  docs.det = require('./function/matrix/det');\n  docs.diag = require('./function/matrix/diag');\n  docs.dot = require('./function/matrix/dot');\n  docs.eye = require('./function/matrix/eye');\n  docs.filter =  require('./function/matrix/filter');\n  docs.flatten = require('./function/matrix/flatten');\n  docs.forEach =  require('./function/matrix/forEach');\n  docs.inv = require('./function/matrix/inv');\n  docs.kron = require('./function/matrix/kron');\n  docs.map =  require('./function/matrix/map');\n  docs.ones = require('./function/matrix/ones');\n  docs.partitionSelect =  require('./function/matrix/partitionSelect');\n  docs.range = require('./function/matrix/range');\n  docs.resize = require('./function/matrix/resize');\n  docs.reshape = require('./function/matrix/reshape');\n  docs.size = require('./function/matrix/size');\n  docs.sort =  require('./function/matrix/sort');\n  docs.squeeze = require('./function/matrix/squeeze');\n  docs.subset = require('./function/matrix/subset');\n  docs.trace = require('./function/matrix/trace');\n  docs.transpose = require('./function/matrix/transpose');\n  docs.zeros = require('./function/matrix/zeros');\n\n  // functions - probability\n  docs.combinations = require('./function/probability/combinations');\n  //docs.distribution = require('./function/probability/distribution');\n  docs.factorial = require('./function/probability/factorial');\n  docs.gamma = require('./function/probability/gamma');\n  docs.kldivergence = require('./function/probability/kldivergence');\n  docs.multinomial = require('./function/probability/multinomial');\n  docs.permutations = require('./function/probability/permutations');\n  docs.pickRandom = require('./function/probability/pickRandom');\n  docs.random = require('./function/probability/random');\n  docs.randomInt = require('./function/probability/randomInt');\n\n  // functions - relational\n  docs.compare = require('./function/relational/compare');\n  docs.compareNatural = require('./function/relational/compareNatural');\n  docs.deepEqual = require('./function/relational/deepEqual');\n  docs['equal'] = require('./function/relational/equal');\n  docs.larger = require('./function/relational/larger');\n  docs.largerEq = require('./function/relational/largerEq');\n  docs.smaller = require('./function/relational/smaller');\n  docs.smallerEq = require('./function/relational/smallerEq');\n  docs.unequal = require('./function/relational/unequal');\n\n  // functions - set\n  docs.setCartesian = require('./function/set/setCartesian');\n  docs.setDifference = require('./function/set/setDifference');\n  docs.setDistinct = require('./function/set/setDistinct');\n  docs.setIntersect = require('./function/set/setIntersect');\n  docs.setIsSubset = require('./function/set/setIsSubset');\n  docs.setMultiplicity = require('./function/set/setMultiplicity');\n  docs.setPowerset = require('./function/set/setPowerset');\n  docs.setSize = require('./function/set/setSize');\n  docs.setSymDifference = require('./function/set/setSymDifference');\n  docs.setUnion = require('./function/set/setUnion');\n\n  // functions - special\n  docs.erf = require('./function/special/erf');\n\n  // functions - statistics\n  docs.mad = require('./function/statistics/mad');\n  docs.max = require('./function/statistics/max');\n  docs.mean = require('./function/statistics/mean');\n  docs.median = require('./function/statistics/median');\n  docs.min = require('./function/statistics/min');\n  docs.mode = require('./function/statistics/mode');\n  docs.prod = require('./function/statistics/prod');\n  docs.quantileSeq = require('./function/statistics/quantileSeq');\n  docs.std = require('./function/statistics/std');\n  docs.sum = require('./function/statistics/sum');\n  docs['var'] = require('./function/statistics/var');\n\n  // functions - trigonometry\n  docs.acos = require('./function/trigonometry/acos');\n  docs.acosh = require('./function/trigonometry/acosh');\n  docs.acot = require('./function/trigonometry/acot');\n  docs.acoth = require('./function/trigonometry/acoth');\n  docs.acsc = require('./function/trigonometry/acsc');\n  docs.acsch = require('./function/trigonometry/acsch');\n  docs.asec = require('./function/trigonometry/asec');\n  docs.asech = require('./function/trigonometry/asech');\n  docs.asin = require('./function/trigonometry/asin');\n  docs.asinh = require('./function/trigonometry/asinh');\n  docs.atan = require('./function/trigonometry/atan');\n  docs.atanh = require('./function/trigonometry/atanh');\n  docs.atan2 = require('./function/trigonometry/atan2');\n  docs.cos = require('./function/trigonometry/cos');\n  docs.cosh = require('./function/trigonometry/cosh');\n  docs.cot = require('./function/trigonometry/cot');\n  docs.coth = require('./function/trigonometry/coth');\n  docs.csc = require('./function/trigonometry/csc');\n  docs.csch = require('./function/trigonometry/csch');\n  docs.sec = require('./function/trigonometry/sec');\n  docs.sech = require('./function/trigonometry/sech');\n  docs.sin = require('./function/trigonometry/sin');\n  docs.sinh = require('./function/trigonometry/sinh');\n  docs.tan = require('./function/trigonometry/tan');\n  docs.tanh = require('./function/trigonometry/tanh');\n\n  // functions - units\n  docs.to = require('./function/units/to');\n\n  // functions - utils\n  docs.clone = require('./function/utils/clone');\n  docs.format = require('./function/utils/format');\n  docs.isNaN = require('./function/utils/isNaN');\n  docs.isInteger = require('./function/utils/isInteger');\n  docs.isNegative = require('./function/utils/isNegative');\n  docs.isNumeric = require('./function/utils/isNumeric');\n  docs.isPositive = require('./function/utils/isPositive');\n  docs.isPrime = require('./function/utils/isPrime');\n  docs.isZero = require('./function/utils/isZero');\n  // docs.print = require('./function/utils/print'); // TODO: add documentation for print as soon as the parser supports objects.\n  docs['typeof'] =  require('./function/utils/typeof');\n\n  return docs;\n}\n\nexports.name = 'docs';\nexports.path = 'expression';\nexports.factory = factory;\n\n},{\"./constants/Infinity\":15,\"./constants/LN10\":16,\"./constants/LN2\":17,\"./constants/LOG10E\":18,\"./constants/LOG2E\":19,\"./constants/NaN\":20,\"./constants/SQRT1_2\":21,\"./constants/SQRT2\":22,\"./constants/e\":23,\"./constants/false\":24,\"./constants/i\":25,\"./constants/null\":26,\"./constants/phi\":27,\"./constants/pi\":28,\"./constants/tau\":29,\"./constants/true\":30,\"./constants/version\":31,\"./construction/bignumber\":32,\"./construction/boolean\":33,\"./construction/complex\":34,\"./construction/createUnit\":35,\"./construction/fraction\":36,\"./construction/index\":37,\"./construction/matrix\":38,\"./construction/number\":39,\"./construction/sparse\":40,\"./construction/splitUnit\":41,\"./construction/string\":42,\"./construction/unit\":43,\"./core/config\":44,\"./core/import\":45,\"./core/typed\":46,\"./function/algebra/derivative\":47,\"./function/algebra/lsolve\":48,\"./function/algebra/lup\":49,\"./function/algebra/lusolve\":50,\"./function/algebra/qr\":51,\"./function/algebra/simplify\":52,\"./function/algebra/slu\":53,\"./function/algebra/usolve\":54,\"./function/arithmetic/abs\":55,\"./function/arithmetic/add\":56,\"./function/arithmetic/cbrt\":57,\"./function/arithmetic/ceil\":58,\"./function/arithmetic/cube\":59,\"./function/arithmetic/divide\":60,\"./function/arithmetic/dotDivide\":61,\"./function/arithmetic/dotMultiply\":62,\"./function/arithmetic/dotPow\":63,\"./function/arithmetic/exp\":64,\"./function/arithmetic/fix\":65,\"./function/arithmetic/floor\":66,\"./function/arithmetic/gcd\":67,\"./function/arithmetic/hypot\":68,\"./function/arithmetic/lcm\":69,\"./function/arithmetic/log\":70,\"./function/arithmetic/log10\":71,\"./function/arithmetic/mod\":72,\"./function/arithmetic/multiply\":73,\"./function/arithmetic/norm\":74,\"./function/arithmetic/nthRoot\":75,\"./function/arithmetic/pow\":76,\"./function/arithmetic/round\":77,\"./function/arithmetic/sign\":78,\"./function/arithmetic/sqrt\":79,\"./function/arithmetic/square\":80,\"./function/arithmetic/subtract\":81,\"./function/arithmetic/unaryMinus\":82,\"./function/arithmetic/unaryPlus\":83,\"./function/arithmetic/xgcd\":84,\"./function/bitwise/bitAnd\":85,\"./function/bitwise/bitNot\":86,\"./function/bitwise/bitOr\":87,\"./function/bitwise/bitXor\":88,\"./function/bitwise/leftShift\":89,\"./function/bitwise/rightArithShift\":90,\"./function/bitwise/rightLogShift\":91,\"./function/combinatorics/bellNumbers\":92,\"./function/combinatorics/catalan\":93,\"./function/combinatorics/composition\":94,\"./function/combinatorics/stirlingS2\":95,\"./function/complex/arg\":96,\"./function/complex/conj\":97,\"./function/complex/im\":98,\"./function/complex/re\":99,\"./function/expression/eval\":100,\"./function/expression/help\":101,\"./function/geometry/distance\":102,\"./function/geometry/intersect\":103,\"./function/logical/and\":104,\"./function/logical/not\":105,\"./function/logical/or\":106,\"./function/logical/xor\":107,\"./function/matrix/concat\":108,\"./function/matrix/cross\":109,\"./function/matrix/det\":110,\"./function/matrix/diag\":111,\"./function/matrix/dot\":112,\"./function/matrix/eye\":113,\"./function/matrix/filter\":114,\"./function/matrix/flatten\":115,\"./function/matrix/forEach\":116,\"./function/matrix/inv\":117,\"./function/matrix/kron\":118,\"./function/matrix/map\":119,\"./function/matrix/ones\":120,\"./function/matrix/partitionSelect\":121,\"./function/matrix/range\":122,\"./function/matrix/reshape\":123,\"./function/matrix/resize\":124,\"./function/matrix/size\":125,\"./function/matrix/sort\":126,\"./function/matrix/squeeze\":127,\"./function/matrix/subset\":128,\"./function/matrix/trace\":129,\"./function/matrix/transpose\":130,\"./function/matrix/zeros\":131,\"./function/probability/combinations\":132,\"./function/probability/factorial\":133,\"./function/probability/gamma\":134,\"./function/probability/kldivergence\":135,\"./function/probability/multinomial\":136,\"./function/probability/permutations\":137,\"./function/probability/pickRandom\":138,\"./function/probability/random\":139,\"./function/probability/randomInt\":140,\"./function/relational/compare\":141,\"./function/relational/compareNatural\":142,\"./function/relational/deepEqual\":143,\"./function/relational/equal\":144,\"./function/relational/larger\":145,\"./function/relational/largerEq\":146,\"./function/relational/smaller\":147,\"./function/relational/smallerEq\":148,\"./function/relational/unequal\":149,\"./function/set/setCartesian\":150,\"./function/set/setDifference\":151,\"./function/set/setDistinct\":152,\"./function/set/setIntersect\":153,\"./function/set/setIsSubset\":154,\"./function/set/setMultiplicity\":155,\"./function/set/setPowerset\":156,\"./function/set/setSize\":157,\"./function/set/setSymDifference\":158,\"./function/set/setUnion\":159,\"./function/special/erf\":160,\"./function/statistics/mad\":161,\"./function/statistics/max\":162,\"./function/statistics/mean\":163,\"./function/statistics/median\":164,\"./function/statistics/min\":165,\"./function/statistics/mode\":166,\"./function/statistics/prod\":167,\"./function/statistics/quantileSeq\":168,\"./function/statistics/std\":169,\"./function/statistics/sum\":170,\"./function/statistics/var\":171,\"./function/trigonometry/acos\":172,\"./function/trigonometry/acosh\":173,\"./function/trigonometry/acot\":174,\"./function/trigonometry/acoth\":175,\"./function/trigonometry/acsc\":176,\"./function/trigonometry/acsch\":177,\"./function/trigonometry/asec\":178,\"./function/trigonometry/asech\":179,\"./function/trigonometry/asin\":180,\"./function/trigonometry/asinh\":181,\"./function/trigonometry/atan\":182,\"./function/trigonometry/atan2\":183,\"./function/trigonometry/atanh\":184,\"./function/trigonometry/cos\":185,\"./function/trigonometry/cosh\":186,\"./function/trigonometry/cot\":187,\"./function/trigonometry/coth\":188,\"./function/trigonometry/csc\":189,\"./function/trigonometry/csch\":190,\"./function/trigonometry/sec\":191,\"./function/trigonometry/sech\":192,\"./function/trigonometry/sin\":193,\"./function/trigonometry/sinh\":194,\"./function/trigonometry/tan\":195,\"./function/trigonometry/tanh\":196,\"./function/units/to\":197,\"./function/utils/clone\":198,\"./function/utils/format\":199,\"./function/utils/isInteger\":200,\"./function/utils/isNaN\":201,\"./function/utils/isNegative\":202,\"./function/utils/isNumeric\":203,\"./function/utils/isPositive\":204,\"./function/utils/isPrime\":205,\"./function/utils/isZero\":206,\"./function/utils/typeof\":207}],209:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var parse = load(require('../parse'));\n\n  /**\n   * Parse and compile an expression.\n   * Returns a an object with a function `eval([scope])` to evaluate the\n   * compiled expression.\n   *\n   * Syntax:\n   *\n   *     math.compile(expr)                       // returns one node\n   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes\n   *\n   * Examples:\n   *\n   *     var code = math.compile('sqrt(3^2 + 4^2)');\n   *     code.eval(); // 5\n   *\n   *     var scope = {a: 3, b: 4}\n   *     var code = math.compile('a * b'); // 12\n   *     code.eval(scope); // 12\n   *     scope.a = 5;\n   *     code.eval(scope); // 20\n   *\n   *     var nodes = math.compile(['a = 3', 'b = 4', 'a * b']);\n   *     nodes[2].eval(); // 12\n   *\n   * See also:\n   *\n   *    parse, eval\n   *\n   * @param {string | string[] | Array | Matrix} expr\n   *            The expression to be compiled\n   * @return {{eval: Function} | Array.<{eval: Function}>} code\n   *            An object with the compiled expression\n   * @throws {Error}\n   */\n  return typed('compile', {\n    'string': function (expr) {\n      return parse(expr).compile();\n    },\n\n    'Array | Matrix': function (expr) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile();\n      });\n    }\n  });\n}\n\nexports.name = 'compile';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523,\"../parse\":239}],210:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var parse = load(require('../parse'));\n\n  /**\n   * Evaluate an expression.\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.eval(expr)\n   *     math.eval(expr, scope)\n   *     math.eval([expr1, expr2, expr3, ...])\n   *     math.eval([expr1, expr2, expr3, ...], scope)\n   *\n   * Example:\n   *\n   *     math.eval('(2+3)/4');                // 1.25\n   *     math.eval('sqrt(3^2 + 4^2)');        // 5\n   *     math.eval('sqrt(-4)');               // 2i\n   *     math.eval(['a=3', 'b=4', 'a*b']);,   // [3, 4, 12]\n   *\n   *     var scope = {a:3, b:4};\n   *     math.eval('a * b', scope);           // 12\n   *\n   * See also:\n   *\n   *    parse, compile\n   *\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n   * @param {Object} [scope]                    Scope to read/write variables\n   * @return {*} The result of the expression\n   * @throws {Error}\n   */\n  return typed('compile', {\n    'string': function (expr) {\n      var scope = {};\n      return parse(expr).compile().eval(scope);\n    },\n\n    'string, Object': function (expr, scope) {\n      return parse(expr).compile().eval(scope);\n    },\n\n    'Array | Matrix': function (expr) {\n      var scope = {};\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().eval(scope);\n      });\n    },\n\n    'Array | Matrix, Object': function (expr, scope) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().eval(scope);\n      });\n    }\n  });\n}\n\nexports.name = 'eval';\nexports.factory = factory;\n},{\"../../utils/collection/deepMap\":523,\"../parse\":239}],211:[function(require,module,exports){\n'use strict';\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nfunction factory (type, config, load, typed, math) {\n  var docs = load(require('../docs'));\n\n  /**\n   * Retrieve help on a function or data type.\n   * Help files are retrieved from the documentation in math.expression.docs.\n   *\n   * Syntax:\n   *\n   *    math.help(search)\n   *\n   * Examples:\n   *\n   *    console.log(math.help('sin').toString());\n   *    console.log(math.help(math.add).toString());\n   *    console.log(math.help(math.add).toJSON());\n   *\n   * @param {Function | string | Object} search   A function or function name\n   *                                              for which to get help\n   * @return {Help} A help object\n   */\n  return typed('help', {\n    'any': function (search) {\n      var prop;\n      var name = search;\n\n      if (typeof search !== 'string') {\n        for (prop in math) {\n          // search in functions and constants\n          if (math.hasOwnProperty(prop) && (search === math[prop])) {\n            name = prop;\n            break;\n          }\n        }\n\n        /* TODO: implement help for data types\n         if (!text) {\n         // search data type\n         for (prop in math.type) {\n         if (math.type.hasOwnProperty(prop)) {\n         if (search === math.type[prop]) {\n         text = prop;\n         break;\n         }\n         }\n         }\n         }\n         */\n      }\n\n      var doc = getSafeProperty(docs, name);\n      if (!doc) {\n        throw new Error('No documentation found on \"' + name + '\"');\n      }\n      return new type.Help(doc);\n    }\n  });\n}\n\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\nexports.name = 'help';\nexports.factory = factory;\n\n},{\"../../utils/customs\":527,\"../docs\":208}],212:[function(require,module,exports){\nmodule.exports = [\n  require('./compile'),\n  require('./eval'),\n  require('./help'),\n  require('./parse'),\n  require('./parser')\n];\n\n},{\"./compile\":209,\"./eval\":210,\"./help\":211,\"./parse\":213,\"./parser\":214}],213:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var parse = load(require('../parse'));\n\n  /**\n   * Parse an expression. Returns a node tree, which can be evaluated by\n   * invoking node.eval();\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.parse(expr)\n   *     math.parse(expr, options)\n   *     math.parse([expr1, expr2, expr3, ...])\n   *     math.parse([expr1, expr2, expr3, ...], options)\n   *\n   * Example:\n   *\n   *     var node = math.parse('sqrt(3^2 + 4^2)');\n   *     node.compile().eval(); // 5\n   *\n   *     var scope = {a:3, b:4}\n   *     var node = math.parse('a * b'); // 12\n   *     var code = node.compile();\n   *     code.eval(scope); // 12\n   *     scope.a = 5;\n   *     code.eval(scope); // 20\n   *\n   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);\n   *     nodes[2].compile().eval(); // 12\n   *\n   * See also:\n   *\n   *     eval, compile\n   *\n   * @param {string | string[] | Matrix} expr          Expression to be parsed\n   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n   *                                                   - `nodes` a set of custom nodes\n   * @return {Node | Node[]} node\n   * @throws {Error}\n   */\n  return typed('parse', {\n    'string | Array | Matrix': parse,\n    'string | Array | Matrix, Object': parse\n  });\n}\n\nexports.name = 'parse';\nexports.factory = factory;\n\n},{\"../parse\":239}],214:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed, math) {\n  var Parser = load(require('../Parser'));\n\n  /**\n   * Create a parser. The function creates a new `math.expression.Parser` object.\n   *\n   * Syntax:\n   *\n   *    math.parser()\n   *\n   * Examples:\n   *\n   *     var parser = new math.parser();\n   *\n   *     // evaluate expressions\n   *     var a = parser.eval('sqrt(3^2 + 4^2)'); // 5\n   *     var b = parser.eval('sqrt(-4)');        // 2i\n   *     var c = parser.eval('2 inch in cm');    // 5.08 cm\n   *     var d = parser.eval('cos(45 deg)');     // 0.7071067811865476\n   *\n   *     // define variables and functions\n   *     parser.eval('x = 7 / 2');               // 3.5\n   *     parser.eval('x + 3');                   // 6.5\n   *     parser.eval('function f(x, y) = x^y');  // f(x, y)\n   *     parser.eval('f(2, 3)');                 // 8\n   *\n   *     // get and set variables and functions\n   *     var x = parser.get('x');                // 7\n   *     var f = parser.get('f');                // function\n   *     var g = f(3, 2);                        // 9\n   *     parser.set('h', 500);\n   *     var i = parser.eval('h / 2');           // 250\n   *     parser.set('hello', function (name) {\n   *       return 'hello, ' + name + '!';\n   *     });\n   *     parser.eval('hello(\"user\")');           // \"hello, user!\"\n   *\n   *     // clear defined functions and variables\n   *     parser.clear();\n   *\n   * See also:\n   *\n   *    eval, compile, parse\n   *\n   * @return {Parser} Parser\n   */\n  return typed('parser', {\n    '': function () {\n      return new Parser(math);\n    }\n  });\n}\n\nexports.name = 'parser';\nexports.factory = factory;\nexports.math = true; // requires the math namespace as 5th argument\n\n},{\"../Parser\":14}],215:[function(require,module,exports){\nmodule.exports = [\n  require('./docs'),\n  require('./function'),\n  require('./node'),\n  require('./transform'),\n\n  require('./Help'),\n  require('./parse'),\n  require('./Parser')\n];\n\n},{\"./Help\":13,\"./Parser\":14,\"./docs\":208,\"./function\":212,\"./node\":234,\"./parse\":239,\"./transform\":244}],216:[function(require,module,exports){\n'use strict';\n\n// Reserved keywords not allowed to use in the parser\nmodule.exports = {\n  end: true\n};\n\n},{}],217:[function(require,module,exports){\n'use strict';\n\nvar stringify = require('../../utils/string').stringify;\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n  var IndexNode = load(require('./IndexNode'));\n  var access = load(require('./utils/access'));\n\n  /**\n   * @constructor AccessorNode\n   * @extends {Node}\n   * Access an object property or get a matrix subset\n   *\n   * @param {Node} object                 The object from which to retrieve\n   *                                      a property or subset.\n   * @param {IndexNode} index             IndexNode containing ranges\n   */\n  function AccessorNode(object, index) {\n    if (!(this instanceof AccessorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!(object && object.isNode)) {\n      throw new TypeError('Node expected for parameter \"object\"');\n    }\n    if (!(index && index.isIndexNode)) {\n      throw new TypeError('IndexNode expected for parameter \"index\"');\n    }\n\n    this.object = object || null;\n    this.index = index;\n\n    // readonly property name\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return (this.index.isObjectProperty())\n              ? this.index.getObjectProperty()\n              : '';\n        }\n        else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function () {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AccessorNode.prototype = new Node();\n\n  AccessorNode.prototype.type = 'AccessorNode';\n\n  AccessorNode.prototype.isAccessorNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {AccessorNode} node  Node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileAccessorNode(node, defs, args) {\n    if (!(node instanceof AccessorNode)) {\n      throw new TypeError('No valid AccessorNode')\n    }\n\n    defs.access = access;\n    defs.getSafeProperty = getSafeProperty;\n\n    var object = compile(node.object, defs, args);\n    var index = compile(node.index, defs, args);\n\n    if (node.index.isObjectProperty()) {\n      var jsProp = stringify(node.index.getObjectProperty());\n      return 'getSafeProperty(' + object + ', ' + jsProp + ')';\n    }\n    else if (node.index.needsSize()) {\n      // if some parameters use the 'end' parameter, we need to calculate the size\n      return '(function () {' +\n          '  var object = ' + object + ';' +\n          '  var size = math.size(object).valueOf();' +\n          '  return access(object, ' + index + ');' +\n          '})()';\n    }\n    else {\n      return 'access(' + object + ', ' + index + ')';\n    }\n  }\n\n  // register the compile function\n  register(AccessorNode.prototype.type, compileAccessorNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  AccessorNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    callback(this.index, 'index', this);\n  };\n\n  /**\n   * Create a new AccessorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AccessorNode} Returns a transformed copy of the node\n   */\n  AccessorNode.prototype.map = function (callback) {\n    return new AccessorNode(\n        this._ifNode(callback(this.object, 'object', this)),\n        this._ifNode(callback(this.index, 'index', this))\n    );\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AccessorNode}\n   */\n  AccessorNode.prototype.clone = function () {\n    return new AccessorNode(this.object, this.index);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n  AccessorNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    if (needParenthesis(this.object)) {\n      object = '(' + object + ')';\n    }\n\n    return object + this.index.toString(options);\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n  AccessorNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    if (needParenthesis(this.object)) {\n      object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + this.index.toHTML(options);\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n  AccessorNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    if (needParenthesis(this.object)) {\n      object = '\\\\left(' + object + '\\\\right)';\n    }\n\n    return object + this.index.toTex(options);\n  };\n\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(node.isAccessorNode || node.isArrayNode || node.isConstantNode\n        || node.isFunctionNode || node.isObjectNode || node.isParenthesisNode\n        || node.isSymbolNode);\n  }\n\n  return AccessorNode;\n}\n\nexports.name = 'AccessorNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n\n},{\"../../utils/customs\":527,\"../../utils/string\":534,\"./IndexNode\":225,\"./Node\":226,\"./compile\":233,\"./utils/access\":235}],218:[function(require,module,exports){\n'use strict';\n\nvar map = require('../../utils/array').map;\nvar join = require('../../utils/array').join;\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * @constructor ArrayNode\n   * @extends {Node}\n   * Holds an 1-dimensional array with items\n   * @param {Node[]} [items]   1 dimensional array with items\n   */\n  function ArrayNode(items) {\n    if (!(this instanceof ArrayNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.items = items || [];\n\n    // validate input\n    if (!Array.isArray(this.items)\n        || !this.items.every(function (item) {return item && item.isNode;})) {\n      throw new TypeError('Array containing Nodes expected');\n    }\n\n    // TODO: deprecated since v3, remove some day\n    var deprecated = function () {\n      throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');\n    };\n    Object.defineProperty(this, 'nodes', { get: deprecated, set: deprecated });\n  }\n\n  ArrayNode.prototype = new Node();\n\n  ArrayNode.prototype.type = 'ArrayNode';\n\n  ArrayNode.prototype.isArrayNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {ArrayNode} node  Node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @private\n   */\n  function compileArrayNode(node, defs, args) {\n    if (!(node instanceof ArrayNode)) {\n      throw new TypeError('No valid ArrayNode')\n    }\n\n    var asMatrix = (defs.math.config().matrix !== 'Array');\n\n    var items = map(node.items, function (item) {\n      return compile(item, defs, args);\n    });\n\n    return (asMatrix ? 'math.matrix([' : '[') +\n        join(items, ',') +\n        (asMatrix ? '])' : ']');\n  }\n\n  // register the compile function\n  register(ArrayNode.prototype.type, compileArrayNode);\n\n      /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  ArrayNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.items.length; i++) {\n      var node = this.items[i];\n      callback(node, 'items[' + i + ']', this);\n    }\n  };\n\n  /**\n   * Create a new ArrayNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ArrayNode} Returns a transformed copy of the node\n   */\n  ArrayNode.prototype.map = function (callback) {\n    var items = [];\n    for (var i = 0; i < this.items.length; i++) {\n      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n    }\n    return new ArrayNode(items);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ArrayNode}\n   */\n  ArrayNode.prototype.clone = function() {\n    return new ArrayNode(this.items.slice(0));\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  ArrayNode.prototype._toString = function(options) {\n    var items = this.items.map(function (node) {\n      return node.toString(options);\n    });\n    return '[' + items.join(', ') + ']';\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  ArrayNode.prototype.toHTML = function(options) {\n    var items = this.items.map(function (node) {\n      return node.toHTML(options);\n    });\n    return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ArrayNode.prototype._toTex = function(options) {\n    var s = '\\\\begin{bmatrix}';\n\n    this.items.forEach(function(node) {\n      if (node.items) {\n        s += node.items.map(function(childNode) {\n          return childNode.toTex(options);\n        }).join('&');\n      }\n      else {\n        s += node.toTex(options);\n      }\n\n      // new line\n      s += '\\\\\\\\';\n    });\n    s += '\\\\end{bmatrix}';\n    return s;\n  };\n\n  return ArrayNode;\n}\n\nexports.name = 'ArrayNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n\n},{\"../../utils/array\":509,\"./Node\":226,\"./compile\":233}],219:[function(require,module,exports){\n'use strict';\n\nvar latex = require('../../utils/latex');\nvar stringify = require('../../utils/string').stringify;\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n  var ArrayNode = load(require('./ArrayNode'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var assign = load(require('./utils/assign'));\n  var access = load(require('./utils/access'));\n\n  var keywords = require('../keywords');\n  var operators = require('../operators');\n\n  /**\n   * @constructor AssignmentNode\n   * @extends {Node}\n   *\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n   * replace a subset of a matrix like `A[2,2]=42`.\n   *\n   * Syntax:\n   *\n   *     new AssignmentNode(symbol, value)\n   *     new AssignmentNode(object, index, value)\n   *\n   * Usage:\n   *\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2));                      // a=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n   *\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n   * @param {IndexNode} [index=null]            Index, property name or matrix\n   *                                            index. Optional. If not provided\n   *                                            and `object` is a SymbolNode,\n   *                                            the property is assigned to the\n   *                                            global scope.\n   * @param {Node} value                        The value to be assigned\n   */\n  function AssignmentNode(object, index, value) {\n    if (!(this instanceof AssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.object = object;\n    this.index = value ? index : null;\n    this.value = value ? value : index;\n\n    // validate input\n    if (!object || !(object.isSymbolNode || object.isAccessorNode)) {\n      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n    }\n    if (object && object.isSymbolNode && object.name === 'end') {\n      throw new Error('Cannot assign to symbol \"end\"');\n    }\n    if (this.index && !this.index.isIndexNode) {\n      throw new TypeError('IndexNode expected as \"index\"');\n    }\n    if (!this.value || !this.value.isNode) {\n      throw new TypeError('Node expected as \"value\"');\n    }\n\n    // readonly property name\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return (this.index.isObjectProperty())\n              ? this.index.getObjectProperty()\n              : '';\n        }\n        else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function () {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AssignmentNode.prototype = new Node();\n\n  AssignmentNode.prototype.type = 'AssignmentNode';\n\n  AssignmentNode.prototype.isAssignmentNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {AssignmentNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @private\n   */\n  function compileAssignmentNode (node, defs, args) {\n    if (!(node instanceof AssignmentNode)) {\n      throw new TypeError('No valid AssignmentNode')\n    }\n\n    defs.assign = assign;\n    defs.access = access;\n    defs.getSafeProperty = getSafeProperty;\n    defs.setSafeProperty = setSafeProperty;\n\n    var size;\n    var object = compile(node.object, defs, args);\n    var index = node.index ? compile(node.index, defs, args) : null;\n    var value = compile(node.value, defs, args);\n    var jsName = stringify(node.object.name);\n\n    if (!node.index) {\n      // apply a variable to the scope, for example `a=2`\n      if (!node.object.isSymbolNode) {\n        throw new TypeError('SymbolNode expected as object');\n      }\n\n      return 'setSafeProperty(scope, ' + jsName + ', ' + value + ')';\n    }\n    else if (node.index.isObjectProperty()) {\n      // apply an object property for example `a.b=2`\n      var jsProp = stringify(node.index.getObjectProperty());\n      return 'setSafeProperty(' + object + ', ' + jsProp + ', ' + value + ')';\n    }\n    else if (node.object.isSymbolNode) {\n      // update a matrix subset, for example `a[2]=3`\n      size = node.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';\n\n      // apply updated object to scope\n      return '(function () {' +\n          '  var object = ' + object + ';' +\n          '  var value = ' + value + ';' +\n          '  ' + size +\n          '  setSafeProperty(scope, ' + jsName + ', assign(object, ' + index + ', value));' +\n          '  return value;' +\n          '})()';\n    }\n    else { // node.object.isAccessorNode === true\n      // update a matrix subset, for example `a.b[2]=3`\n      size = node.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';\n\n      // we will not use the compile function of the AccessorNode, but compile it\n      // ourselves here as we need the parent object of the AccessorNode:\n      // wee need to apply the updated object to parent object\n      var parentObject = compile(node.object.object, defs, args);\n\n      if (node.object.index.isObjectProperty()) {\n        var jsParentProperty = stringify(node.object.index.getObjectProperty());\n        return '(function () {' +\n            '  var parent = ' + parentObject + ';' +\n            '  var object = getSafeProperty(parent, ' + jsParentProperty + ');' + // parentIndex is a property\n            '  var value = ' + value + ';' +\n            size +\n            '  setSafeProperty(parent, ' + jsParentProperty + ', assign(object, ' + index + ', value));' +\n            '  return value;' +\n            '})()';\n      }\n      else {\n        // if some parameters use the 'end' parameter, we need to calculate the size\n        var parentSize = node.object.index.needsSize() ? 'var size = math.size(parent).valueOf();' : '';\n        var parentIndex = compile(node.object.index, defs, args);\n\n        return '(function () {' +\n            '  var parent = ' + parentObject + ';' +\n            '  ' + parentSize +\n            '  var parentIndex = ' + parentIndex + ';' +\n            '  var object = access(parent, parentIndex);' +\n            '  var value = ' + value + ';' +\n            '  ' + size +\n            '  assign(parent, parentIndex, assign(object, ' + index + ', value));' +\n            '  return value;' +\n            '})()';\n      }\n    }\n  }\n\n  // register the compile function\n  register(AssignmentNode.prototype.type, compileAssignmentNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  AssignmentNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    if (this.index) {\n      callback(this.index, 'index', this);\n    }\n    callback(this.value, 'value', this);\n  };\n\n  /**\n   * Create a new AssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AssignmentNode} Returns a transformed copy of the node\n   */\n  AssignmentNode.prototype.map = function (callback) {\n    var object = this._ifNode(callback(this.object, 'object', this));\n    var index = this.index\n        ? this._ifNode(callback(this.index, 'index', this))\n        : null;\n    var value = this._ifNode(callback(this.value, 'value', this));\n\n    return new AssignmentNode(object, index, value);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AssignmentNode}\n   */\n  AssignmentNode.prototype.clone = function() {\n    return new AssignmentNode(this.object, this.index, this.value);\n  };\n\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @private\n   */\n  function needParenthesis(node, parenthesis) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n\n    var precedence = operators.getPrecedence(node, parenthesis);\n    var exprPrecedence = operators.getPrecedence(node.value, parenthesis);\n    return (parenthesis === 'all')\n      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));\n  }\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n  AssignmentNode.prototype._toString = function(options) {\n    var object = this.object.toString(options);\n    var index = this.index ? this.index.toString(options) : '';\n    var value = this.value.toString(options);\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '(' + value + ')';\n    }\n\n    return object + index + ' = ' + value;\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n  AssignmentNode.prototype.toHTML = function(options) {\n    var object = this.object.toHTML(options);\n    var index = this.index ? this.index.toHTML(options) : '';\n    var value = this.value.toHTML(options);\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + index + '<span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n  AssignmentNode.prototype._toTex = function(options) {\n    var object = this.object.toTex(options);\n    var index = this.index ? this.index.toTex(options) : '';\n    var value = this.value.toTex(options);\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '\\\\left(' + value + '\\\\right)';\n    }\n\n    return object + index + ':=' + value;\n  };\n\n  return AssignmentNode;\n}\n\nexports.name = 'AssignmentNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/customs\":527,\"../../utils/latex\":531,\"../../utils/string\":534,\"../keywords\":216,\"../operators\":238,\"./ArrayNode\":218,\"./Node\":226,\"./compile\":233,\"./utils/access\":235,\"./utils/assign\":236}],220:[function(require,module,exports){\n'use strict';\n\nvar map = require('../../utils/array').map;\nvar join = require('../../utils/array').join;\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n  var ResultSet = load(require('../../type/resultset/ResultSet'));\n\n  /**\n   * @constructor BlockNode\n   * @extends {Node}\n   * Holds a set with blocks\n   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n   *            An array with blocks, where a block is constructed as an Object\n   *            with properties block, which is a Node, and visible, which is\n   *            a boolean. The property visible is optional and is true by default\n   */\n  function BlockNode(blocks) {\n    if (!(this instanceof BlockNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // validate input, copy blocks\n    if (!Array.isArray(blocks)) throw new Error('Array expected');\n    this.blocks = blocks.map(function (block) {\n      var node = block && block.node;\n      var visible = block && block.visible !== undefined ? block.visible : true;\n\n      if (!(node && node.isNode))      throw new TypeError('Property \"node\" must be a Node');\n      if (typeof visible !== 'boolean') throw new TypeError('Property \"visible\" must be a boolean');\n\n      return {\n        node: node,\n        visible: visible\n      }\n    });\n  }\n\n  BlockNode.prototype = new Node();\n\n  BlockNode.prototype.type = 'BlockNode';\n\n  BlockNode.prototype.isBlockNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {BlockNode} node  The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileBlockNode (node, defs, args) {\n    if (!(node instanceof BlockNode)) {\n      throw new TypeError('No valid BlockNode')\n    }\n\n    defs.ResultSet = ResultSet;\n    var blocks = map(node.blocks, function (param) {\n      var js = compile(param.node, defs, args);\n      if (param.visible) {\n        return 'results.push(' + js + ');';\n      }\n      else {\n        return js + ';';\n      }\n    });\n\n    return '(function () {' +\n        'var results = [];' +\n        join(blocks, '') +\n        'return new ResultSet(results);' +\n        '})()';\n  }\n\n  // register the compile function\n  register(BlockNode.prototype.type, compileBlockNode);\n\n  /**\n   * Execute a callback for each of the child blocks of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  BlockNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.blocks.length; i++) {\n      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n    }\n  };\n\n  /**\n   * Create a new BlockNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {BlockNode} Returns a transformed copy of the node\n   */\n  BlockNode.prototype.map = function (callback) {\n    var blocks = [];\n    for (var i = 0; i < this.blocks.length; i++) {\n      var block = this.blocks[i];\n      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n      blocks[i] = {\n        node: node,\n        visible: block.visible\n      };\n    }\n    return new BlockNode(blocks);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {BlockNode}\n   */\n  BlockNode.prototype.clone = function () {\n    var blocks = this.blocks.map(function (block) {\n      return {\n        node: block.node,\n        visible: block.visible\n      };\n    });\n\n    return new BlockNode(blocks);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  BlockNode.prototype._toString = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toString(options) + (param.visible ? '' : ';');\n    }).join('\\n');\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  BlockNode.prototype.toHTML = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n    }).join('<span class=\"math-separator\"><br /></span>');\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  BlockNode.prototype._toTex = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toTex(options) + (param.visible ? '' : ';');\n    }).join('\\\\;\\\\;\\n');\n  };\n\n  return BlockNode;\n}\n\nexports.name = 'BlockNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n\n},{\"../../type/resultset/ResultSet\":500,\"../../utils/array\":509,\"./Node\":226,\"./compile\":233}],221:[function(require,module,exports){\n'use strict';\n\nvar latex = require('../../utils/latex');\nvar operators = require('../operators');\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'\n   *\n   * @param {Node} condition   Condition, must result in a boolean\n   * @param {Node} trueExpr    Expression evaluated when condition is true\n   * @param {Node} falseExpr   Expression evaluated when condition is true\n   *\n   * @constructor ConditionalNode\n   * @extends {Node}\n   */\n  function ConditionalNode(condition, trueExpr, falseExpr) {\n    if (!(this instanceof ConditionalNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (!(condition && condition.isNode)) throw new TypeError('Parameter condition must be a Node');\n    if (!(trueExpr && trueExpr.isNode))  throw new TypeError('Parameter trueExpr must be a Node');\n    if (!(falseExpr && falseExpr.isNode)) throw new TypeError('Parameter falseExpr must be a Node');\n\n    this.condition = condition;\n    this.trueExpr = trueExpr;\n    this.falseExpr = falseExpr;\n  }\n\n  ConditionalNode.prototype = new Node();\n\n  ConditionalNode.prototype.type = 'ConditionalNode';\n\n  ConditionalNode.prototype.isConditionalNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {ConditionalNode} node  The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileConditionalNode(node, defs, args) {\n    if (!(node instanceof ConditionalNode)) {\n      throw new TypeError('No valid ConditionalNode')\n    }\n\n    /**\n     * Test whether a condition is met\n     * @param {*} condition\n     * @returns {boolean} true if condition is true or non-zero, else false\n     */\n    defs.testCondition = function (condition) {\n      if (typeof condition === 'number'\n          || typeof condition === 'boolean'\n          || typeof condition === 'string') {\n        return condition ? true : false;\n      }\n\n      if (condition) {\n        if (condition.isBigNumber === true) {\n          return condition.isZero() ? false : true;\n        }\n\n        if (condition.isComplex === true) {\n          return (condition.re || condition.im) ? true : false;\n        }\n\n        if (condition.isUnit === true) {\n          return condition.value ? true : false;\n        }\n      }\n\n      if (condition === null || condition === undefined) {\n        return false;\n      }\n\n      throw new TypeError('Unsupported type of condition \"' + defs.math['typeof'](condition) + '\"');\n    };\n\n    return (\n      'testCondition(' + compile(node.condition, defs, args) + ') ? ' +\n      '( ' + compile(node.trueExpr, defs, args) + ') : ' +\n      '( ' + compile(node.falseExpr, defs, args) + ')'\n    );\n  }\n\n  // register the compile function\n  register(ConditionalNode.prototype.type, compileConditionalNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  ConditionalNode.prototype.forEach = function (callback) {\n    callback(this.condition, 'condition', this);\n    callback(this.trueExpr, 'trueExpr', this);\n    callback(this.falseExpr, 'falseExpr', this);\n  };\n\n  /**\n   * Create a new ConditionalNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ConditionalNode} Returns a transformed copy of the node\n   */\n  ConditionalNode.prototype.map = function (callback) {\n    return new ConditionalNode(\n        this._ifNode(callback(this.condition, 'condition', this)),\n        this._ifNode(callback(this.trueExpr, 'trueExpr', this)),\n        this._ifNode(callback(this.falseExpr, 'falseExpr', this))\n    );\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConditionalNode}\n   */\n  ConditionalNode.prototype.clone = function () {\n    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ConditionalNode.prototype._toString = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis);\n\n    //Enclose Arguments in parentheses if they are an OperatorNode\n    //or have lower or equal precedence\n    //NOTE: enclosing all OperatorNodes in parentheses is a decision\n    //purely based on aesthetics and readability\n    var condition = this.condition.toString(options);\n    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);\n    if ((parenthesis === 'all')\n        || (this.condition.type === 'OperatorNode')\n        || ((conditionPrecedence !== null) && (conditionPrecedence <= precedence))) {\n      condition = '(' + condition + ')';\n    }\n\n    var trueExpr = this.trueExpr.toString(options);\n    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);\n    if ((parenthesis === 'all')\n        || (this.trueExpr.type === 'OperatorNode')\n        || ((truePrecedence !== null) && (truePrecedence <= precedence))) {\n      trueExpr = '(' + trueExpr + ')';\n    }\n\n    var falseExpr = this.falseExpr.toString(options);\n    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);\n    if ((parenthesis === 'all')\n        || (this.falseExpr.type === 'OperatorNode')\n        || ((falsePrecedence !== null) && (falsePrecedence <= precedence))) {\n      falseExpr = '(' + falseExpr + ')';\n    }\n    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ConditionalNode.prototype.toHTML = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis);\n\n    //Enclose Arguments in parentheses if they are an OperatorNode\n    //or have lower or equal precedence\n    //NOTE: enclosing all OperatorNodes in parentheses is a decision\n    //purely based on aesthetics and readability\n    var condition = this.condition.toHTML(options);\n    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);\n    if ((parenthesis === 'all')\n        || (this.condition.type === 'OperatorNode')\n        || ((conditionPrecedence !== null) && (conditionPrecedence <= precedence))) {\n      condition = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + condition + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    var trueExpr = this.trueExpr.toHTML(options);\n    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);\n    if ((parenthesis === 'all')\n        || (this.trueExpr.type === 'OperatorNode')\n        || ((truePrecedence !== null) && (truePrecedence <= precedence))) {\n      trueExpr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + trueExpr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    var falseExpr = this.falseExpr.toHTML(options);\n    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);\n    if ((parenthesis === 'all')\n        || (this.falseExpr.type === 'OperatorNode')\n        || ((falsePrecedence !== null) && (falsePrecedence <= precedence))) {\n      falseExpr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + falseExpr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n    return condition + '<span class=\"math-operator math-conditional-operator\">?</span>' + trueExpr + '<span class=\"math-operator math-conditional-operator\">:</span>' + falseExpr;\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ConditionalNode.prototype._toTex = function (options) {\n    return '\\\\begin{cases} {'\n        + this.trueExpr.toTex(options) + '}, &\\\\quad{\\\\text{if }\\\\;'\n        + this.condition.toTex(options)\n        + '}\\\\\\\\{' + this.falseExpr.toTex(options)\n        + '}, &\\\\quad{\\\\text{otherwise}}\\\\end{cases}';\n  };\n\n  return ConditionalNode;\n}\n\nexports.name = 'ConditionalNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n\n},{\"../../utils/latex\":531,\"../operators\":238,\"./Node\":226,\"./compile\":233}],222:[function(require,module,exports){\n'use strict';\n\nvar getType = require('../../utils/types').type;\nvar stringify = require('../../utils/string').stringify;\nvar escape = require('../../utils/string').escape;\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * A ConstantNode holds a constant value like a number or string. A ConstantNode\n   * stores a stringified version of the value and uses this to compile to\n   * JavaScript.\n   *\n   * In case of a stringified number as input, this may be compiled to a BigNumber\n   * when the math instance is configured for BigNumbers.\n   *\n   * Usage:\n   *\n   *     // stringified values with type\n   *     new ConstantNode('2.3', 'number');\n   *     new ConstantNode('true', 'boolean');\n   *     new ConstantNode('hello', 'string');\n   *\n   *     // non-stringified values, type will be automatically detected\n   *     new ConstantNode(2.3);\n   *     new ConstantNode('hello');\n   *\n   * @param {string | number | boolean | null | undefined} value\n   *                            When valueType is provided, value must contain\n   *                            an uninterpreted string representing the value.\n   *                            When valueType is undefined, value can be a\n   *                            number, string, boolean, null, or undefined, and\n   *                            the type will be determined automatically.\n   * @param {string} [valueType]  The type of value. Choose from 'number', 'string',\n   *                              'boolean', 'undefined', 'null'\n   * @constructor ConstantNode\n   * @extends {Node}\n   */\n  function ConstantNode(value, valueType) {\n    if (!(this instanceof ConstantNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (valueType) {\n      if (typeof valueType !== 'string') {\n        throw new TypeError('String expected for parameter \"valueType\"');\n      }\n      if (typeof value !== 'string') {\n        throw new TypeError('String expected for parameter \"value\"');\n      }\n\n      this.value = value;\n      this.valueType = valueType;\n    }\n    else {\n      // stringify the value and determine the type\n      this.value = value + '';\n      this.valueType = getType(value);\n    }\n\n    if (!SUPPORTED_TYPES[this.valueType]) {\n      throw new TypeError('Unsupported type of value \"' + this.valueType + '\"');\n    }\n  }\n\n  var SUPPORTED_TYPES = {\n    'number': true,\n    'string': true,\n    'boolean': true,\n    'undefined': true,\n    'null': true\n  };\n\n  ConstantNode.prototype = new Node();\n\n  ConstantNode.prototype.type = 'ConstantNode';\n\n  ConstantNode.prototype.isConstantNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {ConstantNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileConstantNode(node, defs, args) {\n    if (!(node instanceof ConstantNode)) {\n      throw new TypeError('No valid ConstantNode')\n    }\n\n    switch (node.valueType) {\n      case 'number':\n        if (config.number === 'BigNumber') {\n          return 'math.bignumber(' + stringify(node.value) + ')';\n        }\n        else if (config.number === 'Fraction') {\n          return 'math.fraction(' + stringify(node.value) + ')';\n        }\n        else {\n          // remove leading zeros like '003.2' which are not allowed by JavaScript\n          validateNumericValue(node.value);\n          return node.value.replace(/^(0*)[0-9]/, function (match, zeros) {\n            return match.substring(zeros.length);\n          });\n        }\n\n      case 'string':\n        // Important to escape unescaped double quotes in the string\n        return stringify(node.value);\n\n      case 'boolean':\n        // prevent invalid values\n        return String(node.value) === 'true' ? 'true' : 'false';\n\n      case 'undefined':\n        return 'undefined';\n\n      case 'null':\n        return 'null';\n\n      default:\n        // TODO: move this error to the constructor?\n        throw new TypeError('Unsupported type of constant \"' + node.valueType + '\"');\n    }\n  }\n\n  /**\n   * Test whether value is a string containing a numeric value\n   * @param {String} value\n   * @return {boolean} Returns true when ok\n   */\n  function validateNumericValue (value) {\n    // The following regexp is relatively permissive\n    if (typeof value !== 'string' ||\n        !/^[\\-+]?((\\d+\\.?\\d*)|(\\d*\\.?\\d+))([eE][+\\-]?\\d+)?$/.test(value)) {\n      throw new Error('Invalid numeric value \"' + value + '\"');\n    }\n  }\n\n  // register the compile function\n  register(ConstantNode.prototype.type, compileConstantNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  ConstantNode.prototype.forEach = function (callback) {\n    // nothing to do, we don't have childs\n  };\n\n\n  /**\n   * Create a new ConstantNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ConstantNode} Returns a clone of the node\n   */\n  ConstantNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConstantNode}\n   */\n  ConstantNode.prototype.clone = function () {\n    return new ConstantNode(this.value, this.valueType);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ConstantNode.prototype._toString = function (options) {\n    switch (this.valueType) {\n      case 'string':\n        return stringify(this.value);\n\n      default:\n        return this.value;\n    }\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ConstantNode.prototype.toHTML = function (options) {\n\tvar value = escape(this.value);\n    switch (this.valueType) {\n\t  case 'number':\n\t    return '<span class=\"math-number\">' + value + '</span>';\n      case 'string':\n\t    return '<span class=\"math-string\">' + value + '</span>';\n      case 'boolean':\n\t    return '<span class=\"math-boolean\">' + value + '</span>';\n      case 'null':\n\t    return '<span class=\"math-null-symbol\">' + value + '</span>';\n      case 'undefined':\n\t    return '<span class=\"math-undefined\">' + value + '</span>';\n\n      default:\n        return '<span class=\"math-symbol\">' + value + '</span>';\n    }\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ConstantNode.prototype._toTex = function (options) {\n    var value = this.value,\n        index;\n    switch (this.valueType) {\n      case 'string':\n        return '\\\\mathtt{' + stringify(value) + '}';\n\n      case 'number':\n        index = value.toLowerCase().indexOf('e');\n        if (index !== -1) {\n          return value.substring(0, index) + '\\\\cdot10^{' +\n              value.substring(index + 1) + '}';\n        }\n        return value;\n\n      default:\n        return value;\n    }\n  };\n\n  return ConstantNode;\n}\n\nexports.name = 'ConstantNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n\n},{\"../../utils/string\":534,\"../../utils/types\":535,\"./Node\":226,\"./compile\":233}],223:[function(require,module,exports){\n'use strict';\n\nvar keywords = require('../keywords');\nvar stringify = require('../../utils/string').stringify;\nvar escape = require('../../utils/string').escape;\nvar map = require('../../utils/array').map;\nvar join = require('../../utils/array').join;\nvar latex = require('../../utils/latex');\nvar operators = require('../operators');\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\nvar getUniqueArgumentName = require('./utils/getUniqueArgumentName');\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * @constructor FunctionAssignmentNode\n   * @extends {Node}\n   * Function assignment\n   *\n   * @param {string} name           Function name\n   * @param {string[] | Array.<{name: string, type: string}>} params\n   *                                Array with function parameter names, or an\n   *                                array with objects containing the name\n   *                                and type of the parameter\n   * @param {Node} expr             The function expression\n   */\n  function FunctionAssignmentNode(name, params, expr) {\n    if (!(this instanceof FunctionAssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // validate input\n    if (typeof name !== 'string') throw new TypeError('String expected for parameter \"name\"');\n    if (!Array.isArray(params))  throw new TypeError('Array containing strings or objects expected for parameter \"params\"');\n    if (!(expr && expr.isNode)) throw new TypeError('Node expected for parameter \"expr\"');\n    if (name in keywords) throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\n\n    this.name = name;\n    this.params = params.map(function (param) {\n      return param && param.name || param;\n    });\n    this.types = params.map(function (param) {\n      return param && param.type || 'any'\n    });\n    this.expr = expr;\n  }\n\n  FunctionAssignmentNode.prototype = new Node();\n\n  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';\n\n  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {FunctionAssignmentNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileFunctionAssignmentNode(node, defs, args) {\n    if (!(node instanceof FunctionAssignmentNode)) {\n      throw new TypeError('No valid FunctionAssignmentNode')\n    }\n\n    defs.typed = typed;\n    defs.setSafeProperty = setSafeProperty;\n\n    // validate params\n    // FIXME: rename parameters to safe, internal names\n\n    // we extend the original args and add the args to the child object\n    // and create a mapping from the unsafe param name to a safe, internal one\n    var childArgs = Object.create(args);\n    var jsParams = map(node.params, function (param) {\n      childArgs[param] = getUniqueArgumentName(childArgs);\n      return childArgs[param];\n    });\n\n    // compile the function expression with the child args\n    var jsExpr = compile(node.expr, defs, childArgs);\n    var jsName = stringify(node.name);\n\n    return 'setSafeProperty(scope, ' + jsName + ', ' +\n        '  (function () {' +\n        '    var fn = typed(' + jsName + ', {' +\n        '      ' + stringify(join(node.types, ',')) + ': function (' + join(jsParams, ',') + ') {' +\n        '        return ' + jsExpr + '' +\n        '      }' +\n        '    });' +\n        '    fn.syntax = ' + stringify(node.name + '(' + join(node.params, ', ') + ')') + ';' +\n        '    return fn;' +\n        '  })())';\n  }\n\n  // register the compile function\n  register(FunctionAssignmentNode.prototype.type, compileFunctionAssignmentNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  FunctionAssignmentNode.prototype.forEach = function (callback) {\n    callback(this.expr, 'expr', this);\n  };\n\n  /**\n   * Create a new FunctionAssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\n   */\n  FunctionAssignmentNode.prototype.map = function (callback) {\n    var expr = this._ifNode(callback(this.expr, 'expr', this));\n\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionAssignmentNode}\n   */\n  FunctionAssignmentNode.prototype.clone = function () {\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\n  };\n\n  /**\n   * Is parenthesis needed?\n   * @param {Node} node\n   * @param {Object} parenthesis\n   * @private\n   */\n  function needParenthesis(node, parenthesis) {\n    var precedence = operators.getPrecedence(node, parenthesis);\n    var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);\n\n    return (parenthesis === 'all')\n      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));\n  }\n\n  /**\n   * get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  FunctionAssignmentNode.prototype._toString = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var expr = this.expr.toString(options);\n    if (needParenthesis(this, parenthesis)) {\n      expr = '(' + expr + ')';\n    }\n    return this.name + '(' + this.params.join(', ') + ') = ' + expr;\n  };\n\n  /**\n   * get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n   FunctionAssignmentNode.prototype.toHTML = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n\tvar params = [];\n\tfor (var i=0; i<this.params.length; i++)\t{\n\t  params.push('<span class=\"math-symbol math-parameter\">' + escape(this.params[i]) + '</span>');\n\t}\n    var expr = this.expr.toHTML(options);\n    if (needParenthesis(this, parenthesis)) {\n      expr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + expr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n    return '<span class=\"math-function\">' + escape(this.name) + '</span>' + '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + params.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-round-parenthesis\">)</span><span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + expr;\n  };\n\n  /**\n   * get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  FunctionAssignmentNode.prototype._toTex = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var expr = this.expr.toTex(options);\n    if (needParenthesis(this, parenthesis)) {\n      expr = '\\\\left(' + expr + '\\\\right)';\n    }\n\n    return '\\\\mathrm{' + this.name\n        + '}\\\\left(' + this.params.map(latex.toSymbol).join(',') + '\\\\right):=' + expr;\n  };\n\n  return FunctionAssignmentNode;\n}\nexports.name = 'FunctionAssignmentNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n\n},{\"../../utils/array\":509,\"../../utils/customs\":527,\"../../utils/latex\":531,\"../../utils/string\":534,\"../keywords\":216,\"../operators\":238,\"./Node\":226,\"./compile\":233,\"./utils/getUniqueArgumentName\":237}],224:[function(require,module,exports){\n'use strict';\n\nvar latex = require('../../utils/latex');\nvar stringify = require('../../utils/string').stringify;\nvar escape = require('../../utils/string').escape;\nvar extend = require('../../utils/object').extend;\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\nvar map = require('../../utils/array').map;\nvar join = require('../../utils/array').join;\nvar validateSafeMethod = require('../../utils/customs').validateSafeMethod;\nvar getUniqueArgumentName = require('./utils/getUniqueArgumentName');\n\nfunction factory (type, config, load, typed, math) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n  var SymbolNode = load(require('./SymbolNode'));\n\n  /**\n   * @constructor FunctionNode\n   * @extends {./Node}\n   * invoke a list with arguments on a node\n   * @param {./Node | string} fn Node resolving with a function on which to invoke\n   *                             the arguments, typically a SymboNode or AccessorNode\n   * @param {./Node[]} args\n   */\n  function FunctionNode(fn, args) {\n    if (!(this instanceof FunctionNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (typeof fn === 'string') {\n      fn = new SymbolNode(fn);\n    }\n\n    // validate input\n    if (!fn || !fn.isNode) throw new TypeError('Node expected as parameter \"fn\"');\n    if (!Array.isArray(args)\n        || !args.every(function (arg) {return arg && arg.isNode;})) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n\n    this.fn = fn;\n    this.args = args || [];\n\n    // readonly property name\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        return this.fn.name || '';\n      }.bind(this),\n      set: function () {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n\n    // TODO: deprecated since v3, remove some day\n    var deprecated = function () {\n      throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');\n    };\n    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });\n  }\n\n  FunctionNode.prototype = new Node();\n\n  FunctionNode.prototype.type = 'FunctionNode';\n\n  FunctionNode.prototype.isFunctionNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {FunctionNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileFunctionNode(node, defs, args) {\n    if (!(node instanceof FunctionNode)) {\n      throw new TypeError('No valid FunctionNode')\n    }\n\n    // compile fn and arguments\n    var jsFn = compile(node.fn, defs, args);\n    var jsArgs = map(node.args, function (arg) {\n      return compile(arg, defs, args);\n    });\n    var jsScope = compileScope(defs, args);\n    var argsName;\n\n    if (node.fn.isSymbolNode) {\n      // we can statically determine whether the function has an rawArgs property\n      var name = node.fn.name;\n      var fn = hasOwnProperty(defs.math, name) ? defs.math[name] : undefined;\n      var isRaw = (typeof fn === 'function') && (fn.rawArgs == true);\n\n      if (isRaw) {\n        // pass unevaluated parameters (nodes) to the function\n        argsName = getUniqueArgumentName(defs);\n        defs[argsName] = node.args;\n\n        return jsFn + '(' + argsName + ', math, ' + jsScope + ')'; // \"raw\" evaluation\n      }\n      else {\n        return jsFn + '(' + join(jsArgs, ', ') + ')';              // \"regular\" evaluation\n      }\n    }\n    else if (node.fn.isAccessorNode && node.fn.index.isObjectProperty()) {\n      // execute the function with the right context: the object of the AccessorNode\n      argsName = getUniqueArgumentName(defs);\n      defs[argsName] = node.args;\n      defs.validateSafeMethod = validateSafeMethod\n\n      var jsObject = compile(node.fn.object, defs, args);\n      var jsProp = stringify(node.fn.index.getObjectProperty());\n\n      return '(function () {' +\n          'var object = ' + jsObject + ';' +\n          'validateSafeMethod(object, ' + jsProp + ');' +\n          'return (object[' + jsProp + '] && object[' + jsProp + '].rawArgs) ' +\n          ' ? object[' + jsProp + '](' + argsName + ', math, ' + jsScope + ')' + // \"raw\" evaluation\n          ' : object[' + jsProp + '](' + join(jsArgs, ', ') + ')' +              // \"regular\" evaluation\n          '})()';\n    }\n    else { // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n      // we have to dynamically determine whether the function has a rawArgs property\n      argsName = getUniqueArgumentName(defs);\n      defs[argsName] = node.args;\n\n      return '(function () {' +\n          'var fn = ' + jsFn + ';' +\n          'return (fn && fn.rawArgs) ' +\n          ' ? fn(' + argsName + ', math, ' + jsScope + ')' +  // \"raw\" evaluation\n          ' : fn(' + join(jsArgs, ', ') + ')' +               // \"regular\" evaluation\n          '})()';\n    }\n  }\n\n  // register the compile function\n  register(FunctionNode.prototype.type, compileFunctionNode);\n\n  /**\n   * Merge function arguments into scope before passing to the actual function.\n   * This is needed when the function has `rawArgs=true`. In that case we have\n   * to pass the `scope` as third argument, including any variables of\n   * enclosing functions.\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileScope (defs, args) {\n    var names = Object.keys(args)\n        // .map(function (arg) {\n        //   return args[arg];\n        // });\n    if (names.length === 0) {\n      return 'scope';\n    }\n    else {\n      // merge arguments into scope\n      defs.extend = extend;\n\n      var jsArgs = map(names, function (name) {\n        return stringify(name) + ': ' + args[name];\n      });\n\n      return 'extend(extend({}, scope), {' + join(jsArgs, ', ') + '})';\n    }\n  }\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  FunctionNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n\n  /**\n   * Create a new FunctionNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionNode} Returns a transformed copy of the node\n   */\n  FunctionNode.prototype.map = function (callback) {\n    var fn = this.fn.map(callback);\n    var args = [];\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n    return new FunctionNode(fn, args);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionNode}\n   */\n  FunctionNode.prototype.clone = function () {\n    return new FunctionNode(this.fn, this.args.slice(0));\n  };\n\n  //backup Node's toString function\n  //@private\n  var nodeToString = FunctionNode.prototype.toString;\n\n  /**\n   * Get string representation. (wrapper function)\n   * This overrides parts of Node's toString function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toString\n   * function.\n   *\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  FunctionNode.prototype.toString = function (options) {\n    var customString;\n    var name = this.fn.toString(options);\n    if (options && (typeof options.handler === 'object') && hasOwnProperty(options.handler, name)) {\n      //callback is a map of callback functions\n      customString = options.handler[name](this, options);\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    //fall back to Node's toString\n    return nodeToString.call(this, options);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  FunctionNode.prototype._toString = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toString(options);\n    });\n\n    // format the arguments like \"add(2, 4.2)\"\n    return this.fn.toString(options) + '(' + args.join(', ') + ')';\n  };\n  \n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  FunctionNode.prototype.toHTML = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toHTML(options);\n    });\n\n    // format the arguments like \"add(2, 4.2)\"\n    return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n  };\n\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n  function expandTemplate(template, node, options) {\n    var latex = '';\n\n    // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n    var regex = new RegExp('\\\\$(?:\\\\{([a-z_][a-z_0-9]*)(?:\\\\[([0-9]+)\\\\])?\\\\}|\\\\$)', 'ig');\n\n    var inputPos = 0;   //position in the input string\n    var match;\n    while ((match = regex.exec(template)) !== null) {   //go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n\n      if (match[0] === '$$') { // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      }\n      else { // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n        if (match[2] === undefined) { //no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n            case 'object':\n              if (property.isNode) {\n                latex += property.toTex(options);\n              }\n              else if (Array.isArray(property)) {\n                //make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (arg && arg.isNode) {\n                    return arg.toTex(options);\n                  }\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              }\n              else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n              break;\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        }\n        else { //with square brackets\n          if (property[match[2]] && property[match[2]].isNode) {\n            latex += property[match[2]].toTex(options);\n          }\n          else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n    latex += template.slice(inputPos);  //append rest of the template\n\n    return latex;\n  }\n\n  //backup Node's toTex function\n  //@private\n  var nodeToTex = FunctionNode.prototype.toTex;\n\n  /**\n   * Get LaTeX representation. (wrapper function)\n   * This overrides parts of Node's toTex function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toTex\n   * function.\n   *\n   * @param {Object} options\n   * @return {string}\n   */\n  FunctionNode.prototype.toTex = function (options) {\n    var customTex;\n    if (options && (typeof options.handler === 'object') && hasOwnProperty(options.handler, this.name)) {\n      //callback is a map of callback functions\n      customTex = options.handler[this.name](this, options);\n    }\n\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    }\n\n    //fall back to Node's toTex\n    return nodeToTex.call(this, options);\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  FunctionNode.prototype._toTex = function (options) {\n    var args = this.args.map(function (arg) { //get LaTeX of the arguments\n      return arg.toTex(options);\n    });\n\n    var latexConverter;\n\n    if (math[this.name] && ((typeof math[this.name].toTex === 'function') || (typeof math[this.name].toTex === 'object') || (typeof math[this.name].toTex === 'string'))) {\n      //.toTex is a callback function\n      latexConverter = math[this.name].toTex;\n    }\n\n    var customToTex;\n    switch (typeof latexConverter) {\n      case 'function': //a callback function\n        customToTex = latexConverter(this, options);\n        break;\n      case 'string': //a template string\n        customToTex = expandTemplate(latexConverter, this, options);\n        break;\n      case 'object': //an object with different \"converters\" for different numbers of arguments\n        switch (typeof latexConverter[args.length]) {\n          case 'function':\n            customToTex = latexConverter[args.length](this, options);\n            break;\n          case 'string':\n            customToTex = expandTemplate(latexConverter[args.length], this, options);\n            break;\n        }\n    }\n\n    if (typeof customToTex !== 'undefined') {\n      return customToTex;\n    }\n\n    return expandTemplate(latex.defaultTemplate, this, options);\n  };\n\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n  FunctionNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.name;\n  };\n\n  return FunctionNode;\n}\n\nexports.name = 'FunctionNode';\nexports.path = 'expression.node';\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\nexports.factory = factory;\n\n},{\"../../utils/array\":509,\"../../utils/customs\":527,\"../../utils/latex\":531,\"../../utils/object\":533,\"../../utils/string\":534,\"./Node\":226,\"./SymbolNode\":231,\"./compile\":233,\"./utils/getUniqueArgumentName\":237}],225:[function(require,module,exports){\n'use strict';\n\nvar map = require('../../utils/array').map;\nvar join = require('../../utils/array').join;\nvar escape = require('../../utils/string').escape;\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n  var RangeNode = load(require('./RangeNode'));\n  var SymbolNode = load(require('./SymbolNode'));\n\n  var Range = load(require('../../type/matrix/Range'));\n\n  var isArray = Array.isArray;\n\n  /**\n   * @constructor IndexNode\n   * @extends Node\n   *\n   * Describes a subset of a matrix or an object property.\n   * Cannot be used on its own, needs to be used within an AccessorNode or\n   * AssignmentNode.\n   *\n   * @param {Node[]} dimensions\n   * @param {boolean} [dotNotation=false]  Optional property describing whether\n   *                                       this index was written using dot\n   *                                       notation like `a.b`, or using bracket\n   *                                       notation like `a[\"b\"]` (default).\n   *                                       Used to stringify an IndexNode.\n   */\n  function IndexNode(dimensions, dotNotation) {\n    if (!(this instanceof IndexNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.dimensions = dimensions;\n    this.dotNotation = dotNotation || false;\n\n    // validate input\n    if (!isArray(dimensions)\n        || !dimensions.every(function (range) {return range && range.isNode;})) {\n      throw new TypeError('Array containing Nodes expected for parameter \"dimensions\"');\n    }\n    if (this.dotNotation && !this.isObjectProperty()) {\n      throw new Error('dotNotation only applicable for object properties');\n    }\n\n    // TODO: deprecated since v3, remove some day\n    var deprecated = function () {\n      throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');\n    };\n    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });\n  }\n\n  IndexNode.prototype = new Node();\n\n  IndexNode.prototype.type = 'IndexNode';\n\n  IndexNode.prototype.isIndexNode = true;\n\n  /**\n   * Compile all range nodes\n   *\n   * When some of the dimensions has `end` defined, the IndexNode requires\n   * a variable `size` to be defined in the current closure, and must contain\n   * the size of the matrix that's being handled. To check whether the `size`\n   * variable is needed, call IndexNode.needsSize().\n   *\n   * @param {IndexNode} node        The node to be compiled\n   * @param {Object} defs           Object which can be used to define functions\n   *                                or constants globally available for the\n   *                                compiled expression\n   * @param {Object} args           Object with local function arguments, the key is\n   *                                the name of the argument, and the value is `true`.\n   *                                The object may not be mutated, but must be\n   *                                extended instead.\n   * @return {string} code\n   */\n  function compileIndexNode(node, defs, args) {\n    if (!(node instanceof IndexNode)) {\n      throw new TypeError('No valid IndexNode')\n    }\n\n    // args can be mutated by IndexNode, when dimensions use `end`\n    var childArgs = Object.create(args);\n\n    // helper function to create a Range from start, step and end\n    defs.range = function (start, end, step) {\n      return new Range(\n          (start && start.isBigNumber === true) ? start.toNumber() : start,\n          (end   && end.isBigNumber === true)   ? end.toNumber()   : end,\n          (step  && step.isBigNumber === true)  ? step.toNumber()  : step\n      );\n    };\n\n    // TODO: implement support for bignumber (currently bignumbers are silently\n    //       reduced to numbers when changing the value to zero-based)\n\n    // TODO: Optimization: when the range values are ConstantNodes,\n    //       we can beforehand resolve the zero-based value\n\n    // optimization for a simple object property\n    var dimensions = map(node.dimensions, function (range, i) {\n      if (range && range.isRangeNode) {\n        if (range.needsEnd()) {\n          childArgs.end = 'end';\n\n          // resolve end and create range\n          return '(function () {' +\n              'var end = size[' + i + ']; ' +\n              'return range(' +\n              compile(range.start, defs, childArgs) + ', ' +\n              compile(range.end, defs, childArgs) + ', ' +\n              (range.step ? compile(range.step, defs, childArgs) : '1') +\n              '); ' +\n              '})()';\n        }\n        else {\n          // create range\n          return 'range(' +\n              compile(range.start, defs, childArgs) + ', ' +\n              compile(range.end, defs, childArgs) + ', ' +\n              (range.step ? compile(range.step, defs, childArgs) : '1') +\n              ')';\n        }\n      }\n      if (range.isSymbolNode && range.name === 'end') {\n        childArgs.end = 'end';\n\n        // resolve the parameter 'end'\n        return '(function () {' +\n            'var end = size[' + i + ']; ' +\n            'return ' + compile(range, defs, childArgs) + '; ' +\n            '})()'\n      }\n      else { // ConstantNode\n        return compile(range, defs, childArgs);\n      }\n    });\n\n    return 'math.index(' + join(dimensions, ', ') + ')';\n  }\n\n  // register the compile function\n  register(IndexNode.prototype.type, compileIndexNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  IndexNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.dimensions.length; i++) {\n      callback(this.dimensions[i], 'dimensions[' + i + ']', this);\n    }\n  };\n\n  /**\n   * Create a new IndexNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {IndexNode} Returns a transformed copy of the node\n   */\n  IndexNode.prototype.map = function (callback) {\n    var dimensions = [];\n    for (var i = 0; i < this.dimensions.length; i++) {\n      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));\n    }\n\n    return new IndexNode(dimensions);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {IndexNode}\n   */\n  IndexNode.prototype.clone = function () {\n    return new IndexNode(this.dimensions.slice(0));\n  };\n\n  /**\n   * Test whether this IndexNode contains a single property name\n   * @return {boolean}\n   */\n  IndexNode.prototype.isObjectProperty = function () {\n    return this.dimensions.length === 1 &&\n        this.dimensions[0].isConstantNode &&\n        this.dimensions[0].valueType === 'string';\n  };\n\n  /**\n   * Returns the property name if IndexNode contains a property.\n   * If not, returns null.\n   * @return {string | null}\n   */\n  IndexNode.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this.dimensions[0].value : null;\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  IndexNode.prototype._toString = function (options) {\n    // format the parameters like \"[1, 0:5]\"\n    return this.dotNotation\n        ? ('.' + this.getObjectProperty())\n        : ('[' + this.dimensions.join(', ') + ']');\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  IndexNode.prototype.toHTML = function (options) {\n    // format the parameters like \"[1, 0:5]\"\n\tvar dimensions = []\n\tfor (var i=0; i<this.dimensions.length; i++)\t{\n\t  dimensions[i] = this.dimensions[i].toHTML();\n\t}\n\tif (this.dotNotation) {\n\t  return '<span class=\"math-operator math-accessor-operator\">.</span>' + '<span class=\"math-symbol math-property\">' + escape(this.getObjectProperty()) + '</span>';}\n\telse {\n\t  return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + dimensions.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>'}\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  IndexNode.prototype._toTex = function (options) {\n    var dimensions = this.dimensions.map(function (range) {\n      return range.toTex(options);\n    });\n\n    return this.dotNotation\n        ? ('.' + this.getObjectProperty() + '')\n        : ('_{' + dimensions.join(',') + '}');\n  };\n\n  /**\n   * Test whether this IndexNode needs the object size, size of the Matrix\n   * @return {boolean}\n   */\n  IndexNode.prototype.needsSize = function () {\n    return this.dimensions.some(function (range) {\n      return (range.isRangeNode && range.needsEnd()) ||\n          (range.isSymbolNode && range.name === 'end');\n    });\n  };\n\n  return IndexNode;\n}\n\nexports.name = 'IndexNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n\n},{\"../../type/matrix/Range\":478,\"../../utils/array\":509,\"../../utils/string\":534,\"./Node\":226,\"./RangeNode\":230,\"./SymbolNode\":231,\"./compile\":233}],226:[function(require,module,exports){\n'use strict';\n\nvar keywords = require('../keywords');\nvar deepEqual= require('../../utils/object').deepEqual;\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nfunction factory (type, config, load, typed, math) {\n  var compile = load(require('./compile')).compile;\n\n  /**\n   * Node\n   */\n  function Node() {\n    if (!(this instanceof Node)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n\n  /**\n   * Evaluate the node\n   * @param {Object} [scope]  Scope to read/write variables\n   * @return {*}              Returns the result\n   */\n  Node.prototype.eval = function(scope) {\n    return this.compile().eval(scope);\n  };\n\n  Node.prototype.type = 'Node';\n\n  Node.prototype.isNode = true;\n\n  Node.prototype.comment = '';\n\n  /**\n   * Compile the node to javascript code\n   * @return {{eval: function}} expr  Returns an object with a function 'eval',\n   *                                  which can be invoked as expr.eval([scope]),\n   *                                  where scope is an optional object with\n   *                                  variables.\n   */\n  Node.prototype.compile = function () {\n    // TODO: calling compile(math) is deprecated since version 2.0.0. Remove this warning some day\n    if (arguments.length > 0) {\n      throw new Error('Calling compile(math) is deprecated. Call the function as compile() instead.');\n    }\n\n    // definitions globally available inside the closure of the compiled expressions\n    var defs = {\n      math: math.expression.mathWithTransform,\n      args: {}, // can be filled with names of FunctionAssignment arguments\n      _validateScope: _validateScope\n    };\n\n    // will be used to put local function arguments\n    var args = {};\n\n    var code = compile(this, defs, args);\n\n    var defsCode = Object.keys(defs).map(function (name) {\n      return '    var ' + name + ' = defs[\"' + name + '\"];';\n    });\n\n    var factoryCode =\n        defsCode.join(' ') +\n        'return {' +\n        '  \"eval\": function (scope) {' +\n        '    if (scope) _validateScope(scope);' +\n        '    scope = scope || {};' +\n        '    return ' + code + ';' +\n        '  }' +\n        '};';\n\n    var factory = new Function('defs', factoryCode);\n    return factory(defs);\n  };\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  Node.prototype.forEach = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run forEach on a Node interface');\n  };\n\n  /**\n   * Create a new Node having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n  Node.prototype.map = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run map on a Node interface');\n  };\n\n  /**\n   * Validate whether an object is a Node, for use with map\n   * @param {Node} node\n   * @returns {Node} Returns the input if it's a node, else throws an Error\n   * @protected\n   */\n  Node.prototype._ifNode = function (node) {\n    if (!(node && node.isNode)) {\n      throw new TypeError('Callback function must return a Node');\n    }\n\n    return node;\n  };\n\n  /**\n   * Recursively traverse all nodes in a node tree. Executes given callback for\n   * this node and each of its child nodes.\n   * @param {function(node: Node, path: string, parent: Node)} callback\n   *          A callback called for every node in the node tree.\n   */\n  Node.prototype.traverse = function (callback) {\n    // execute callback for itself\n    callback(this, null, null);\n\n    // recursively traverse over all childs of a node\n    function _traverse(node, callback) {\n      node.forEach(function (child, path, parent) {\n        callback(child, path, parent);\n        _traverse(child, callback);\n      });\n    }\n\n    _traverse(this, callback);\n  };\n\n  /**\n   * Recursively transform a node tree via a transform function.\n   *\n   * For example, to replace all nodes of type SymbolNode having name 'x' with a\n   * ConstantNode with value 2:\n   *\n   *     var res = Node.transform(function (node, path, parent) {\n   *       if (node && node.isSymbolNode) && (node.name == 'x')) {\n   *         return new ConstantNode(2);\n   *       }\n   *       else {\n   *         return node;\n   *       }\n   *     });\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *          A mapping function accepting a node, and returning\n   *          a replacement for the node or the original node.\n   *          Signature: callback(node: Node, index: string, parent: Node) : Node\n   * @return {Node} Returns the original node or its replacement\n   */\n  Node.prototype.transform = function (callback) {\n    // traverse over all childs\n    function _transform (node, callback) {\n      return node.map(function(child, path, parent) {\n        var replacement = callback(child, path, parent);\n        return _transform(replacement, callback);\n      });\n    }\n\n    var replacement = callback(this, null, null);\n    return _transform(replacement, callback);\n  };\n\n  /**\n   * Find any node in the node tree matching given filter function. For example, to\n   * find all nodes of type SymbolNode having name 'x':\n   *\n   *     var results = Node.filter(function (node) {\n   *       return (node && node.isSymbolNode) && (node.name == 'x');\n   *     });\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *            A test function returning true when a node matches, and false\n   *            otherwise. Function signature:\n   *            callback(node: Node, index: string, parent: Node) : boolean\n   * @return {Node[]} nodes       An array with nodes matching given filter criteria\n   */\n  Node.prototype.filter = function (callback) {\n    var nodes = [];\n\n    this.traverse(function (node, path, parent) {\n      if (callback(node, path, parent)) {\n        nodes.push(node);\n      }\n    });\n\n    return nodes;\n  };\n\n  // TODO: deprecated since version 1.1.0, remove this some day\n  Node.prototype.find = function () {\n    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');\n  };\n\n  // TODO: deprecated since version 1.1.0, remove this some day\n  Node.prototype.match = function () {\n    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');\n  };\n\n  /**\n   * Create a shallow clone of this node\n   * @return {Node}\n   */\n  Node.prototype.clone = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot clone a Node interface');\n  };\n\n  /**\n   * Create a deep clone of this node\n   * @return {Node}\n   */\n  Node.prototype.cloneDeep = function () {\n    return this.map(function (node) {\n      return node.cloneDeep();\n    });\n  };\n\n  /**\n   * Deep compare this node with another node.\n   * @param {Node} other\n   * @return {boolean} Returns true when both nodes are of the same type and\n   *                   contain the same values (as do their childs)\n   */\n  Node.prototype.equals = function (other) {\n    return other\n        ? deepEqual(this, other)\n        : false\n  };\n\n  /**\n   * Get string representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n  Node.prototype.toString = function (options) {\n    var customString;\n    if (options && typeof options === 'object') {\n        switch (typeof options.handler) {\n          case 'object':\n          case 'undefined':\n            break;\n          case 'function':\n            customString = options.handler(this, options);\n            break;\n          default:\n            throw new TypeError('Object or function expected as callback');\n        }\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this._toString(options);\n  };\n\n  /**\n   * Get HTML representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\" or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n  Node.prototype.toHTML = function (options) {\n    var customString;\n    if (options && typeof options === 'object') {\n        switch (typeof options.handler) {\n          case 'object':\n          case 'undefined':\n            break;\n          case 'function':\n            customString = options.handler(this, options);\n            break;\n          default:\n            throw new TypeError('Object or function expected as callback');\n        }\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this.toHTML(options);\n  };\n\n  /**\n   * Internal function to generate the string output.\n   * This has to be implemented by every Node\n   *\n   * @throws {Error}\n   */\n  Node.prototype._toString = function () {\n    //must be implemented by each of the Node implementations\n    throw new Error('_toString not implemented for ' + this.type);\n  };\n\n  /**\n   * Get LaTeX representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n  Node.prototype.toTex = function (options) {\n    var customTex;\n    if (options && typeof options == 'object') {\n      switch (typeof options.handler) {\n        case 'object':\n        case 'undefined':\n          break;\n        case 'function':\n          customTex = options.handler(this, options);\n          break;\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    }\n\n    return this._toTex(options);\n  };\n\n  /**\n   * Internal function to generate the LaTeX output.\n   * This has to be implemented by every Node\n   *\n   * @param {Object} [options]\n   * @throws {Error}\n   */\n  Node.prototype._toTex = function (options) {\n    //must be implemented by each of the Node implementations\n    throw new Error('_toTex not implemented for ' + this.type);\n  };\n\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n  Node.prototype.getIdentifier = function () {\n    return this.type;\n  };\n\n  /**\n   * Get the content of the current Node.\n   * @return {Node} node\n   **/\n  Node.prototype.getContent = function () {\n    return this;\n  };\n\n  /**\n   * Validate the symbol names of a scope.\n   * Throws an error when the scope contains an illegal symbol.\n   * @param {Object} scope\n   */\n  function _validateScope(scope) {\n    for (var symbol in scope) {\n      if (hasOwnProperty(scope, symbol)) {\n        if (symbol in keywords) {\n          throw new Error('Scope contains an illegal symbol, \"' + symbol + '\" is a reserved keyword');\n        }\n      }\n    }\n  }\n\n  return Node;\n}\n\nexports.name = 'Node';\nexports.path = 'expression.node';\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\nexports.factory = factory;\n\n},{\"../../utils/object\":533,\"../keywords\":216,\"./compile\":233}],227:[function(require,module,exports){\n'use strict';\n\nvar stringify = require('../../utils/string').stringify;\nvar escape = require('../../utils/string').escape;\nvar isSafeProperty = require('../../utils/customs').isSafeProperty;\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * @constructor ObjectNode\n   * @extends {Node}\n   * Holds an object with keys/values\n   * @param {Object.<string, Node>} [properties]   array with key/value pairs\n   */\n  function ObjectNode(properties) {\n    if (!(this instanceof ObjectNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.properties = properties || {};\n\n    // validate input\n    if (properties) {\n      if (!(typeof properties === 'object') || Object.keys(properties).some(function (key) {\n            return !properties[key] || !properties[key].isNode;\n          })) {\n        throw new TypeError('Object containing Nodes expected');\n      }\n    }\n  }\n\n  ObjectNode.prototype = new Node();\n\n  ObjectNode.prototype.type = 'ObjectNode';\n\n  ObjectNode.prototype.isObjectNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {ObjectNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} code\n   * @private\n   */\n  function compileObjectNode(node, defs, args) {\n    if (!(node instanceof ObjectNode)) {\n      throw new TypeError('No valid ObjectNode')\n    }\n\n    var entries = [];\n    for (var key in node.properties) {\n      if (hasOwnProperty(node.properties, key)) {\n        if (!isSafeProperty(key)) {\n          throw new Error('No access to property \"' + key + '\"');\n        }\n\n        entries.push(stringify(key) + ': ' + compile(node.properties[key], defs, args));\n      }\n    }\n    return '{' + entries.join(', ') + '}';\n  }\n\n  // register the compile function\n  register(ObjectNode.prototype.type, compileObjectNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  ObjectNode.prototype.forEach = function (callback) {\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        callback(this.properties[key], 'properties[' + stringify(key) + ']', this);\n      }\n    }\n  };\n\n  /**\n   * Create a new ObjectNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ObjectNode} Returns a transformed copy of the node\n   */\n  ObjectNode.prototype.map = function (callback) {\n    var properties = {};\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        properties[key] = this._ifNode(callback(this.properties[key],\n            'properties[' + stringify(key) + ']', this));\n      }\n    }\n    return new ObjectNode(properties);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ObjectNode}\n   */\n  ObjectNode.prototype.clone = function() {\n    var properties = {};\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        properties[key] = this.properties[key];\n      }\n    }\n    return new ObjectNode(properties);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  ObjectNode.prototype._toString = function(options) {\n    var entries = [];\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        entries.push(stringify(key) + ': ' + this.properties[key].toString(options));\n      }\n    }\n    return '{' + entries.join(', ') + '}';\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  ObjectNode.prototype.toHTML = function(options) {\n    var entries = [];\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        entries.push('<span class=\"math-symbol math-property\">' + escape(key) + '</span>' + '<span class=\"math-operator math-assignment-operator math-property-assignment-operator math-binary-operator\">:</span>' + this.properties[key].toHTML(options));\n      }\n    }\n    return '<span class=\"math-parenthesis math-curly-parenthesis\">{</span>' + entries.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-curly-parenthesis\">}</span>';\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ObjectNode.prototype._toTex = function(options) {\n    var entries = [];\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        entries.push(\"\\\\mathbf{\" + key + ':} & ' + this.properties[key].toTex(options) + \"\\\\\\\\\");\n      }\n    }\n    return '\\\\left\\\\{\\\\begin{array}{ll}' + entries.join('\\n') + '\\\\end{array}\\\\right\\\\}';\n  };\n\n  return ObjectNode;\n}\n\nexports.name = 'ObjectNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n\n},{\"../../utils/customs\":527,\"../../utils/object\":533,\"../../utils/string\":534,\"./Node\":226,\"./compile\":233}],228:[function(require,module,exports){\n'use strict';\n\nvar latex = require('../../utils/latex');\nvar map = require('../../utils/array').map;\nvar join = require('../../utils/array').join;\nvar stringify = require('../../utils/string').stringify;\nvar escape = require('../../utils/string').escape;\nvar isSafeMethod = require('../../utils/customs').isSafeMethod;\nvar operators = require('../operators');\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node         = load(require('./Node'));\n  var ConstantNode = load(require('./ConstantNode'));\n  var SymbolNode   = load(require('./SymbolNode'));\n  var FunctionNode = load(require('./FunctionNode'));\n\n  /**\n   * @constructor OperatorNode\n   * @extends {Node}\n   * An operator with two arguments, like 2+3\n   *\n   * @param {string} op           Operator name, for example '+'\n   * @param {string} fn           Function name, for example 'add'\n   * @param {Node[]} args         Operator arguments\n   * @param {boolean} [implicit]  Is this an implicit multiplication?\n   */\n  function OperatorNode(op, fn, args, implicit) {\n    if (!(this instanceof OperatorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    //validate input\n    if (typeof op !== 'string') {\n      throw new TypeError('string expected for parameter \"op\"');\n    }\n    if (typeof fn !== 'string') {\n      throw new TypeError('string expected for parameter \"fn\"');\n    }\n    if (!Array.isArray(args)\n        || !args.every(function (node) {return node && node.isNode;})) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n\n    this.implicit = (implicit === true);\n    this.op = op;\n    this.fn = fn;\n    this.args = args || [];\n  }\n\n  OperatorNode.prototype = new Node();\n\n  OperatorNode.prototype.type = 'OperatorNode';\n\n  OperatorNode.prototype.isOperatorNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {OperatorNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileOperatorNode(node, defs, args) {\n    if (!(node instanceof OperatorNode)) {\n      throw new TypeError('No valid OperatorNode')\n    }\n\n    // validate fn\n    if (typeof node.fn !== 'string' || !isSafeMethod(defs.math, node.fn)) {\n      if (!defs.math[node.fn]) {\n        throw new Error('Function ' + node.fn + ' missing in provided namespace \"math\"');\n      }\n      else {\n        throw new Error('No access to function \"' + node.fn + '\"');\n      }\n    }\n\n    var jsArgs = map(node.args, function (arg) {\n      return compile(arg, defs, args);\n    });\n\n    return 'math[' + stringify(node.fn) + '](' + join(jsArgs, ', ') + ')';\n  }\n\n  // register the compile function\n  register(OperatorNode.prototype.type, compileOperatorNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  OperatorNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n\n  /**\n   * Create a new OperatorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n  OperatorNode.prototype.map = function (callback) {\n    var args = [];\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n    return new OperatorNode(this.op, this.fn, args);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {OperatorNode}\n   */\n  OperatorNode.prototype.clone = function () {\n    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);\n  };\n\n  /**\n   * Calculate which parentheses are necessary. Gets an OperatorNode\n   * (which is the root of the tree) and an Array of Nodes\n   * (this.args) and returns an array where 'true' means that an argument\n   * has to be enclosed in parentheses whereas 'false' means the opposite.\n   *\n   * @param {OperatorNode} root\n   * @param {string} parenthesis\n   * @param {Node[]} args\n   * @param {boolean} latex\n   * @return {boolean[]}\n   * @private\n   */\n  function calculateNecessaryParentheses(root, parenthesis, args, latex) {\n    //precedence of the root OperatorNode\n    var precedence = operators.getPrecedence(root, parenthesis);\n    var associativity = operators.getAssociativity(root, parenthesis);\n\n    if ((parenthesis === 'all') || ((args.length > 2) && (root.getIdentifier() !== 'OperatorNode:add') && (root.getIdentifier() !== 'OperatorNode:multiply'))) {\n      var parens = args.map(function (arg) {\n        switch (arg.getContent().type) { //Nodes that don't need extra parentheses\n          case 'ArrayNode':\n          case 'ConstantNode':\n          case 'SymbolNode':\n          case 'ParenthesisNode':\n            return false;\n            break;\n          default:\n            return true;\n        }\n      });\n      return parens;\n    }\n\n    if (args.length === 0) {\n      return [];\n    } else if (args.length === 1) { //unary operators\n      //precedence of the operand\n      var operandPrecedence = operators.getPrecedence(args[0], parenthesis);\n\n      //handle special cases for LaTeX, where some of the parentheses aren't needed\n      if (latex && (operandPrecedence !== null)) {\n        var operandIdentifier;\n        var rootIdentifier;\n        if (parenthesis === 'keep') {\n          operandIdentifier = args[0].getIdentifier();\n          rootIdentifier = root.getIdentifier();\n        }\n        else {\n          //Ignore Parenthesis Nodes when not in 'keep' mode\n          operandIdentifier = args[0].getContent().getIdentifier();\n          rootIdentifier = root.getContent().getIdentifier();\n        }\n        if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {\n          return [false];\n        }\n\n        if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {\n          return [false];\n        }\n      }\n\n      if (operandPrecedence === null) {\n        //if the operand has no defined precedence, no parens are needed\n        return [false];\n      }\n\n      if (operandPrecedence <= precedence) {\n        //if the operands precedence is lower, parens are needed\n        return [true];\n      }\n\n      //otherwise, no parens needed\n      return [false];\n    } else if (args.length === 2) { //binary operators\n      var lhsParens; //left hand side needs parenthesis?\n      //precedence of the left hand side\n      var lhsPrecedence = operators.getPrecedence(args[0], parenthesis);\n      //is the root node associative with the left hand side\n      var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);\n\n      if (lhsPrecedence === null) {\n        //if the left hand side has no defined precedence, no parens are needed\n        //FunctionNode for example\n        lhsParens = false;\n      }\n      else if ((lhsPrecedence === precedence) && (associativity === 'right') && !assocWithLhs) {\n        //In case of equal precedence, if the root node is left associative\n        // parens are **never** necessary for the left hand side.\n        //If it is right associative however, parens are necessary\n        //if the root node isn't associative with the left hand side\n        lhsParens = true;\n      }\n      else if (lhsPrecedence < precedence) {\n        lhsParens = true;\n      }\n      else {\n        lhsParens = false;\n      }\n\n      var rhsParens; //right hand side needs parenthesis?\n      //precedence of the right hand side\n      var rhsPrecedence = operators.getPrecedence(args[1], parenthesis);\n      //is the root node associative with the right hand side?\n      var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);\n\n      if (rhsPrecedence === null) {\n        //if the right hand side has no defined precedence, no parens are needed\n        //FunctionNode for example\n        rhsParens = false;\n      }\n      else if ((rhsPrecedence === precedence) && (associativity === 'left') && !assocWithRhs) {\n        //In case of equal precedence, if the root node is right associative\n        // parens are **never** necessary for the right hand side.\n        //If it is left associative however, parens are necessary\n        //if the root node isn't associative with the right hand side\n        rhsParens = true;\n      }\n      else if (rhsPrecedence < precedence) {\n        rhsParens = true;\n      }\n      else {\n        rhsParens = false;\n      }\n\n      //handle special cases for LaTeX, where some of the parentheses aren't needed\n      if (latex) {\n        var rootIdentifier;\n        var lhsIdentifier;\n        var rhsIdentifier;\n        if (parenthesis === 'keep') {\n          rootIdentifier = root.getIdentifier();\n          lhsIdentifier = root.args[0].getIdentifier();\n          rhsIdentifier = root.args[1].getIdentifier();\n        }\n        else {\n          //Ignore ParenthesisNodes when not in 'keep' mode\n          rootIdentifier = root.getContent().getIdentifier();\n          lhsIdentifier = root.args[0].getContent().getIdentifier();\n          rhsIdentifier = root.args[1].getContent().getIdentifier();\n        }\n\n        if (lhsPrecedence !== null) {\n          if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {\n            lhsParens = false;\n          }\n\n          if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {\n            lhsParens = false;\n          }\n        }\n\n        if (rhsPrecedence !== null) {\n          if (operators.properties[precedence][rootIdentifier].latexRightParens === false) {\n            rhsParens = false;\n          }\n\n          if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {\n            rhsParens = false;\n          }\n        }\n      }\n\n      return [lhsParens, rhsParens];\n    } else if ((args.length > 2) && ((root.getIdentifier() === 'OperatorNode:add') || (root.getIdentifier() === 'OperatorNode:multiply'))) {\n      var parensArray = args.map(function (arg) {\n        var argPrecedence = operators.getPrecedence(arg, parenthesis);\n        var assocWithArg = operators.isAssociativeWith(root, arg, parenthesis);\n        var argAssociativity = operators.getAssociativity(arg, parenthesis);\n        if (argPrecedence === null) {\n          //if the argument has no defined precedence, no parens are needed\n          return false;\n        } else if ((precedence === argPrecedence) && (associativity === argAssociativity) && !assocWithArg) {\n          return true;\n        } else if (argPrecedence < precedence) {\n          return true;\n        }\n\n        return false;\n      });\n      return parensArray;\n    }\n  }\n\n  /**\n   * Get string representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n  OperatorNode.prototype._toString = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var implicit = (options && options.implicit) ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, args, false);\n\n    if (args.length === 1) { //unary operators\n      var assoc = operators.getAssociativity(this, parenthesis);\n\n      var operand = args[0].toString(options);\n      if (parens[0]) {\n        operand = '(' + operand + ')';\n      }\n\n      if (assoc === 'right') { //prefix operator\n        return this.op + operand;\n      }\n      else if (assoc === 'left') { //postfix\n        return operand + this.op;\n      }\n\n      //fall back to postfix\n      return operand + this.op;\n    } else if (args.length == 2) {\n      var lhs = args[0].toString(options); //left hand side\n      var rhs = args[1].toString(options); //right hand side\n      if (parens[0]) { //left hand side in parenthesis?\n        lhs = '(' + lhs + ')';\n      }\n      if (parens[1]) { //right hand side in parenthesis?\n        rhs = '(' + rhs + ')';\n      }\n\n      if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit == 'hide')) {\n        return lhs + ' ' + rhs;\n      }\n\n      return lhs + ' ' + this.op + ' ' + rhs;\n    } else if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {\n      var stringifiedArgs = args.map(function (arg, index) {\n        arg = arg.toString(options);\n        if (parens[index]) { //put in parenthesis?\n          arg = '(' + arg + ')';\n        }\n\n        return arg;\n      });\n\n      if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit === 'hide')) {\n        return stringifiedArgs.join(' ');\n      }\n\n      return stringifiedArgs.join(' ' + this.op + ' ');\n    } else {\n      //fallback to formatting as a function call\n      return this.fn + '(' + this.args.join(', ') + ')';\n    }\n  };\n\n  /**\n   * Get HTML representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n  OperatorNode.prototype.toHTML = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var implicit = (options && options.implicit) ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, args, false);\n\n    if (args.length === 1) { //unary operators\n      var assoc = operators.getAssociativity(this, parenthesis);\n\n      var operand = args[0].toHTML(options);\n      if (parens[0]) {\n        operand = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + operand + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      if (assoc === 'right') { //prefix operator\n        return '<span class=\"math-operator math-unary-operator math-lefthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n      }\n      else if (assoc === 'left') { //postfix\n        return '<span class=\"math-operator math-unary-operator math-righthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n      }\n\n      //fall back to postfix\n      return '<span class=\"math-operator math-unary-operator math-righthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n    }\n\telse if (args.length == 2) { // binary operatoes\n      var lhs = args[0].toHTML(options); //left hand side\n      var rhs = args[1].toHTML(options); //right hand side\n      if (parens[0]) { //left hand side in parenthesis?\n        lhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + lhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      if (parens[1]) { //right hand side in parenthesis?\n        rhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + rhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\t  \n\t  if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit == 'hide')) {\n\t    return lhs + '<span class=\"math-operator math-binary-operator math-implicit-binary-operator\"></span>' + rhs;\n\t  }\n      \n\t  return lhs + '<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(this.op) + '</span>' + rhs;\n    }\n\telse if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {\n      var stringifiedArgs = args.map(function (arg, index) {\n        arg = arg.toHTML(options);\n        if (parens[index]) { //put in parenthesis?\n          arg = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + arg + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n\n        return arg;\n      });\n\n      if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit === 'hide')) {\n        return stringifiedArgs.join('<span class=\"math-operator math-binary-operator math-implicit-binary-operator\"></span>');\n      }\n\n      return stringifiedArgs.join('<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(this.op) + '</span>');\n    } else {\n      //fallback to formatting as a function call\n      return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + stringifiedArgs.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  OperatorNode.prototype._toTex = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var implicit = (options && options.implicit) ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, args, true);\n    var op = latex.operators[this.fn];\n    op = typeof op === 'undefined' ? this.op : op; //fall back to using this.op\n\n    if (args.length === 1) { //unary operators\n      var assoc = operators.getAssociativity(this, parenthesis);\n\n      var operand = args[0].toTex(options);\n      if (parens[0]) {\n        operand = '\\\\left(' + operand + '\\\\right)';\n      }\n\n      if (assoc === 'right') { //prefix operator\n        return op + operand;\n      }\n      else if (assoc === 'left') { //postfix operator\n        return operand + op;\n      }\n\n      //fall back to postfix\n      return operand + op;\n    } else if (args.length === 2) { //binary operators\n      var lhs = args[0]; //left hand side\n      var lhsTex = lhs.toTex(options);\n      if (parens[0]) {\n        lhsTex = '\\\\left(' + lhsTex + '\\\\right)';\n      }\n\n      var rhs = args[1]; //right hand side\n      var rhsTex = rhs.toTex(options);\n      if (parens[1]) {\n        rhsTex = '\\\\left(' + rhsTex + '\\\\right)';\n      }\n\n      //handle some exceptions (due to the way LaTeX works)\n      var lhsIdentifier;\n      if (parenthesis === 'keep') {\n        lhsIdentifier = lhs.getIdentifier();\n      }\n      else {\n        //Ignore ParenthesisNodes if in 'keep' mode\n        lhsIdentifier = lhs.getContent().getIdentifier();\n      }\n      switch (this.getIdentifier()) {\n        case 'OperatorNode:divide':\n          //op contains '\\\\frac' at this point\n          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';\n        case 'OperatorNode:pow':\n          lhsTex = '{' + lhsTex + '}';\n          rhsTex = '{' + rhsTex + '}';\n          switch (lhsIdentifier) {\n            case 'ConditionalNode': //\n            case 'OperatorNode:divide':\n              lhsTex = '\\\\left(' + lhsTex + '\\\\right)';\n          }\n        case 'OperatorNode:multiply':\n          if (this.implicit && (implicit === 'hide')) {\n            return lhsTex + '~' + rhsTex;\n          }\n      }\n      return lhsTex + op + rhsTex;\n    } else if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {\n      var texifiedArgs = args.map(function (arg, index) {\n        arg = arg.toTex(options);\n        if (parens[index]) {\n          arg = '\\\\left(' + arg + '\\\\right)';\n        }\n        return arg;\n      });\n\n      if ((this.getIdentifier() === 'OperatorNode:multiply') && this.implicit) {\n        return texifiedArgs.join('~');\n      }\n\n      return texifiedArgs.join(op)\n    } else {\n      //fall back to formatting as a function call\n      //as this is a fallback, it doesn't use\n      //fancy function names\n      return '\\\\mathrm{' + this.fn + '}\\\\left('\n          + args.map(function (arg) {\n            return arg.toTex(options);\n          }).join(',') + '\\\\right)';\n    }\n  };\n\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n  OperatorNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.fn;\n  };\n\n  return OperatorNode;\n}\n\nexports.name = 'OperatorNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n\n},{\"../../utils/array\":509,\"../../utils/customs\":527,\"../../utils/latex\":531,\"../../utils/string\":534,\"../operators\":238,\"./ConstantNode\":222,\"./FunctionNode\":224,\"./Node\":226,\"./SymbolNode\":231,\"./compile\":233}],229:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * @constructor ParenthesisNode\n   * @extends {Node}\n   * A parenthesis node describes manual parenthesis from the user input\n   * @param {Node} content\n   * @extends {Node}\n   */\n  function ParenthesisNode(content) {\n    if (!(this instanceof ParenthesisNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // validate input\n    if (!(content && content.isNode)) {\n      throw new TypeError('Node expected for parameter \"content\"');\n    }\n\n    this.content = content;\n  }\n\n  ParenthesisNode.prototype = new Node();\n\n  ParenthesisNode.prototype.type = 'ParenthesisNode';\n\n  ParenthesisNode.prototype.isParenthesisNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {ParenthesisNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileParenthesisNode(node, defs, args) {\n    if (!(node instanceof ParenthesisNode)) {\n      throw new TypeError('No valid ParenthesisNode')\n    }\n\n    return compile(node.content, defs, args);\n  }\n\n  // register the compile function\n  register(ParenthesisNode.prototype.type, compileParenthesisNode);\n\n  /**\n   * Get the content of the current Node.\n   * @return {Node} content\n   * @override\n   **/\n  ParenthesisNode.prototype.getContent = function () {\n    return this.content.getContent();\n  };\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  ParenthesisNode.prototype.forEach = function (callback) {\n    callback(this.content, 'content', this);\n  };\n\n  /**\n   * Create a new ParenthesisNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ParenthesisNode} Returns a clone of the node\n   */\n  ParenthesisNode.prototype.map = function (callback) {\n    var content = callback(this.content, 'content', this);\n    return new ParenthesisNode(content);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ParenthesisNode}\n   */\n  ParenthesisNode.prototype.clone = function() {\n    return new ParenthesisNode(this.content);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  ParenthesisNode.prototype._toString = function(options) {\n    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {\n      return '(' + this.content.toString(options) + ')';\n    }\n    return this.content.toString(options);\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  ParenthesisNode.prototype.toHTML = function(options) {\n    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {\n      return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n    return this.content.toHTML(options);\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  ParenthesisNode.prototype._toTex = function(options) {\n    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {\n      return '\\\\left(' + this.content.toTex(options) + '\\\\right)';\n    }\n    return this.content.toTex(options);\n  };\n\n  return ParenthesisNode;\n}\n\nexports.name = 'ParenthesisNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n\n},{\"./Node\":226,\"./compile\":233}],230:[function(require,module,exports){\n'use strict';\n\nvar operators = require('../operators');\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * @constructor RangeNode\n   * @extends {Node}\n   * create a range\n   * @param {Node} start  included lower-bound\n   * @param {Node} end    included upper-bound\n   * @param {Node} [step] optional step\n   */\n  function RangeNode(start, end, step) {\n    if (!(this instanceof RangeNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // validate inputs\n    if (!(start && start.isNode)) throw new TypeError('Node expected');\n    if (!(end && end.isNode)) throw new TypeError('Node expected');\n    if (step && !(step && step.isNode)) throw new TypeError('Node expected');\n    if (arguments.length > 3) throw new Error('Too many arguments');\n\n    this.start = start;         // included lower-bound\n    this.end = end;           // included upper-bound\n    this.step = step || null;  // optional step\n  }\n\n  RangeNode.prototype = new Node();\n\n  RangeNode.prototype.type = 'RangeNode';\n\n  RangeNode.prototype.isRangeNode = true;\n\n  /**\n   * Check whether the RangeNode needs the `end` symbol to be defined.\n   * This end is the size of the Matrix in current dimension.\n   * @return {boolean}\n   */\n  RangeNode.prototype.needsEnd = function () {\n    // find all `end` symbols in this RangeNode\n    var endSymbols = this.filter(function (node) {\n      return (node && node.isSymbolNode) && (node.name == 'end');\n    });\n\n    return endSymbols.length > 0;\n  };\n\n  /**\n   * Compile the node to javascript code\n   *\n   * When the range has a symbol `end` defined, the RangeNode requires\n   * a variable `end` to be defined in the current closure, which must contain\n   * the length of the of the matrix that's being handled in the range's\n   * dimension. To check whether the `end` variable is needed, call\n   * RangeNode.needsEnd().\n   *\n   * @param {RangeNode} node  The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileRangeNode(node, defs, args) {\n    if (!(node instanceof RangeNode)) {\n      throw new TypeError('No valid RangeNode')\n    }\n\n    return 'math.range(' +\n        compile(node.start, defs, args) + ', ' +\n        compile(node.end, defs, args) +\n        (node.step ? (', ' + compile(node.step, defs, args)) : '') +\n        ')';\n  }\n\n  // register the compile function\n  register(RangeNode.prototype.type, compileRangeNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  RangeNode.prototype.forEach = function (callback) {\n    callback(this.start, 'start', this);\n    callback(this.end, 'end', this);\n    if (this.step) {\n      callback(this.step, 'step', this);\n    }\n  };\n\n  /**\n   * Create a new RangeNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {RangeNode} Returns a transformed copy of the node\n   */\n  RangeNode.prototype.map = function (callback) {\n    return new RangeNode(\n        this._ifNode(callback(this.start, 'start', this)),\n        this._ifNode(callback(this.end, 'end', this)),\n        this.step && this._ifNode(callback(this.step, 'step', this))\n    );\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {RangeNode}\n   */\n  RangeNode.prototype.clone = function () {\n    return new RangeNode(this.start, this.end, this.step && this.step);\n  };\n\n  /**\n   * Calculate the necessary parentheses\n   * @param {Node} node\n   * @param {string} parenthesis\n   * @return {Object} parentheses\n   * @private\n   */\n  function calculateNecessaryParentheses(node, parenthesis) {\n    var precedence = operators.getPrecedence(node, parenthesis);\n    var parens = {};\n\n    var startPrecedence = operators.getPrecedence(node.start, parenthesis);\n    parens.start = ((startPrecedence !== null) && (startPrecedence <= precedence))\n      || (parenthesis === 'all');\n\n    if (node.step) {\n      var stepPrecedence = operators.getPrecedence(node.step, parenthesis);\n      parens.step = ((stepPrecedence !== null) && (stepPrecedence <= precedence))\n        || (parenthesis === 'all');\n    }\n\n    var endPrecedence = operators.getPrecedence(node.end, parenthesis);\n    parens.end = ((endPrecedence !== null) && (endPrecedence <= precedence))\n      || (parenthesis === 'all');\n\n    return parens;\n  }\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  RangeNode.prototype._toString = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis);\n\n    //format string as start:step:stop\n    var str;\n\n    var start = this.start.toString(options);\n    if (parens.start) {\n      start = '(' + start + ')';\n    }\n    str = start;\n\n    if (this.step) {\n      var step = this.step.toString(options);\n      if (parens.step) {\n        step = '(' + step + ')';\n      }\n      str += ':' + step;\n    }\n\n    var end = this.end.toString(options);\n    if (parens.end) {\n      end = '(' + end + ')';\n    }\n    str += ':' + end;\n\n    return str;\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  RangeNode.prototype.toHTML = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis);\n\n    //format string as start:step:stop\n    var str;\n\n    var start = this.start.toHTML(options);\n    if (parens.start) {\n      start = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + start + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n    str = start;\n\n    if (this.step) {\n      var step = this.step.toHTML(options);\n      if (parens.step) {\n        step = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + step + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      str += '<span class=\"math-operator math-range-operator\">:</span>' + step;\n    }\n\n    var end = this.end.toHTML(options);\n    if (parens.end) {\n      end = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + end + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n    str += '<span class=\"math-operator math-range-operator\">:</span>' + end;\n\n    return str;\n  };\n\n  /**\n   * Get LaTeX representation\n   * @params {Object} options\n   * @return {string} str\n   */\n  RangeNode.prototype._toTex = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis);\n\n    var str = this.start.toTex(options);\n    if (parens.start) {\n      str = '\\\\left(' + str + '\\\\right)';\n    }\n\n    if (this.step) {\n      var step = this.step.toTex(options);\n      if (parens.step) {\n        step = '\\\\left(' + step + '\\\\right)';\n      }\n      str += ':' + step;\n    }\n\n    var end = this.end.toTex(options);\n    if (parens.end) {\n      end = '\\\\left(' + end + '\\\\right)';\n    }\n    str += ':' + end;\n\n    return str;\n  };\n\n  return RangeNode;\n}\n\nexports.name = 'RangeNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n\n},{\"../operators\":238,\"./Node\":226,\"./compile\":233}],231:[function(require,module,exports){\n'use strict';\n\nvar latex = require('../../utils/latex');\nvar stringify = require('../../utils/string').stringify;\nvar escape = require('../../utils/string').escape;\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nfunction factory (type, config, load, typed, math) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * Check whether some name is a valueless unit like \"inch\".\n   * @param {string} name\n   * @return {boolean}\n   */\n  function isValuelessUnit (name) {\n    return type.Unit ? type.Unit.isValuelessUnit(name) : false;\n  }\n\n  /**\n   * @constructor SymbolNode\n   * @extends {Node}\n   * A symbol node can hold and resolve a symbol\n   * @param {string} name\n   * @extends {Node}\n   */\n  function SymbolNode(name) {\n    if (!(this instanceof SymbolNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // validate input\n    if (typeof name !== 'string')  throw new TypeError('String expected for parameter \"name\"');\n\n    this.name = name;\n  }\n\n  SymbolNode.prototype = new Node();\n\n  SymbolNode.prototype.type = 'SymbolNode';\n\n  SymbolNode.prototype.isSymbolNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {SymbolNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileSymbolNode(node, defs, args) {\n    if (!(node instanceof SymbolNode)) {\n      throw new TypeError('No valid SymbolNode')\n    }\n\n    // add a function to the definitions\n    defs['undef'] = undef;\n    defs['Unit'] = type.Unit;\n    defs.getSafeProperty = getSafeProperty;\n    defs.hasOwnProperty = hasOwnProperty;\n\n    var jsName = stringify(node.name); // escaped node name inside double quotes\n\n    if (hasOwnProperty(args, node.name)) {\n      // this is a FunctionAssignment argument\n      // (like an x when inside the expression of a function assignment `f(x) = ...`)\n      return args[node.name];\n    }\n    else if (node.name in defs.math) {\n      return '(' + jsName + ' in scope ' +\n          '? getSafeProperty(scope, ' + jsName + ') ' +\n          ': getSafeProperty(math, ' + jsName + '))';\n    }\n    else {\n      return '(' +\n          jsName + ' in scope ' +\n          '? getSafeProperty(scope, ' + jsName + ') ' +\n          ': ' + (isValuelessUnit(node.name)\n              ? 'new Unit(null, ' + jsName + ')'\n              : 'undef(' + jsName + ')') +\n          ')';\n    }\n  }\n\n  // register the compile function\n  register(SymbolNode.prototype.type, compileSymbolNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  SymbolNode.prototype.forEach = function (callback) {\n    // nothing to do, we don't have childs\n  };\n\n  /**\n   * Create a new SymbolNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {SymbolNode} Returns a clone of the node\n   */\n  SymbolNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n\n  /**\n   * Throws an error 'Undefined symbol {name}'\n   * @param {string} name\n   */\n  function undef (name) {\n    throw new Error('Undefined symbol ' + name);\n  }\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {SymbolNode}\n   */\n  SymbolNode.prototype.clone = function() {\n    return new SymbolNode(this.name);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  SymbolNode.prototype._toString = function(options) {\n    return this.name;\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  SymbolNode.prototype.toHTML = function(options) {\n\tvar name = escape(this.name);\n\t\n    if (name == \"true\" || name == \"false\") {\n\t  return '<span class=\"math-symbol math-boolean\">' + name + '</span>';\n\t}\n\telse if (name == \"i\") {\n\t  return '<span class=\"math-symbol math-imaginary-symbol\">' + name + '</span>';\n\t}\n\telse if (name == \"Infinity\") {\n\t  return '<span class=\"math-symbol math-infinity-symbol\">' + name + '</span>';\n\t}\n\telse if (name == \"NaN\") {\n\t  return '<span class=\"math-symbol math-nan-symbol\">' + name + '</span>';\n\t}\n\telse if (name == \"null\") {\n\t  return '<span class=\"math-symbol math-null-symbol\">' + name + '</span>';\n\t}\n\telse if (name == \"uninitialized\") {\n\t  return '<span class=\"math-symbol math-uninitialized-symbol\">' + name + '</span>';\n\t}\n\t\n\treturn '<span class=\"math-symbol\">' + name + '</span>';\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  SymbolNode.prototype._toTex = function(options) {\n    var isUnit = false;\n    if ((typeof math[this.name] === 'undefined') && isValuelessUnit(this.name)) {\n      isUnit = true;\n    }\n    var symbol = latex.toSymbol(this.name, isUnit);\n    if (symbol[0] === '\\\\') {\n      //no space needed if the symbol starts with '\\'\n      return symbol;\n    }\n    //the space prevents symbols from breaking stuff like '\\cdot' if it's written right before the symbol\n    return ' ' + symbol;\n  };\n\n  return SymbolNode;\n}\n\nexports.name = 'SymbolNode';\nexports.path = 'expression.node';\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\nexports.factory = factory;\n\n},{\"../../utils/customs\":527,\"../../utils/latex\":531,\"../../utils/object\":533,\"../../utils/string\":534,\"./Node\":226,\"./compile\":233}],232:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  /**\n   * @constructor UpdateNode\n   */\n  function UpdateNode() {\n    // TODO: deprecated since v3. Cleanup some day\n    throw new Error('UpdateNode is deprecated. Use AssignmentNode instead.');\n  }\n\n  return UpdateNode;\n}\n\nexports.name = 'UpdateNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n\n},{}],233:[function(require,module,exports){\n// the compile functions which compile a Node into JavaScript are not\n// exposed as class methods for security reasons to prevent being able to\n// override them or create fake Nodes. Instead, only compile functions of\n// registered nodes can be executed\n\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nfunction factory () {\n  // map with node type as key and compile functions as value\n  var compileFunctions = {}\n\n  /**\n   * Register a compile function for a node\n   * @param {string} type\n   * @param {function} compileFunction\n   *                      The compile function, invoked as\n   *                      compileFunction(node, defs, args)\n   */\n  function register(type, compileFunction) {\n    if (compileFunctions[type] === undefined) {\n      compileFunctions[type] = compileFunction;\n    }\n    else {\n      throw new Error('Cannot register type \"' + type + '\": already exists');\n    }\n  }\n\n  /**\n   * Compile a Node into JavaScript\n   * @param {Node} node\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} Returns JavaScript code\n   */\n  function compile (node, defs, args) {\n    if (hasOwnProperty(compileFunctions, node.type)) {\n      var compileFunction = compileFunctions[node.type];\n      return compileFunction(node, defs, args);\n    }\n    else if (typeof node._compile === 'function' &&\n        !hasOwnProperty(node, '_compile')) {\n      // Compatibility for CustomNodes\n      // TODO: this is a security risk, change it such that you have to register CustomNodes separately in math.js, like math.expression.node.register(MyCustomNode)\n      return node._compile(defs, args);\n    }\n    else {\n      throw new Error('Cannot compile node: unknown type \"' + node.type + '\"');\n    }\n  }\n\n  return {\n    register: register,\n    compile: compile\n  }\n}\n\nexports.factory = factory;\n\n},{\"../../utils/object\":533}],234:[function(require,module,exports){\nmodule.exports = [\n  require('./AccessorNode'),\n  require('./ArrayNode'),\n  require('./AssignmentNode'),\n  require('./BlockNode'),\n  require('./ConditionalNode'),\n  require('./ConstantNode'),\n  require('./IndexNode'),\n  require('./FunctionAssignmentNode'),\n  require('./FunctionNode'),\n  require('./Node'),\n  require('./ObjectNode'),\n  require('./OperatorNode'),\n  require('./ParenthesisNode'),\n  require('./RangeNode'),\n  require('./SymbolNode'),\n  require('./UpdateNode')\n];\n\n},{\"./AccessorNode\":217,\"./ArrayNode\":218,\"./AssignmentNode\":219,\"./BlockNode\":220,\"./ConditionalNode\":221,\"./ConstantNode\":222,\"./FunctionAssignmentNode\":223,\"./FunctionNode\":224,\"./IndexNode\":225,\"./Node\":226,\"./ObjectNode\":227,\"./OperatorNode\":228,\"./ParenthesisNode\":229,\"./RangeNode\":230,\"./SymbolNode\":231,\"./UpdateNode\":232}],235:[function(require,module,exports){\n'use strict';\n\nvar errorTransform = require('../../transform/error.transform').transform;\nvar getSafeProperty = require('../../../utils/customs').getSafeProperty;\n\nfunction factory (type, config, load, typed) {\n  var subset = load(require('../../../function/matrix/subset'));\n\n  /**\n   * Retrieve part of an object:\n   *\n   * - Retrieve a property from an object\n   * - Retrieve a part of a string\n   * - Retrieve a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @return {Object | Array | Matrix | string} Returns the subset\n   */\n  return function access(object, index) {\n    try {\n      if (Array.isArray(object)) {\n        return subset(object, index);\n      }\n      else if (object && typeof object.subset === 'function') { // Matrix\n        return object.subset(index);\n      }\n      else if (typeof object === 'string') {\n        // TODO: move getStringSubset into a separate util file, use that\n        return subset(object, index);\n      }\n      else if (typeof object === 'object') {\n        if (!index.isObjectProperty()) {\n          throw new TypeError('Cannot apply a numeric index as object property');\n        }\n\n        return getSafeProperty(object, index.getObjectProperty());\n      }\n      else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    }\n    catch (err) {\n      throw errorTransform(err);\n    }\n  }\n}\n\nexports.factory = factory;\n\n},{\"../../../function/matrix/subset\":364,\"../../../utils/customs\":527,\"../../transform/error.transform\":241}],236:[function(require,module,exports){\n'use strict';\n\nvar errorTransform = require('../../transform/error.transform').transform;\nvar setSafeProperty = require('../../../utils/customs').setSafeProperty;\n\nfunction factory (type, config, load, typed) {\n  var subset = load(require('../../../function/matrix/subset'));\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n\n  /**\n   * Replace part of an object:\n   *\n   * - Assign a property to an object\n   * - Replace a part of a string\n   * - Replace a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @param {*} value\n   * @return {Object | Array | Matrix | string} Returns the original object\n   *                                            except in case of a string\n   */\n  // TODO: change assign to return the value instead of the object\n  return function assign(object, index, value) {\n    try {\n      if (Array.isArray(object)) {\n        return matrix(object).subset(index, value).valueOf();\n      }\n      else if (object && typeof object.subset === 'function') { // Matrix\n        return object.subset(index, value);\n      }\n      else if (typeof object === 'string') {\n        // TODO: move setStringSubset into a separate util file, use that\n        return subset(object, index, value);\n      }\n      else if (typeof object === 'object') {\n        if (!index.isObjectProperty()) {\n          throw TypeError('Cannot apply a numeric index as object property');\n        }\n        setSafeProperty(object, index.getObjectProperty(), value);\n        return object;\n      }\n      else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    }\n    catch (err) {\n        throw errorTransform(err);\n    }\n  }\n}\n\nexports.factory = factory;\n\n},{\"../../../function/matrix/subset\":364,\"../../../type/matrix/function/matrix\":482,\"../../../utils/customs\":527,\"../../transform/error.transform\":241}],237:[function(require,module,exports){\n/**\n * Get a unique name for an argument name to store in defs\n * @param {Object} defs\n * @return {string} A string like 'arg1', 'arg2', ...\n * @private\n */\nfunction getUniqueArgumentName (defs) {\n  return 'arg' + Object.keys(defs).length\n}\n\nmodule.exports = getUniqueArgumentName;\n\n},{}],238:[function(require,module,exports){\n'use strict'\n\n//list of identifiers of nodes in order of their precedence\n//also contains information about left/right associativity\n//and which other operator the operator is associative with\n//Example:\n// addition is associative with addition and subtraction, because:\n// (a+b)+c=a+(b+c)\n// (a+b)-c=a+(b-c)\n//\n// postfix operators are left associative, prefix operators \n// are right associative\n//\n//It's also possible to set the following properties:\n// latexParens: if set to false, this node doesn't need to be enclosed\n//              in parentheses when using LaTeX\n// latexLeftParens: if set to false, this !OperatorNode's! \n//                  left argument doesn't need to be enclosed\n//                  in parentheses\n// latexRightParens: the same for the right argument\nvar properties = [\n  { //assignment\n    'AssignmentNode': {},\n    'FunctionAssignmentNode': {}\n  },\n  { //conditional expression\n    'ConditionalNode': {\n      latexLeftParens: false,\n      latexRightParens: false,\n      latexParens: false\n      //conditionals don't need parentheses in LaTeX because\n      //they are 2 dimensional\n    }\n  },\n  { //logical or\n    'OperatorNode:or': {\n      associativity: 'left',\n      associativeWith: []\n    }\n\n  },\n  { //logical xor\n    'OperatorNode:xor': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //logical and\n    'OperatorNode:and': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //bitwise or\n    'OperatorNode:bitOr': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //bitwise xor\n    'OperatorNode:bitXor': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //bitwise and\n    'OperatorNode:bitAnd': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //relational operators\n    'OperatorNode:equal': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:unequal': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:smaller': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:larger': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:smallerEq': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:largerEq': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //bitshift operators\n    'OperatorNode:leftShift': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:rightArithShift': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:rightLogShift': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //unit conversion\n    'OperatorNode:to': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //range\n    'RangeNode': {}\n  },\n  { //addition, subtraction\n    'OperatorNode:add': {\n      associativity: 'left',\n      associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']\n    },\n    'OperatorNode:subtract': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //multiply, divide, modulus\n    'OperatorNode:multiply': {\n      associativity: 'left',\n      associativeWith: [\n        'OperatorNode:multiply',\n        'OperatorNode:divide',\n        'Operator:dotMultiply',\n        'Operator:dotDivide'\n      ]\n    },\n    'OperatorNode:divide': {\n      associativity: 'left',\n      associativeWith: [],\n      latexLeftParens: false,\n      latexRightParens: false,\n      latexParens: false\n      //fractions don't require parentheses because\n      //they're 2 dimensional, so parens aren't needed\n      //in LaTeX\n    },\n    'OperatorNode:dotMultiply': {\n      associativity: 'left',\n      associativeWith: [\n        'OperatorNode:multiply',\n        'OperatorNode:divide',\n        'OperatorNode:dotMultiply',\n        'OperatorNode:doDivide'\n      ]\n    },\n    'OperatorNode:dotDivide': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:mod': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //unary prefix operators\n    'OperatorNode:unaryPlus': {\n      associativity: 'right'\n    },\n    'OperatorNode:unaryMinus': {\n      associativity: 'right'\n    },\n    'OperatorNode:bitNot': {\n      associativity: 'right'\n    },\n    'OperatorNode:not': {\n      associativity: 'right'\n    }\n  },\n  { //exponentiation\n    'OperatorNode:pow': {\n      associativity: 'right',\n      associativeWith: [],\n      latexRightParens: false\n      //the exponent doesn't need parentheses in\n      //LaTeX because it's 2 dimensional\n      //(it's on top)\n    },\n    'OperatorNode:dotPow': {\n      associativity: 'right',\n      associativeWith: []\n    }\n  },\n  { //factorial\n    'OperatorNode:factorial': {\n      associativity: 'left'\n    }\n  },\n  { //matrix transpose\n    'OperatorNode:transpose': {\n      associativity: 'left'\n    }\n  }\n];\n\n/**\n * Get the precedence of a Node.\n * Higher number for higher precedence, starting with 0.\n * Returns null if the precedence is undefined.\n *\n * @param {Node}\n * @param {string} parenthesis\n * @return {number|null}\n */\nfunction getPrecedence (_node, parenthesis) {\n  var node = _node;\n  if (parenthesis !== 'keep') {\n    //ParenthesisNodes are only ignored when not in 'keep' mode\n    node = _node.getContent();\n  }\n  var identifier = node.getIdentifier();\n  for (var i = 0; i < properties.length; i++) {\n    if (identifier in properties[i]) {\n      return i;\n    }\n  }\n  return null;\n}\n\n/**\n * Get the associativity of an operator (left or right).\n * Returns a string containing 'left' or 'right' or null if\n * the associativity is not defined.\n *\n * @param {Node}\n * @param {string} parenthesis\n * @return {string|null}\n * @throws {Error}\n */\nfunction getAssociativity (_node, parenthesis) {\n  var node = _node;\n  if (parenthesis !== 'keep') {\n    //ParenthesisNodes are only ignored when not in 'keep' mode\n    node = _node.getContent();\n  }\n  var identifier = node.getIdentifier();\n  var index = getPrecedence(node, parenthesis);\n  if (index === null) {\n    //node isn't in the list\n    return null;\n  }\n  var property = properties[index][identifier];\n\n  if (property.hasOwnProperty('associativity')) {\n    if (property.associativity === 'left') {\n      return 'left';\n    }\n    if (property.associativity === 'right') {\n      return 'right';\n    }\n    //associativity is invalid\n    throw Error('\\'' + identifier + '\\' has the invalid associativity \\''\n                + property.associativity + '\\'.');\n  }\n\n  //associativity is undefined\n  return null;\n}\n\n/**\n * Check if an operator is associative with another operator.\n * Returns either true or false or null if not defined.\n *\n * @param {Node} nodeA\n * @param {Node} nodeB\n * @param {string} parenthesis\n * @return {bool|null}\n */\nfunction isAssociativeWith (nodeA, nodeB, parenthesis) {\n  var a = nodeA;\n  var b = nodeB;\n  if (parenthesis !== 'keep') {\n    //ParenthesisNodes are only ignored when not in 'keep' mode\n    var a = nodeA.getContent();\n    var b = nodeB.getContent();\n  }\n  var identifierA = a.getIdentifier();\n  var identifierB = b.getIdentifier();\n  var index = getPrecedence(a, parenthesis);\n  if (index === null) {\n    //node isn't in the list\n    return null;\n  }\n  var property = properties[index][identifierA];\n\n  if (property.hasOwnProperty('associativeWith')\n      && (property.associativeWith instanceof Array)) {\n    for (var i = 0; i < property.associativeWith.length; i++) {\n      if (property.associativeWith[i] === identifierB) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  //associativeWith is not defined\n  return null;\n}\n\nmodule.exports.properties = properties;\nmodule.exports.getPrecedence = getPrecedence;\nmodule.exports.getAssociativity = getAssociativity;\nmodule.exports.isAssociativeWith = isAssociativeWith;\n\n},{}],239:[function(require,module,exports){\n'use strict';\n\nvar ArgumentsError = require('../error/ArgumentsError');\nvar deepMap = require('../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var AccessorNode            = load(require('./node/AccessorNode'));\n  var ArrayNode               = load(require('./node/ArrayNode'));\n  var AssignmentNode          = load(require('./node/AssignmentNode'));\n  var BlockNode               = load(require('./node/BlockNode'));\n  var ConditionalNode         = load(require('./node/ConditionalNode'));\n  var ConstantNode            = load(require('./node/ConstantNode'));\n  var FunctionAssignmentNode  = load(require('./node/FunctionAssignmentNode'));\n  var IndexNode               = load(require('./node/IndexNode'));\n  var ObjectNode              = load(require('./node/ObjectNode'));\n  var OperatorNode            = load(require('./node/OperatorNode'));\n  var ParenthesisNode         = load(require('./node/ParenthesisNode'));\n  var FunctionNode            = load(require('./node/FunctionNode'));\n  var RangeNode               = load(require('./node/RangeNode'));\n  var SymbolNode              = load(require('./node/SymbolNode'));\n\n\n  /**\n   * Parse an expression. Returns a node tree, which can be evaluated by\n   * invoking node.eval();\n   *\n   * Syntax:\n   *\n   *     parse(expr)\n   *     parse(expr, options)\n   *     parse([expr1, expr2, expr3, ...])\n   *     parse([expr1, expr2, expr3, ...], options)\n   *\n   * Example:\n   *\n   *     var node = parse('sqrt(3^2 + 4^2)');\n   *     node.compile(math).eval(); // 5\n   *\n   *     var scope = {a:3, b:4}\n   *     var node = parse('a * b'); // 12\n   *     var code = node.compile(math);\n   *     code.eval(scope); // 12\n   *     scope.a = 5;\n   *     code.eval(scope); // 20\n   *\n   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);\n   *     nodes[2].compile(math).eval(); // 12\n   *\n   * @param {string | string[] | Matrix} expr\n   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n   *                                                   - `nodes` a set of custom nodes\n   * @return {Node | Node[]} node\n   * @throws {Error}\n   */\n  function parse (expr, options) {\n    if (arguments.length != 1 && arguments.length != 2) {\n      throw new ArgumentsError('parse', arguments.length, 1, 2);\n    }\n\n    // pass extra nodes\n    extra_nodes = (options && options.nodes) ? options.nodes : {};\n\n    if (typeof expr === 'string') {\n      // parse a single expression\n      expression = expr;\n      return parseStart();\n    }\n    else if (Array.isArray(expr) || expr instanceof type.Matrix) {\n      // parse an array or matrix with expressions\n      return deepMap(expr, function (elem) {\n        if (typeof elem !== 'string') throw new TypeError('String expected');\n\n        expression = elem;\n        return parseStart();\n      });\n    }\n    else {\n      // oops\n      throw new TypeError('String or matrix expected');\n    }\n  }\n\n  // token types enumeration\n  var TOKENTYPE = {\n    NULL : 0,\n    DELIMITER : 1,\n    NUMBER : 2,\n    SYMBOL : 3,\n    UNKNOWN : 4\n  };\n\n  // map with all delimiters\n  var DELIMITERS = {\n    ',': true,\n    '(': true,\n    ')': true,\n    '[': true,\n    ']': true,\n    '{': true,\n    '}': true,\n    '\\\"': true,\n    ';': true,\n\n    '+': true,\n    '-': true,\n    '*': true,\n    '.*': true,\n    '/': true,\n    './': true,\n    '%': true,\n    '^': true,\n    '.^': true,\n    '~': true,\n    '!': true,\n    '&': true,\n    '|': true,\n    '^|': true,\n    '\\'': true,\n    '=': true,\n    ':': true,\n    '?': true,\n\n    '==': true,\n    '!=': true,\n    '<': true,\n    '>': true,\n    '<=': true,\n    '>=': true,\n\n    '<<': true,\n    '>>': true,\n    '>>>': true\n  };\n\n  // map with all named delimiters\n  var NAMED_DELIMITERS = {\n    'mod': true,\n    'to': true,\n    'in': true,\n    'and': true,\n    'xor': true,\n    'or': true,\n    'not': true\n  };\n\n  var extra_nodes = {};             // current extra nodes\n  var expression = '';              // current expression\n  var comment = '';                 // last parsed comment\n  var index = 0;                    // current index in expr\n  var c = '';                       // current token character in expr\n  var token = '';                   // current token\n  var token_type = TOKENTYPE.NULL;  // type of the token\n  var nesting_level = 0;            // level of nesting inside parameters, used to ignore newline characters\n  var conditional_level = null;     // when a conditional is being parsed, the level of the conditional is stored here\n\n  /**\n   * Get the first character from the expression.\n   * The character is stored into the char c. If the end of the expression is\n   * reached, the function puts an empty string in c.\n   * @private\n   */\n  function first() {\n    index = 0;\n    c = expression.charAt(0);\n    nesting_level = 0;\n    conditional_level = null;\n  }\n\n  /**\n   * Get the next character from the expression.\n   * The character is stored into the char c. If the end of the expression is\n   * reached, the function puts an empty string in c.\n   * @private\n   */\n  function next() {\n    index++;\n    c = expression.charAt(index);\n  }\n\n  /**\n   * Preview the previous character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n  function prevPreview() {\n    return expression.charAt(index - 1);\n  }\n\n  /**\n   * Preview the next character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n  function nextPreview() {\n    return expression.charAt(index + 1);\n  }\n\n  /**\n   * Preview the second next character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n  function nextNextPreview() {\n    return expression.charAt(index + 2);\n  }\n\n  /**\n   * Get next token in the current string expr.\n   * The token and token type are available as token and token_type\n   * @private\n   */\n  function getToken() {\n    token_type = TOKENTYPE.NULL;\n    token = '';\n    comment = '';\n\n    // skip over whitespaces\n    // space, tab, and newline when inside parameters\n    while (parse.isWhitespace(c, nesting_level)) {\n      next();\n    }\n\n    // skip comment\n    if (c == '#') {\n      while (c != '\\n' && c != '') {\n        comment += c;\n        next();\n      }\n    }\n\n    // check for end of expression\n    if (c == '') {\n      // token is still empty\n      token_type = TOKENTYPE.DELIMITER;\n      return;\n    }\n\n    // check for new line character\n    if (c == '\\n' && !nesting_level) {\n      token_type = TOKENTYPE.DELIMITER;\n      token = c;\n      next();\n      return;\n    }\n\n    // check for delimiters consisting of 3 characters\n    var c2 = c + nextPreview();\n    var c3 = c2 + nextNextPreview();\n    if (c3.length == 3 && DELIMITERS[c3]) {\n      token_type = TOKENTYPE.DELIMITER;\n      token = c3;\n      next();\n      next();\n      next();\n      return;\n    }\n\n    // check for delimiters consisting of 2 characters\n    if (c2.length == 2 && DELIMITERS[c2]) {\n      token_type = TOKENTYPE.DELIMITER;\n      token = c2;\n      next();\n      next();\n      return;\n    }\n\n    // check for delimiters consisting of 1 character\n    if (DELIMITERS[c]) {\n      token_type = TOKENTYPE.DELIMITER;\n      token = c;\n      next();\n      return;\n    }\n\n    // check for a number\n    if (parse.isDigitDot(c)) {\n      token_type = TOKENTYPE.NUMBER;\n\n      // get number, can have a single dot\n      if (c == '.') {\n        token += c;\n        next();\n\n        if (!parse.isDigit(c)) {\n          // this is no number, it is just a dot (can be dot notation)\n          token_type = TOKENTYPE.DELIMITER;\n        }\n      }\n      else {\n        while (parse.isDigit(c)) {\n          token += c;\n          next();\n        }\n        if (parse.isDecimalMark(c, nextPreview())) {\n          token += c;\n          next();\n        }\n      }\n      while (parse.isDigit(c)) {\n        token += c;\n        next();\n      }\n\n      // check for exponential notation like \"2.3e-4\", \"1.23e50\" or \"2e+4\"\n      c2 = nextPreview();\n      if (c == 'E' || c == 'e') {\n        if (parse.isDigit(c2) || c2 == '-' || c2 == '+') {\n          token += c;\n          next();\n\n          if (c == '+' || c == '-') {\n            token += c;\n            next();\n          }\n\n          // Scientific notation MUST be followed by an exponent\n          if (!parse.isDigit(c)) {\n            throw createSyntaxError('Digit expected, got \"' + c + '\"');\n          }\n\n          while (parse.isDigit(c)) {\n            token += c;\n            next();\n          }\n\n          if (parse.isDecimalMark(c, nextPreview())) {\n            throw createSyntaxError('Digit expected, got \"' + c + '\"');\n          }\n        }\n        else if (c2 == '.') {\n          next();\n          throw createSyntaxError('Digit expected, got \"' + c + '\"');\n        }\n      }\n\n      return;\n    }\n\n    // check for variables, functions, named operators\n    if (parse.isAlpha(c, prevPreview(), nextPreview())) {\n      while (parse.isAlpha(c, prevPreview(), nextPreview()) || parse.isDigit(c)) {\n        token += c;\n        next();\n      }\n\n      if (NAMED_DELIMITERS.hasOwnProperty(token)) {\n        token_type = TOKENTYPE.DELIMITER;\n      }\n      else {\n        token_type = TOKENTYPE.SYMBOL;\n      }\n\n      return;\n    }\n\n    // something unknown is found, wrong characters -> a syntax error\n    token_type = TOKENTYPE.UNKNOWN;\n    while (c != '') {\n      token += c;\n      next();\n    }\n    throw createSyntaxError('Syntax error in part \"' + token + '\"');\n  }\n\n  /**\n   * Get next token and skip newline tokens\n   */\n  function getTokenSkipNewline () {\n    do {\n      getToken();\n    }\n    while (token == '\\n');\n  }\n\n  /**\n   * Open parameters.\n   * New line characters will be ignored until closeParams() is called\n   */\n  function openParams() {\n    nesting_level++;\n  }\n\n  /**\n   * Close parameters.\n   * New line characters will no longer be ignored\n   */\n  function closeParams() {\n    nesting_level--;\n  }\n\n  /**\n   * Checks whether the current character `c` is a valid alpha character:\n   *\n   * - A latin letter (upper or lower case) Ascii: a-z, A-Z\n   * - An underscore                         Ascii: _\n   * - A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n   * - A greek letter                       Unicode: \\u0370 - \\u03FF\n   * - A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n   *\n   * The previous and next characters are needed to determine whether\n   * this character is part of a unicode surrogate pair.\n   *\n   * @param {string} c      Current character in the expression\n   * @param {string} cPrev  Previous character\n   * @param {string} cNext  Next character\n   * @return {boolean}\n   */\n  parse.isAlpha = function isAlpha (c, cPrev, cNext) {\n    return parse.isValidLatinOrGreek(c)\n        || parse.isValidMathSymbol(c, cNext)\n        || parse.isValidMathSymbol(cPrev, c);\n  };\n\n  /**\n   * Test whether a character is a valid latin, greek, or letter-like character\n   * @param {string} c\n   * @return {boolean}\n   */\n  parse.isValidLatinOrGreek = function isValidLatinOrGreek (c) {\n    return /^[a-zA-Z_\\u00C0-\\u02AF\\u0370-\\u03FF\\u2100-\\u214F]$/.test(c);\n  };\n\n  /**\n   * Test whether two given 16 bit characters form a surrogate pair of a\n   * unicode math symbol.\n   *\n   * http://unicode-table.com/en/\n   * http://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n   *\n   * Note: In ES6 will be unicode aware:\n   * http://stackoverflow.com/questions/280712/javascript-unicode-regexes\n   * https://mathiasbynens.be/notes/es6-unicode-regex\n   *\n   * @param {string} high\n   * @param {string} low\n   * @return {boolean}\n   */\n  parse.isValidMathSymbol = function isValidMathSymbol (high, low) {\n    return /^[\\uD835]$/.test(high) &&\n        /^[\\uDC00-\\uDFFF]$/.test(low) &&\n        /^[^\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]$/.test(low);\n  };\n\n  /**\n   * Check whether given character c is a white space character: space, tab, or enter\n   * @param {string} c\n   * @param {number} nestingLevel\n   * @return {boolean}\n   */\n  parse.isWhitespace = function isWhitespace (c, nestingLevel) {\n    // TODO: also take '\\r' carriage return as newline? Or does that give problems on mac?\n    return c == ' ' || c == '\\t' || (c == '\\n' && nestingLevel > 0);\n  };\n\n  /**\n   * Test whether the character c is a decimal mark (dot).\n   * This is the case when it's not the start of a delimiter '.*', './', or '.^'\n   * @param {string} c\n   * @param {string} cNext\n   * @return {boolean}\n   */\n  parse.isDecimalMark = function isDecimalMark (c, cNext) {\n    return c == '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';\n  };\n\n  /**\n   * checks if the given char c is a digit or dot\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n  parse.isDigitDot = function isDigitDot (c) {\n    return ((c >= '0' && c <= '9') || c == '.');\n  };\n\n  /**\n   * checks if the given char c is a digit\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n  parse.isDigit = function isDigit (c) {\n    return (c >= '0' && c <= '9');\n  };\n\n  /**\n   * Start of the parse levels below, in order of precedence\n   * @return {Node} node\n   * @private\n   */\n  function parseStart () {\n    // get the first character in expression\n    first();\n\n    getToken();\n\n    var node = parseBlock();\n\n    // check for garbage at the end of the expression\n    // an expression ends with a empty character '' and token_type DELIMITER\n    if (token != '') {\n      if (token_type == TOKENTYPE.DELIMITER) {\n        // user entered a not existing operator like \"//\"\n\n        // TODO: give hints for aliases, for example with \"<>\" give as hint \" did you mean != ?\"\n        throw createError('Unexpected operator ' + token);\n      }\n      else {\n        throw createSyntaxError('Unexpected part \"' + token + '\"');\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * Parse a block with expressions. Expressions can be separated by a newline\n   * character '\\n', or by a semicolon ';'. In case of a semicolon, no output\n   * of the preceding line is returned.\n   * @return {Node} node\n   * @private\n   */\n  function parseBlock () {\n    var node;\n    var blocks = [];\n    var visible;\n\n    if (token != '' && token != '\\n' && token != ';') {\n      node = parseAssignment();\n      node.comment = comment;\n    }\n\n    // TODO: simplify this loop\n    while (token == '\\n' || token == ';') {\n      if (blocks.length == 0 && node) {\n        visible = (token != ';');\n        blocks.push({\n          node: node,\n          visible: visible\n        });\n      }\n\n      getToken();\n      if (token != '\\n' && token != ';' && token != '') {\n        node = parseAssignment();\n        node.comment = comment;\n\n        visible = (token != ';');\n        blocks.push({\n          node: node,\n          visible: visible\n        });\n      }\n    }\n\n    if (blocks.length > 0) {\n      return new BlockNode(blocks);\n    }\n    else {\n      if (!node) {\n        node = new ConstantNode('undefined', 'undefined');\n        node.comment = comment;\n      }\n\n      return node\n    }\n  }\n\n  /**\n   * Assignment of a function or variable,\n   * - can be a variable like 'a=2.3'\n   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'\n   * - defining a function like 'f(x) = x^2'\n   * @return {Node} node\n   * @private\n   */\n  function parseAssignment () {\n    var name, args, value, valid;\n\n    var node = parseConditional();\n\n    if (token == '=') {\n      if (node && node.isSymbolNode) {\n        // parse a variable assignment like 'a = 2/3'\n        name = node.name;\n        getTokenSkipNewline();\n        value = parseAssignment();\n        return new AssignmentNode(new SymbolNode(name), value);\n      }\n      else if (node && node.isAccessorNode) {\n        // parse a matrix subset assignment like 'A[1,2] = 4'\n        getTokenSkipNewline();\n        value = parseAssignment();\n        return new AssignmentNode(node.object, node.index, value);\n      }\n      else if (node && node.isFunctionNode) {\n        // parse function assignment like 'f(x) = x^2'\n        valid = true;\n        args = [];\n\n        name = node.name;\n        node.args.forEach(function (arg, index) {\n          if (arg && arg.isSymbolNode) {\n            args[index] = arg.name;\n          }\n          else {\n            valid = false;\n          }\n        });\n\n        if (valid) {\n          getTokenSkipNewline();\n          value = parseAssignment();\n          return new FunctionAssignmentNode(name, args, value);\n        }\n      }\n\n      throw createSyntaxError('Invalid left hand side of assignment operator =');\n    }\n\n    return node;\n  }\n\n  /**\n   * conditional operation\n   *\n   *     condition ? truePart : falsePart\n   *\n   * Note: conditional operator is right-associative\n   *\n   * @return {Node} node\n   * @private\n   */\n  function parseConditional () {\n    var node = parseLogicalOr();\n\n    while (token == '?') {\n      // set a conditional level, the range operator will be ignored as long\n      // as conditional_level == nesting_level.\n      var prev = conditional_level;\n      conditional_level = nesting_level;\n      getTokenSkipNewline();\n\n      var condition = node;\n      var trueExpr = parseAssignment();\n\n      if (token != ':') throw createSyntaxError('False part of conditional expression expected');\n\n      conditional_level = null;\n      getTokenSkipNewline();\n\n      var falseExpr = parseAssignment(); // Note: check for conditional operator again, right associativity\n\n      node = new ConditionalNode(condition, trueExpr, falseExpr);\n\n      // restore the previous conditional level\n      conditional_level = prev;\n    }\n\n    return node;\n  }\n\n  /**\n   * logical or, 'x or y'\n   * @return {Node} node\n   * @private\n   */\n  function parseLogicalOr() {\n    var node = parseLogicalXor();\n\n    while (token == 'or') {\n      getTokenSkipNewline();\n      node = new OperatorNode('or', 'or', [node, parseLogicalXor()]);\n    }\n\n    return node;\n  }\n\n  /**\n   * logical exclusive or, 'x xor y'\n   * @return {Node} node\n   * @private\n   */\n  function parseLogicalXor() {\n    var node = parseLogicalAnd();\n\n    while (token == 'xor') {\n      getTokenSkipNewline();\n      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd()]);\n    }\n\n    return node;\n  }\n\n  /**\n   * logical and, 'x and y'\n   * @return {Node} node\n   * @private\n   */\n  function parseLogicalAnd() {\n    var node = parseBitwiseOr();\n\n    while (token == 'and') {\n      getTokenSkipNewline();\n      node = new OperatorNode('and', 'and', [node, parseBitwiseOr()]);\n    }\n\n    return node;\n  }\n\n  /**\n   * bitwise or, 'x | y'\n   * @return {Node} node\n   * @private\n   */\n  function parseBitwiseOr() {\n    var node = parseBitwiseXor();\n\n    while (token == '|') {\n      getTokenSkipNewline();\n      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor()]);\n    }\n\n    return node;\n  }\n\n  /**\n   * bitwise exclusive or (xor), 'x ^| y'\n   * @return {Node} node\n   * @private\n   */\n  function parseBitwiseXor() {\n    var node = parseBitwiseAnd();\n\n    while (token == '^|') {\n      getTokenSkipNewline();\n      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd()]);\n    }\n\n    return node;\n  }\n\n  /**\n   * bitwise and, 'x & y'\n   * @return {Node} node\n   * @private\n   */\n  function parseBitwiseAnd () {\n    var node = parseRelational();\n\n    while (token == '&') {\n      getTokenSkipNewline();\n      node = new OperatorNode('&', 'bitAnd', [node, parseRelational()]);\n    }\n\n    return node;\n  }\n\n  /**\n   * relational operators\n   * @return {Node} node\n   * @private\n   */\n  function parseRelational () {\n    var node, operators, name, fn, params;\n\n    node = parseShift();\n\n    operators = {\n      '==': 'equal',\n      '!=': 'unequal',\n      '<': 'smaller',\n      '>': 'larger',\n      '<=': 'smallerEq',\n      '>=': 'largerEq'\n    };\n    while (operators.hasOwnProperty(token)) {\n      name = token;\n      fn = operators[name];\n\n      getTokenSkipNewline();\n      params = [node, parseShift()];\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n\n  /**\n   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift\n   * @return {Node} node\n   * @private\n   */\n  function parseShift () {\n    var node, operators, name, fn, params;\n\n    node = parseConversion();\n\n    operators = {\n      '<<' : 'leftShift',\n      '>>' : 'rightArithShift',\n      '>>>' : 'rightLogShift'\n    };\n\n    while (operators.hasOwnProperty(token)) {\n      name = token;\n      fn = operators[name];\n\n      getTokenSkipNewline();\n      params = [node, parseConversion()];\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n\n  /**\n   * conversion operators 'to' and 'in'\n   * @return {Node} node\n   * @private\n   */\n  function parseConversion () {\n    var node, operators, name, fn, params;\n\n    node = parseRange();\n\n    operators = {\n      'to' : 'to',\n      'in' : 'to'   // alias of 'to'\n    };\n\n    while (operators.hasOwnProperty(token)) {\n      name = token;\n      fn = operators[name];\n\n      getTokenSkipNewline();\n      \n      if (name === 'in' && token === '') {\n        // end of expression -> this is the unit 'in' ('inch')\n        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);\n      }\n      else {\n        // operator 'a to b' or 'a in b'\n        params = [node, parseRange()];\n        node = new OperatorNode(name, fn, params);\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * parse range, \"start:end\", \"start:step:end\", \":\", \"start:\", \":end\", etc\n   * @return {Node} node\n   * @private\n   */\n  function parseRange () {\n    var node, params = [];\n\n    if (token == ':') {\n      // implicit start=1 (one-based)\n      node = new ConstantNode('1', 'number');\n    }\n    else {\n      // explicit start\n      node = parseAddSubtract();\n    }\n\n    if (token == ':' && (conditional_level !== nesting_level)) {\n      // we ignore the range operator when a conditional operator is being processed on the same level\n      params.push(node);\n\n      // parse step and end\n      while (token == ':' && params.length < 3) {\n        getTokenSkipNewline();\n\n        if (token == ')' || token == ']' || token == ',' || token == '') {\n          // implicit end\n          params.push(new SymbolNode('end'));\n        }\n        else {\n          // explicit end\n          params.push(parseAddSubtract());\n        }\n      }\n\n      if (params.length == 3) {\n        // params = [start, step, end]\n        node = new RangeNode(params[0], params[2], params[1]); // start, end, step\n      }\n      else { // length == 2\n        // params = [start, end]\n        node = new RangeNode(params[0], params[1]); // start, end\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * add or subtract\n   * @return {Node} node\n   * @private\n   */\n  function parseAddSubtract ()  {\n    var node, operators, name, fn, params;\n\n    node = parseMultiplyDivide();\n\n    operators = {\n      '+': 'add',\n      '-': 'subtract'\n    };\n    while (operators.hasOwnProperty(token)) {\n      name = token;\n      fn = operators[name];\n\n      getTokenSkipNewline();\n      params = [node, parseMultiplyDivide()];\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n\n  /**\n   * multiply, divide, modulus\n   * @return {Node} node\n   * @private\n   */\n  function parseMultiplyDivide () {\n    var node, last, operators, name, fn;\n\n    node = parseUnary();\n    last = node;\n\n    operators = {\n      '*': 'multiply',\n      '.*': 'dotMultiply',\n      '/': 'divide',\n      './': 'dotDivide',\n      '%': 'mod',\n      'mod': 'mod'\n    };\n\n    while (true) {\n      if (operators.hasOwnProperty(token)) {\n        // explicit operators\n        name = token;\n        fn = operators[name];\n\n        getTokenSkipNewline();\n\n        last = parseUnary();\n        node = new OperatorNode(name, fn, [node, last]);\n      }\n      else if ((token_type == TOKENTYPE.SYMBOL) ||\n          (token == 'in' && (node && node.isConstantNode)) ||\n          (token_type == TOKENTYPE.NUMBER &&\n              !last.isConstantNode &&\n              (!last.isOperatorNode || last.op === '!')) ||\n          (token == '(')) {\n        // parse implicit multiplication\n        //\n        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'\n        // number:      implicit multiplication like '(2+3)2'\n        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'\n        last = parseUnary();\n        node = new OperatorNode('*', 'multiply', [node, last], true /*implicit*/);\n      }\n      else {\n        break;\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * Unary plus and minus, and logical and bitwise not\n   * @return {Node} node\n   * @private\n   */\n  function parseUnary () {\n    var name, params, fn;\n    var operators = {\n      '-': 'unaryMinus',\n      '+': 'unaryPlus',\n      '~': 'bitNot',\n      'not': 'not'\n    };\n\n    if (operators.hasOwnProperty(token)) {\n      fn = operators[token];\n      name = token;\n\n      getTokenSkipNewline();\n      params = [parseUnary()];\n\n      return new OperatorNode(name, fn, params);\n    }\n\n    return parsePow();\n  }\n\n  /**\n   * power\n   * Note: power operator is right associative\n   * @return {Node} node\n   * @private\n   */\n  function parsePow () {\n    var node, name, fn, params;\n\n    node = parseLeftHandOperators();\n\n    if (token == '^' || token == '.^') {\n      name = token;\n      fn = (name == '^') ? 'pow' : 'dotPow';\n\n      getTokenSkipNewline();\n      params = [node, parseUnary()]; // Go back to unary, we can have '2^-3'\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n\n  /**\n   * Left hand operators: factorial x!, transpose x'\n   * @return {Node} node\n   * @private\n   */\n  function parseLeftHandOperators ()  {\n    var node, operators, name, fn, params;\n\n    node = parseCustomNodes();\n\n    operators = {\n      '!': 'factorial',\n      '\\'': 'transpose'\n    };\n\n    while (operators.hasOwnProperty(token)) {\n      name = token;\n      fn = operators[name];\n\n      getToken();\n      params = [node];\n\n      node = new OperatorNode(name, fn, params);\n      node = parseAccessors(node);\n    }\n\n    return node;\n  }\n\n  /**\n   * Parse a custom node handler. A node handler can be used to process\n   * nodes in a custom way, for example for handling a plot.\n   *\n   * A handler must be passed as second argument of the parse function.\n   * - must extend math.expression.node.Node\n   * - must contain a function _compile(defs: Object) : string\n   * - must contain a function find(filter: Object) : Node[]\n   * - must contain a function toString() : string\n   * - the constructor is called with a single argument containing all parameters\n   *\n   * For example:\n   *\n   *     nodes = {\n   *       'plot': PlotHandler\n   *     };\n   *\n   * The constructor of the handler is called as:\n   *\n   *     node = new PlotHandler(params);\n   *\n   * The handler will be invoked when evaluating an expression like:\n   *\n   *     node = math.parse('plot(sin(x), x)', nodes);\n   *\n   * @return {Node} node\n   * @private\n   */\n  function parseCustomNodes () {\n    var params = [];\n\n    if (token_type == TOKENTYPE.SYMBOL && extra_nodes.hasOwnProperty(token)) {\n      var CustomNode = extra_nodes[token];\n\n      getToken();\n\n      // parse parameters\n      if (token == '(') {\n        params = [];\n\n        openParams();\n        getToken();\n\n        if (token != ')') {\n          params.push(parseAssignment());\n\n          // parse a list with parameters\n          while (token == ',') {\n            getToken();\n            params.push(parseAssignment());\n          }\n        }\n\n        if (token != ')') {\n          throw createSyntaxError('Parenthesis ) expected');\n        }\n        closeParams();\n        getToken();\n      }\n\n      // create a new custom node\n      //noinspection JSValidateTypes\n      return new CustomNode(params);\n    }\n\n    return parseSymbol();\n  }\n\n  /**\n   * parse symbols: functions, variables, constants, units\n   * @return {Node} node\n   * @private\n   */\n  function parseSymbol () {\n    var node, name;\n\n    if (token_type == TOKENTYPE.SYMBOL ||\n        (token_type == TOKENTYPE.DELIMITER && token in NAMED_DELIMITERS)) {\n      name = token;\n\n      getToken();\n\n      // parse function parameters and matrix index\n      node = new SymbolNode(name);\n      node = parseAccessors(node);\n      return node;\n    }\n\n    return parseString();\n  }\n\n  /**\n   * parse accessors:\n   * - function invocation in round brackets (...), for example sqrt(2)\n   * - index enclosed in square brackets [...], for example A[2,3]\n   * - dot notation for properties, like foo.bar\n   * @param {Node} node    Node on which to apply the parameters. If there\n   *                       are no parameters in the expression, the node\n   *                       itself is returned\n   * @param {string[]} [types]  Filter the types of notations\n   *                            can be ['(', '[', '.']\n   * @return {Node} node\n   * @private\n   */\n  function parseAccessors (node, types) {\n    var params;\n\n    while ((token == '(' || token == '[' || token == '.') &&\n        (!types || types.indexOf(token) !== -1)) {\n      params = [];\n\n      if (token == '(') {\n        if (node.isSymbolNode || node.isAccessorNode || node.isFunctionNode) {\n          // function invocation like fn(2, 3)\n          openParams();\n          getToken();\n\n          if (token != ')') {\n            params.push(parseAssignment());\n\n            // parse a list with parameters\n            while (token == ',') {\n              getToken();\n              params.push(parseAssignment());\n            }\n          }\n\n          if (token != ')') {\n            throw createSyntaxError('Parenthesis ) expected');\n          }\n          closeParams();\n          getToken();\n\n          node = new FunctionNode(node, params);\n        }\n        else {\n          // implicit multiplication like (2+3)(4+5)\n          // don't parse it here but let it be handled by parseMultiplyDivide\n          // with correct precedence\n          return node;\n        }\n      }\n      else if (token == '[') {\n        // index notation like variable[2, 3]\n        openParams();\n        getToken();\n\n        if (token != ']') {\n          params.push(parseAssignment());\n\n          // parse a list with parameters\n          while (token == ',') {\n            getToken();\n            params.push(parseAssignment());\n          }\n        }\n\n        if (token != ']') {\n          throw createSyntaxError('Parenthesis ] expected');\n        }\n        closeParams();\n        getToken();\n\n        node = new AccessorNode(node, new IndexNode(params));\n      }\n      else {\n        // dot notation like variable.prop\n        getToken();\n\n        if (token_type != TOKENTYPE.SYMBOL) {\n          throw createSyntaxError('Property name expected after dot');\n        }\n        params.push(new ConstantNode(token));\n        getToken();\n\n        var dotNotation = true;\n        node = new AccessorNode(node, new IndexNode(params, dotNotation));\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * parse a string.\n   * A string is enclosed by double quotes\n   * @return {Node} node\n   * @private\n   */\n  function parseString () {\n    var node, str;\n\n    if (token == '\"') {\n      str = parseStringToken();\n\n      // create constant\n      node = new ConstantNode(str, 'string');\n\n      // parse index parameters\n      node = parseAccessors(node);\n\n      return node;\n    }\n\n    return parseMatrix();\n  }\n\n  /**\n   * Parse a string surrounded by double quotes \"...\"\n   * @return {string}\n   */\n  function parseStringToken () {\n    var str = '';\n\n    while (c != '' && c != '\\\"') {\n      if (c == '\\\\') {\n        // escape character\n        str += c;\n        next();\n      }\n\n      str += c;\n      next();\n    }\n\n    getToken();\n    if (token != '\"') {\n      throw createSyntaxError('End of string \" expected');\n    }\n    getToken();\n\n    return str;\n  }\n\n  /**\n   * parse the matrix\n   * @return {Node} node\n   * @private\n   */\n  function parseMatrix () {\n    var array, params, rows, cols;\n\n    if (token == '[') {\n      // matrix [...]\n      openParams();\n      getToken();\n\n      if (token != ']') {\n        // this is a non-empty matrix\n        var row = parseRow();\n\n        if (token == ';') {\n          // 2 dimensional array\n          rows = 1;\n          params = [row];\n\n          // the rows of the matrix are separated by dot-comma's\n          while (token == ';') {\n            getToken();\n\n            params[rows] = parseRow();\n            rows++;\n          }\n\n          if (token != ']') {\n            throw createSyntaxError('End of matrix ] expected');\n          }\n          closeParams();\n          getToken();\n\n          // check if the number of columns matches in all rows\n          cols = params[0].items.length;\n          for (var r = 1; r < rows; r++) {\n            if (params[r].items.length != cols) {\n              throw createError('Column dimensions mismatch ' +\n                  '(' + params[r].items.length + ' != ' + cols + ')');\n            }\n          }\n\n          array = new ArrayNode(params);\n        }\n        else {\n          // 1 dimensional vector\n          if (token != ']') {\n            throw createSyntaxError('End of matrix ] expected');\n          }\n          closeParams();\n          getToken();\n\n          array = row;\n        }\n      }\n      else {\n        // this is an empty matrix \"[ ]\"\n        closeParams();\n        getToken();\n        array = new ArrayNode([]);\n      }\n\n      return parseAccessors(array);\n    }\n\n    return parseObject();\n  }\n\n  /**\n   * Parse a single comma-separated row from a matrix, like 'a, b, c'\n   * @return {ArrayNode} node\n   */\n  function parseRow () {\n    var params = [parseAssignment()];\n    var len = 1;\n\n    while (token == ',') {\n      getToken();\n\n      // parse expression\n      params[len] = parseAssignment();\n      len++;\n    }\n\n    return new ArrayNode(params);\n  }\n\n  /**\n   * parse an object, enclosed in angle brackets{...}, for example {value: 2}\n   * @return {Node} node\n   * @private\n   */\n  function parseObject () {\n    if (token == '{') {\n      var key;\n\n      var properties = {};\n      do {\n        getToken();\n\n        if (token != '}') {\n          // parse key\n          if (token == '\"') {\n            key = parseStringToken();\n          }\n          else if (token_type == TOKENTYPE.SYMBOL) {\n            key = token;\n            getToken();\n          }\n          else {\n            throw createSyntaxError('Symbol or string expected as object key');\n          }\n\n          // parse key/value separator\n          if (token != ':') {\n            throw createSyntaxError('Colon : expected after object key');\n          }\n          getToken();\n\n          // parse key\n          properties[key] = parseAssignment();\n        }\n      }\n      while (token == ',');\n\n      if (token != '}') {\n        throw createSyntaxError('Comma , or bracket } expected after object value');\n      }\n      getToken();\n\n      var node = new ObjectNode(properties);\n\n      // parse index parameters\n      node = parseAccessors(node);\n\n      return node;\n    }\n\n    return parseNumber();\n  }\n\n  /**\n   * parse a number\n   * @return {Node} node\n   * @private\n   */\n  function parseNumber () {\n    var number;\n\n    if (token_type == TOKENTYPE.NUMBER) {\n      // this is a number\n      number = token;\n      getToken();\n\n      return new ConstantNode(number, 'number');\n    }\n\n    return parseParentheses();\n  }\n\n  /**\n   * parentheses\n   * @return {Node} node\n   * @private\n   */\n  function parseParentheses () {\n    var node;\n\n    // check if it is a parenthesized expression\n    if (token == '(') {\n      // parentheses (...)\n      openParams();\n      getToken();\n\n      node = parseAssignment(); // start again\n\n      if (token != ')') {\n        throw createSyntaxError('Parenthesis ) expected');\n      }\n      closeParams();\n      getToken();\n\n      node = new ParenthesisNode(node);\n      node = parseAccessors(node);\n      return node;\n    }\n\n    return parseEnd();\n  }\n\n  /**\n   * Evaluated when the expression is not yet ended but expected to end\n   * @return {Node} res\n   * @private\n   */\n  function parseEnd () {\n    if (token == '') {\n      // syntax error or unexpected end of expression\n      throw createSyntaxError('Unexpected end of expression');\n    } else if (token === \"'\") {\n      throw createSyntaxError('Value expected. Note: strings must be enclosed by double quotes');\n    } else {\n      throw createSyntaxError('Value expected');\n    }\n  }\n\n  /**\n   * Shortcut for getting the current row value (one based)\n   * Returns the line of the currently handled expression\n   * @private\n   */\n  /* TODO: implement keeping track on the row number\n  function row () {\n    return null;\n  }\n  */\n\n  /**\n   * Shortcut for getting the current col value (one based)\n   * Returns the column (position) where the last token starts\n   * @private\n   */\n  function col () {\n    return index - token.length + 1;\n  }\n\n  /**\n   * Create an error\n   * @param {string} message\n   * @return {SyntaxError} instantiated error\n   * @private\n   */\n  function createSyntaxError (message) {\n    var c = col();\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error['char'] = c;\n\n    return error;\n  }\n\n  /**\n   * Create an error\n   * @param {string} message\n   * @return {Error} instantiated error\n   * @private\n   */\n  function createError (message) {\n    var c = col();\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error['char'] = c;\n\n    return error;\n  }\n\n  return parse;\n}\n\nexports.name = 'parse';\nexports.path = 'expression';\nexports.factory = factory;\n\n},{\"../error/ArgumentsError\":10,\"../utils/collection/deepMap\":523,\"./node/AccessorNode\":217,\"./node/ArrayNode\":218,\"./node/AssignmentNode\":219,\"./node/BlockNode\":220,\"./node/ConditionalNode\":221,\"./node/ConstantNode\":222,\"./node/FunctionAssignmentNode\":223,\"./node/FunctionNode\":224,\"./node/IndexNode\":225,\"./node/ObjectNode\":227,\"./node/OperatorNode\":228,\"./node/ParenthesisNode\":229,\"./node/RangeNode\":230,\"./node/SymbolNode\":231}],240:[function(require,module,exports){\n'use strict';\n\nvar errorTransform = require('./error.transform').transform;\n\n/**\n * Attach a transform function to math.range\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function concat\n * from one-based to zero based\n */\nfunction factory (type, config, load, typed) {\n  var concat = load(require('../../function/matrix/concat'));\n\n  // @see: comment of concat itself\n return typed('concat', {\n    '...any': function (args) {\n      // change last argument from one-based to zero-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n      if (typeof last === 'number') {\n        args[lastIndex] = last - 1;\n      }\n      else if (last && last.isBigNumber === true) {\n        args[lastIndex] = last.minus(1);\n      }\n\n      try {\n        return concat.apply(null, args);\n      }\n      catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}\n\nexports.name = 'concat';\nexports.path = 'expression.transform';\nexports.factory = factory;\n\n},{\"../../function/matrix/concat\":343,\"./error.transform\":241}],241:[function(require,module,exports){\nvar IndexError = require('../../error/IndexError');\n\n/**\n * Transform zero-based indices to one-based indices in errors\n * @param {Error} err\n * @returns {Error} Returns the transformed error\n */\nexports.transform = function (err) {\n  if (err && err.isIndexError) {\n    return new IndexError(\n        err.index + 1,\n        err.min + 1,\n        err.max !== undefined ? err.max + 1 : undefined);\n  }\n\n  return err;\n};\n\n},{\"../../error/IndexError\":12}],242:[function(require,module,exports){\n'use strict';\n\n/**\n * Attach a transform function to math.filter\n * Adds a property transform containing the transform function.\n *\n * This transform adds support for equations as test function for math.filter,\n * so you can do something like 'filter([3, -2, 5], x > 0)'.\n */\nfunction factory (type, config, load, typed) {\n  var filter = load(require('../../function/matrix/filter'));\n  var SymbolNode = load(require('../node/SymbolNode'));\n\n  function filterTransform(args, math, scope) {\n    var x, test;\n\n    if (args[0]) {\n      x = args[0].compile().eval(scope);\n    }\n\n    if (args[1]) {\n      if (args[1] && args[1].isSymbolNode) {\n        // a function pointer, like filter([3, -2, 5], myTestFunction);\n        test = args[1].compile().eval(scope);\n      }\n      else {\n        // an equation like filter([3, -2, 5], x > 0)\n\n        // find an undefined symbol\n        var _scope = scope || {};\n        var symbol = args[1]\n            .filter(function (node) {\n              return (node && node.isSymbolNode) &&\n                  !(node.name in math) &&\n                  !(node.name in _scope);\n            })[0];\n\n        // create a test function for this equation\n        var sub = Object.create(_scope);\n        var eq = args[1].compile();\n        if (symbol) {\n          var name = symbol.name;\n          test = function (x) {\n            sub[name] = x;\n            return eq.eval(sub);\n          }\n        }\n        else {\n          throw new Error('No undefined variable found in filter equation');\n        }\n      }\n    }\n\n    return filter(x, test);\n  }\n\n  filterTransform.rawArgs = true;\n\n  return filterTransform;\n}\n\nexports.name = 'filter';\nexports.path = 'expression.transform';\nexports.factory = factory;\n\n},{\"../../function/matrix/filter\":349,\"../node/SymbolNode\":231}],243:[function(require,module,exports){\n'use strict';\n\nvar maxArgumentCount = require('../../utils/function').maxArgumentCount;\n\n/**\n * Attach a transform function to math.forEach\n * Adds a property transform containing the transform function.\n *\n * This transform creates a one-based index instead of a zero-based index\n */\nfunction factory (type, config, load, typed) {\n  var forEach = load(require('../../function/matrix/forEach'));\n\n  return typed('forEach', {\n    'Array | Matrix, function': function (array, callback) {\n      // figure out what number of arguments the callback function expects\n      var args = maxArgumentCount(callback);\n\n      var recurse = function (value, index) {\n        if (Array.isArray(value)) {\n          value.forEach(function (child, i) {\n            // we create a copy of the index array and append the new index value\n            recurse(child, index.concat(i + 1)); // one based index, hence i+1\n          });\n        }\n        else {\n          // invoke the callback function with the right number of arguments\n          if (args === 1) {\n            callback(value);\n          }\n          else if (args === 2) {\n            callback(value, index);\n          }\n          else { // 3 or -1\n            callback(value, index, array);\n          }\n        }\n      };\n      recurse(array.valueOf(), []); // pass Array\n    }\n  });\n}\n\nexports.name = 'forEach';\nexports.path = 'expression.transform';\nexports.factory = factory;\n\n},{\"../../function/matrix/forEach\":351,\"../../utils/function\":529}],244:[function(require,module,exports){\nmodule.exports = [\n  require('./concat.transform'),\n  require('./filter.transform'),\n  require('./forEach.transform'),\n  require('./index.transform'),\n  require('./map.transform'),\n  require('./max.transform'),\n  require('./mean.transform'),\n  require('./min.transform'),\n  require('./range.transform'),\n  require('./subset.transform')\n];\n\n},{\"./concat.transform\":240,\"./filter.transform\":242,\"./forEach.transform\":243,\"./index.transform\":245,\"./map.transform\":246,\"./max.transform\":247,\"./mean.transform\":248,\"./min.transform\":249,\"./range.transform\":250,\"./subset.transform\":251}],245:[function(require,module,exports){\n'use strict';\n\n/**\n * Attach a transform function to math.index\n * Adds a property transform containing the transform function.\n *\n * This transform creates a one-based index instead of a zero-based index\n */\nfunction factory (type, config, load) {\n\n  return function indexTransform() {\n    var args = [];\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n\n      // change from one-based to zero based, and convert BigNumber to number\n      if (arg && arg.isRange === true) {\n        arg.start--;\n        arg.end -= (arg.step > 0 ? 0 : 2);\n      }\n      else if (arg && arg.isSet === true) {\n        arg = arg.map(function (v) { return v - 1; });\n      }\n      else if (arg && (arg.isArray === true || arg.isMatrix)) {\n        arg = arg.map(function (v) { return v - 1; });\n      }\n      else if (typeof arg === 'number') {\n        arg--;\n      }\n      else if (arg && arg.isBigNumber === true) {\n        arg = arg.toNumber() - 1;\n      }\n      else if (typeof arg === 'string') {\n        // leave as is\n      }\n      else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n\n      args[i] = arg;\n    }\n\n    var res = new type.Index();\n    type.Index.apply(res, args);\n    return res;\n  };\n}\n\nexports.name = 'index';\nexports.path = 'expression.transform';\nexports.factory = factory;\n\n},{}],246:[function(require,module,exports){\n'use strict';\n\nvar maxArgumentCount = require('../../utils/function').maxArgumentCount;\n\n/**\n * Attach a transform function to math.map\n * Adds a property transform containing the transform function.\n *\n * This transform creates a one-based index instead of a zero-based index\n */\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  return typed('map', {\n    'Array, function': function (x, callback) {\n      return _map(x, callback, x);\n    },\n\n    'Matrix, function': function (x, callback) {\n      return matrix(_map(x.valueOf(), callback, x));\n    }\n  });\n}\n\n/**\n * Map for a multi dimensional array. One-based indexes\n * @param {Array} array\n * @param {function} callback\n * @param {Array} orig\n * @return {Array}\n * @private\n */\nfunction _map (array, callback, orig) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1\n      });\n    }\n    else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        return callback(value);\n      }\n      else if (args === 2) {\n        return callback(value, index);\n      }\n      else { // 3 or -1\n        return callback(value, index, orig);\n      }\n    }\n  }\n\n  return recurse(array, []);\n}\n\nexports.name = 'map';\nexports.path = 'expression.transform';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/function\":529}],247:[function(require,module,exports){\n'use strict';\n\nvar errorTransform = require('./error.transform').transform;\nvar isCollection = require('../../utils/collection/isCollection');\n\n/**\n * Attach a transform function to math.max\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function max\n * from one-based to zero based\n */\nfunction factory (type, config, load, typed) {\n  var max = load(require('../../function/statistics/max'));\n\n  return typed('max', {\n    '...any': function (args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length == 2 && isCollection(args[0])) {\n        var dim = args[1];\n        if (typeof dim === 'number') {\n          args[1] = dim - 1;\n        }\n        else if (dim && dim.isBigNumber === true) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return max.apply(null, args);\n      }\n      catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}\n\nexports.name = 'max';\nexports.path = 'expression.transform';\nexports.factory = factory;\n\n},{\"../../function/statistics/max\":406,\"../../utils/collection/isCollection\":524,\"./error.transform\":241}],248:[function(require,module,exports){\n'use strict';\n\nvar errorTransform = require('./error.transform').transform;\nvar isCollection = require('../../utils/collection/isCollection');\n\n/**\n * Attach a transform function to math.mean\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function mean\n * from one-based to zero based\n */\nfunction factory (type, config, load, typed) {\n  var mean = load(require('../../function/statistics/mean'));\n\n  return typed('mean', {\n    '...any': function (args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length == 2 && isCollection(args[0])) {\n        var dim = args[1];\n        if (typeof dim === 'number') {\n          args[1] = dim - 1;\n        }\n        else if (dim && dim.isBigNumber === true) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return mean.apply(null, args);\n      }\n      catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}\n\nexports.name = 'mean';\nexports.path = 'expression.transform';\nexports.factory = factory;\n\n},{\"../../function/statistics/mean\":407,\"../../utils/collection/isCollection\":524,\"./error.transform\":241}],249:[function(require,module,exports){\n'use strict';\n\nvar errorTransform = require('./error.transform').transform;\nvar isCollection = require('../../utils/collection/isCollection');\n\n/**\n * Attach a transform function to math.min\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function min\n * from one-based to zero based\n */\nfunction factory (type, config, load, typed) {\n  var min = load(require('../../function/statistics/min'));\n\n  return typed('min', {\n    '...any': function (args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length == 2 && isCollection(args[0])) {\n        var dim = args[1];\n        if (typeof dim === 'number') {\n          args[1] = dim - 1;\n        }\n        else if (dim && dim.isBigNumber === true) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return min.apply(null, args);\n      }\n      catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}\n\nexports.name = 'min';\nexports.path = 'expression.transform';\nexports.factory = factory;\n\n},{\"../../function/statistics/min\":409,\"../../utils/collection/isCollection\":524,\"./error.transform\":241}],250:[function(require,module,exports){\n'use strict';\n\n/**\n * Attach a transform function to math.range\n * Adds a property transform containing the transform function.\n *\n * This transform creates a range which includes the end value\n */\nfunction factory (type, config, load, typed) {\n  var range = load(require('../../function/matrix/range'));\n\n  return typed('range', {\n    '...any': function (args) {\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n      if (typeof last !== 'boolean') {\n        // append a parameter includeEnd=true\n        args.push(true);\n      }\n\n      return range.apply(null, args);\n    }\n  });\n}\n\nexports.name = 'range';\nexports.path = 'expression.transform';\nexports.factory = factory;\n\n},{\"../../function/matrix/range\":358}],251:[function(require,module,exports){\n'use strict';\n\nvar errorTransform = require('./error.transform').transform;\n\n/**\n * Attach a transform function to math.subset\n * Adds a property transform containing the transform function.\n *\n * This transform creates a range which includes the end value\n */\nfunction factory (type, config, load, typed) {\n  var subset = load(require('../../function/matrix/subset'));\n\n  return typed('subset', {\n    '...any': function (args) {\n      try {\n        return subset.apply(null, args);\n      }\n      catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}\n\nexports.name = 'subset';\nexports.path = 'expression.transform';\nexports.factory = factory;\n\n},{\"../../function/matrix/subset\":364,\"./error.transform\":241}],252:[function(require,module,exports){\n'use strict';\n\nvar util = require('../../../utils/index');\n\nvar object = util.object;\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  var abs = load(require('../../arithmetic/abs'));\n  var addScalar = load(require('../../arithmetic/addScalar'));\n  var divideScalar = load(require('../../arithmetic/divideScalar'));\n  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));\n  var subtract = load(require('../../arithmetic/subtract'));\n  var larger = load(require('../../relational/larger'));\n  var equalScalar = load(require('../../relational/equalScalar'));\n  var unaryMinus = load(require('../../arithmetic/unaryMinus'));\n  \n  var SparseMatrix = type.SparseMatrix;\n  var DenseMatrix = type.DenseMatrix;\n  var Spa = type.Spa;\n  \n  /**\n   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a\n   * row permutation vector `p` where `A[p,:] = L * U`\n   *\n   * Syntax:\n   *\n   *    math.lup(A);\n   *\n   * Example:\n   *\n   *    var m = [[2, 1], [1, 4]];\n   *    var r = math.lup(m);\n   *    // r = {\n   *    //   L: [[1, 0], [0.5, 1]],\n   *    //   U: [[2, 1], [0, 3.5]],\n   *    //   P: [0, 1]\n   *    // }\n   *\n   * See also:\n   *\n   *    slu, lsolve, lusolve, usolve\n   *\n   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.\n   *\n   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.\n   */\n  var lup = typed('lup', {\n\n    'DenseMatrix': function (m) {\n      return _denseLUP(m);\n    },\n    \n    'SparseMatrix': function (m) {\n      return _sparseLUP(m);\n    },\n\n    'Array': function (a) {\n      // create dense matrix from array\n      var m = matrix(a);\n      // lup, use matrix implementation\n      var r = _denseLUP(m);\n      // result\n      return {\n        L: r.L.valueOf(),\n        U: r.U.valueOf(),\n        p: r.p\n      };\n    }\n  });\n\n  var _denseLUP = function (m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // minimum rows and columns\n    var n = Math.min(rows, columns);\n    // matrix array, clone original data\n    var data = object.clone(m._data);\n    // l matrix arrays\n    var ldata = [];\n    var lsize = [rows, n];\n    // u matrix arrays\n    var udata = [];\n    var usize = [n, columns];\n    // vars\n    var i, j, k;\n    // permutation vector    \n    var p = [];\n    for (i = 0; i < rows; i++)\n      p[i] = i;    \n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // skip first column in upper triangular matrix\n      if (j > 0) {\n        // loop rows\n        for (i = 0; i < rows; i++) {\n          // min i,j\n          var min = Math.min(i, j);\n          // v[i, j]\n          var s = 0;\n          // loop up to min\n          for (k = 0; k < min; k++) {\n            // s = l[i, k] - data[k, j]\n            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));\n          }\n          data[i][j] = subtract(data[i][j], s);\n        }\n      }      \n      // row with larger value in cvector, row >= j\n      var pi = j;\n      var pabsv = 0;\n      var vjj = 0;\n      // loop rows\n      for (i = j; i < rows; i++) {\n        // data @ i, j\n        var v = data[i][j];\n        // absolute value\n        var absv = abs(v);\n        // value is greater than pivote value\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = i;\n          // update max value\n          pabsv = absv;\n          // value @ [j, j]\n          vjj = v;\n        }\n      }\n      // swap rows (j <-> pi)\n      if (j !== pi) {\n        // swap values j <-> pi in p\n        p[j] = [p[pi], p[pi] = p[j]][0];\n        // swap j <-> pi in data\n        DenseMatrix._swapRows(j, pi, data);\n      }\n      // check column is in lower triangular matrix\n      if (j < rows) {\n        // loop rows (lower triangular matrix)\n        for (i = j + 1; i < rows; i++) {\n          // value @ i, j\n          var vij = data[i][j];\n          if (!equalScalar(vij, 0)) {\n            // update data\n            data[i][j] = divideScalar(data[i][j], vjj);\n          }\n        }\n      }\n    }\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // initialize row in arrays\n        if (j === 0) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i] = [];\n          }\n          // L\n          ldata[i] = [];\n        }\n        // check we are in the upper triangular matrix\n        if (i < j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          }\n          // check column exists in lower triangular matrix\n          if (j < rows) {\n            // L\n            ldata[i][j] = 0;\n          }\n          continue;\n        }\n        // diagonal value\n        if (i === j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          }\n          // check column exists in lower triangular matrix\n          if (j < rows) {\n            // L\n            ldata[i][j] = 1;\n          }\n          continue;\n        }\n        // check row exists in upper triangular matrix\n        if (i < columns) {\n          // U\n          udata[i][j] = 0;\n        }\n        // check column exists in lower triangular matrix\n        if (j < rows) {\n          // L\n          ldata[i][j] = data[i][j];\n        }\n      }\n    }\n    // l matrix\n    var l =  new DenseMatrix({\n      data: ldata,\n      size: lsize\n    });\n    // u matrix\n    var u =  new DenseMatrix({\n      data: udata,\n      size: usize\n    });\n    // p vector\n    var pv = [];\n    for (i = 0, n = p.length; i < n; i++)\n      pv[p[i]] = i;\n    // return matrices\n    return { \n      L: l, \n      U: u, \n      p: pv, \n      toString: function () {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  };\n  \n  var _sparseLUP = function (m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // minimum rows and columns\n    var n = Math.min(rows, columns);\n    // matrix arrays (will not be modified, thanks to permutation vector)\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // l matrix arrays\n    var lvalues = [];\n    var lindex = [];\n    var lptr = [];\n    var lsize = [rows, n];\n    // u matrix arrays\n    var uvalues = [];\n    var uindex = [];\n    var uptr = [];\n    var usize = [n, columns];\n    // vars\n    var i, j, k;\n    // permutation vectors, (current index -> original index) and (original index -> current index)\n    var pv_co = [];\n    var pv_oc = [];\n    for (i = 0; i < rows; i++) {\n      pv_co[i] = i;\n      pv_oc[i] = i;\n    }\n    // swap indices in permutation vectors (condition x < y)!\n    var swapIndeces = function (x, y) {      \n      // find pv indeces getting data from x and y\n      var kx = pv_oc[x];\n      var ky = pv_oc[y];\n      // update permutation vector current -> original\n      pv_co[kx] = y;\n      pv_co[ky] = x;\n      // update permutation vector original -> current\n      pv_oc[x] = ky;\n      pv_oc[y] = kx;\n    };\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // sparse accumulator\n      var spa = new Spa();            \n      // check lower triangular matrix has a value @ column j\n      if (j < rows) {\n        // update ptr\n        lptr.push(lvalues.length);\n        // first value in j column for lower triangular matrix\n        lvalues.push(1);\n        lindex.push(j);\n      }\n      // update ptr\n      uptr.push(uvalues.length);\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // copy column j into sparse accumulator\n      for (k = k0; k < k1; k++) {\n        // row\n        i = index[k];\n        // copy column values into sparse accumulator (use permutation vector)\n        spa.set(pv_co[i], values[k]);\n      }\n      // skip first column in upper triangular matrix\n      if (j > 0) {\n        // loop rows in column j (above diagonal)\n        spa.forEach(0, j - 1, function (k, vkj) {\n          // loop rows in column k (L)\n          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {\n            // check row is below k\n            if (i > k) {\n              // update spa value\n              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));\n            }\n          });\n        });        \n      }\n      // row with larger value in spa, row >= j\n      var pi = j;\n      var vjj = spa.get(j);\n      var pabsv = abs(vjj);      \n      // loop values in spa (order by row, below diagonal)\n      spa.forEach(j + 1, rows - 1, function (x, v) {\n        // absolute value\n        var absv = abs(v);\n        // value is greater than pivote value\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = x;\n          // update max value\n          pabsv = absv;\n          // value @ [j, j]\n          vjj = v;\n        }\n      });\n      // swap rows (j <-> pi)\n      if (j !== pi) {\n        // swap values j <-> pi in L\n        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr);\n        // swap values j <-> pi in U\n        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr);\n        // swap values in spa\n        spa.swap(j, pi);\n        // update permutation vector (swap values @ j, pi)\n        swapIndeces(j, pi);\n      }\n      // loop values in spa (order by row)\n      spa.forEach(0, rows - 1, function (x, v) {\n        // check we are above diagonal\n        if (x <= j) {\n          // update upper triangular matrix\n          uvalues.push(v);\n          uindex.push(x);\n        }\n        else {\n          // update value\n          v = divideScalar(v, vjj);\n          // check value is non zero\n          if (!equalScalar(v, 0)) {\n            // update lower triangular matrix\n            lvalues.push(v);\n            lindex.push(x);\n          }\n        }\n      });\n    }\n    // update ptrs\n    uptr.push(uvalues.length);\n    lptr.push(lvalues.length);\n\n    // return matrices\n    return {\n      L: new SparseMatrix({\n        values: lvalues,\n        index: lindex,\n        ptr: lptr,\n        size: lsize\n      }), \n      U: new SparseMatrix({\n        values: uvalues,\n        index: uindex,\n        ptr: uptr,\n        size: usize\n      }),\n      p: pv_co,\n      toString: function () {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  };\n  \n  return lup;\n}\n\nexports.name = 'lup';\nexports.factory = factory;\n\n},{\"../../../type/matrix/function/matrix\":482,\"../../../utils/index\":530,\"../../arithmetic/abs\":282,\"../../arithmetic/addScalar\":284,\"../../arithmetic/divideScalar\":289,\"../../arithmetic/multiplyScalar\":304,\"../../arithmetic/subtract\":312,\"../../arithmetic/unaryMinus\":313,\"../../relational/equalScalar\":384,\"../../relational/larger\":386}],253:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  var zeros = load(require('../../matrix/zeros'));\n  var eye = load(require('../../matrix/eye'));\n  var clone = load(require('../../utils/clone'));\n  \n  var isZero = load(require('../../utils/isZero'));\n  var isPositive = load(require('../../utils/isPositive'));\n  var unequal = load(require('../../relational/unequal'));\n    \n  var abs = load(require('../../arithmetic/abs'));\n  var sign = load(require('../../arithmetic/sign'));\n  var sqrt = load(require('../../arithmetic/sqrt'));\n  var conj = load(require('../../complex/conj'));\n  \n  var unaryMinus = load(require('../../arithmetic/unaryMinus')); \n  var addScalar = load(require('../../arithmetic/addScalar'));  \n  var divideScalar = load(require('../../arithmetic/divideScalar'));\n  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));  \n  var subtract = load(require('../../arithmetic/subtract'));\n    \n  \n  /**\n   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in \n   * two matrices (`Q`, `R`) where `Q` is an \n   * orthogonal matrix and `R` is an upper triangular matrix.\n   *\n   * Syntax:\n   *\n   *    math.qr(A);\n   *\n   * Example:\n   *\n   *    var m = [\n   *      [1, -1,  4],\n   *      [1,  4, -2],\n   *      [1,  4,  2],\n   *      [1,  -1, 0]\n   *    ];\n   *    var result = math.qr(m);\n   *    // r = {\n   *    //   Q: [\n   *    //     [0.5, -0.5,   0.5],\n   *    //     [0.5,  0.5,  -0.5],\n   *    //     [0.5,  0.5,   0.5],\n   *    //     [0.5, -0.5,  -0.5],\n   *    //   ],\n   *    //   R: [\n   *    //     [2, 3,  2],\n   *    //     [0, 5, -2],\n   *    //     [0, 0,  4],\n   *    //     [0, 0,  0]\n   *    //   ]\n   *    // }\n   *\n   * See also:\n   *\n   *    lu\n   *\n   * @param {Matrix | Array} A    A two dimensional matrix or array \n   * for which to get the QR decomposition.\n   *\n   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal\n   * matrix and R: the upper triangular matrix\n   */\n  var qr = typed('qr', {\n\n    'DenseMatrix': function (m) {\n      return _denseQR(m);\n    },\n    \n    'SparseMatrix': function (m) {\n      return _sparseQR(m);\n    },\n\n    'Array': function (a) {\n      // create dense matrix from array\n      var m = matrix(a);\n      // lup, use matrix implementation\n      var r = _denseQR(m);\n      // result\n      return {\n        Q: r.Q.valueOf(),\n        R: r.R.valueOf()\n      };\n    }\n  });\n\n  var _denseQR = function (m) {\n    \n    // rows & columns (m x n)\n    var rows = m._size[0]; // m\n    var cols = m._size[1]; // n\n            \n    var Q = eye([rows], 'dense');\n    var Qdata = Q._data;\n    \n    var R = m.clone();\n    var Rdata = R._data;\n    \n    // vars\n    var i, j, k;\n        \n    var w = zeros([rows], '');\n    \n    for (k = 0; k < Math.min(cols, rows); ++k) {\n      \n      /*\n       * **k-th Household matrix**\n       *\n       * The matrix I - 2*v*transpose(v)\n       * x     = first column of A\n       * x1    = first element of x\n       * alpha = x1 / |x1| * |x|\n       * e1    = tranpose([1, 0, 0, ...])\n       * u     = x - alpha * e1\n       * v     = u / |u|\n       *\n       * Household matrix = I - 2 * v * tranpose(v)\n       *\n       *  * Initially Q = I and R = A.\n       *  * Household matrix is a reflection in a plane normal to v which \n       *    will zero out all but the top right element in R.\n       *  * Appplying reflection to both Q and R will not change product.\n       *  * Repeat this process on the (1,1) minor to get R as an upper \n       *    triangular matrix.\n       *  * Reflections leave the magnitude of the columns of Q unchanged \n       *    so Q remains othoganal.\n       *\n       */  \n      \n      var pivot = Rdata[k][k];          \n      var sgn = unaryMinus(sign(pivot));\n      var conjSgn = conj(sgn);\n      \n      var alphaSquared = 0;\n\n      for(i = k; i < rows; i++) {\n        alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));        \n      }\n      \n      var alpha = multiplyScalar(sgn, sqrt(alphaSquared));\n      \n      \n      if (!isZero(alpha)) {\n          \n        // first element in vector u\n        var u1 = subtract(pivot, alpha);\n        \n        // w = v * u1 / |u|    (only elements k to (rows-1) are used)    \n        w[k] = 1;\n        \n        for (i = k+1; i < rows; i++) {\n          w[i] = divideScalar(Rdata[i][k], u1);\n        }        \n         \n        // tau = - conj(u1 / alpha)\n        var tau = unaryMinus(conj(divideScalar(u1, alpha)));\n        \n        var s;\n        \n        /*\n         * tau and w have been choosen so that\n         * \n         * 2 * v * tranpose(v) = tau * w * tranpose(w)\n         */\n         \n        /*\n         * -- calculate R = R - tau * w * tranpose(w) * R --\n         * Only do calculation with rows k to (rows-1)\n         * Additionally columns 0 to (k-1) will not be changed by this\n         *   multiplication so do not bother recalculating them\n         */\n        for (j = k; j < cols; j++) {\n          s = 0.0;\n          \n          // calculate jth element of [tranpose(w) * R]\n          for (i = k; i < rows; i++) {\n            s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));\n          }\n          \n          // calculate the jth element of [tau * transpose(w) * R]\n          s = multiplyScalar(s, tau);\n          \n          for (i = k; i < rows; i++) {\n            Rdata[i][j] = multiplyScalar(\n              subtract(Rdata[i][j], multiplyScalar(w[i], s)), \n              conjSgn\n            );            \n          }          \n        }\n        /*\n         * -- calculate Q = Q - tau * Q * w * transpose(w) --\n         * Q is a square matrix (rows x rows)\n         * Only do calculation with columns k to (rows-1)\n         * Additionally rows 0 to (k-1) will not be changed by this\n         *   multiplication so do not bother recalculating them\n         */\n        for (i = 0; i < rows; i++) {\n          s = 0.0;\n          \n          // calculate ith element of [Q * w]\n          for (j = k; j < rows; j++) {\n            s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));\n          }\n          \n          // calculate the ith element of [tau * Q * w]\n          s = multiplyScalar(s, tau);\n          \n          for (j = k; j < rows; ++j) {\n            Qdata[i][j] = divideScalar(\n              subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), \n              conjSgn\n            );\n          }\n          \n        }\n      }\n      \n    }\n    \n    // coerse almost zero elements to zero\n    // TODO I feel uneasy just zeroing these values\n    for (i = 0; i < rows; ++i) {\n      for (j = 0; j < i && j < cols; ++j) {\n        if (unequal(0, divideScalar(Rdata[i][j], 1e5))) {\n          throw new Error('math.qr(): unknown error - ' + \n           'R is not lower triangular (element (' + \n            i + ', ' + j + ')  = ' + Rdata[i][j] + ')'\n          );\n        }\n        Rdata[i][j] = multiplyScalar(Rdata[i][j], 0);\n      }\n    }\n    \n    // return matrices\n    return { \n      Q: Q,\n      R: R,\n      toString: function () {\n        return 'Q: ' + this.Q.toString() + '\\nR: ' + this.R.toString();\n      }\n    };\n  };\n  \n  var _sparseQR = function (m) {\n    \n    throw new Error('qr not implemented for sparse matrices yet');\n  \n  };\n  \n  return qr;\n}\n\nexports.name = 'qr';\nexports.factory = factory;\n\n},{\"../../../type/matrix/function/matrix\":482,\"../../arithmetic/abs\":282,\"../../arithmetic/addScalar\":284,\"../../arithmetic/divideScalar\":289,\"../../arithmetic/multiplyScalar\":304,\"../../arithmetic/sign\":309,\"../../arithmetic/sqrt\":310,\"../../arithmetic/subtract\":312,\"../../arithmetic/unaryMinus\":313,\"../../complex/conj\":330,\"../../matrix/eye\":348,\"../../matrix/zeros\":367,\"../../relational/unequal\":390,\"../../utils/clone\":447,\"../../utils/isPositive\":453,\"../../utils/isZero\":455}],254:[function(require,module,exports){\n'use strict';\n\nvar util = require('../../../utils/index');\n\nvar number = util.number,\n    \n    isInteger = number.isInteger;\n\nfunction factory (type, config, load, typed) {\n\n  var cs_sqr = load(require('../../algebra/sparse/cs_sqr'));\n  var cs_lu = load(require('../../algebra/sparse/cs_lu'));\n\n  /**\n   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where\n   *\n   * `P * A * Q = L * U`\n   *\n   * Syntax:\n   *\n   *    math.slu(A, order, threshold);\n   *\n   * See also:\n   *\n   *    lup, lsolve, usolve, lusolve\n   *\n   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.\n   * @param {Number}       order          The Symbolic Ordering and Analysis order:\n   *                                       0 - Natural ordering, no permutation vector q is returned\n   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'\n   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'. \n   *                                           This is appropriatefor LU factorization of unsymmetric matrices.\n   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.\n   *                                           A dense row is a row with more than 10*sqr(columns) entries.\n   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)\n   *\n   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.\n   */\n  var slu = typed('slu', {\n\n    'SparseMatrix, number, number': function (a, order, threshold) {\n      // verify order\n      if (!isInteger(order) || order < 0 || order > 3)\n        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');\n      // verify threshold\n      if (threshold < 0 || threshold > 1)\n        throw new Error('Partial pivoting threshold must be a number from 0 to 1');\n      \n      // perform symbolic ordering and analysis\n      var s = cs_sqr(order, a, false);\n      \n      // perform lu decomposition\n      var f = cs_lu(a, s, threshold);\n      \n      // return decomposition\n      return {\n        L: f.L,\n        U: f.U,\n        p: f.pinv,\n        q: s.q,\n        toString: function () {\n          return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\np: ' + this.p.toString() + (this.q ? '\\nq: ' + this.q.toString() : '') + '\\n';\n        }\n      };\n    }\n  });\n\n  return slu;\n}\n\nexports.name = 'slu';\nexports.factory = factory;\n\n},{\"../../../utils/index\":530,\"../../algebra/sparse/cs_lu\":272,\"../../algebra/sparse/cs_sqr\":279}],255:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var parse = load(require('../../expression/parse'));\n  var simplify = load(require('./simplify'));\n  var ConstantNode = load(require('../../expression/node/ConstantNode'));\n  var FunctionNode = load(require('../../expression/node/FunctionNode'));\n  var OperatorNode = load(require('../../expression/node/OperatorNode'));\n  var ParenthesisNode = load(require('../../expression/node/ParenthesisNode'));\n  var SymbolNode = load(require('../../expression/node/SymbolNode'));\n\n  /**\n   * Takes the derivative of an expression expressed in parser Nodes.\n   * The derivative will be taken over the supplied variable in the\n   * second parameter. If there are multiple variables in the expression,\n   * it will return a partial derivative.\n   *\n   * This uses rules of differentiation which can be found here:\n   *\n   * - [Differentiation rules (Wikipedia)](http://en.wikipedia.org/wiki/Differentiation_rules)\n   *\n   * Syntax:\n   *\n   *     derivative(expr, variable)\n   *     derivative(expr, variable, options)\n   *\n   * Examples:\n   *\n   *     math.derivative('x^2', 'x');                     // Node {2 * x}\n   *     math.derivative('x^2', 'x', {simplify: false});  // Node {2 * 1 * x ^ (2 - 1)\n   *     math.derivative('sin(2x)', 'x'));                // Node {2 * cos(2 * x)}\n   *     math.derivative('2*x', 'x').eval();              // number 2\n   *     math.derivative('x^2', 'x').eval({x: 4});        // number 8\n   *     var f = math.parse('x^2');\n   *     var x = math.parse('x');\n   *     math.derivative(f, x);                           // Node {2 * x}\n   *\n   * See also:\n   *\n   *     simplify, parse, eval\n   *\n   * @param  {Node | string} expr           The expression to differentiate\n   * @param  {SymbolNode | string} variable The variable over which to differentiate\n   * @param  {{simplify: boolean}} [options]\n   *                         There is one option available, `simplify`, which\n   *                         is true by default. When false, output will not\n   *                         be simplified.\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n  var derivative = typed('derivative', {\n    'Node, SymbolNode, Object': function (expr, variable, options) {\n      var constNodes = {};\n      constTag(constNodes, expr, variable.name);\n      var res = _derivative(expr, constNodes);\n      return options.simplify ? simplify(res) : res;\n    },\n    'Node, SymbolNode': function (expr, variable) {\n      return derivative(expr, variable, {simplify: true})\n    },\n\n    'string, SymbolNode': function (expr, variable) {\n      return derivative(parse(expr), variable)\n    },\n    'string, SymbolNode, Object': function (expr, variable, options) {\n      return derivative(parse(expr), variable, options)\n    },\n\n    'string, string': function (expr, variable) {\n      return derivative(parse(expr), parse(variable))\n    },\n    'string, string, Object': function (expr, variable, options) {\n      return derivative(parse(expr), parse(variable), options)\n    },\n\n    'Node, string': function (expr, variable) {\n      return derivative(expr, parse(variable))\n    },\n    'Node, string, Object': function (expr, variable, options) {\n      return derivative(expr, parse(variable), options)\n    }\n\n    // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments\n\n    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}\n    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {\n      var res = expr;\n      for (var i = 0; i < order; i++) {\n        var constNodes = {};\n        constTag(constNodes, expr, variable.name);\n        res = _derivative(res, constNodes);\n      }\n      return res;\n    }\n    */\n  });\n\n  derivative._simplify = true\n\n  derivative.toTex = function(deriv) {\n    return _derivTex.apply(null, deriv.args);\n  }\n\n  var _derivTex = typed('_derivTex', {\n    'Node, SymbolNode': function (expr, x) {\n      return _derivTex(expr.toString(), x.toString(), 1);\n    },\n    'Node, SymbolNode, ConstantNode': function (expr, x, order) {\n      return _derivTex(expr.toString(), x.name, order.value);\n    },\n    'string, string, number': function (expr, x, order) {\n      var d;\n      if (order === 1) {\n        d = \"{d\\\\over d\" + x + \"}\";\n      }\n      else {\n        d = \"{d^{\" + order + \"}\\\\over d\" + x + \"^{\" + order + \"}}\";\n      }\n      return d + \"\\\\left[\" + expr + \"\\\\right]\"\n    }\n  });\n\n  /**\n   * Does a depth-first search on the expression tree to identify what Nodes\n   * are constants (e.g. 2 + 2), and stores the ones that are constants in\n   * constNodes. Classification is done as follows:\n   *\n   *   1. ConstantNodes are constants.\n   *   2. If there exists a SymbolNode, of which we are differentiating over,\n   *      in the subtree it is not constant.\n   *\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {string} varName     Variable that we are differentiating\n   * @return {boolean}  if node is constant\n   */\n  // TODO: can we rewrite constTag into a pure function?\n  var constTag = typed('constTag', {\n    'Object, ConstantNode, string': function (constNodes, node) {\n      return constNodes[node] = true;\n    },\n\n    'Object, SymbolNode, string': function (constNodes, node, varName) {\n      // Treat other variables like constants. For reasoning, see:\n      //   https://en.wikipedia.org/wiki/Partial_derivative\n      if (node.name != varName) {\n        return constNodes[node] = true;\n      }\n      return false;\n    },\n\n    'Object, ParenthesisNode, string': function (constNodes, node, varName) {\n      return constTag(constNodes, node.content, varName);\n    },\n\n    'Object, FunctionAssignmentNode, string': function (constNodes, node, varName) {\n      if (node.params.indexOf(varName) == -1) {\n        return constNodes[node] = true;\n      }\n      return constTag(constNodes, node.expr, varName);\n    },\n\n    'Object, FunctionNode | OperatorNode, string': function (constNodes, node, varName) {\n      if (node.args.length != 0) {\n        var isConst = constTag(constNodes, node.args[0], varName);\n        for (var i = 1; i < node.args.length; ++i) {\n          isConst = constTag(constNodes, node.args[i], varName) && isConst;\n        }\n\n        if (isConst) {\n          return constNodes[node] = true;\n        }\n      }\n      return false;\n    }\n  });\n\n  /**\n   * Applies differentiation rules.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n  var _derivative = typed('_derivative', {\n    'ConstantNode, Object': function (node) {\n       return new ConstantNode('0', node.valueType);\n    },\n\n    'SymbolNode, Object': function (node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return new ConstantNode('0', config.number);\n      }\n      return new ConstantNode('1', config.number);\n    },\n\n    'ParenthesisNode, Object': function (node, constNodes) {\n      return new ParenthesisNode(_derivative(node.content, constNodes));\n    },\n\n    'FunctionAssignmentNode, Object': function (node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return new ConstantNode('0', config.number);\n      }\n      return _derivative(node.expr, constNodes);\n    },\n\n    'FunctionNode, Object': function (node, constNodes) {\n      if (node.args.length != 1) {\n        funcArgsCheck(node);\n      }\n\n      if (constNodes[node] !== undefined) {\n        return new ConstantNode('0', config.number);\n      }\n\n      var arg1 = node.args[0];\n      var arg2;\n\n      var div = false;       // is output a fraction?\n      var negative = false;  // is output negative?\n\n      var funcDerivative;\n      switch (node.name) {\n        case 'cbrt':\n          // d/dx(cbrt(x)) = 1 / (3x^(2/3))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            new ConstantNode('3', config.number),\n            new OperatorNode('^', 'pow', [\n              arg1,\n              new OperatorNode('/', 'divide', [\n                new ConstantNode('2', config.number),\n                new ConstantNode('3', config.number)\n              ])\n            ])\n          ]);\n          break;\n        case 'sqrt':\n        case 'nthRoot':\n          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))\n          if (node.args.length == 1) {\n            div = true;\n            funcDerivative = new OperatorNode('*', 'multiply', [\n              new ConstantNode('2', config.number),\n              new FunctionNode('sqrt', [arg1])\n            ]);\n            break;\n          }\n\n          // Rearrange from nthRoot(x, a) -> x^(1/a)\n          arg2 = new OperatorNode('/', 'divide', [\n            new ConstantNode('1', config.number),\n            node.args[1]\n          ]);\n\n          // Is a variable?\n          constNodes[arg2] = constNodes[node.args[1]];\n\n          return _derivative(new OperatorNode('^', 'pow', [arg1, arg2]), constNodes);\n        case 'log10':\n          arg2 = new ConstantNode('10', config.number);\n        case 'log':\n          if (!arg2 && node.args.length == 1) {\n            // d/dx(log(x)) = 1 / x\n            funcDerivative = arg1.clone();\n          } else if (arg2 || constNodes[node.args[1]] !== undefined) {\n            // d/dx(log(x, c)) = 1 / (x*ln(c))\n            funcDerivative = new OperatorNode('*', 'multiply', [\n              arg1.clone(),\n              new FunctionNode('log', [arg2 || node.args[1]])\n            ]);\n          } else {\n            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))\n            return _derivative(new OperatorNode('/', 'divide', [\n                new FunctionNode('log', [arg1]),\n                new FunctionNode('log', [node.args[1]])\n              ]), constNodes);\n          }\n\n          div = true;\n          break;\n        case 'exp':\n          // d/dx(e^x) = e^x\n          funcDerivative = new FunctionNode('exp', [arg1.clone()]);\n          break;\n        case 'sin':\n          // d/dx(sin(x)) = cos(x)\n          funcDerivative = new FunctionNode('cos', [arg1.clone()]);\n          break;\n        case 'cos':\n          // d/dx(cos(x)) = -sin(x)\n          funcDerivative = new OperatorNode('-', 'unaryMinus', [\n            new FunctionNode('sin', [arg1.clone()])\n          ]);\n          break;\n        case 'tan':\n          // d/dx(tan(x)) = sec(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [\n            new FunctionNode('sec', [arg1.clone()]),\n            new ConstantNode('2', config.number)\n          ]);\n          break;\n        case 'sec':\n          // d/dx(sec(x)) = sec(x)tan(x)\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            node,\n            new FunctionNode('tan', [arg1.clone()])\n          ]);\n          break;\n        case 'csc':\n          // d/dx(csc(x)) = -csc(x)cot(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            node,\n            new FunctionNode('cot', [arg1.clone()])\n          ]);\n          break;\n        case 'cot':\n          // d/dx(cot(x)) = -csc(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [\n            new FunctionNode('csc', [arg1.clone()]),\n            new ConstantNode('2', config.number)\n          ]);\n          break;\n        case 'asin':\n          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [\n            new OperatorNode('-', 'subtract', [\n              new ConstantNode('1', config.number),\n              new OperatorNode('^', 'pow', [\n                arg1.clone(),\n                new ConstantNode('2', config.number)\n              ])\n            ])\n          ]);\n          break;\n        case 'acos':\n          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new FunctionNode('sqrt', [\n            new OperatorNode('-', 'subtract', [\n              new ConstantNode('1', config.number),\n              new OperatorNode('^', 'pow', [\n                arg1.clone(),\n                new ConstantNode('2', config.number)\n              ])\n            ])\n          ]);\n          break;\n        case 'atan':\n          // d/dx(atan(x)) = 1 / (x^2 + 1)\n          div = true;\n          funcDerivative = new OperatorNode('+', 'add', [\n            new OperatorNode('^', 'pow', [\n              arg1.clone(),\n              new ConstantNode('2', config.number)\n            ]),\n            new ConstantNode('1', config.number)\n          ]);\n          break;\n        case 'asec':\n          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            new FunctionNode('abs', [arg1.clone()]),\n            new FunctionNode('sqrt', [\n              new OperatorNode('-', 'subtract', [\n                new OperatorNode('^', 'pow', [\n                  arg1.clone(),\n                  new ConstantNode('2', config.number)\n                ]),\n                new ConstantNode('1', config.number)\n              ])\n            ])\n          ]);\n          break;\n        case 'acsc':\n          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            new FunctionNode('abs', [arg1.clone()]),\n            new FunctionNode('sqrt', [\n              new OperatorNode('-', 'subtract', [\n                new OperatorNode('^', 'pow', [\n                  arg1.clone(),\n                  new ConstantNode('2', config.number)\n                ]),\n                new ConstantNode('1', config.number)\n              ])\n            ])\n          ]);\n          break;\n        case 'acot':\n          // d/dx(acot(x)) = -1 / (x^2 + 1)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('+', 'add', [\n            new OperatorNode('^', 'pow', [\n              arg1.clone(),\n              new ConstantNode('2', config.number)\n            ]),\n            new ConstantNode('1', config.number)\n          ]);\n          break;\n        case 'sinh':\n          // d/dx(sinh(x)) = cosh(x)\n          funcDerivative = new FunctionNode('cosh', [arg1.clone()]);\n          break;\n        case 'cosh':\n          // d/dx(cosh(x)) = sinh(x)\n          funcDerivative = new FunctionNode('sinh', [arg1.clone()]);\n          break;\n        case 'tanh':\n          // d/dx(tanh(x)) = sech(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [\n            new FunctionNode('sech', [arg1.clone()]),\n            new ConstantNode('2', config.number)\n          ]);\n          break;\n        case 'sech':\n          // d/dx(sech(x)) = -sech(x)tanh(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            node,\n            new FunctionNode('tanh', [arg1.clone()])\n          ]);\n          break;\n        case 'csch':\n          // d/dx(csch(x)) = -csch(x)coth(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            node,\n            new FunctionNode('coth', [arg1.clone()])\n          ]);\n          break;\n        case 'coth':\n          // d/dx(coth(x)) = -csch(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [\n            new FunctionNode('csch', [arg1.clone()]),\n            new ConstantNode('2', config.number)\n          ]);\n          break;\n        case 'asinh':\n          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [\n            new OperatorNode('+', 'add', [\n              new OperatorNode('^', 'pow', [\n                arg1.clone(),\n                new ConstantNode('2', config.number)\n              ]),\n              new ConstantNode('1', config.number)\n            ])\n          ]);\n          break;\n        case 'acosh':\n          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [\n            new OperatorNode('-', 'subtract', [\n              new OperatorNode('^', 'pow', [\n                arg1.clone(),\n                new ConstantNode('2', config.number)\n              ]),\n              new ConstantNode('1', config.number),\n            ])\n          ]);\n          break;\n        case 'atanh':\n          // d/dx(atanh(x)) = 1 / (1 - x^2)\n          div = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [\n            new ConstantNode('1', config.number),\n            new OperatorNode('^', 'pow', [\n              arg1.clone(),\n              new ConstantNode('2', config.number)\n            ])\n          ]);\n          break;\n        case 'asech':\n          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            arg1.clone(),\n            new FunctionNode('sqrt', [\n              new OperatorNode('-', 'subtract', [\n                new ConstantNode('1', config.number),\n                new OperatorNode('^', 'pow', [\n                  arg1.clone(),\n                  new ConstantNode('2', config.number)\n                ])\n              ])\n            ])\n          ]);\n          break;\n        case 'acsch':\n          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            new FunctionNode('abs', [arg1.clone()]),\n            new FunctionNode('sqrt', [\n              new OperatorNode('+', 'add', [\n                new OperatorNode('^', 'pow', [\n                  arg1.clone(),\n                  new ConstantNode('2', config.number)\n                ]),\n                new ConstantNode('1', config.number)\n              ])\n            ])\n          ]);\n          break;\n        case 'acoth':\n          // d/dx(acoth(x)) = -1 / (1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [\n            new ConstantNode('1', config.number),\n            new OperatorNode('^', 'pow', [\n              arg1.clone(),\n              new ConstantNode('2', config.number)\n            ])\n          ]);\n          break;\n        case 'abs':\n          // d/dx(abs(x)) = abs(x)/x\n          funcDerivative = new OperatorNode('/', 'divide', [\n            new FunctionNode(new SymbolNode('abs'), [arg1.clone()]),\n            arg1.clone()\n          ]);\n          break;\n        case 'gamma':  // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)\n        default: throw new Error('Function \"' + node.name + '\" not supported by derivative');\n      }\n\n      var op, func;\n      if (div) {\n        op = '/';\n        func = 'divide';\n      } else {\n        op = '*';\n        func = 'multiply';\n      }\n\n      /* Apply chain rule to all functions:\n         F(x)  = f(g(x))\n         F'(x) = g'(x)*f'(g(x)) */\n      var chainDerivative = _derivative(arg1, constNodes);\n      if (negative) {\n        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);\n      }\n      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);\n    },\n\n    'OperatorNode, Object': function (node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return new ConstantNode('0', config.number);\n      }\n\n      var arg1 = node.args[0];\n      var arg2 = node.args[1];\n\n      switch (node.op) {\n        case '+':\n        case '-':\n          // d/dx(+/-f(x)) = +/-f'(x)\n          if (node.args.length == 1) {\n            return new OperatorNode(node.op, node.fn, [_derivative(arg1, constNodes)]);\n          }\n\n          // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)\n          return new OperatorNode(node.op, node.fn, [\n            _derivative(arg1, constNodes),\n            _derivative(arg2, constNodes)\n          ]);\n        case '*':\n          // d/dx(c*f(x)) = c*f'(x)\n          if (constNodes[arg1] !== undefined || constNodes[arg2] !== undefined) {\n            var newArgs = (constNodes[arg1] !== undefined)\n              ? [arg1.clone(), _derivative(arg2, constNodes)]\n              : [arg2.clone(), _derivative(arg1, constNodes)];\n\n            return new OperatorNode('*', 'multiply', newArgs);\n          }\n\n          // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)\n          return new OperatorNode('+', 'add', [\n            new OperatorNode('*', 'multiply', [_derivative(arg1, constNodes), arg2.clone()]),\n            new OperatorNode('*', 'multiply', [arg1.clone(), _derivative(arg2, constNodes)])\n          ]);\n        case '/':\n          // d/dx(f(x) / c) = f'(x) / c\n          if (constNodes[arg2] !== undefined) {\n            return new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), arg2]);\n          }\n\n          // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)\n          if (constNodes[arg1] !== undefined) {\n            return new OperatorNode('*', 'multiply', [\n              new OperatorNode('-', 'unaryMinus', [arg1]),\n              new OperatorNode('/', 'divide', [\n                _derivative(arg2, constNodes),\n                new OperatorNode('^', 'pow', [arg2.clone(), new ConstantNode('2', config.number)])\n              ])\n            ]);\n          }\n\n          // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2\n          return new OperatorNode('/', 'divide', [\n            new OperatorNode('-', 'subtract', [\n              new OperatorNode('*', 'multiply', [_derivative(arg1, constNodes), arg2.clone()]),\n              new OperatorNode('*', 'multiply', [arg1.clone(), _derivative(arg2, constNodes)])\n            ]),\n            new OperatorNode('^', 'pow', [arg2.clone(), new ConstantNode('2', config.number)])\n          ]);\n        case '^':\n          if (constNodes[arg1] !== undefined) {\n            // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1\n            if (arg1.isConstantNode && (arg1.value == '0' || arg1.value == '1')) {\n              return new ConstantNode('0', config.number);\n            }\n\n            // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)\n            return new OperatorNode('*', 'multiply', [\n              node,\n              new OperatorNode('*', 'multiply', [\n                new FunctionNode('log', [arg1.clone()]),\n                _derivative(arg2.clone(), constNodes)\n              ])\n            ]);\n          }\n\n          if (constNodes[arg2] !== undefined) {\n            if (arg2.isConstantNode) {\n              var expValue = arg2.value;\n\n              // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0\n              if (expValue == '0') {\n                return new ConstantNode('0', config.number);\n              }\n              // Ignore exponent; f(x)^1 = f(x)\n              if (expValue == '1') {\n                return _derivative(arg1, constNodes);\n              }\n            }\n\n            // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)\n            var powMinusOne = new OperatorNode('^', 'pow', [\n              arg1.clone(),\n              new OperatorNode('-', 'subtract', [\n                arg2,\n                new ConstantNode('1', config.number)\n              ])\n            ]);\n\n            return new OperatorNode('*', 'multiply', [\n              arg2.clone(),\n              new OperatorNode('*', 'multiply', [\n                _derivative(arg1, constNodes),\n                powMinusOne\n              ]),\n            ]);\n          }\n\n          // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]\n          return new OperatorNode('*', 'multiply', [\n            new OperatorNode('^', 'pow', [arg1.clone(), arg2.clone()]),\n            new OperatorNode('+', 'add', [\n              new OperatorNode('*', 'multiply', [\n                _derivative(arg1, constNodes),\n                new OperatorNode('/', 'divide', [arg2.clone(), arg1.clone()])\n              ]),\n              new OperatorNode('*', 'multiply', [\n                _derivative(arg2, constNodes),\n                new FunctionNode('log', [arg1.clone()])\n              ])\n            ])\n          ]);\n        case '%':\n        case 'mod':\n        default: throw new Error('Operator \"' + node.op + '\" not supported by derivative');\n      }\n    }\n  });\n\n  /**\n   * Ensures the number of arguments for a function are correct,\n   * and will throw an error otherwise.\n   *\n   * @param {FunctionNode} node\n   */\n  function funcArgsCheck(node) {\n    //TODO add min, max etc\n    if ((node.name == 'log' || node.name == 'nthRoot') && node.args.length == 2) {\n      return;\n    }\n\n    // There should be an incorrect number of arguments if we reach here\n\n    // Change all args to constants to avoid unidentified\n    // symbol error when compiling function\n    for (var i = 0; i < node.args.length; ++i) {\n      node.args[i] = new ConstantNode(0);\n    }\n\n    node.compile().eval();\n    throw new Error('Expected TypeError, but none found');\n  }\n\n\n  return derivative;\n}\n\nexports.name = 'derivative';\nexports.factory = factory;\n\n},{\"../../expression/node/ConstantNode\":222,\"../../expression/node/FunctionNode\":224,\"../../expression/node/OperatorNode\":228,\"../../expression/node/ParenthesisNode\":229,\"../../expression/node/SymbolNode\":231,\"../../expression/parse\":239,\"./simplify\":257}],256:[function(require,module,exports){\nmodule.exports = [\n  require('./derivative'),\n\n  // simplify\n  require('./simplify'),\n\n  // decomposition\n  require('./decomposition/qr'),\n  require('./decomposition/lup'),\n  require('./decomposition/slu'),\n\n  // solver\n  require('./solver/lsolve'),\n  require('./solver/lusolve'),\n  require('./solver/usolve')\n];\n\n},{\"./decomposition/lup\":252,\"./decomposition/qr\":253,\"./decomposition/slu\":254,\"./derivative\":255,\"./simplify\":257,\"./solver/lsolve\":260,\"./solver/lusolve\":261,\"./solver/usolve\":262}],257:[function(require,module,exports){\n'use strict';\n\n\nfunction factory (type, config, load, typed, math) {\n  var parse = load(require('../../expression/parse'));\n  var ConstantNode = load(require('../../expression/node/ConstantNode'));\n  var FunctionNode = load(require('../../expression/node/FunctionNode'));\n  var OperatorNode = load(require('../../expression/node/OperatorNode'));\n  var ParenthesisNode = load(require('../../expression/node/ParenthesisNode'));\n  var SymbolNode = load(require('../../expression/node/SymbolNode'));\n  var Node = load(require('../../expression/node/Node'));\n  var simplifyConstant = load(require('./simplify/simplifyConstant'));\n\n  var util = load(require('./simplify/util'));\n  var isCommutative = util.isCommutative;\n  var isAssociative = util.isAssociative;\n  var flatten = util.flatten;\n  var unflattenr = util.unflattenr;\n  var unflattenl = util.unflattenl;\n  var createMakeNodeFunction = util.createMakeNodeFunction;\n\n  /**\n   * Simplify an expression tree.\n   *\n   * A list of rules are applied to an expression, repeating over the list until\n   * no further changes are made.\n   * It's possible to pass a custom set of rules to the function as second\n   * argument. A rule can be specified as an object, string, or function:\n   *\n   *     var rules = [\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\n   *       function (node) {\n   *         // ... return a new node or return the node unchanged\n   *         return node\n   *       }\n   *     ]\n   *\n   * String and object rules consist of a left and right pattern. The left is\n   * used to match against the expression and the right determines what matches\n   * are replaced with. The main difference between a pattern and a normal\n   * expression is that variables starting with the following characters are\n   * interpreted as wildcards:\n   *\n   * - 'n' - matches any Node\n   * - 'c' - matches any ConstantNode\n   * - 'v' - matches any Node that is not a ConstantNode\n   *\n   * The default list of rules is exposed on the function as `simplify.rules`\n   * and can be used as a basis to built a set of custom rules.\n   *\n   * For more details on the theory, see:\n   *\n   * - [Strategies for simplifying math expressions (Stackoverflow)](http://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\n   *\n   * Syntax:\n   *\n   *     simplify(expr)\n   *     simplify(expr, rules)\n   *\n   * Examples:\n   *\n   *     math.simplify('2 * 1 * x ^ (2 - 1)');      // Node {2 * x}\n   *     var f = math.parse('2 * 1 * x ^ (2 - 1)');\n   *     math.simplify(f);                          // Node {2 * x}\n   *\n   * See also:\n   *\n   *     derivative, parse, eval\n   *\n   * @param {Node | string} expr\n   *            The expression to be simplified\n   * @param {Array<{l:string, r: string} | string | function>} [rules]\n   *            Optional list with custom rules\n   * @return {Node} Returns the simplified form of `expr`\n   */\n  var simplify = typed('simplify', {\n    'string': function (expr) {\n      return simplify(parse(expr), simplify.rules);\n    },\n\n    'string, Array': function (expr, rules) {\n      return simplify(parse(expr), rules);\n    },\n\n    'Node': function (expr) {\n      return simplify(expr, simplify.rules);\n    },\n\n    'Node, Array': function (expr, rules) {\n      rules = _buildRules(rules);\n\n      var res = removeParens(expr);\n      var visited = {};\n\n      var str = res.toString({parenthesis: 'all'});\n      while(!visited[str]) {\n        visited[str] = true;\n        _lastsym = 0; // counter for placeholder symbols\n        for (var i=0; i<rules.length; i++) {\n          if (typeof rules[i] === 'function') {\n            res = rules[i](res);\n          }\n          else {\n            flatten(res);\n            res = applyRule(res, rules[i]);\n          }\n          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it\n        }\n        str = res.toString({parenthesis: 'all'});\n      }\n\n      return res;\n    }\n  });\n\n  function removeParens(node) {\n    return node.transform(function(node, path, parent) {\n      if(node.isParenthesisNode) {\n        return node.content;\n      }\n      else {\n        return node;\n      }\n    });\n  }\n\n  // All constants that are allowed in rules\n  var SUPPORTED_CONSTANTS = {\n    true: true,\n    false: true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true,\n    // null: false,\n    // uninitialized: false,\n    // version: false,\n  };\n\n  // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n  simplify.rules = [\n    { l: 'n+0', r: 'n' },\n    { l: 'n^0', r: '1' },\n    { l: '0*n', r: '0' },\n    { l: 'n/n', r: '1'},\n    { l: 'n^1', r: 'n' },\n    { l: '+n1', r:'n1' },\n    { l: 'n--n1', r:'n+n1' },\n    { l: 'log(e)', r:'1' },\n\n    // temporary rules\n    { l: 'n-n1', r:'n+-n1' }, // temporarily replace 'subtract' so we can further flatten the 'add' operator\n    { l: '-(c*v)', r: '(-c) * v' }, // make non-constant terms positive\n    { l: '-v', r: '(-1) * v' },\n    { l: 'n/n1^n2', r:'n*n1^-n2' }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n    { l: 'n/n1', r:'n*n1^-1' },\n\n    // collect like factors\n    { l: 'n*n', r: 'n^2' },\n    { l: 'n * n^n1', r: 'n^(n1+1)' },\n    { l: 'n^n1 * n^n2', r: 'n^(n1+n2)' },\n\n    // collect like terms\n    { l: 'n+n', r: '2*n' },\n    { l: 'n+-n', r: '0' },\n    { l: 'n1*n2 + n2', r: '(n1+1)*n2' },\n    { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n\n    simplifyConstant,\n\n    { l: '(-n)*n1', r: '-(n*n1)' }, // make factors positive (and undo 'make non-constant terms positive')\n\n    // ordering of constants\n    { l: 'c+v', r: 'v+c', context: { 'add': { commutative:false } } },\n    { l: 'v*c', r: 'c*v', context: { 'multiply': { commutative:false } } },\n\n    // undo temporary rules\n    { l: '(-1) * n', r: '-n' },\n    { l: 'n+-n1', r:'n-n1' },  // undo replace 'subtract'\n    { l: 'n*(n1^-1)', r:'n/n1' },  // undo replace 'divide'\n    { l: 'n*n1^-n2', r:'n/n1^n2' },\n    { l: 'n1^-1', r:'1/n1' },\n\n    { l: 'n*(n1/n2)', r:'(n*n1)/n2' }, // '*' before '/'\n    { l: 'n-(n1+n2)', r:'n-n1-n2' }, // '-' before '+'\n    // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n    // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n\n    { l: '1*n', r: 'n' } // this pattern can be produced by simplifyConstant\n\n  ];\n\n  /**\n   * Parse the string array of rules into nodes\n   *\n   * Example syntax for rules:\n   *\n   * Position constants to the left in a product:\n   * { l: 'n1 * c1', r: 'c1 * n1' }\n   * n1 is any Node, and c1 is a ConstantNode.\n   *\n   * Apply difference of squares formula:\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\n   * n1, n2 mean any Node.\n   *\n   * Short hand notation:\n   * 'n1 * c1 -> c1 * n1'\n   */\n  function _buildRules(rules) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n    for(var i=0; i<rules.length; i++) {\n      var rule = rules[i];\n      var newRule;\n      var ruleType = typeof rule;\n      switch (ruleType) {\n        case 'string':\n          var lr = rule.split('->');\n          if (lr.length !== 2) {\n            throw SyntaxError('Could not parse rule: ' + rule);\n          }\n          rule = {l: lr[0], r: lr[1]};\n          /* falls through */\n        case 'object':\n          newRule = {\n            l: removeParens(parse(rule.l)),\n            r: removeParens(parse(rule.r)),\n          }\n          if(rule.context) {\n            newRule.evaluate = rule.context;\n          }\n          if(rule.evaluate) {\n            newRule.evaluate = parse(rule.evaluate);\n          }\n\n          if (newRule.l.isOperatorNode && isAssociative(newRule.l)) {\n            var makeNode = createMakeNodeFunction(newRule.l);\n            var expandsym = _getExpandPlaceholderSymbol();\n            newRule.expanded = {};\n            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]);\n            // Push the expandsym into the deepest possible branch.\n            // This helps to match the newRule against nodes returned from getSplits() later on.\n            flatten(newRule.expanded.l);\n            unflattenr(newRule.expanded.l);\n            newRule.expanded.r = makeNode([newRule.r, expandsym]);\n          }\n          break;\n        case 'function':\n          newRule = rule;\n          break;\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      }\n     // console.log('Adding rule: ' + rules[i]);\n     // console.log(newRule);\n      ruleSet.push(newRule);\n    }\n    return ruleSet;\n  }\n\n  var _lastsym = 0;\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n\n  /**\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\n   */\n  var applyRule = typed('applyRule', {\n    'Node, Object': function (node, rule) {\n\n      //console.log('Entering applyRule(' + node.toString() + ')');\n\n      // Do not clone node unless we find a match\n      var res = node;\n\n      // First replace our child nodes with their simplified versions\n      // If a child could not be simplified, the assignments will have\n      // no effect since the node is returned unchanged\n      if (res instanceof OperatorNode || res instanceof FunctionNode) {\n        if (res.args) {\n          for(var i=0; i<res.args.length; i++) {\n            res.args[i] = applyRule(res.args[i], rule);\n          }\n        }\n      }\n      else if(res instanceof ParenthesisNode) {\n        if(res.content) {\n          res.content = applyRule(res.content, rule);\n        }\n      }\n\n      // Try to match a rule against this node\n      var repl = rule.r;\n      var matches = _ruleMatch(rule.l, res)[0];\n\n      // If the rule is associative operator, we can try matching it while allowing additional terms.\n      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n      if (!matches && rule.expanded) {\n        repl = rule.expanded.r;\n        matches = _ruleMatch(rule.expanded.l, res)[0];\n      }\n\n      if (matches) {\n        // var before = res.toString({parenthesis: 'all'});\n\n        // Create a new node by cloning the rhs of the matched rule\n        res = repl.clone();\n\n        // Replace placeholders with their respective nodes\n        //console.log('Traversing rule ' + res);\n        res = res.transform(function(n, path, parent) {\n          if(n.isSymbolNode) {\n            if(matches.placeholders.hasOwnProperty(n.name)) {\n              var replace = matches.placeholders[n.name].clone();\n              return replace;\n            }\n          }\n          return n;\n        });\n\n        // var after = res.toString({parenthesis: 'all'});\n        // console.log('Simplified ' + before + ' to ' + after);\n      }\n\n      return res;\n    }\n  });\n\n  /**\n   * Get (binary) combinations of a flattened binary node\n   * e.g. +(node1, node2, node3) -> [\n   *        +(node1,  +(node2, node3)),\n   *        +(node2,  +(node1, node3)),\n   *        +(node3,  +(node1, node2))]\n   *\n   */\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n    if (isCommutative(node, context)) {\n      for (var i=0; i<node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = (rightArgs.length === 1) ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    }\n    else {\n      rightArgs = node.args.slice(1);\n      right = (rightArgs.length === 1) ? rightArgs[0] : makeNode(rightArgs);\n      res.push(makeNode([node.args[0], right]));\n    }\n    return res;\n  }\n\n  /**\n   * Returns the set union of two match-placeholders or null if there is a conflict.\n   */\n  function mergeMatch(match1, match2) {\n    var res = {placeholders:{}};\n\n    // Some matches may not have placeholders; this is OK\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    }\n    else if (!match1.placeholders) {\n      return match2;\n    }\n    else if (!match2.placeholders) {\n      return match1;\n    }\n\n    // Placeholders with the same key must match exactly\n    for (var key in match1.placeholders) {\n      res.placeholders[key] = match1.placeholders[key];\n      if (match2.placeholders.hasOwnProperty(key)) {\n        if (!_exactMatch(match1.placeholders[key], match2.placeholders[key] )) {\n          return null;\n        }\n      }\n    }\n\n    for (var key in match2.placeholders) {\n      res.placeholders[key] = match2.placeholders[key];\n    }\n\n    return res;\n  }\n\n  /**\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   */\n  function combineChildMatches(list1, list2) {\n    var res = [];\n\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n\n    var merged;\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   * Returns a list of unique matches.\n   */\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n    for(var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i]);\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n    return uniqueSets;\n  }\n\n  /**\n   * Determines whether node matches rule.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {Object} Information about the match, if it exists.\n   */\n  function _ruleMatch(rule, node, isSplit) {\n//    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')');\n//    console.log('rule = ' + rule);\n//    console.log('node = ' + node);\n\n//    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')');\n    var res = [{placeholders:{}}];\n\n    if (rule instanceof OperatorNode && node instanceof OperatorNode\n     || rule instanceof FunctionNode && node instanceof FunctionNode) {\n\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      }\n      else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      }\n\n      // rule and node match. Search the children of rule and node.\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) || isSplit) {\n        // Expect non-associative operators to match exactly\n        var childMatches = [];\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i]);\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            return [];\n          }\n          // The child matched, so add the information returned from the child to our result\n          childMatches.push(childMatch);\n        }\n        res = mergeChildMatches(childMatches);\n      }\n      else if (node.args.length >= 2 && rule.args.length === 2) { // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule matches each\n        // them and return their union.\n        var splits = getSplits(node, rule.context);\n        var splitMatches = [];\n        for(var i = 0; i < splits.length; i++) {\n          var matchSet = _ruleMatch(rule, splits[i], true); // recursing at the same tree depth here\n          splitMatches = splitMatches.concat(matchSet);\n        }\n        return splitMatches;\n      }\n      else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      }\n      else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    }\n    else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first character of the symbol node name.\n      // c.* matches a ConstantNode\n      // n.* matches any node\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n     if (math.hasOwnProperty(rule.name)) {\n        if (!SUPPORTED_CONSTANTS[rule.name]) {\n          throw new Error('Built in constant: ' + rule.name + ' is not supported by simplify.');\n        }\n\n        // built-in constant must match exactly\n        if(rule.name !== node.name) {\n          return [];\n        }\n      }\n      else if (rule.name[0] == 'n' || rule.name.substring(0,2) == '_p') {\n        // rule matches _anything_, so assign this node to the rule.name placeholder\n        // Assign node to the rule.name placeholder.\n        // Our parent will check for matches among placeholders.\n        res[0].placeholders[rule.name] = node;\n      }\n      else if (rule.name[0] == 'v') {\n        // rule matches any variable thing (not a ConstantNode)\n        if(!node.isConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        }\n        else {\n          // Mis-match: rule was expecting something other than a ConstantNode\n          return [];\n        }\n      }\n      else if (rule.name[0] == 'c') {\n        // rule matches any ConstantNode\n        if(node instanceof ConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        }\n        else {\n          // Mis-match: rule was expecting a ConstantNode\n          return [];\n        }\n      }\n      else {\n        throw new Error('Invalid symbol in rule: ' + rule.name);\n      }\n    }\n    else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if(rule.value !== node.value) {\n        return [];\n      }\n    }\n    else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    }\n\n    // It's a match!\n\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match');\n    return res;\n  }\n\n\n  /**\n   * Determines whether p and q (and all their children nodes) are identical.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\n   * @return {Object} Information about the match, if it exists.\n   */\n  function _exactMatch(p, q) {\n    if(p instanceof ConstantNode && q instanceof ConstantNode) {\n      if(p.value !== q.value) {\n        return false;\n      }\n    }\n    else if(p instanceof SymbolNode && q instanceof SymbolNode) {\n      if(p.name !== q.name) {\n        return false;\n      }\n    }\n    else if(p instanceof OperatorNode && q instanceof OperatorNode\n         || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      }\n      else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n\n      if(p.args.length !== q.args.length) {\n        return false;\n      }\n\n      for(var i=0; i<p.args.length; i++) {\n        if(!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    }\n    else {\n      return false;\n    }\n\n    return true;\n  }\n\n  return simplify;\n}\n\nexports.math = true;\nexports.name = 'simplify';\nexports.factory = factory;\n\n},{\"../../expression/node/ConstantNode\":222,\"../../expression/node/FunctionNode\":224,\"../../expression/node/Node\":226,\"../../expression/node/OperatorNode\":228,\"../../expression/node/ParenthesisNode\":229,\"../../expression/node/SymbolNode\":231,\"../../expression/parse\":239,\"./simplify/simplifyConstant\":258,\"./simplify/util\":259}],258:[function(require,module,exports){\n'use strict';\n\nvar digits = require('./../../../utils/number').digits;\n// TODO this could be improved by simplifying seperated constants under associative and commutative operators\nfunction factory(type, config, load, typed, math) {\n  var util = load(require('./util'));\n  var isCommutative = util.isCommutative;\n  var isAssociative = util.isAssociative;\n  var allChildren = util.allChildren;\n  var createMakeNodeFunction = util.createMakeNodeFunction;\n  var ConstantNode = math.expression.node.ConstantNode;\n  var OperatorNode = math.expression.node.OperatorNode;\n\n  function simplifyConstant(expr) {\n    var res = foldFraction(expr);\n    return res.isNode ? res : _toNode(res);\n  }\n\n  function _eval(fnname, args) {\n    try {\n      return _toNumber(math[fnname].apply(null, args));\n    }\n    catch (ignore) {\n      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions\n      args = args.map(function(x){\n        if (x.isFraction) {\n          return x.valueOf();\n        }\n        return x;\n      });\n      return _toNumber(math[fnname].apply(null, args));\n    }\n  }\n\n  var _toNode = typed({\n    'Fraction': _fractionToNode,\n    'number': function(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n      return new ConstantNode(n);\n    },\n    'BigNumber': function(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(n.negated().toString(), 'number'));\n      }\n      return new ConstantNode(n.toString(), 'number');\n    },\n    'Complex': function(s) {\n      throw 'Cannot convert Complex number to Node';\n    }\n  });\n\n  // convert a number to a fraction only if it can be expressed exactly\n  function _exactFraction(n) {\n    if (isFinite(n)) {\n      var f = math.fraction(n);\n      if (f.valueOf() === n) {\n        return f;\n      }\n    }\n    return n;\n  }\n\n  // Convert numbers to a preferred number type in preference order: Fraction, number, Complex\n  // BigNumbers are left alone\n  var _toNumber = typed({\n    'string': function(s) {\n      if (config.number === 'BigNumber') {\n        return math.bignumber(s);\n      }\n      else if (config.number === 'Fraction') {\n        return math.fraction(s);\n      }\n      else {\n        return _exactFraction(parseFloat(s));\n      }\n    },\n\n    'Fraction': function(s) { return s; },\n\n    'BigNumber': function(s) { return s; },\n\n    'number': function(s) {\n      return _exactFraction(s);\n    },\n\n    'Complex': function(s) {\n      if (s.im !== 0) {\n        return s;\n      }\n      return _exactFraction(s.re);\n    },\n  });\n\n  function unaryMinusNode(n) {\n    return new OperatorNode('-', 'unaryMinus', [n]);\n  }\n\n  function _fractionToNode(f) {\n    var n;\n    var vn = f.s*f.n;\n    if (vn < 0) {\n      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)])\n    }\n    else {\n      n = new ConstantNode(vn);\n    }\n\n    if (f.d === 1) {\n      return n;\n    }\n    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);\n  }\n\n  /*\n   * Create a binary tree from a list of Fractions and Nodes.\n   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so\n   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).\n   * @param args - list of Fractions and Nodes\n   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions\n   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes\n   * if args.length is 1, returns args[0]\n   * @return - Either a Node representing a binary expression or Fraction\n   */\n  function foldOp(fn, args, makeNode) {\n    return args.reduce(function(a, b) {\n      if (!a.isNode && !b.isNode) {\n        try {\n          return _eval(fn, [a,b]);\n        }\n        catch (ignoreandcontinue) {}\n        a = _toNode(a);\n        b = _toNode(b);\n      }\n      else if (!a.isNode) {\n        a = _toNode(a);\n      }\n      else if (!b.isNode) {\n        b = _toNode(b);\n      }\n\n      return makeNode([a, b]);\n    });\n  }\n\n  // destroys the original node and returns a folded one\n  function foldFraction(node) {\n    switch(node.type) {\n      case 'SymbolNode':\n        return node;\n      case 'ConstantNode':\n        if (node.valueType === 'number') {\n          return _toNumber(node.value);\n        }\n        return node;\n      case 'FunctionNode':\n        if (math[node.name] && math[node.name].rawArgs) {\n          return node;\n        }\n        /* falls through */\n      case 'OperatorNode':\n        var fn = node.fn.toString();\n        var args;\n        var res;\n        var makeNode = createMakeNodeFunction(node);\n        if (node.args.length === 1) {\n          args = [foldFraction(node.args[0])];\n          if (!args[0].isNode) {\n            res = _eval(fn, args);\n          }\n          else {\n            res = makeNode(args);\n          }\n        }\n        else if (isAssociative(node)) {\n          args = allChildren(node);\n          args = args.map(foldFraction);\n\n          if (isCommutative(fn)) {\n            // commutative binary operator\n            var consts = [], vars = [];\n\n            for (var i=0; i < args.length; i++) {\n              if (!args[i].isNode) {\n                consts.push(args[i]);\n              }\n              else {\n                vars.push(args[i]);\n              }\n            }\n\n            if (consts.length > 1) {\n              res = foldOp(fn, consts, makeNode);\n              vars.unshift(res);\n              res = foldOp(fn, vars, makeNode);\n            }\n            else {\n              // we won't change the children order since it's not neccessary\n              res = foldOp(fn, args, makeNode);\n            }\n          }\n          else {\n            // non-commutative binary operator\n            res = foldOp(fn, args, makeNode);\n          }\n        }\n        else {\n          // non-associative binary operator\n          args = node.args.map(foldFraction);\n          res = foldOp(fn, args, makeNode);\n        }\n        return res;\n      case 'ParenthesisNode':\n        // remove the uneccessary parenthesis\n        return foldFraction(node.content);\n      case 'AccessorNode':\n        /* falls through */\n      case 'ArrayNode':\n        /* falls through */\n      case 'AssignmentNode':\n        /* falls through */\n      case 'BlockNode':\n        /* falls through */\n      case 'FunctionAssignmentNode':\n        /* falls through */\n      case 'IndexNode':\n        /* falls through */\n      case 'ObjectNode':\n        /* falls through */\n      case 'RangeNode':\n        /* falls through */\n      case 'UpdateNode':\n        /* falls through */\n      case 'ConditionalNode':\n        /* falls through */\n      default:\n        throw 'Unimplemented node type in simplifyConstant: '+node.type;\n    }\n  }\n\n  return simplifyConstant;\n}\n\nexports.math = true;\nexports.name = 'simplifyConstant';\nexports.path = 'algebra.simplify';\nexports.factory = factory;\n\n},{\"./../../../utils/number\":532,\"./util\":259}],259:[function(require,module,exports){\n'use strict';\n\nfunction factory(type, config, load, typed, math) {\n  var FunctionNode = math.expression.node.FunctionNode;\n  var OperatorNode = math.expression.node.OperatorNode;\n  var SymbolNode = math.expression.node.SymbolNode;\n\n  // TODO commutative/associative properties rely on the arguments\n  // e.g. multiply is not commutative for matrices\n  // The properties should be calculated from an argument to simplify, or possibly something in math.config\n  // the other option is for typed() to specify a return type so that we can evaluate the type of arguments\n  var commutative = {\n    'add': true,\n    'multiply': true\n  }\n  var associative = {\n    'add': true,\n    'multiply': true\n  }\n\n\n  function isCommutative(node, context) {\n    if (!node.args || node.args.length <=1) {\n      return true;\n    }\n    var name = node.fn.toString();\n    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('commutative')) {\n      return context[name].commutative;\n    }\n    return commutative[name] || false;\n  }\n\n  function isAssociative(node, context) {\n    if (!node.args || node.args.length <=1) {\n      return true;\n    }\n    var name = node.fn.toString();\n    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('associative')) {\n      return context[name].associative;\n    }\n    return associative[name] || false;\n  }\n\n  /**\n   * Flatten all associative operators in an expression tree.\n   * Assumes parentheses have already been removed.\n   */\n  function flatten(node) {\n    if (!node.args || node.args.length === 0) {\n      return node;\n    }\n    node.args = allChildren(node);\n    for (var i=0; i<node.args.length; i++) {\n      flatten(node.args[i]);\n    }\n  }\n\n  /**\n   * Get the children of a node as if it has been flattened.\n   * TODO implement for FunctionNodes\n   */\n  function allChildren(node) {\n    var op;\n    var children = [];\n    var findChildren = function(node) {\n      for (var i = 0; i < node.args.length; i++) {\n        var child = node.args[i];\n        if (child.isOperatorNode && op === child.op) {\n          findChildren(child);\n        }\n        else {\n          children.push(child);\n        }\n      }\n    };\n\n    if (node.isOperatorNode && isAssociative(node)) {\n      op = node.op;\n      findChildren(node);\n      return children;\n    }\n    else {\n      return node.args;\n    }\n  }\n\n  /**\n   *  Unflatten all flattened operators to a right-heavy binary tree.\n   */\n  function unflattenr(node) {\n    if (!node.args || node.args.length === 0) {\n      return;\n    }\n    var makeNode = createMakeNodeFunction(node);\n    var l = node.args.length;\n    for (var i = 0; i < l; i++) {\n      unflattenr(node.args[i])\n    }\n    if (l > 2 && isAssociative(node)) {\n      var curnode = node.args.pop();\n      while (node.args.length > 0) {\n        curnode = makeNode([node.args.pop(), curnode]);\n      }\n      node.args = curnode.args;\n    }\n  }\n\n  /**\n   *  Unflatten all flattened operators to a left-heavy binary tree.\n   */\n  function unflattenl(node) {\n    if (!node.args || node.args.length === 0) {\n      return;\n    }\n    var makeNode = createMakeNodeFunction(node);\n    var l = node.args.length;\n    for (var i = 0; i < l; i++) {\n      unflattenl(node.args[i])\n    }\n    if (l > 2 && isAssociative(node)) {\n      var curnode = node.args.shift();\n      while (node.args.length > 0) {\n        curnode = makeNode([curnode, node.args.shift()]);\n      }\n      node.args = curnode.args;\n    }\n  }\n\n  function createMakeNodeFunction(node) {\n    if (node.isOperatorNode) {\n      return function(args){\n        try{\n          return new OperatorNode(node.op, node.fn, args);\n        } catch(err){\n          console.error(err);\n          return [];\n        }\n      };\n    }\n    else {\n      return function(args){\n        return new FunctionNode(new SymbolNode(node.name), args);\n      };\n    }\n  }\n  return {\n    createMakeNodeFunction: createMakeNodeFunction,\n    isCommutative: isCommutative,\n    isAssociative: isAssociative,\n    flatten: flatten,\n    allChildren: allChildren,\n    unflattenr: unflattenr,\n    unflattenl: unflattenl\n  };\n}\n\nexports.factory = factory;\nexports.math = true;\n},{}],260:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  var divideScalar = load(require('../../arithmetic/divideScalar'));\n  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));\n  var subtract = load(require('../../arithmetic/subtract'));\n  var equalScalar = load(require('../../relational/equalScalar'));\n\n  var solveValidation = load(require('./utils/solveValidation'));\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /** \n   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.\n   *\n   * `L * x = b`\n   *\n   * Syntax:\n   *\n   *    math.lsolve(L, b);\n   *\n   * Examples:\n   *\n   *    var a = [[-2, 3], [2, 1]];\n   *    var b = [11, 9];\n   *    var x = lsolve(a, b);  // [[-5.5], [20]]\n   *\n   * See also:\n   *\n   *    lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} L       A N x N matrix or array (L)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\n   */\n  var lsolve = typed('lsolve', {\n\n    'SparseMatrix, Array | Matrix': function (m, b) {\n      // process matrix\n      return _sparseForwardSubstitution(m, b);\n    },\n    \n    'DenseMatrix, Array | Matrix': function (m, b) {\n      // process matrix\n      return _denseForwardSubstitution(m, b);\n    },\n    \n    'Array, Array | Matrix': function (a, b) {\n      // create dense matrix from array\n      var m = matrix(a);\n      // use matrix implementation\n      var r = _denseForwardSubstitution(m, b);\n      // result\n      return r.valueOf();\n    }\n  });\n\n  var _denseForwardSubstitution = function (m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    // column vector data\n    var bdata = b._data;\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // result\n    var x = [];\n    // data\n    var data = m._data;\n    // forward solve m * x = b, loop columns\n    for (var j = 0; j < columns; j++) {\n      // b[j]\n      var bj = bdata[j][0] || 0;\n      // x[j]\n      var xj;\n      // forward substitution (outer product) avoids inner looping when bj == 0\n      if (!equalScalar(bj, 0)) {\n        // value @ [j, j]\n        var vjj = data[j][j];\n        // check vjj\n        if (equalScalar(vjj, 0)) {\n          // system cannot be solved\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        // calculate xj\n        xj = divideScalar(bj, vjj);\n        // loop rows\n        for (var i = j + 1; i < rows; i++) {\n          // update copy of b\n          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];\n        }\n      }\n      else {\n        // zero @ j\n        xj = 0;\n      }\n      // update x\n      x[j] = [xj];\n    }\n    // return vector\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  };\n\n  var _sparseForwardSubstitution = function (m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    // column vector data\n    var bdata = b._data;\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // vars\n    var i, k;\n    // result\n    var x = [];\n    // forward solve m * x = b, loop columns\n    for (var j = 0; j < columns; j++) {\n      // b[j]\n      var bj = bdata[j][0] || 0;\n      // forward substitution (outer product) avoids inner looping when bj == 0\n      if (!equalScalar(bj, 0)) {\n        // value @ [j, j]\n        var vjj = 0;\n        // lower triangular matrix values & index (column j)\n        var jvalues = [];\n        var jindex = [];\n        // last index in column\n        var l = ptr[j + 1];\n        // values in column, find value @ [j, j]\n        for (k = ptr[j]; k < l; k++) {\n          // row\n          i = index[k];\n          // check row (rows are not sorted!)\n          if (i === j) {\n            // update vjj\n            vjj = values[k];\n          }\n          else if (i > j) {\n            // store lower triangular\n            jvalues.push(values[k]);\n            jindex.push(i);\n          }\n        }\n        // at this point we must have a value @ [j, j]\n        if (equalScalar(vjj, 0)) {\n          // system cannot be solved, there is no value @ [j, j]\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        // calculate xj\n        var xj = divideScalar(bj, vjj);\n        // loop lower triangular\n        for (k = 0, l = jindex.length; k < l; k++) {\n          // row\n          i = jindex[k];\n          // update copy of b\n          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, jvalues[k]))];\n        }\n        // update x\n        x[j] = [xj];\n      }\n      else {\n        // update x\n        x[j] = [0];\n      }\n    }\n    // return vector\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  };\n\n  return lsolve;\n}\n\nexports.name = 'lsolve';\nexports.factory = factory;\n\n},{\"../../../type/matrix/function/matrix\":482,\"../../arithmetic/divideScalar\":289,\"../../arithmetic/multiplyScalar\":304,\"../../arithmetic/subtract\":312,\"../../relational/equalScalar\":384,\"./utils/solveValidation\":263}],261:[function(require,module,exports){\n'use strict';\n\nvar isArray = Array.isArray;\n\nfunction factory (type, config, load, typed) {\n  \n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  var lup = load(require('../decomposition/lup'));\n  var slu = load(require('../decomposition/slu'));\n  var cs_ipvec = load(require('../sparse/cs_ipvec'));\n\n  var solveValidation = load(require('./utils/solveValidation'));\n\n  var usolve = load(require('./usolve'));\n  var lsolve = load(require('./lsolve'));\n\n  /**\n   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.\n   *\n   * Syntax:\n   *\n   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b\n   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)\n   *\n   * Examples:\n   *\n   *    var m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]];\n   *\n   *    var x = math.lusolve(m, [-1, -1, -1, -1]);        // x = [[-1], [-0.5], [-1/3], [-0.25]]\n   *\n   *    var f = math.lup(m);\n   *    var x1 = math.lusolve(f, [-1, -1, -1, -1]);       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]\n   *    var x2 = math.lusolve(f, [1, 2, 1, -1]);          // x2 = [[1], [1], [1/3], [-0.25]]\n   *\n   *    var a = [[-2, 3], [2, 1]];\n   *    var b = [11, 9];\n   *    var x = lusolve(a, b);  // [[-5.5], [20]]\n   *\n   * See also:\n   *\n   *    lup, slu, lsolve, usolve\n   *\n   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition\n   * @param {Matrix | Array} b               Column Vector\n   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix\n   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.\n   *\n   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b\n   */\n  var lusolve = typed('lusolve', {\n    \n    'Array, Array | Matrix': function (a, b) {\n      // convert a to matrix\n      a = matrix(a);\n      // matrix lup decomposition\n      var d = lup(a);\n      // solve\n      var x = _lusolve(d.L, d.U, d.p, null, b);\n      // convert result to array\n      return x.valueOf();\n    },\n    \n    'DenseMatrix, Array | Matrix': function (a, b) {\n      // matrix lup decomposition\n      var d = lup(a);\n      // solve\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    \n    'SparseMatrix, Array | Matrix': function (a, b) {\n      // matrix lup decomposition\n      var d = lup(a);\n      // solve\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    \n    'SparseMatrix, Array | Matrix, number, number': function (a, b, order, threshold) {\n      // matrix lu decomposition\n      var d = slu(a, order, threshold);\n      // solve\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    },\n\n    'Object, Array | Matrix': function (d, b) {\n      // solve\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    }\n  });\n  \n  var _toMatrix = function (a) {\n    // check it is a matrix\n    if (a && a.isMatrix === true)\n      return a;\n    // check array\n    if (isArray(a))\n      return matrix(a);\n    // throw\n    throw new TypeError('Invalid Matrix LU decomposition');\n  };\n  \n  var _lusolve = function (l, u, p, q, b) {\n    // verify L, U, P\n    l = _toMatrix(l);\n    u = _toMatrix(u);\n    // validate matrix and vector\n    b = solveValidation(l, b, false);\n    // apply row permutations if needed (b is a DenseMatrix)\n    if (p)\n      b._data = cs_ipvec(p, b._data);\n    // use forward substitution to resolve L * y = b\n    var y = lsolve(l, b);\n    // use backward substitution to resolve U * x = y\n    var x = usolve(u, y);\n    // apply column permutations if needed (x is a DenseMatrix)\n    if (q)\n      x._data = cs_ipvec(q, x._data);\n    // return solution\n    return x;\n  };\n\n  return lusolve;\n}\n\nexports.name = 'lusolve';\nexports.factory = factory;\n\n},{\"../../../type/matrix/function/matrix\":482,\"../decomposition/lup\":252,\"../decomposition/slu\":254,\"../sparse/cs_ipvec\":270,\"./lsolve\":260,\"./usolve\":262,\"./utils/solveValidation\":263}],262:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  var divideScalar = load(require('../../arithmetic/divideScalar'));\n  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));\n  var subtract = load(require('../../arithmetic/subtract'));\n  var equalScalar = load(require('../../relational/equalScalar'));\n\n  var solveValidation = load(require('./utils/solveValidation'));\n  \n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.\n   *\n   * `U * x = b`\n   *\n   * Syntax:\n   *\n   *    math.usolve(U, b);\n   *\n   * Examples:\n   *\n   *    var a = [[-2, 3], [2, 1]];\n   *    var b = [11, 9];\n   *    var x = usolve(a, b);  // [[8], [9]]\n   *\n   * See also:\n   *\n   *    lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} U       A N x N matrix or array (U)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\n   */\n  var usolve = typed('usolve', {\n    \n    'SparseMatrix, Array | Matrix': function (m, b) {\n      // process matrix\n      return _sparseBackwardSubstitution(m, b);\n    },\n\n    'DenseMatrix, Array | Matrix': function (m, b) {\n      // process matrix\n      return _denseBackwardSubstitution(m, b);\n    },\n\n    'Array, Array | Matrix': function (a, b) {\n      // create dense matrix from array\n      var m = matrix(a);\n      // use matrix implementation\n      var r = _denseBackwardSubstitution(m, b);\n      // result\n      return r.valueOf();\n    }\n  });\n\n  var _denseBackwardSubstitution = function (m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    // column vector data\n    var bdata = b._data;\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // result\n    var x = [];\n    // arrays\n    var data = m._data;\n    // backward solve m * x = b, loop columns (backwards)\n    for (var j = columns - 1; j >= 0 ; j--) {\n      // b[j]\n      var bj = bdata[j][0] || 0;\n      // x[j]\n      var xj;\n      // backward substitution (outer product) avoids inner looping when bj == 0\n      if (!equalScalar(bj, 0)) {\n        // value @ [j, j]\n        var vjj = data[j][j];\n        // check vjj\n        if (equalScalar(vjj, 0)) {\n          // system cannot be solved\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        // calculate xj\n        xj = divideScalar(bj, vjj);        \n        // loop rows\n        for (var i = j - 1; i >= 0; i--) {\n          // update copy of b\n          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];\n        }\n      }\n      else {\n        // zero value @ j\n        xj = 0;\n      }\n      // update x\n      x[j] = [xj];\n    }\n    // return column vector\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  };\n  \n  var _sparseBackwardSubstitution = function (m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    // column vector data\n    var bdata = b._data;\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // vars\n    var i, k;\n    // result\n    var x = [];\n    // backward solve m * x = b, loop columns (backwards)\n    for (var j = columns - 1; j >= 0 ; j--) {\n      // b[j]\n      var bj = bdata[j][0] || 0;\n      // backward substitution (outer product) avoids inner looping when bj == 0\n      if (!equalScalar(bj, 0)) {\n        // value @ [j, j]\n        var vjj = 0;\n        // upper triangular matrix values & index (column j)\n        var jvalues = [];\n        var jindex = [];\n        // first & last indeces in column\n        var f = ptr[j];\n        var l = ptr[j + 1];\n        // values in column, find value @ [j, j], loop backwards\n        for (k = l - 1; k >= f; k--) {\n          // row\n          i = index[k];\n          // check row\n          if (i === j) {\n            // update vjj\n            vjj = values[k];\n          }\n          else if (i < j) {\n            // store upper triangular\n            jvalues.push(values[k]);\n            jindex.push(i);\n          }\n        }\n        // at this point we must have a value @ [j, j]\n        if (equalScalar(vjj, 0)) {\n          // system cannot be solved, there is no value @ [j, j]\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        // calculate xj\n        var xj = divideScalar(bj, vjj);\n        // loop upper triangular\n        for (k = 0, l = jindex.length; k < l; k++) {\n          // row\n          i = jindex[k];\n          // update copy of b\n          bdata[i] = [subtract(bdata[i][0], multiplyScalar(xj, jvalues[k]))];\n        }\n        // update x\n        x[j] = [xj];\n      }\n      else {\n        // update x\n        x[j] = [0];\n      }\n    }\n    // return vector\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  };\n  \n  return usolve;\n}\n\nexports.name = 'usolve';\nexports.factory = factory;\n\n},{\"../../../type/matrix/function/matrix\":482,\"../../arithmetic/divideScalar\":289,\"../../arithmetic/multiplyScalar\":304,\"../../arithmetic/subtract\":312,\"../../relational/equalScalar\":384,\"./utils/solveValidation\":263}],263:[function(require,module,exports){\n'use strict';\n\nvar util = require('../../../../utils/index');\n\nvar string = util.string;\nvar array = util.array;\n\nvar isArray = Array.isArray;\n\nfunction factory (type) {\n  \n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\n   *\n   * @param {Matrix} m            An N x N matrix\n   * @param {Array | Matrix} b    A column vector\n   * @param {Boolean} copy        Return a copy of vector b\n   *\n   * @return {DenseMatrix}        Dense column vector b\n   */\n  var solveValidation = function (m, b, copy) {\n    // matrix size\n    var size = m.size();\n    // validate matrix dimensions\n    if (size.length !== 2)\n      throw new RangeError('Matrix must be two dimensional (size: ' + string.format(size) + ')');\n    // rows & columns\n    var rows = size[0];\n    var columns = size[1];    \n    // validate rows & columns\n    if (rows !== columns) \n      throw new RangeError('Matrix must be square (size: ' + string.format(size) + ')');\n    // vars\n    var data, i, bdata;\n    // check b is matrix\n    if (b && b.isMatrix === true) {\n      // matrix size\n      var msize = b.size();\n      // vector\n      if (msize.length === 1) {\n        // check vector length\n        if (msize[0] !== rows)\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        // create data array\n        data = [];\n        // matrix data (DenseMatrix)\n        bdata = b._data;\n        // loop b data\n        for (i = 0; i < rows; i++) {\n          // row array\n          data[i] = [bdata[i]];\n        }\n        // return Dense Matrix\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      }\n      // two dimensions\n      if (msize.length === 2) {\n        // array must be a column vector\n        if (msize[0] !== rows || msize[1] !== 1)\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        // check matrix type\n        if (b.isDenseMatrix === true) {\n          // check a copy is needed\n          if (copy) {\n            // create data array\n            data = [];\n            // matrix data (DenseMatrix)\n            bdata = b._data;\n            // loop b data\n            for (i = 0; i < rows; i++) {\n              // row array\n              data[i] = [bdata[i][0]];\n            }\n            // return Dense Matrix\n            return new DenseMatrix({\n              data: data,\n              size: [rows, 1],\n              datatype: b._datatype\n            });\n          }\n          // b is already a column vector\n          return b;\n        }\n        // create data array\n        data = [];\n        for (i = 0; i < rows; i++)\n          data[i] = [0];\n        // sparse matrix arrays\n        var values = b._values;\n        var index = b._index;\n        var ptr = b._ptr;\n        // loop values in column 0\n        for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n          // row\n          i = index[k];\n          // add to data\n          data[i][0] = values[k]; \n        }\n        // return Dense Matrix\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      }\n      // throw error\n      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n    }\n    // check b is array\n    if (isArray(b)) {\n      // size\n      var asize = array.size(b);\n      // check matrix dimensions, vector\n      if (asize.length === 1) {\n        // check vector length\n        if (asize[0] !== rows)\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');        \n        // create data array\n        data = [];\n        // loop b\n        for (i = 0; i < rows; i++) {\n          // row array\n          data[i] = [b[i]];\n        }\n        // return Dense Matrix\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n      if (asize.length === 2) {\n        // array must be a column vector\n        if (asize[0] !== rows || asize[1] !== 1)\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        // create data array\n        data = [];\n        // loop b data\n        for (i = 0; i < rows; i++) {\n          // row array\n          data[i] = [b[i][0]];\n        }\n        // return Dense Matrix\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n      // throw error\n      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');      \n    }\n  };\n  \n  return solveValidation;\n}\n\nexports.factory = factory;\n},{\"../../../../utils/index\":530}],264:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load) {\n\n  var cs_flip = load(require('./cs_flip'));\n  var cs_fkeep = load(require('./cs_fkeep'));\n  var cs_tdfs = load(require('./cs_tdfs'));\n  \n  var add       = load(require('../../arithmetic/add'));\n  var multiply  = load(require('../../arithmetic/multiply'));\n  var transpose = load(require('../../matrix/transpose'));\n\n  /**\n   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used \n   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n   * of a right looking sparse Cholesky factorization.\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   *\n   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n   * @param {Matrix} m        Sparse Matrix\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_amd = function (order, a) {\n    // check input parameters\n    if (!a || order <= 0 || order > 3)\n      return null;\n    // a matrix arrays\n    var asize = a._size;\n    // rows and columns\n    var m = asize[0];\n    var n = asize[1];    \n    // initialize vars\n    var lemax = 0;\n    // dense threshold\n    var dense = Math.max(16, 10 * Math.sqrt(n));\n    dense = Math.min(n - 2, dense);\n    // create target matrix C\n    var cm = _createTargetMatrix(order, a, m, n, dense);\n    // drop diagonal entries\n    cs_fkeep(cm, _diag, null);\n    // C matrix arrays\n    var cindex = cm._index;\n    var cptr = cm._ptr;\n\n    // number of nonzero elements in C\n    var cnz = cptr[n];\n    \n    // allocate result (n+1)\n    var P = [];\n    \n    // create workspace (8 * (n + 1))\n    var W = [];\n    var len = 0; // first n + 1 entries\n    var nv = n + 1; // next n + 1 entries\n    var next = 2 * (n + 1); // next n + 1 entries\n    var head = 3 * (n + 1);  // next n + 1 entries\n    var elen = 4 * (n + 1);  // next n + 1 entries\n    var degree = 5 * (n + 1);  // next n + 1 entries\n    var w = 6 * (n + 1);  // next n + 1 entries\n    var hhead = 7 * (n + 1);  // last n + 1 entries    \n\n    // use P as workspace for last\n    var last = P;\n    \n    // initialize quotient graph\n    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);\n    \n    // initialize degree lists\n    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);\n    \n    // minimum degree node\n    var mindeg = 0;\n    \n    // vars\n    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d;\n    \n    // while (selecting pivots) do\n    while (nel < n) {\n      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first\n      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow\n      // many nodes have been eliminated.\n      for (k = -1; mindeg < n && (k = W[head + mindeg]) == -1; mindeg++);      \n      if (W[next + k] != -1) \n        last[W[next + k]] = -1;\n      // remove k from degree list\n      W[head + mindeg] = W[next + k];\n      // elenk = |Ek|\n      var elenk = W[elen + k];\n      // # of nodes k represents\n      var nvk = W[nv + k];\n      // W[nv + k] nodes of A eliminated\n      nel += nvk;\n\n      // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is \n      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the\n      // degree lists. All elements e in Ek are absorved into element k.\n      var dk = 0;\n      // flag k as in Lk\n      W[nv + k] = -nvk;\n      var p = cptr[k];\n      // do in place if W[elen + k] == 0\n      var pk1 = (elenk === 0) ? p : cnz;\n      var pk2 = pk1;\n      for (k1 = 1; k1 <= elenk + 1; k1++) {\n        if (k1 > elenk) {\n          // search the nodes in k\n          e = k;\n          // list of nodes starts at cindex[pj]\n          pj = p;\n          // length of list of nodes in k\n          ln = W[len + k] - elenk;\n        }\n        else {\n          // search the nodes in e\n          e = cindex[p++];\n          pj = cptr[e];\n          // length of list of nodes in e\n          ln = W[len + e];\n        }\n        for (k2 = 1; k2 <= ln; k2++) {\n          i = cindex[pj++];\n          // check  node i dead, or seen\n          if ((nvi = W[nv + i]) <= 0) \n            continue;\n          // W[degree + Lk] += size of node i\n          dk += nvi;\n          // negate W[nv + i] to denote i in Lk\n          W[nv + i] = -nvi;\n          // place i in Lk\n          cindex[pk2++] = i;\n          if (W[next + i] != -1) \n            last[W[next + i]] = last[i];\n          // check we need to remove i from degree list\n          if (last[i] != -1) \n            W[next + last[i]] = W[next + i];\n          else\n            W[head + W[degree + i]] = W[next + i];\n        }\n        if (e != k) {\n          // absorb e into k\n          cptr[e] = cs_flip(k);\n          // e is now a dead element\n          W[w + e] = 0;\n        }\n      }\n      // cindex[cnz...nzmax] is free\n      if (elenk !== 0) \n        cnz = pk2;\n      // external degree of k - |Lk\\i|\n      W[degree + k] = dk;\n      // element k is in cindex[pk1..pk2-1]\n      cptr[k] = pk1;\n      W[len + k] = pk2 - pk1;\n      // k is now an element\n      W[elen + k] = -2;\n            \n      // Find set differences. The scan1 function now computes the set differences |Le \\ Lk| for all elements e. At the start of the\n      // scan, no entry in the w array is greater than or equal to mark.\n      \n      // clear w if necessary\n      mark = _wclear(mark, lemax, W, w, n);\n      // scan 1: find |Le\\Lk|\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check if W[elen + i] empty, skip it\n        if ((eln = W[elen + i]) <= 0) \n          continue;\n        // W[nv + i] was negated\n        nvi = -W[nv + i];\n        var wnvi = mark - nvi;\n        // scan Ei\n        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {\n          e = cindex[p];\n          if (W[w + e] >= mark) {\n            // decrement |Le\\Lk|\n            W[w + e] -= nvi;\n          }\n          else if (W[w + e] !== 0) {\n            // ensure e is a live element, 1st time e seen in scan 1\n            W[w + e] = W[degree + e] + wnvi;\n          }\n        }\n      }\n      \n      // degree update\n      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash\n      // function h(i) for all nodes in Lk.\n      \n      // scan2: degree update\n      for (pk = pk1; pk < pk2; pk++) {\n        // consider node i in Lk\n        i = cindex[pk];\n        p1 = cptr[i];\n        p2 = p1 + W[elen + i] - 1;\n        pn = p1;\n        // scan Ei\n        for (h = 0, d = 0, p = p1; p <= p2; p++) {\n          e = cindex[p];\n          // check e is an unabsorbed element\n          if (W[w + e] !== 0) {\n            // dext = |Le\\Lk|\n            var dext = W[w + e] - mark;\n            if (dext > 0) {\n              // sum up the set differences\n              d += dext;\n              // keep e in Ei\n              cindex[pn++] = e;\n              // compute the hash of node i\n              h += e;\n            }\n            else {\n              // aggressive absorb. e->k\n              cptr[e] = cs_flip(k);\n              // e is a dead element\n              W[w + e] = 0;\n            }\n          }\n        }\n        // W[elen + i] = |Ei|\n        W[elen + i] = pn - p1 + 1;\n        var p3 = pn;\n        var p4 = p1 + W[len + i];\n        // prune edges in Ai\n        for (p = p2 + 1; p < p4; p++) {\n          j = cindex[p];\n          // check node j dead or in Lk\n          var nvj = W[nv + j];\n          if (nvj <= 0) \n            continue;\n          // degree(i) += |j|\n          d += nvj;\n          // place j in node list of i\n          cindex[pn++] = j;\n          // compute hash for node i\n          h += j;\n        }\n        // check for mass elimination\n        if (d === 0) {\n          // absorb i into k\n          cptr[i] = cs_flip(k);\n          nvi = -W[nv + i];\n          // |Lk| -= |i|\n          dk -= nvi;\n          // |k| += W[nv + i]\n          nvk += nvi;\n          nel += nvi;\n          W[nv + i] = 0;\n          // node i is dead\n          W[elen + i] = -1;\n        }\n        else {\n          // update degree(i)\n          W[degree + i] = Math.min(W[degree + i], d);\n          // move first node to end\n          cindex[pn] = cindex[p3];\n          // move 1st el. to end of Ei\n          cindex[p3] = cindex[p1];\n          // add k as 1st element in of Ei\n          cindex[p1] = k;\n          // new len of adj. list of node i\n          W[len + i] = pn - p1 + 1;\n          // finalize hash of i\n          h = (h < 0 ? -h : h) % n;\n          // place i in hash bucket\n          W[next + i] = W[hhead + h];\n          W[hhead + h] = i;\n          // save hash of i in last[i]\n          last[i] = h;\n        }\n      }\n      // finalize |Lk|\n      W[degree + k] = dk;\n      lemax = Math.max(lemax, dk);\n      // clear w\n      mark = _wclear(mark + lemax, lemax, W, w, n);\n      \n      // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.\n      // If two nodes have identical adjacency lists, their hash functions wil be identical.\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check i is dead, skip it\n        if (W[nv + i] >= 0) \n          continue;\n        // scan hash bucket of node i\n        h = last[i];\n        i = W[hhead + h];\n        // hash bucket will be empty\n        W[hhead + h] = -1;\n        for (; i != -1 && W[next + i] != -1; i = W[next + i], mark++) {\n          ln = W[len + i];\n          eln = W[elen + i];\n          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) \n            W[w + cindex[p]] = mark;\n          var jlast = i;\n          // compare i with all j\n          for (j = W[next + i]; j != -1; ) {\n            var ok = W[len + j] === ln && W[elen + j] === eln;\n            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {\n              // compare i and j\n              if (W[w + cindex[p]] != mark) \n                ok = 0;\n            }\n            // check i and j are identical\n            if (ok) {\n              // absorb j into i\n              cptr[j] = cs_flip(i);\n              W[nv + i] += W[nv + j];\n              W[nv + j] = 0;\n              // node j is dead\n              W[elen + j] = -1;\n              // delete j from hash bucket\n              j = W[next + j];\n              W[next + jlast] = j;\n            }\n            else {\n              // j and i are different\n              jlast = j;\n              j = W[next + j];\n            }\n          }\n        }\n      }\n      \n      // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.\n      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.\n      for (p = pk1, pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check  i is dead, skip it\n        if ((nvi = -W[nv + i]) <= 0) \n          continue;\n        // restore W[nv + i]\n        W[nv + i] = nvi;\n        // compute external degree(i)\n        d = W[degree + i] + dk - nvi;\n        d = Math.min(d, n - nel - nvi);\n        if (W[head + d] != -1) \n          last[W[head + d]] = i;\n        // put i back in degree list\n        W[next + i] = W[head + d];\n        last[i] = -1;\n        W[head + d] = i;\n        // find new minimum degree\n        mindeg = Math.min(mindeg, d);\n        W[degree + i] = d;\n        // place i in Lk\n        cindex[p++] = i;\n      }\n      // # nodes absorbed into k\n      W[nv + k] = nvk;\n      // length of adj list of element k\n      if ((W[len + k] = p - pk1) === 0) {\n        // k is a root of the tree\n        cptr[k] = -1;\n        // k is now a dead element\n        W[w + k] = 0;\n      }\n      if (elenk !== 0) {\n        // free unused space in Lk\n        cnz = p;\n      }\n    }\n    \n    // Postordering. The elimination is complete, but no permutation has been computed. All that is left \n    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if\n    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation\n    // is computed. The tree is restored by unflipping all of ptr.\n    \n    // fix assembly tree\n    for (i = 0; i < n; i++) \n      cptr[i] = cs_flip(cptr[i]);\n    for (j = 0; j <= n; j++) \n      W[head + j] = -1;\n    // place unordered nodes in lists\n    for (j = n; j >= 0; j--) {\n      // skip if j is an element\n      if (W[nv + j] > 0)\n        continue;\n      // place j in list of its parent\n      W[next + j] = W[head + cptr[j]];\n      W[head + cptr[j]] = j;\n    }\n    // place elements in lists\n    for (e = n; e >= 0; e--) {\n      // skip unless e is an element\n      if (W[nv + e] <= 0)\n        continue;\n      if (cptr[e] != -1) {\n        // place e in list of its parent\n        W[next + e] = W[head + cptr[e]];\n        W[head + cptr[e]] = e;\n      }\n    }\n    // postorder the assembly tree\n    for (k = 0, i = 0; i <= n; i++) {\n      if (cptr[i] == -1) \n        k = cs_tdfs(i, k, W, head, next, P, w);\n    }\n    // remove last item in array\n    P.splice(P.length - 1, 1);\n    // return P\n    return P;\n  };\n  \n  /**\n   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\n   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n   *\n   * Order: 0\n   *   A natural ordering P=null matrix is returned.\n   *\n   * Order: 1\n   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n   *   P = M + M'\n   *\n   * Order: 2\n   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n   *   P = M' * M\n   * \n   * Order: 3\n   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n   *   P = M' * M\n   */\n  var _createTargetMatrix = function (order, a, m, n, dense) {\n    // compute A'\n    var at = transpose(a);\n\n    // check order = 1, matrix must be square\n    if (order === 1 && n === m) {\n      // C = A + A'\n      return add(a, at);\n    }\n    \n    // check order = 2, drop dense columns from M'\n    if (order == 2) {\n      // transpose arrays\n      var tindex = at._index;\n      var tptr = at._ptr;\n      // new column index\n      var p2 = 0;\n      // loop A' columns (rows)\n      for (var j = 0; j < m; j++) {\n        // column j of AT starts here\n        var p = tptr[j];\n        // new column j starts here\n        tptr[j] = p2;\n        // skip dense col j\n        if (tptr[j + 1] - p > dense) \n          continue;\n        // map rows in column j of A\n        for (var p1 = tptr[j + 1]; p < p1; p++) \n          tindex[p2++] = tindex[p];\n      }\n      // finalize AT\n      tptr[m] = p2;\n      // recreate A from new transpose matrix\n      a = transpose(at);\n      // use A' * A\n      return multiply(at, a);\n    }\n    \n    // use A' * A, square or rectangular matrix\n    return multiply(at, a);\n  };\n\n  /**\n   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:\n   *\n   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).\n   */\n  var _initializeQuotientGraph = function (n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {\n    // Initialize quotient graph\n    for (var k = 0; k < n; k++) \n      W[len + k] = cptr[k + 1] - cptr[k];\n    W[len + n] = 0;\n    // initialize workspace\n    for (var i = 0; i <= n; i++) {\n      // degree list i is empty\n      W[head + i] = -1;\n      last[i] = -1;\n      W[next + i] = -1;\n      // hash list i is empty\n      W[hhead + i] = -1;\n      // node i is just one node\n      W[nv + i] = 1;\n      // node i is alive\n      W[w + i] = 1;\n      // Ek of node i is empty\n      W[elen + i] = 0;\n      // degree of node i\n      W[degree + i] = W[len + i];\n    }\n    // clear w\n    var mark = _wclear(0, 0, W, w, n);\n    // n is a dead element\n    W[elen + n] = -2;\n    // n is a root of assembly tree\n    cptr[n] = -1;\n    // n is a dead element\n    W[w + n] = 0;\n    // return mark\n    return mark;\n  };\n\n  /**\n   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with \n   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\n   * output permutation p.\n   */\n  var _initializeDegreeLists = function (n, cptr, W, degree, elen, w, dense, nv, head, last, next) {\n    // result\n    var nel = 0;\n    // loop columns\n    for (var i = 0; i < n; i++) {\n      // degree @ i\n      var d = W[degree + i];\n      // check node i is empty\n      if (d === 0) {\n        // element i is dead\n        W[elen + i] = -2;\n        nel++;\n        // i is a root of assembly tree\n        cptr[i] = -1;\n        W[w + i] = 0;\n      }\n      else if (d > dense) {\n        // absorb i into element n\n        W[nv + i] = 0;\n        // node i is dead\n        W[elen + i] = -1;\n        nel++;\n        cptr[i] = cs_flip(n);\n        W[nv + n]++;\n      }\n      else {\n        var h = W[head + d];\n        if (h != -1)\n          last[h] = i;\n        // put node i in degree list d\n        W[next + i] = W[head + d];\n        W[head + d] = i;\n      }\n    }\n    return nel;\n  };\n\n  var _wclear = function(mark, lemax, W, w, n) {\n    if (mark < 2 || (mark + lemax < 0)) {\n      for (var k = 0; k < n; k++) {\n        if (W[w + k] !== 0)\n          W[w + k] = 1;\n      }\n      mark = 2 ;\n    }\n    // at this point, W [0..n-1] < mark holds\n    return mark;\n  };\n  \n  var _diag = function (i, j) { \n    return i != j;\n  };\n  \n  return cs_amd;\n}\n\nexports.name = 'cs_amd';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{\"../../arithmetic/add\":283,\"../../arithmetic/multiply\":303,\"../../matrix/transpose\":366,\"./cs_fkeep\":268,\"./cs_flip\":269,\"./cs_tdfs\":280}],265:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load) {\n\n  var transpose = load(require('../../matrix/transpose'));\n  \n  var cs_leaf = load(require('./cs_leaf'));\n\n  /**\n   * Computes the column counts using the upper triangular part of A.\n   * It transposes A internally, none of the input parameters are modified.\n   *\n   * @param {Matrix} a           The sparse matrix A\n   *\n   * @param {Matrix} ata         Count the columns of A'A instead\n   *\n   * @return                     An array of size n of the column counts or null on error\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_counts = function (a, parent, post, ata) {\n    // check inputs\n    if (!a || !parent || !post) \n      return null;\n    // a matrix arrays\n    var asize = a._size;\n    // rows and columns\n    var m = asize[0];\n    var n = asize[1];   \n    // variables\n    var i, j, k,  J,  p, p0, p1;\n    \n    // workspace size\n    var s = 4 * n + (ata ? (n + m + 1) : 0);\n    // allocate workspace\n    var w = []; // (s)\n    var ancestor = 0; // first n entries\n    var maxfirst = n; // next n entries\n    var prevleaf = 2 * n; // next n entries\n    var first = 3 * n; // next n entries\n    var head = 4 * n; // next n + 1 entries (used when ata is true)\n    var next = 5 * n + 1; // last entries in workspace\n    // clear workspace w[0..s-1]\n    for (k = 0; k < s; k++) \n      w[k] = -1;\n    \n    // allocate result\n    var colcount = []; // (n);\n    \n    // AT = A'\n    var at = transpose(a);\n    // at arrays\n    var tindex = at._index;\n    var tptr = at._ptr;\n\n    // find w[first + j]\n    for (k = 0; k < n; k++) {\n      j = post[k];\n      // colcount[j]=1 if j is a leaf\n      colcount[j] = (w[first + j] == -1) ? 1 : 0;\n      for (; j != -1 && w[first + j] == -1; j = parent[j]) \n        w[first + j] = k;\n    }\n\n    // initialize ata if needed\n    if (ata) {\n      // invert post\n      for (k = 0; k < n; k++) \n        w[post[k]] = k;\n      // loop rows (columns in AT)\n      for (i = 0; i < m; i++) {\n        // values in column i of AT\n        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) \n          k = Math.min(k, w[tindex[p]]);\n        // place row i in linked list k\n        w[next + i] = w[head + k];\n        w[head + k] = i;\n      }\n    }\n    \n    // each node in its own set\n    for (i = 0; i < n; i++) \n      w[ancestor + i] = i;\n    \n    for (k = 0; k < n; k++) {\n      // j is the kth node in postordered etree\n      j = post[k];\n      // check j is not a root\n      if (parent[j] != -1) \n        colcount[parent[j]]--;\n      \n      // J=j for LL'=A case\n      for (J = (ata ? w[head + k] : j); J != -1; J = (ata ? w[next + J] : -1)) {\n        for (p = tptr[J]; p < tptr[J+1]; p++) {\n          i = tindex[p];\n          var r = cs_leaf(i, j, w, first, maxfirst, prevleaf, ancestor);\n          // check A(i,j) is in skeleton\n          if (r.jleaf >= 1) \n            colcount[j]++;\n          // check account for overlap in q\n          if (r.jleaf == 2) \n            colcount[r.q]--;\n        }\n      }\n      if (parent[j] != -1) \n        w[ancestor + j] = parent[j];\n    }\n    // sum up colcount's of each child\n    for (j = 0; j < n; j++) {\n      if (parent[j] != -1) \n        colcount[parent[j]] += colcount[j];\n    }\n    return colcount;\n  };\n\n  return cs_counts;\n}\n\nexports.name = 'cs_counts';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{\"../../matrix/transpose\":366,\"./cs_leaf\":271}],266:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load) {\n\n  var cs_marked = load(require('./cs_marked'));\n  var cs_mark   = load(require('./cs_mark'));\n  var cs_unflip = load(require('./cs_unflip'));\n\n  /**\n   * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting\n   * at nodes in B (see cs_reach()).\n   *\n   * @param {Number}  j               The starting node for the DFS algorithm\n   * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored\n   * @param {Number}  top             Start index in stack xi[top..n-1]\n   * @param {Number}  k               The kth column in B\n   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n   *\n   * @return {Number}                 New value of top\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_dfs = function (j, g, top, xi, pinv) {\n    // g arrays\n    var index = g._index;\n    var ptr = g._ptr;\n    var size = g._size;\n    // columns\n    var n = size[1];\n    // vars\n    var i, p, p2;\n    // initialize head\n    var head = 0;\n    // initialize the recursion stack\n    xi[0] = j;\n    // loop\n    while (head >= 0) {\n      // get j from the top of the recursion stack\n      j = xi[head];\n      // apply permutation vector\n      var jnew = pinv ? pinv[j] : j;\n      // check node j is marked\n      if (!cs_marked(ptr, j)) {\n        // mark node j as visited\n        cs_mark(ptr, j);\n        // update stack (last n entries in xi)\n        xi[n + head] = jnew < 0 ? 0 : cs_unflip(ptr[jnew]);\n      }\n      // node j done if no unvisited neighbors\n      var done = 1;\n      // examine all neighbors of j, stack (last n entries in xi)\n      for (p = xi[n + head], p2 = jnew < 0 ? 0 : cs_unflip(ptr[jnew+1]); p < p2; p++) {\n        // consider neighbor node i\n        i = index[p];\n        // check we have visited node i, skip it\n        if (cs_marked(ptr, i)) \n          continue;\n        // pause depth-first search of node j, update stack (last n entries in xi)\n        xi[n + head] = p;\n        // start dfs at node i\n        xi[++head] = i;\n        // node j is not done\n        done = 0;\n        // break, to start dfs(i)\n        break;\n      }\n      // check depth-first search at node j is done\n      if (done) {\n        // remove j from the recursion stack\n        head--;\n        // and place in the output stack\n        xi[--top] = j;\n      }\n    }\n    return top;    \n  };\n\n  return cs_dfs;\n}\n\nexports.name = 'cs_dfs';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{\"./cs_mark\":273,\"./cs_marked\":274,\"./cs_unflip\":281}],267:[function(require,module,exports){\n'use strict';\n\nfunction factory () {\n\n  /**\n   * Computes the elimination tree of Matrix A (using triu(A)) or the \n   * elimination tree of A'A without forming A'A.\n   *\n   * @param {Matrix}  a               The A Matrix\n   * @param {boolean} ata             A value of true the function computes the etree of A'A\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_etree = function (a, ata) {\n    // check inputs\n    if (!a)\n      return null;\n    // a arrays\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    // rows & columns\n    var m = asize[0];\n    var n = asize[1];\n    \n    // allocate result\n    var parent = []; // (n)\n    \n    // allocate workspace\n    var w = []; // (n + (ata ? m : 0))\n    var ancestor = 0; // first n entries in w\n    var prev = n; // last m entries (ata = true)\n    \n    var i, inext;\n    \n    // check we are calculating A'A\n    if (ata) {\n      // initialize workspace\n      for (i = 0; i < m; i++) \n        w[prev + i] = -1;\n    }\n    // loop columns\n    for (var k = 0; k < n; k++) {\n      // node k has no parent yet\n      parent[k] = -1;\n      // nor does k have an ancestor\n      w[ancestor + k] = -1;\n      // values in column k\n      for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {\n        // row\n        var r = aindex[p];\n        // node\n        i = ata ? (w[prev + r]) : r;\n        // traverse from i to k \n        for (; i != -1 && i < k; i = inext) {\n          // inext = ancestor of i\n          inext = w[ancestor + i];\n          // path compression\n          w[ancestor + i] = k;\n          // check no anc., parent is k\n          if (inext == -1) \n            parent[i] = k;\n        }\n        if (ata) \n          w[prev + r] = k;\n      }\n    }\n    return parent;\n  };\n\n  return cs_etree;\n}\n\nexports.name = 'cs_etree';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{}],268:[function(require,module,exports){\n'use strict';\n\nfunction factory () {\n\n  /**\n   * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise\n   *\n   * @param {Matrix}   a              The sparse matrix\n   * @param {function} callback       The callback function, function will be invoked with the following args:\n   *                                    - The entry row\n   *                                    - The entry column\n   *                                    - The entry value\n   *                                    - The state parameter\n   * @param {any}      other          The state\n   *\n   * @return                          The number of nonzero elements in the matrix\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_fkeep = function (a, callback, other) {\n    // a arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    // columns\n    var n = asize[1];\n    // nonzero items\n    var nz = 0;\n    // loop columns\n    for (var j = 0; j < n; j++) {\n      // get current location of col j\n      var p = aptr[j];\n      // record new location of col j\n      aptr[j] = nz;\n      for (; p < aptr[j+1]; p++) {\n        // check we need to keep this item\n        if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {\n          // keep A(i,j)\n          aindex[nz] = aindex[p];\n          // check we need to process values (pattern only)\n          if (avalues) \n            avalues[nz] = avalues[p];\n          // increment nonzero items\n          nz++;\n        }\n      }\n    }\n    // finalize A\n    aptr[n] = nz;\n    // trim arrays\n    aindex.splice(nz, aindex.length - nz);\n    // check we need to process values (pattern only)\n    if (avalues)\n      avalues.splice(nz, avalues.length - nz);    \n    // return number of nonzero items\n    return (nz);\n  };\n  \n  return cs_fkeep;\n}\n\nexports.name = 'cs_fkeep';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{}],269:[function(require,module,exports){\n'use strict';\n\nfunction factory () {\n\n  /**\n   * This function \"flips\" its input about the integer -1.\n   *\n   * @param {Number}  i               The value to flip\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_flip = function (i) {\n    // flip the value\n    return -i - 2;\n  };\n\n  return cs_flip;\n}\n\nexports.name = 'cs_flip';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{}],270:[function(require,module,exports){\n'use strict';\n\nfunction factory () {\n\n  /**\n   * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.\n   *\n   * @param {Array} p           The permutation vector of length n. null value denotes identity\n   * @param {Array} b           The input vector\n   *\n   * @return {Array}            The output vector x = P'b\n   */\n  var cs_ipvec = function (p, b, n) {\n    // vars \n    var k;\n    var n = b.length;\n    var x = [];\n    // check permutation vector was provided, p = null denotes identity\n    if (p) {\n      // loop vector\n      for (k = 0; k < n; k++) {\n        // apply permutation\n        x[p[k]] = b[k];\n      }\n    }\n    else {\n      // loop vector\n      for (k = 0; k < n; k++) {\n        // x[i] = b[i]\n        x[k] = b[k];\n      }\n    }\n    return x;\n  };\n\n  return cs_ipvec;\n}\n\nexports.name = 'cs_ipvec';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{}],271:[function(require,module,exports){\n'use strict';\n\nfunction factory () {\n\n  /**\n   * This function determines if j is a leaf of the ith row subtree.\n   * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)\n   *\n   * @param {Number}  i               The ith row subtree\n   * @param {Number}  j               The node to test\n   * @param {Array}   w               The workspace array\n   * @param {Number}  first           The index offset within the workspace for the first array\n   * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array\n   * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array\n   * @param {Number}  ancestor        The index offset within the workspace for the ancestor array\n   *\n   * @return {Object}\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_leaf = function (i, j, w, first, maxfirst, prevleaf, ancestor) {\n    \n    var s, sparent, jprev;\n    \n    // our result\n    var jleaf = 0;\n    var q;\n    \n    // check j is a leaf\n    if (i <= j || w[first + j] <= w[maxfirst + i]) \n      return (-1);\n    // update max first[j] seen so far\n    w[maxfirst + i] = w[first + j];\n    // jprev = previous leaf of ith subtree\n    jprev = w[prevleaf + i];\n    w[prevleaf + i] = j;\n    \n    // check j is first or subsequent leaf\n    if (jprev === -1) {\n      // 1st leaf, q = root of ith subtree\n      jleaf = 1;\n      q = i;\n    }\n    else {\n      // update jleaf\n      jleaf = 2;\n      // q = least common ancester (jprev,j)\n      for (q = jprev; q != w[ancestor + q]; q = w[ancestor + q]);\n      for (s = jprev; s != q; s = sparent) {\n        // path compression\n        sparent = w[ancestor + s];\n        w[ancestor + s] = q;\n      }      \n    }\n    return {\n      jleaf: jleaf,\n      q: q\n    };\n  };\n\n  return cs_leaf;\n}\n\nexports.name = 'cs_leaf';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{}],272:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load) {\n\n  var abs = load(require('../../arithmetic/abs'));\n  var divideScalar = load(require('../../arithmetic/divideScalar'));\n  var multiply = load(require('../../arithmetic/multiply'));\n  \n  var larger = load(require('../../relational/larger'));\n  var largerEq = load(require('../../relational/largerEq'));\n  \n  var cs_spsolve = load(require('./cs_spsolve'));\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization\n   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L \n   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so\n   * L * U = A(p, q), where p is the inverse of pinv.\n   *\n   * @param {Matrix}  m               The A Matrix to factorize\n   * @param {Object}  s               The symbolic analysis from cs_sqr(). Provides the fill-reducing \n   *                                  column ordering q\n   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)\n   *\n   * @return {Number}                 The numeric LU factorization of A or null\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_lu = function (m, s, tol) {\n    // validate input\n    if (!m)\n      return null;\n    // m arrays\n    var size = m._size;\n    // columns\n    var n = size[1];\n    // symbolic analysis result\n    var q;\n    var lnz = 100;\n    var unz = 100;\n    // update symbolic analysis parameters\n    if (s) {\n      q = s.q;\n      lnz = s.lnz || lnz;\n      unz = s.unz || unz;\n    }\n    // L arrays\n    var lvalues = []; // (lnz)\n    var lindex = []; // (lnz);\n    var lptr = []; // (n + 1);\n    // L\n    var L = new SparseMatrix({\n      values: lvalues,\n      index: lindex,\n      ptr: lptr,\n      size: [n, n]\n    });\n    // U arrays\n    var uvalues = []; // (unz);\n    var uindex = []; // (unz);\n    var uptr = []; // (n + 1);\n    // U\n    var U = new SparseMatrix({\n      values: uvalues,\n      index: uindex,\n      ptr: uptr,\n      size: [n, n]\n    });\n    // inverse of permutation vector\n    var pinv = []; // (n);\n    // vars \n    var i, p;\n    // allocate arrays\n    var x = []; // (n);\n    var xi = []; // (2 * n);\n    // initialize variables\n    for (i = 0; i < n; i++) {\n      // clear workspace\n      x[i] = 0;\n      // no rows pivotal yet\n      pinv[i] = -1;\n      // no cols of L yet\n      lptr[i + 1] = 0;\n    }\n    // reset number of nonzero elements in L and U\n    lnz = 0;\n    unz = 0;\n    // compute L(:,k) and U(:,k)\n    for (var k = 0; k < n; k++) {\n      // update ptr\n      lptr[k] = lnz;\n      uptr[k] = unz;\n      // apply column permutations if needed\n      var col = q ? q[k] : k;\n      // solve triangular system, x = L\\A(:,col)\n      var top = cs_spsolve(L, m, col, xi, x, pinv, 1);\n      // find pivot\n      var ipiv = -1;\n      var a = -1;\n      // loop xi[] from top -> n\n      for (p = top; p < n; p++) {\n        // x[i] is nonzero\n        i = xi[p];\n        // check row i is not yet pivotal\n        if (pinv[i] < 0) {\n          // absolute value of x[i]          \n          var xabs = abs(x[i]);\n          // check absoulte value is greater than pivot value\n          if (larger(xabs, a)) {\n            // largest pivot candidate so far\n            a = xabs;\n            ipiv = i;\n          }\n        }\n        else {\n          // x(i) is the entry U(pinv[i],k)\n          uindex[unz] = pinv[i];\n          uvalues[unz++] = x[i];\n        }\n      }\n      // validate we found a valid pivot\n      if (ipiv == -1 || a <= 0) \n        return null;\n      // update actual pivot column, give preference to diagonal value\n      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol)))\n        ipiv = col;\n      // the chosen pivot\n      var pivot = x[ipiv];\n      // last entry in U(:,k) is U(k,k)\n      uindex[unz] = k;\n      uvalues[unz++] = pivot;\n      // ipiv is the kth pivot row\n      pinv[ipiv] = k;\n      // first entry in L(:,k) is L(k,k) = 1\n      lindex[lnz] = ipiv;\n      lvalues[lnz++] = 1;\n      // L(k+1:n,k) = x / pivot      \n      for (p = top; p < n; p++) {\n        // row\n        i = xi[p];\n        // check x(i) is an entry in L(:,k)\n        if (pinv[i] < 0) {\n          // save unpermuted row in L\n          lindex[lnz] = i;\n          // scale pivot column\n          lvalues[lnz++] = divideScalar(x[i], pivot);\n        }\n        // x[0..n-1] = 0 for next k\n        x[i] = 0;\n      }\n    }\n    // update ptr\n    lptr[n] = lnz;\n    uptr[n] = unz;\n    // fix row indices of L for final pinv\n    for (p = 0; p < lnz; p++) \n      lindex[p] = pinv[lindex[p]];\n    // trim arrays\n    lvalues.splice(lnz, lvalues.length - lnz);\n    lindex.splice(lnz, lindex.length - lnz);\n    uvalues.splice(unz, uvalues.length - unz);\n    uindex.splice(unz, uindex.length - unz);    \n    // return LU factor\n    return {\n      L: L,\n      U: U,\n      pinv: pinv\n    };\n  };\n\n  return cs_lu;\n}\n\nexports.name = 'cs_lu';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{\"../../arithmetic/abs\":282,\"../../arithmetic/divideScalar\":289,\"../../arithmetic/multiply\":303,\"../../relational/larger\":386,\"../../relational/largerEq\":387,\"./cs_spsolve\":278}],273:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load) {\n\n  var cs_flip = load(require('./cs_flip'));\n\n  /**\n   * Marks the node at w[j]\n   *\n   * @param {Array}   w               The array\n   * @param {Number}  j               The array index\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_mark = function (w, j) {\n    // mark w[j]\n    w[j] = cs_flip(w [j]);\n  };\n\n  return cs_mark;\n}\n\nexports.name = 'cs_mark';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{\"./cs_flip\":269}],274:[function(require,module,exports){\n'use strict';\n\nfunction factory () {\n\n  /**\n   * Checks if the node at w[j] is marked\n   *\n   * @param {Array}   w               The array\n   * @param {Number}  j               The array index\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_marked = function (w, j) {\n    // check node is marked\n    return w[j] < 0;\n  };\n\n  return cs_marked;\n}\n\nexports.name = 'cs_marked';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{}],275:[function(require,module,exports){\n'use strict';\n\nfunction factory (type) {\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Permutes a sparse matrix C = P * A * Q\n   *\n   * @param {Matrix}  a               The Matrix A\n   * @param {Array}   pinv            The row permutation vector\n   * @param {Array}   q               The column permutation vector\n   * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise\n   *\n   * @return {Matrix}                 C = P * A * Q, null on error\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_permute = function (a, pinv, q, values) {\n    // a arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // rows & columns\n    var m = asize[0];\n    var n = asize[1];\n    // c arrays\n    var cvalues = values && a._values ? [] : null;\n    var cindex = []; // (aptr[n]);\n    var cptr = []; // (n + 1);\n    // initialize vars\n    var nz = 0;\n    // loop columns    \n    for (var k = 0; k < n; k++) {\n      // column k of C is column q[k] of A\n      cptr[k] = nz;\n      // apply column permutation\n      var j = q ? (q[k]) : k;\n      // loop values in column j of A\n      for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {\n        // row i of A is row pinv[i] of C\n        var r = pinv ? pinv[aindex[t]] : aindex[t];\n        // index\n        cindex[nz] = r;\n        // check we need to populate values\n        if (cvalues) \n          cvalues[nz] = avalues[t];\n        // increment number of nonzero elements\n        nz++;\n      }\n    }\n    // finalize the last column of C\n    cptr[n] = nz;\n    // return C matrix\n    return new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [m, n],\n      datatype: adt\n    });\n  };\n\n  return cs_permute;\n}\n\nexports.name = 'cs_permute';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{}],276:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load) {\n\n  var cs_tdfs = load(require('./cs_tdfs'));\n\n  /**\n   * Post order a tree of forest\n   *\n   * @param {Array}   parent          The tree or forest\n   * @param {Number}  n               Number of columns\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_post = function (parent, n) {\n    // check inputs\n    if (!parent) \n      return null;\n    // vars \n    var k = 0;\n    var j;\n    // allocate result\n    var post = []; // (n);\n    // workspace, head: first n entries, next: next n entries, stack: last n entries\n    var w = []; // (3 * n);\n    var head = 0; \n    var next = n; \n    var stack = 2 * n;\n    // initialize workspace\n    for (j = 0; j < n; j++) {\n      // empty linked lists\n      w[head + j] = -1;\n    }\n    // traverse nodes in reverse order\n    for (j = n-1; j >= 0; j--) {\n      // check j is a root\n      if (parent[j] == -1) \n        continue;\n      // add j to list of its parent\n      w[next + j] = w[head + parent[j]];\n      w[head + parent[j]] = j;\n    }\n    // loop nodes\n    for (j = 0; j < n; j++) {\n      // skip j if it is not a root\n      if (parent[j] != -1) \n        continue;\n      // depth-first search\n      k = cs_tdfs(j, k, w, head, next, post, stack);\n    }\n    return post;\n  };\n\n  return cs_post;\n}\n\nexports.name = 'cs_post';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{\"./cs_tdfs\":280}],277:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load) {\n\n  var cs_dfs = load(require('./cs_dfs'));\n  var cs_marked = load(require('./cs_marked'));\n  var cs_mark = load(require('./cs_mark'));\n\n  /**\n   * The cs_reach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1 \n   * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The\n   * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).\n   *\n   * @param {Matrix}  g               The G matrix\n   * @param {Matrix}  b               The B matrix\n   * @param {Number}  k               The kth column in B\n   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n   * @param {Array}   pinv            The inverse row permutation vector\n   *\n   * @return {Number}                 The index for the nonzero pattern\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_reach = function (g, b, k, xi, pinv) {\n    // g arrays\n    var gptr = g._ptr;\n    var gsize = g._size;\n    // b arrays\n    var bindex = b._index;\n    var bptr = b._ptr;\n    // columns\n    var n = gsize[1];\n    // vars\n    var p, p0, p1;\n    // initialize top\n    var top = n;\n    // loop column indeces in B\n    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {\n      // node i\n      var i = bindex[p];\n      // check node i is marked\n      if (!cs_marked(gptr, i)) {\n        // start a dfs at unmarked node i\n        top = cs_dfs(i, g, top, xi, pinv);\n      }\n    }\n    // loop columns from top -> n - 1\n    for (p = top; p < n; p++) {\n      // restore G\n      cs_mark(gptr, xi[p]);\n    }\n    return top;\n  };\n\n  return cs_reach;\n}\n\nexports.name = 'cs_reach';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{\"./cs_dfs\":266,\"./cs_mark\":273,\"./cs_marked\":274}],278:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load) {\n\n  var divideScalar = load(require('../../arithmetic/divideScalar'));\n  var multiply = load(require('../../arithmetic/multiply'));\n  var subtract = load(require('../../arithmetic/subtract'));\n\n  var cs_reach = load(require('./cs_reach'));\n\n  /**\n   * The function cs_spsolve() computes the solution to G * x = bk, where bk is the\n   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the\n   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U \n   * is upper triangular with the diagonal entry as the last entry in each column.\n   *\n   * @param {Matrix}  g               The G matrix\n   * @param {Matrix}  b               The B matrix\n   * @param {Number}  k               The kth column in B\n   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n   * @param {Array}   x               The soluton to the linear system G * x = b\n   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n   * @param {boolean} lo              The lower (true) upper triangular (false) flag\n   *\n   * @return {Number}                 The index for the nonzero pattern\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_spsolve = function (g, b, k, xi, x, pinv, lo) {\n    // g arrays\n    var gvalues = g._values;\n    var gindex = g._index;\n    var gptr = g._ptr;\n    var gsize = g._size;\n    // columns\n    var n = gsize[1];\n    // b arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    // vars\n    var p, p0, p1, q;\n    // xi[top..n-1] = cs_reach(B(:,k))\n    var top = cs_reach(g, b, k, xi, pinv);\n    // clear x\n    for (p = top; p < n; p++) \n      x[xi[p]] = 0;\n    // scatter b\n    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) \n      x[bindex[p]] = bvalues[p];\n    // loop columns\n    for (var px = top; px < n; px++) {\n      // x array index for px\n      var j = xi[px];\n      // apply permutation vector (U x = b), j maps to column J of G\n      var J = pinv ? pinv[j] : j;\n      // check column J is empty\n      if (J < 0)\n        continue;\n      // column value indeces in G, p0 <= p < p1\n      p0 = gptr[J];\n      p1 = gptr[J + 1];\n      // x(j) /= G(j,j)\n      x[j] = divideScalar(x[j], gvalues[lo ? p0 : (p1 - 1)]);\n      // first entry L(j,j)\n      p = lo ? (p0 + 1) : p0;\n      q = lo ? (p1) : (p1 - 1);\n      // loop\n      for ( ; p < q ; p++) {\n        // row\n        var i = gindex[p];\n        // x(i) -= G(i,j) * x(j)\n        x[i] = subtract(x[i], multiply(gvalues[p], x[j]));\n      }\n    }\n    // return top of stack\n    return top;\n  };\n  \n  return cs_spsolve;\n}\n\nexports.name = 'cs_spsolve';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{\"../../arithmetic/divideScalar\":289,\"../../arithmetic/multiply\":303,\"../../arithmetic/subtract\":312,\"./cs_reach\":277}],279:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load) {\n\n  var cs_amd = load(require('./cs_amd'));\n  var cs_permute = load(require('./cs_permute'));\n  var cs_etree = load(require('./cs_etree'));\n  var cs_post = load(require('./cs_post'));\n  var cs_counts = load(require('./cs_counts'));\n\n  /**\n   * Symbolic ordering and analysis for QR and LU decompositions.\n   *\n   * @param {Number}  order           The ordering strategy (see cs_amd for more details)\n   * @param {Matrix}  a               The A matrix\n   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or\n   *                                  symbolic ordering and analysis for LU decomposition (false)\n   *\n   * @return {Object}                 The Symbolic ordering and analysis for matrix A\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_sqr = function (order, a, qr) {\n    // a arrays\n    var aptr = a._ptr;\n    var asize = a._size;\n    // columns\n    var n = asize[1];\n    // vars\n    var k;\n    // symbolic analysis result\n    var s = {};    \n    // fill-reducing ordering\n    s.q = cs_amd(order, a);\n    // validate results\n    if (order && !s.q) \n      return null;\n    // QR symbolic analysis\n    if (qr) {\n      // apply permutations if needed\n      var c = order ? cs_permute(a, null, s.q, 0) : a;\n      // etree of C'*C, where C=A(:,q)\n      s.parent = cs_etree(c, 1);\n      // post order elimination tree\n      var post = cs_post (s.parent, n);\n      // col counts chol(C'*C)\n      s.cp = cs_counts(c, s.parent, post, 1);\n      // check we have everything needed to calculate number of nonzero elements\n      if (c && s.parent && s.cp && _vcount(c, s)) {\n        // calculate number of nonzero elements\n        for (s.unz = 0, k = 0; k < n; k++) \n          s.unz += s.cp[k];\n      }\n    }\n    else {\n      // for LU factorization only, guess nnz(L) and nnz(U)\n      s.unz = 4 * (aptr[n]) + n;\n      s.lnz = s.unz;\n    }\n    // return result S\n    return s;\n  };\n  \n  /**\n   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent\n   */\n  var _vcount = function (a, s) {\n    // a arrays\n    var aptr = a._ptr;\n    var aindex = a._index;\n    var asize = a._size;\n    // rows & columns\n    var m = asize[0];\n    var n = asize[1];\n    // initialize s arrays\n    s.pinv = []; // (m + n);\n    s.leftmost = []; // (m);\n    // vars\n    var parent = s.parent;\n    var pinv = s.pinv;\n    var leftmost = s.leftmost;\n    // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries\n    var w = []; // (m + 3 * n);\n    var next = 0;\n    var head = m;\n    var tail = m + n;\n    var nque = m + 2 * n;\n    // vars\n    var i, k, p, p0, p1;\n    // initialize w\n    for (k = 0; k < n; k++) {\n      // queue k is empty\n      w[head + k] = -1;\n      w[tail + k] = -1;\n      w[nque + k] = 0;\n    }\n    // initialize row arrays\n    for (i = 0; i < m; i++) \n      leftmost[i] = -1;\n    // loop columns backwards    \n    for (k = n - 1; k >= 0; k--) {\n      // values & index for column k\n      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {\n        // leftmost[i] = min(find(A(i,:)))\n        leftmost[aindex[p]] = k;\n      }\n    }\n    // scan rows in reverse order\n    for (i = m - 1; i >= 0; i--) {\n      // row i is not yet ordered\n      pinv[i] = -1;\n      k = leftmost[i];\n      // check row i is empty\n      if (k == -1) \n        continue;\n      // first row in queue k\n      if (w[nque + k]++ === 0) \n        w[tail + k] = i;\n      // put i at head of queue k\n      w[next + i] = w[head + k];\n      w[head + k] = i;\n    }\n    s.lnz = 0;\n    s.m2 = m;\n    // find row permutation and nnz(V)\n    for (k = 0; k < n; k++) {\n      // remove row i from queue k\n      i = w[head + k];\n      // count V(k,k) as nonzero\n      s.lnz++;\n      // add a fictitious row\n      if (i < 0) \n        i = s.m2++;\n      // associate row i with V(:,k)\n      pinv[i] = k;\n      // skip if V(k+1:m,k) is empty\n      if (--nque[k] <= 0) \n        continue;\n      // nque[k] is nnz (V(k+1:m,k))\n      s.lnz += w[nque + k];\n      // move all rows to parent of k\n      var pa = parent[k];\n      if (pa != -1) {\n        if (w[nque + pa] === 0) \n          w[tail + pa] = w[tail + k];\n        w[next + w[tail + k]] = w[head + pa];\n        w[head + pa] = w[next + i];\n        w[nque + pa] += w[nque + k];\n      }\n    }\n    for (i = 0; i < m; i++) {\n      if (pinv[i] < 0) \n        pinv[i] = k++;\n    }\n    return true;\n  };\n\n  return cs_sqr;\n}\n\nexports.name = 'cs_sqr';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{\"./cs_amd\":264,\"./cs_counts\":265,\"./cs_etree\":267,\"./cs_permute\":275,\"./cs_post\":276}],280:[function(require,module,exports){\n'use strict';\n\nfunction factory () {\n\n  /**\n   * Depth-first search and postorder of a tree rooted at node j\n   *\n   * @param {Number}  j               The tree node\n   * @param {Number}  k               \n   * @param {Array}   w               The workspace array\n   * @param {Number}  head            The index offset within the workspace for the head array\n   * @param {Number}  next            The index offset within the workspace for the next array\n   * @param {Array}   post            The post ordering array\n   * @param {Number}  stack           The index offset within the workspace for the stack array\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_tdfs = function (j, k, w, head, next, post, stack) {\n    // variables\n    var top = 0;\n    // place j on the stack\n    w[stack] = j;\n    // while (stack is not empty) \n    while (top >= 0) {\n      // p = top of stack\n      var p = w[stack + top];\n      // i = youngest child of p\n      var i = w[head + p];\n      if (i == -1) {\n        // p has no unordered children left\n        top--;\n        // node p is the kth postordered node\n        post[k++] = p;\n      }\n      else {\n        // remove i from children of p\n        w[head + p] = w[next + i];\n        // increment top\n        ++top;\n        // start dfs on child node i\n        w[stack + top] = i;\n      }\n    }\n    return k;\n  };\n\n  return cs_tdfs;\n}\n\nexports.name = 'cs_tdfs';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{}],281:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load) {\n\n  var cs_flip = load(require('./cs_flip'));\n  \n  /**\n   * Flips the value if it is negative of returns the same value otherwise.\n   *\n   * @param {Number}  i               The value to flip\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_unflip = function (i) {\n    // flip the value if it is negative\n    return i < 0 ? cs_flip(i) : i;\n  };\n\n  return cs_unflip;\n}\n\nexports.name = 'cs_unflip';\nexports.path = 'sparse';\nexports.factory = factory;\n\n},{\"./cs_flip\":269}],282:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the absolute value of a number. For matrices, the function is\n   * evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.abs(x)\n   *\n   * Examples:\n   *\n   *    math.abs(3.5);                // returns number 3.5\n   *    math.abs(-4.2);               // returns number 4.2\n   *\n   *    math.abs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]\n   *\n   * See also:\n   *\n   *    sign\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            A number or matrix for which to get the absolute value\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Absolute value of `x`\n   */\n  var abs = typed('abs', {\n    'number': Math.abs,\n\n    'Complex': function (x) {\n      return x.abs();\n    },\n\n    'BigNumber': function (x) {\n      return x.abs();\n    },\n\n    'Fraction': function (x) {\n      return x.abs();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since abs(0) = 0\n      return deepMap(x, abs, true);\n    },\n\n    'Unit': function(x) {\n      return x.abs();\n    }\n  });\n\n  abs.toTex = {1: '\\\\left|${args[0]}\\\\right|'};\n\n  return abs;\n}\n\nexports.name = 'abs';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],283:[function(require,module,exports){\n'use strict';\n\nvar extend = require('../../utils/object').extend;\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n  var latex = require('../../utils/latex.js');\n  \n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Add two or more values, `x + y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.add(x, y)\n   *    math.add(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.add(2, 3);               // returns number 5\n   *    math.add(2, 3, 4);            // returns number 9\n   *\n   *    var a = math.complex(2, 3);\n   *    var b = math.complex(-4, 1);\n   *    math.add(a, b);               // returns Complex -2 + 4i\n   *\n   *    math.add([1, 2, 3], 4);       // returns Array [5, 6, 7]\n   *\n   *    var c = math.unit('5 cm');\n   *    var d = math.unit('2.1 mm');\n   *    math.add(c, d);               // returns Unit 52.1 mm\n   *\n   *    math.add(\"2.3\", \"4\");         // returns number 6.3\n   *\n   * See also:\n   *\n   *    subtract, sum\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\n   */\n  var add = typed('add', extend({\n    // we extend the signatures of addScalar with signatures dealing with matrices\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n      \n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm04(x, y, addScalar);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm01(y, x, addScalar, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm01(x, y, addScalar, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, addScalar);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n    \n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return add(matrix(x), matrix(y)).valueOf();\n    },\n    \n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return add(matrix(x), y);\n    },\n    \n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return add(x, matrix(y));\n    },\n    \n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm10(x, y, addScalar, false);\n          break;\n        default:\n          c = algorithm14(x, y, addScalar, false);\n          break;\n      }\n      return c;\n    },\n    \n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm10(y, x, addScalar, true);\n          break;\n        default:\n          c = algorithm14(y, x, addScalar, true);\n          break;\n      }\n      return c;\n    },\n    \n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, addScalar, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, addScalar, true).valueOf();\n    },\n\n    'any, any': addScalar,\n\n    'any, any, ...any': function (x, y, rest) {\n      var result = add(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = add(result, rest[i]);\n      }\n\n      return result;\n    }\n  }, addScalar.signatures));\n\n  add.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['add'] + '${args[1]}\\\\right)'\n  };\n  \n  return add;\n}\n\nexports.name = 'add';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm01\":485,\"../../type/matrix/utils/algorithm04\":488,\"../../type/matrix/utils/algorithm10\":494,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/latex.js\":531,\"../../utils/object\":533,\"./addScalar\":284}],284:[function(require,module,exports){\n'use strict';\n\nfunction factory(type, config, load, typed) {\n\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`\n   * @private\n   */\n  var add = typed('add', {\n\n    'number, number': function (x, y) {\n      return x + y;\n    },\n\n    'Complex, Complex': function (x, y) {\n      return x.add(y);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.plus(y);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.add(y);\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (x.value == null) throw new Error('Parameter x contains a unit with undefined value');\n      if (y.value == null) throw new Error('Parameter y contains a unit with undefined value');\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n\n      var res = x.clone();\n      res.value = add(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    }\n  });\n\n  return add;\n}\n\nexports.factory = factory;\n\n},{}],285:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var unaryMinus = load(require('./unaryMinus'));\n  var isNegative = load(require('../utils/isNegative'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Calculate the cubic root of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cbrt(x)\n   *    math.cbrt(x, allRoots)\n   *\n   * Examples:\n   *\n   *    math.cbrt(27);                  // returns 3\n   *    math.cube(3);                   // returns 27\n   *    math.cbrt(-64);                 // returns -4\n   *    math.cbrt(math.unit('27 m^3')); // returns Unit 3 m\n   *    math.cbrt([27, 64, 125]);       // returns [3, 4, 5]\n   *\n   *    var x = math.complex('8i');\n   *    math.cbrt(x);                   // returns Complex 1.7320508075689 + i\n   *    math.cbrt(x, true);             // returns Matrix [\n   *                                    //    1.7320508075689 + i\n   *                                    //   -1.7320508075689 + i\n   *                                    //   -2i\n   *                                    // ]\n   *\n   * See also:\n   *\n   *    square, sqrt, cube\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x\n   *            Value for which to calculate the cubic root.\n   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n   *            when `x` is a number or complex number. If true, all complex\n   *            roots are returned, if false (default) the principal root is\n   *            returned.\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}\n   *            Returns the cubic root of `x`\n   */\n  var cbrt = typed('cbrt', {\n    'number': _cbrtNumber,\n    // note: signature 'number, boolean' is also supported,\n    //       created by typed as it knows how to convert number to Complex\n\n    'Complex': _cbrtComplex,\n\n    'Complex, boolean': _cbrtComplex,\n\n    'BigNumber': function (x) {\n      return x.cbrt();\n    },\n\n    'Unit': _cbrtUnit,\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since cbrt(0) = 0\n      return deepMap(x, cbrt, true);\n    }\n  });\n\n  /**\n   * Calculate the cubic root for a complex number\n   * @param {Complex} x\n   * @param {boolean} [allRoots]   If true, the function will return an array\n   *                               with all three roots. If false or undefined,\n   *                               the principal root is returned.\n   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x\n   * @private\n   */\n  function _cbrtComplex(x, allRoots) {\n    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers\n\n    var arg_3 = x.arg() / 3;\n    var abs = x.abs();\n\n    // principal root:\n    var principal = new type.Complex(_cbrtNumber(abs), 0).mul(\n        new type.Complex(0, arg_3).exp());\n\n    if (allRoots) {\n      var all = [\n          principal,\n          new type.Complex(_cbrtNumber(abs), 0).mul(\n            new type.Complex(0, arg_3 + Math.PI * 2 / 3).exp()),\n          new type.Complex(_cbrtNumber(abs), 0).mul(\n            new type.Complex(0, arg_3 - Math.PI * 2 / 3).exp())\n      ];\n\n      return (config.matrix === 'Array') ? all : matrix(all);\n    }\n    else {\n      return principal;\n    }\n  }\n\n  /**\n   * Calculate the cubic root for a Unit\n   * @param {Unit} x\n   * @return {Unit} Returns the cubic root of x\n   * @private\n   */\n  function _cbrtUnit(x) {\n    if(x.value && x.value.isComplex) {\n      var result = x.clone();\n      result.value = 1.0;\n      result = result.pow(1.0/3);           // Compute the units\n      result.value = _cbrtComplex(x.value); // Compute the value\n      return result;\n    }\n    else {\n      var negate = isNegative(x.value);\n      if (negate) {\n        x.value = unaryMinus(x.value);\n      }\n\n      // TODO: create a helper function for this\n      var third;\n      if (x.value && x.value.isBigNumber) {\n        third = new type.BigNumber(1).div(3);\n      }\n      else if (x.value && x.value.isFraction) {\n        third = new type.Fraction(1, 3);\n      }\n      else {\n        third = 1/3;\n      }\n\n      var result = x.pow(third);\n\n      if (negate) {\n        result.value = unaryMinus(result.value);\n      }\n\n      return result;\n    }\n  }\n\n  cbrt.toTex = {1: '\\\\sqrt[3]{${args[0]}}'};\n\n  return cbrt;\n}\n\n/**\n * Calculate cbrt for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number | Complex} Returns the cubic root of x\n * @private\n */\nvar _cbrtNumber = Math.cbrt || function (x) {\n  if (x === 0) {\n    return x;\n  }\n\n  var negate = x < 0;\n  var result;\n  if (negate) {\n    x = -x;\n  }\n\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3);\n    // from http://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n    result = (x / (result * result) + (2 * result)) / 3;\n  } else {\n    result = x;\n  }\n\n  return negate ? -result : result;\n};\n\nexports.name = 'cbrt';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/collection/deepMap\":523,\"../utils/isNegative\":451,\"./unaryMinus\":313}],286:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2);               // returns number 4\n   *    math.ceil(3.8);               // returns number 4\n   *    math.ceil(-4.2);              // returns number -4\n   *    math.ceil(-4.7);              // returns number -4\n   *\n   *    var c = math.complex(3.2, -2.7);\n   *    math.ceil(c);                 // returns Complex 4 - 2i\n   *\n   *    math.ceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  var ceil = typed('ceil', {\n    'number': Math.ceil,\n\n    'Complex': function (x) {\n      return x.ceil();\n    },\n\n    'BigNumber': function (x) {\n      return x.ceil();\n    },\n\n    'Fraction': function (x) {\n      return x.ceil();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, ceil, true);\n    }\n  });\n\n  ceil.toTex = {1: '\\\\left\\\\lceil${args[0]}\\\\right\\\\rceil'};\n\n  return ceil;\n}\n\nexports.name = 'ceil';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],287:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Compute the cube of a value, `x * x * x`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cube(x)\n   *\n   * Examples:\n   *\n   *    math.cube(2);            // returns number 8\n   *    math.pow(2, 3);          // returns number 8\n   *    math.cube(4);            // returns number 64\n   *    4 * 4 * 4;               // returns number 64\n   *\n   *    math.cube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]\n   *\n   * See also:\n   *\n   *    multiply, square, pow, cbrt\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x\n   */\n  var cube = typed('cube', {\n    'number': function (x) {\n      return x * x * x;\n    },\n\n    'Complex': function (x) {\n      return x.mul(x).mul(x); // Is faster than pow(x, 3)\n    },\n\n    'BigNumber': function (x) {\n      return x.times(x).times(x);\n    },\n\n    'Fraction': function (x) {\n      return x.pow(3); // Is faster than mul()mul()mul()\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since cube(0) = 0\n      return deepMap(x, cube, true);\n    },\n\n    'Unit': function(x) {\n      return x.pow(3);\n    }\n  });\n\n  cube.toTex = {1: '\\\\left(${args[0]}\\\\right)^3'};\n\n  return cube;\n}\n\nexports.name = 'cube';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],288:[function(require,module,exports){\n'use strict';\n\nvar extend = require('../../utils/object').extend;\n\nfunction factory (type, config, load, typed) {\n\n  var divideScalar = load(require('./divideScalar'));\n  var multiply     = load(require('./multiply'));\n  var inv          = load(require('../matrix/inv'));\n  var matrix       = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3);            // returns number 0.6666666666666666\n   *\n   *    var a = math.complex(5, 14);\n   *    var b = math.complex(4, 1);\n   *    math.divide(a, b);            // returns Complex 2 + 3i\n   *\n   *    var c = [[7, -6], [13, -4]];\n   *    var d = [[1, 2], [4, 3]];\n   *    math.divide(c, d);            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    var e = math.unit('18 km');\n   *    math.divide(e, 4.5);          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n  var divide = typed('divide', extend({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n\n    'Array | Matrix, Array | Matrix': function (x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // http://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // http://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n\n      // process storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, divideScalar, false);\n          break;\n        case 'dense':\n          c = algorithm14(x, y, divideScalar, false);\n          break;\n      }\n      return c;\n    },\n    \n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n\n    'any, Array | Matrix': function (x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n\n  divide.toTex = {2: '\\\\frac{${args[0]}}{${args[1]}}'};\n\n  return divide;\n}\n\nexports.name = 'divide';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm11\":495,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/object\":533,\"../matrix/inv\":353,\"./divideScalar\":289,\"./multiply\":303}],289:[function(require,module,exports){\n'use strict';\n\nfunction factory(type, config, load, typed) {\n  var multiplyScalar = load(require('./multiplyScalar'));\n\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`\n   * @private\n   */\n  var divideScalar = typed('divide', {\n    'number, number': function (x, y) {\n      return x / y;\n    },\n\n    'Complex, Complex': function (x, y) {\n      return x.div(y);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.div(y);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.div(y);\n    },\n\n    'Unit, number | Fraction | BigNumber': function (x, y) {\n      var res = x.clone();\n      // TODO: move the divide function to Unit.js, it uses internals of Unit\n      res.value = divideScalar(((res.value === null) ? res._normalize(1) : res.value), y);\n      return res;\n    },\n\n    'number | Fraction | BigNumber, Unit': function (x, y) {\n      var res = y.pow(-1);\n      // TODO: move the divide function to Unit.js, it uses internals of Unit\n      res.value = multiplyScalar(((res.value === null) ? res._normalize(1) : res.value), x);\n      return res;\n    },\n\n    'Unit, Unit': function (x, y) {\n      return x.divide(y);\n    }\n\n  });\n\n  return divideScalar;\n}\n\nexports.factory = factory;\n\n},{\"./multiplyScalar\":304}],290:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var divideScalar = load(require('./divideScalar'));\n  var latex = require('../../utils/latex');\n  \n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Divide two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotDivide(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotDivide(2, 4);   // returns 0.5\n   *\n   *    a = [[9, 5], [6, 1]];\n   *    b = [[3, 2], [5, 2]];\n   *\n   *    math.dotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]\n   *    math.divide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]\n   *\n   * See also:\n   *\n   *    divide, multiply, dotMultiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`\n   */\n  var dotDivide = typed('dotDivide', {\n    \n    'any, any': divideScalar,\n    \n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse ./ sparse\n              c = algorithm07(x, y, divideScalar, false);\n              break;\n            default:\n              // sparse ./ dense\n              c = algorithm02(y, x, divideScalar, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense ./ sparse\n              c = algorithm03(x, y, divideScalar, false);\n              break;\n            default:\n              // dense ./ dense\n              c = algorithm13(x, y, divideScalar);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return dotDivide(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return dotDivide(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return dotDivide(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, divideScalar, false);\n          break;\n        default:\n          c = algorithm14(x, y, divideScalar, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, divideScalar, true);\n          break;\n        default:\n          c = algorithm14(y, x, divideScalar, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, divideScalar, true).valueOf();\n    }\n  });\n\n  dotDivide.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['dotDivide'] + '${args[1]}\\\\right)'\n  };\n  \n  return dotDivide;\n}\n\nexports.name = 'dotDivide';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm02\":486,\"../../type/matrix/utils/algorithm03\":487,\"../../type/matrix/utils/algorithm07\":491,\"../../type/matrix/utils/algorithm11\":495,\"../../type/matrix/utils/algorithm12\":496,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/latex\":531,\"./divideScalar\":289}],291:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var multiplyScalar = load(require('./multiplyScalar'));\n  var latex = require('../../utils/latex');\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm09 = load(require('../../type/matrix/utils/algorithm09'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Multiply two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotMultiply(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotMultiply(2, 4); // returns 8\n   *\n   *    a = [[9, 5], [6, 1]];\n   *    b = [[3, 2], [5, 2]];\n   *\n   *    math.dotMultiply(a, b); // returns [[27, 10], [30, 2]]\n   *    math.multiply(a, b);    // returns [[52, 28], [23, 14]]\n   *\n   * See also:\n   *\n   *    multiply, divide, dotDivide\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`\n   */\n  var dotMultiply = typed('dotMultiply', {\n    \n    'any, any': multiplyScalar,\n    \n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse .* sparse\n              c = algorithm09(x, y, multiplyScalar, false);\n              break;\n            default:\n              // sparse .* dense\n              c = algorithm02(y, x, multiplyScalar, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense .* sparse\n              c = algorithm02(x, y, multiplyScalar, false);\n              break;\n            default:\n              // dense .* dense\n              c = algorithm13(x, y, multiplyScalar);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n    \n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return dotMultiply(matrix(x), matrix(y)).valueOf();\n    },\n    \n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return dotMultiply(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return dotMultiply(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, multiplyScalar, false);\n          break;\n        default:\n          c = algorithm14(x, y, multiplyScalar, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm11(y, x, multiplyScalar, true);\n          break;\n        default:\n          c = algorithm14(y, x, multiplyScalar, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n    }\n  });\n\n  dotMultiply.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['dotMultiply'] + '${args[1]}\\\\right)'\n  };\n  \n  return dotMultiply;\n}\n\nexports.name = 'dotMultiply';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm02\":486,\"../../type/matrix/utils/algorithm09\":493,\"../../type/matrix/utils/algorithm11\":495,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/latex\":531,\"./multiplyScalar\":304}],292:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var pow = load(require('./pow'));\n  var latex = require('../../utils/latex');\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Calculates the power of x to y element wise.\n   *\n   * Syntax:\n   *\n   *    math.dotPow(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotPow(2, 3);            // returns number 8\n   *\n   *    var a = [[1, 2], [4, 3]];\n   *    math.dotPow(a, 2);            // returns Array [[1, 4], [16, 9]]\n   *    math.pow(a, 2);               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    pow, sqrt, multiply\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`\n   */\n  var dotPow = typed('dotPow', {\n    \n    'any, any': pow,\n    \n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse .^ sparse\n              c = algorithm07(x, y, pow, false);\n              break;\n            default:\n              // sparse .^ dense\n              c = algorithm03(y, x, pow, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense .^ sparse\n              c = algorithm03(x, y, pow, false);\n              break;\n            default:\n              // dense .^ dense\n              c = algorithm13(x, y, pow);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return dotPow(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return dotPow(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return dotPow(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, dotPow, false);\n          break;\n        default:\n          c = algorithm14(x, y, dotPow, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, dotPow, true);\n          break;\n        default:\n          c = algorithm14(y, x, dotPow, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, dotPow, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, dotPow, true).valueOf();\n    }\n  });\n\n  dotPow.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['dotPow'] + '${args[1]}\\\\right)'\n  };\n  \n  return dotPow;\n}\n\nexports.name = 'dotPow';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm03\":487,\"../../type/matrix/utils/algorithm07\":491,\"../../type/matrix/utils/algorithm11\":495,\"../../type/matrix/utils/algorithm12\":496,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/latex\":531,\"./pow\":307}],293:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the exponent of a value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.exp(x)\n   *\n   * Examples:\n   *\n   *    math.exp(2);                  // returns number 7.3890560989306495\n   *    math.pow(math.e, 2);          // returns number 7.3890560989306495\n   *    math.log(math.exp(2));        // returns number 2\n   *\n   *    math.exp([1, 2, 3]);\n   *    // returns Array [\n   *    //   2.718281828459045,\n   *    //   7.3890560989306495,\n   *    //   20.085536923187668\n   *    // ]\n   *\n   * See also:\n   *\n   *    log, pow\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate\n   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`\n   */\n  var exp = typed('exp', {\n    'number': Math.exp,\n\n    'Complex': function (x) {\n      return x.exp();\n    },\n\n    'BigNumber': function (x) {\n      return x.exp();\n    },\n\n    'Array | Matrix': function (x) {\n      // TODO: exp(sparse) should return a dense matrix since exp(0)==1\n      return deepMap(x, exp);\n    }\n  });\n\n  exp.toTex = {1: '\\\\exp\\\\left(${args[0]}\\\\right)'};\n\n  return exp;\n}\n\nexports.name = 'exp';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],294:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Round a value towards zero.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.fix(x)\n   *\n   * Examples:\n   *\n   *    math.fix(3.2);                // returns number 3\n   *    math.fix(3.8);                // returns number 3\n   *    math.fix(-4.2);               // returns number -4\n   *    math.fix(-4.7);               // returns number -4\n   *\n   *    var c = math.complex(3.2, -2.7);\n   *    math.fix(c);                  // returns Complex 3 - 2i\n   *\n   *    math.fix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]\n   *\n   * See also:\n   *\n   *    ceil, floor, round\n   *\n   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value\n   */\n  var fix = typed('fix', {\n    'number': function (x) {\n      return (x > 0) ? Math.floor(x) : Math.ceil(x);\n    },\n\n    'Complex': function (x) {\n      return new type.Complex(\n          (x.re > 0) ? Math.floor(x.re) : Math.ceil(x.re),\n          (x.im > 0) ? Math.floor(x.im) : Math.ceil(x.im)\n      );\n    },\n\n    'BigNumber': function (x) {\n      return x.isNegative() ? x.ceil() : x.floor();\n    },\n\n    'Fraction': function (x) {\n      return x.s < 0 ? x.ceil() : x.floor();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since fix(0) = 0\n      return deepMap(x, fix, true);\n    }\n  });\n\n  fix.toTex = {1: '\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)'};\n\n  return fix;\n}\n\nexports.name = 'fix';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],295:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Round a value towards minus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.floor(x)\n   *\n   * Examples:\n   *\n   *    math.floor(3.2);              // returns number 3\n   *    math.floor(3.8);              // returns number 3\n   *    math.floor(-4.2);             // returns number -5\n   *    math.floor(-4.7);             // returns number -5\n   *\n   *    var c = math.complex(3.2, -2.7);\n   *    math.floor(c);                // returns Complex 3 - 3i\n   *\n   *    math.floor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  var floor = typed('floor', {\n    'number': Math.floor,\n\n    'Complex': function (x) {\n      return x.floor();\n    },\n\n    'BigNumber': function (x) {\n      return x.floor();\n    },\n\n    'Fraction': function (x) {\n      return x.floor();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since floor(0) = 0\n      return deepMap(x, floor, true);\n    }\n  });\n\n  floor.toTex = {1: '\\\\left\\\\lfloor${args[0]}\\\\right\\\\rfloor'};\n\n  return floor;\n}\n\nexports.name = 'floor';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],296:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12);              // returns 4\n   *    math.gcd(-4, 6);              // returns 2\n   *    math.gcd(25, 15, -10);        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6]);   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n  var gcd = typed('gcd', {\n\n    'number, number': _gcd,\n\n    'BigNumber, BigNumber': _gcdBigNumber,\n\n    'Fraction, Fraction': function (x, y) {\n      return x.gcd(y);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm04(x, y, gcd);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm01(y, x, gcd, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm01(x, y, gcd, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, gcd);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return gcd(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return gcd(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return gcd(x, matrix(y));\n    },\n    \n    'Matrix, number | BigNumber': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm10(x, y, gcd, false);\n          break;\n        default:\n          c = algorithm14(x, y, gcd, false);\n          break;\n      }\n      return c;\n    },\n\n    'number | BigNumber, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm10(y, x, gcd, true);\n          break;\n        default:\n          c = algorithm14(y, x, gcd, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, gcd, false).valueOf();\n    },\n\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, gcd, true).valueOf();\n    },\n\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {\n      var res = gcd(a, b);\n      for (var i = 0; i < args.length; i++) {\n        res = gcd(res, args[i]);\n      }\n      return res;\n    }\n  });\n\n  gcd.toTex = '\\\\gcd\\\\left(${args}\\\\right)';\n\n  return gcd;\n\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    }\n\n    // http://en.wikipedia.org/wiki/Euclidean_algorithm\n    var zero = new type.BigNumber(0);\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n    return a.lt(zero) ? a.neg() : a;\n  }\n}\n\n/**\n * Calculate gcd for numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the greatest common denominator of a and b\n * @private\n */\nfunction _gcd(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function gcd must be integer numbers');\n  }\n\n  // http://en.wikipedia.org/wiki/Euclidean_algorithm\n  var r;\n  while (b != 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n  return (a < 0) ? -a : a;\n}\n\nexports.name = 'gcd';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm01\":485,\"../../type/matrix/utils/algorithm04\":488,\"../../type/matrix/utils/algorithm10\":494,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/number\":532}],297:[function(require,module,exports){\n'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var abs = load(require('./abs'));\n  var add = load(require('./addScalar'));\n  var divide = load(require('./divideScalar'));\n  var multiply = load(require('./multiplyScalar'));\n  var sqrt = load(require('./sqrt'));\n  var smaller = load(require('../relational/smaller'));\n  var isPositive = load(require('../utils/isPositive'));\n\n  /**\n   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\n   *\n   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n   *\n   * For matrix input, the hypotenusa is calculated for all values in the matrix.\n   *\n   * Syntax:\n   *\n   *     math.hypot(a, b, ...)\n   *     math.hypot([a, b, c, ...])\n   *\n   * Examples:\n   *\n   *     math.hypot(3, 4);      // 5\n   *     math.hypot(3, 4, 5);   // 7.0710678118654755\n   *     math.hypot([3, 4, 5]); // 7.0710678118654755\n   *     math.hypot(-2);        // 2\n   *\n   * See also:\n   *\n   *     abs, norm\n   *\n   * @param {... number | BigNumber} args\n   * @return {number | BigNumber} Returns the hypothenusa of the input values.\n   */\n  var hypot = typed('hypot', {\n    '... number | BigNumber': _hypot,\n\n    'Array': function (x) {\n      return hypot.apply(hypot, flatten(x));\n    },\n\n    'Matrix': function (x) {\n      return hypot.apply(hypot, flatten(x.toArray()));\n    }\n  });\n\n  /**\n   * Calculate the hypotenusa for an Array with values\n   * @param {Array.<number | BigNumber>} args\n   * @return {number | BigNumber} Returns the result\n   * @private\n   */\n  function _hypot (args) {\n    // code based on `hypot` from es6-shim:\n    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633\n    var result = 0;\n    var largest = 0;\n\n    for (var i = 0; i < args.length; i++) {\n      var value = abs(args[i]);\n      if (smaller(largest, value)) {\n        result = multiply(result, multiply(divide(largest, value), divide(largest, value)));\n        result = add(result, 1);\n        largest = value;\n      } else {\n        result = add(result, isPositive(value) ? multiply(divide(value, largest), divide(value, largest)) : value);\n      }\n    }\n\n    return multiply(largest, sqrt(result));\n  }\n\n  hypot.toTex = '\\\\hypot\\\\left(${args}\\\\right)';\n\n  return hypot;\n}\n\nexports.name = 'hypot';\nexports.factory = factory;\n\n},{\"../../utils/array\":509,\"../relational/smaller\":388,\"../utils/isPositive\":453,\"./abs\":282,\"./addScalar\":284,\"./divideScalar\":289,\"./multiplyScalar\":304,\"./sqrt\":310}],298:[function(require,module,exports){\nmodule.exports = [\n  require('./abs'),\n  require('./add'),\n  require('./addScalar'),\n  require('./cbrt'),\n  require('./ceil'),\n  require('./cube'),\n  require('./divide'),\n  require('./dotDivide'),\n  require('./dotMultiply'),\n  require('./dotPow'),\n  require('./exp'),\n  require('./fix'),\n  require('./floor'),\n  require('./gcd'),\n  require('./hypot'),\n  require('./lcm'),\n  require('./log'),\n  require('./log10'),\n  require('./mod'),\n  require('./multiply'),\n  require('./norm'),\n  require('./nthRoot'),\n  require('./pow'),\n  require('./round'),\n  require('./sign'),\n  require('./sqrt'),\n  require('./square'),\n  require('./subtract'),\n  require('./unaryMinus'),\n  require('./unaryPlus'),\n  require('./xgcd')\n];\n\n},{\"./abs\":282,\"./add\":283,\"./addScalar\":284,\"./cbrt\":285,\"./ceil\":286,\"./cube\":287,\"./divide\":288,\"./dotDivide\":290,\"./dotMultiply\":291,\"./dotPow\":292,\"./exp\":293,\"./fix\":294,\"./floor\":295,\"./gcd\":296,\"./hypot\":297,\"./lcm\":299,\"./log\":300,\"./log10\":301,\"./mod\":302,\"./multiply\":303,\"./norm\":305,\"./nthRoot\":306,\"./pow\":307,\"./round\":308,\"./sign\":309,\"./sqrt\":310,\"./square\":311,\"./subtract\":312,\"./unaryMinus\":313,\"./unaryPlus\":314,\"./xgcd\":315}],299:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  \n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Calculate the least common multiple for two or more values or arrays.\n   *\n   * lcm is defined as:\n   *\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.lcm(a, b)\n   *    math.lcm(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.lcm(4, 6);               // returns 12\n   *    math.lcm(6, 21);              // returns 42\n   *    math.lcm(6, 21, 5);           // returns 210\n   *\n   *    math.lcm([4, 6], [6, 21]);    // returns [12, 42]\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\n   */\n  var lcm = typed('lcm', {\n    'number, number': _lcm,\n\n    'BigNumber, BigNumber': _lcmBigNumber,\n\n    'Fraction, Fraction': function (x, y) {\n\n      return x.lcm(y);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm06(x, y, lcm);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm02(y, x, lcm, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm02(x, y, lcm, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, lcm);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return lcm(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return lcm(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return lcm(x, matrix(y));\n    },\n\n    'Matrix, number | BigNumber': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, lcm, false);\n          break;\n        default:\n          c = algorithm14(x, y, lcm, false);\n          break;\n      }\n      return c;\n    },\n\n    'number | BigNumber, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm11(y, x, lcm, true);\n          break;\n        default:\n          c = algorithm14(y, x, lcm, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, lcm, false).valueOf();\n    },\n\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, lcm, true).valueOf();\n    },\n\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {\n      var res = lcm(a, b);\n      for (var i = 0; i < args.length; i++) {\n        res = lcm(res, args[i]);\n      }\n      return res;\n    }\n  });\n\n  lcm.toTex = undefined;  // use default template\n\n  return lcm;\n\n  /**\n   * Calculate lcm for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns the least common multiple of a and b\n   * @private\n   */\n  function _lcmBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function lcm must be integer numbers');\n    }\n\n    if (a.isZero() || b.isZero()) {\n      return new type.BigNumber(0);\n    }\n\n    // http://en.wikipedia.org/wiki/Euclidean_algorithm\n    // evaluate lcm here inline to reduce overhead\n    var prod = a.times(b);\n    while (!b.isZero()) {\n      var t = b;\n      b = a.mod(t);\n      a = t;\n    }\n    return prod.div(a).abs();\n  }\n}\n\n/**\n * Calculate lcm for two numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the least common multiple of a and b\n * @private\n */\nfunction _lcm (a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function lcm must be integer numbers');\n  }\n\n  if (a == 0 || b == 0) {\n    return 0;\n  }\n\n  // http://en.wikipedia.org/wiki/Euclidean_algorithm\n  // evaluate lcm here inline to reduce overhead\n  var t;\n  var prod = a * b;\n  while (b != 0) {\n    t = b;\n    b = a % t;\n    a = t;\n  }\n  return Math.abs(prod / a);\n}\n\nexports.name = 'lcm';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm02\":486,\"../../type/matrix/utils/algorithm06\":490,\"../../type/matrix/utils/algorithm11\":495,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/number\":532}],300:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var divideScalar = load(require('./divideScalar'));\n\n  /**\n   * Calculate the logarithm of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log(x)\n   *    math.log(x, base)\n   *\n   * Examples:\n   *\n   *    math.log(3.5);                  // returns 1.252762968495368\n   *    math.exp(math.log(2.4));        // returns 2.4\n   *\n   *    math.pow(10, 4);                // returns 10000\n   *    math.log(10000, 10);            // returns 4\n   *    math.log(10000) / math.log(10); // returns 4\n   *\n   *    math.log(1024, 2);              // returns 10\n   *    math.pow(2, 10);                // returns 1024\n   *\n   * See also:\n   *\n   *    exp, log10\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @param {number | BigNumber | Complex} [base=e]\n   *            Optional base for the logarithm. If not provided, the natural\n   *            logarithm of `x` is calculated.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the logarithm of `x`\n   */\n  var log = typed('log', {\n    'number': function (x) {\n      if (x >= 0 || config.predictable) {\n        return Math.log(x);\n      }\n      else {\n        // negative value -> complex value computation\n        return new type.Complex(x, 0).log();\n      }\n    },\n\n    'Complex': function (x) {\n      return x.log();\n    },\n\n    'BigNumber': function (x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.ln();\n      }\n      else {\n        // downgrade to number, return Complex valued result\n        return new type.Complex(x.toNumber(), 0).log();\n      }\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, log);\n    },\n\n    'any, any': function (x, base) {\n      // calculate logarithm for a specified base, log(x, base)\n      return divideScalar(log(x), log(base));\n    }\n  });\n\n  log.toTex = {\n    1: '\\\\ln\\\\left(${args[0]}\\\\right)',\n    2: '\\\\log_{${args[1]}}\\\\left(${args[0]}\\\\right)'\n  };\n\n  return log;\n}\n\nexports.name = 'log';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523,\"./divideScalar\":289}],301:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log10(x)\n   *\n   * Examples:\n   *\n   *    math.log10(0.00001);            // returns -5\n   *    math.log10(10000);              // returns 4\n   *    math.log(10000) / math.log(10); // returns 4\n   *    math.pow(10, 4);                // returns 10000\n   *\n   * See also:\n   *\n   *    exp, log\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 10-base logarithm of `x`\n   */\n  var log10 = typed('log10', {\n    'number': function (x) {\n      if (x >= 0 || config.predictable) {\n        return _log10(x);\n      }\n      else {\n        // negative value -> complex value computation\n        return new type.Complex(x, 0).log().div(Math.LN10);\n      }\n    },\n\n    'Complex': function (x) {\n      return new type.Complex(x).log().div(Math.LN10);\n    },\n\n    'BigNumber': function (x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log();\n      }\n      else {\n        // downgrade to number, return Complex valued result\n        return new type.Complex(x.toNumber(), 0).log().div(Math.LN10);\n      }\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, log10);\n    }\n  });\n\n  log10.toTex = {1: '\\\\log_{10}\\\\left(${args[0]}\\\\right)'};\n\n  return log10;\n}\n\n/**\n * Calculate the 10-base logarithm of a number\n * @param {number} x\n * @return {number}\n * @private\n */\nvar _log10 = Math.log10 || function (x) {\n  return Math.log(x) / Math.LN10;\n};\n\nexports.name = 'log10';\nexports.factory = factory;\n\n\n},{\"../../utils/collection/deepMap\":523}],302:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var latex = require('../../utils/latex');\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See http://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3);                // returns 2\n   *    math.mod(11, 2);               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0;\n   *    }\n   *\n   *    isOdd(2);                      // returns false\n   *    isOdd(3);                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n  var mod = typed('mod', {\n\n    'number, number': _mod,\n\n    'BigNumber, BigNumber': function (x, y) {\n      return y.isZero() ? x : x.mod(y);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.mod(y);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // mod(sparse, sparse)\n              c = algorithm05(x, y, mod, false);\n              break;\n            default:\n              // mod(sparse, dense)\n              c = algorithm02(y, x, mod, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // mod(dense, sparse)\n              c = algorithm03(x, y, mod, false);\n              break;\n            default:\n              // mod(dense, dense)\n              c = algorithm13(x, y, mod);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n    \n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return mod(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return mod(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return mod(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, mod, false);\n          break;\n        default:\n          c = algorithm14(x, y, mod, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, mod, true);\n          break;\n        default:\n          c = algorithm14(y, x, mod, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, mod, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, mod, true).valueOf();\n    }\n  });\n\n  mod.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['mod'] + '${args[1]}\\\\right)'\n  };\n\n  return mod;\n\n  /**\n   * Calculate the modulus of two numbers\n   * @param {number} x\n   * @param {number} y\n   * @returns {number} res\n   * @private\n   */\n  function _mod(x, y) {\n    if (y > 0) {\n      // We don't use JavaScript's % operator here as this doesn't work\n      // correctly for x < 0 and x == 0\n      // see http://en.wikipedia.org/wiki/Modulo_operation\n      return x - y * Math.floor(x / y);\n    }\n    else if (y === 0) {\n      return x;\n    }\n    else { // y < 0\n      // TODO: implement mod for a negative divisor\n      throw new Error('Cannot calculate mod for a negative divisor');\n    }\n  }\n}\n\nexports.name = 'mod';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm02\":486,\"../../type/matrix/utils/algorithm03\":487,\"../../type/matrix/utils/algorithm05\":489,\"../../type/matrix/utils/algorithm11\":495,\"../../type/matrix/utils/algorithm12\":496,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/latex\":531}],303:[function(require,module,exports){\n'use strict';\n\nvar extend = require('../../utils/object').extend;\nvar array = require('../../utils/array');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n  var multiplyScalar = load(require('./multiplyScalar'));\n  var equalScalar = load(require('../relational/equalScalar'));\n\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  var DenseMatrix = type.DenseMatrix;\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2);        // returns number 20.8\n   *    math.multiply(2, 3, 4);       // returns number 24\n   *\n   *    var a = math.complex(2, 3);\n   *    var b = math.complex(4, 1);\n   *    math.multiply(a, b);          // returns Complex 5 + 14i\n   *\n   *    var c = [[1, 2], [4, 3]];\n   *    var d = [[1, 2, 3], [3, -4, 7]];\n   *    math.multiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    var e = math.unit('2.1 km');\n   *    math.multiply(3, e);          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n  var multiply = typed('multiply', extend({\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n\n    'Array, Array': function (x, y) {\n      // check dimensions\n      _validateMatrixDimensions(array.size(x), array.size(y));\n\n      // use dense matrix implementation\n      var m = multiply(matrix(x), matrix(y));\n      // return array or scalar\n      return (m && m.isMatrix === true) ? m.valueOf() : m;\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size();\n\n      // check dimensions\n      _validateMatrixDimensions(xsize, ysize);\n\n      // process dimensions\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        }\n        // Vector * Matrix\n        return _multiplyVectorMatrix(x, y);\n      }\n      // process y dimensions\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      }\n      // Matrix * Matrix\n      return _multiplyMatrixMatrix(x, y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use Matrix * Matrix implementation\n      return multiply(x, matrix(y));\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use Matrix * Matrix implementation\n      return multiply(matrix(x, y.storage()), y);\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      \n      // process storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, multiplyScalar, false);\n          break;\n        case 'dense':\n          c = algorithm14(x, y, multiplyScalar, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm11(y, x, multiplyScalar, true);\n          break;\n        case 'dense':\n          c = algorithm14(y, x, multiplyScalar, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n\n    'any, any': multiplyScalar,\n\n    'any, any, ...any': function (x, y, rest) {\n      var result = multiply(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = multiply(result, rest[i]);\n      }\n\n      return result;\n    }\n  }, multiplyScalar.signatures));\n\n  var _validateMatrixDimensions = function (size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n            break;\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n            break;\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n        break;\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n            break;\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n            break;\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n        break;\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n  var _multiplyVectorVector = function (a, b, n) {\n    // check empty vector\n    if (n === 0)\n      throw new Error('Cannot multiply two empty vectors');\n\n    // a dense\n    var adata = a._data;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n    \n    // result (do not initialize it with zero)\n    var c = mf(adata[0], bdata[0]);\n    // loop data\n    for (var i = 1; i < n; i++) {\n      // multiply and accumulate\n      c = af(c, mf(adata[i], bdata[i]));\n    }\n    return c;\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n  var _multiplyVectorMatrix = function (a, b) {\n    // process storage\n    switch (b.storage()) {\n      case 'dense':\n        return _multiplyVectorDenseMatrix(a, b);\n    }\n    throw new Error('Not implemented');\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n  var _multiplyVectorDenseMatrix = function (a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // rows & columns\n    var alength = asize[0];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix columns\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]);      \n      // loop vector\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n      c[j] = sum;\n    }\n\n    // return matrix\n    return new DenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n  var _multiplyMatrixVector = function (a, b) {\n    // process storage\n    switch (a.storage()) {\n      case 'dense':\n        return _multiplyDenseMatrixVector(a, b);\n      case 'sparse':\n        return _multiplySparseMatrixVector(a, b);\n    }\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n  var _multiplyMatrixMatrix = function (a, b) {\n    // process storage\n    switch (a.storage()) {\n      case 'dense':\n        // process storage\n        switch (b.storage()) {\n          case 'dense':\n            return _multiplyDenseMatrixDenseMatrix(a, b);\n          case 'sparse':\n            return _multiplyDenseMatrixSparseMatrix(a, b);\n        }\n        break;\n      case 'sparse':\n        // process storage\n        switch (b.storage()) {\n          case 'dense':\n            return _multiplySparseMatrixDenseMatrix(a, b);\n          case 'sparse':\n            return _multiplySparseMatrixSparseMatrix(a, b);\n        }\n        break;\n    }\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M) \n   */ \n  var _multiplyDenseMatrixVector = function (a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = asize[0];\n    var acolumns = asize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix a rows\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i];\n      // sum (do not initialize it with zero)\n      var sum = mf(row[0], bdata[0]);\n      // loop matrix a columns\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n      c[i] = sum;\n    }\n\n    // return matrix\n    return new DenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n  var _multiplyDenseMatrixDenseMatrix = function (a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n    \n    // result\n    var c = [];\n\n    // loop matrix a rows\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i];\n      // initialize row array\n      c[i] = [];\n      // loop matrix b columns\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]);\n        // loop matrix a columns\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n        c[i][j] = sum;\n      }\n    }\n\n    // return matrix\n    return new DenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n  var _multiplyDenseMatrixSparseMatrix = function (a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b sparse\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // validate b matrix\n    if (!bvalues)\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    // rows & columns\n    var arows = asize[0];\n    var bcolumns = bsize[1];\n    \n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = new SparseMatrix({\n      values : cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // indeces in column jb\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1];\n      // do not process column jb if no data exists\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0;\n        // loop a rows\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1;\n          // C[i, jb]\n          var cij;\n          // values in b column j\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb];\n            // check value has been initialized\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]);\n              // update mark\n              last = mark;\n            }\n            else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          }\n          // check column has been processed and value != 0\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1) \n   */\n  var _multiplySparseMatrixVector = function (a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // validate a matrix\n    if (!avalues)\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = a._size[0];\n    var brows = b._size[0];\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    \n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // workspace\n    var x = [];\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n\n    // update ptr\n    cptr[0] = 0;\n    // rows in b\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib];\n      // check b[ib] != 0, avoid loops\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka];\n          // check value exists in current j\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true;\n            // add i to pattern of C\n            cindex.push(ia);\n            // x(ia) = A\n            x[ia] = mf(vbi, avalues[ka]);\n          }\n          else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    }\n    // copy values from x to column jb of c\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p];\n      // copy value\n      cvalues[p] = x[ic];\n    }\n    // update ptr\n    cptr[1] = cindex.length;\n\n    // return sparse matrix\n    return new SparseMatrix({\n      values : cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n  var _multiplySparseMatrixDenseMatrix = function (a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // validate a matrix\n    if (!avalues)\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = new SparseMatrix({\n      values : cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // workspace\n    var x = [];\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // mark in workspace for current column\n      var mark = jb + 1;\n      // rows in jb\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb];\n        // check b[ib, jb] != 0, avoid loops\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n              // x(ia) = A\n              x[ia] = mf(vbij, avalues[ka]);\n            }\n            else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      }\n      // copy values from x to column jb of c\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p];\n        // copy value\n        cvalues[p] = x[ic];\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n  var _multiplySparseMatrixSparseMatrix = function (a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // b sparse\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype;\n    \n    // rows & columns\n    var arows = a._size[0];\n    var bcolumns = b._size[1];\n    // flag indicating both matrices (a & b) contain data\n    var values = avalues && bvalues;\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n    \n    // result\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = new SparseMatrix({\n      values : cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // workspace\n    var x = values ? [] : undefined;\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n    // variables\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib;\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // mark in workspace for current column\n      var mark = jb + 1;\n      // B values & index in j\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb];\n        // check we need to process values\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n              // x(ia) = A\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            }\n            else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        }\n        else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n            }\n          }\n        }\n      }\n      // check we need to process matrix values (pattern matrix)\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p];\n          // copy value\n          cvalues[p] = x[ic];\n        }\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n\n  multiply.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['multiply'] + '${args[1]}\\\\right)'\n  };\n\n  return multiply;\n}\n\nexports.name = 'multiply';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm11\":495,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/array\":509,\"../../utils/latex\":531,\"../../utils/object\":533,\"../relational/equalScalar\":384,\"./addScalar\":284,\"./multiplyScalar\":304}],304:[function(require,module,exports){\n'use strict';\n\nfunction factory(type, config, load, typed) {\n  \n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`\n   * @private\n   */\n  var multiplyScalar = typed('multiplyScalar', {\n\n    'number, number': function (x, y) {\n      return x * y;\n    },\n\n    'Complex, Complex': function (x, y) {\n      return x.mul(y);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.times(y);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.mul(y);\n    },\n\n    'number | Fraction | BigNumber | Complex, Unit': function (x, y) {\n      var res = y.clone();\n      res.value = (res.value === null) ? res._normalize(x) : multiplyScalar(res.value, x);\n      return res;\n    },\n\n    'Unit, number | Fraction | BigNumber | Complex': function (x, y) {\n      var res = x.clone();\n      res.value = (res.value === null) ? res._normalize(y) : multiplyScalar(res.value, y);\n      return res;\n    },\n\n    'Unit, Unit': function (x, y) {\n      return x.multiply(y);\n    }\n\n  });\n\n  return multiplyScalar;\n}\n\nexports.factory = factory;\n\n},{}],305:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  \n  var abs         = load(require('../arithmetic/abs'));\n  var add         = load(require('../arithmetic/add'));\n  var pow         = load(require('../arithmetic/pow'));\n  var sqrt        = load(require('../arithmetic/sqrt'));\n  var multiply    = load(require('../arithmetic/multiply'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var larger      = load(require('../relational/larger'));\n  var smaller     = load(require('../relational/smaller'));\n  var matrix      = load(require('../../type/matrix/function/matrix'));\n  var trace       = load(require('../matrix/trace'));\n  var transpose   = load(require('../matrix/transpose'));\n\n\n  /**\n   * Calculate the norm of a number, vector or matrix.\n   *\n   * The second parameter p is optional. If not provided, it defaults to 2.\n   *\n   * Syntax:\n   *\n   *    math.norm(x)\n   *    math.norm(x, p)\n   *\n   * Examples:\n   *\n   *    math.abs(-3.5);                         // returns 3.5\n   *    math.norm(-3.5);                        // returns 3.5\n   *\n   *    math.norm(math.complex(3, -4));         // returns 5\n   *\n   *    math.norm([1, 2, -3], Infinity);        // returns 3\n   *    math.norm([1, 2, -3], -Infinity);       // returns 1\n   *\n   *    math.norm([3, 4], 2);                   // returns 5\n   *\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n   *    math.norm([[1, 2], [3, 4]], 'inf');     // returns 7\n   *    math.norm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661\n   *\n   * See also:\n   *\n   *    abs, hypot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the norm\n   * @param  {number | BigNumber | string} [p=2]\n   *            Vector space.\n   *            Supported numbers include Infinity and -Infinity.\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n   * @return {number | BigNumber} the p-norm\n   */\n  var norm = typed('norm', {\n    'number': Math.abs,\n\n    'Complex': function (x) {\n      return x.abs();\n    },\n\n    'BigNumber': function (x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    \n    'boolean | null' : function (x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n\n    'Array': function (x) {\n      return _norm(matrix(x), 2);\n    },\n    \n    'Matrix': function (x) {\n      return _norm(x, 2);\n    },\n\n    'number | Complex | BigNumber | boolean | null, number | BigNumber | string': function (x) {\n      // ignore second parameter, TODO: remove the option of second parameter for these types\n      return norm(x);\n    },\n\n    'Array, number | BigNumber | string': function (x, p) {\n      return _norm(matrix(x), p);\n    },\n    \n    'Matrix, number | BigNumber | string': function (x, p) {\n      return _norm(x, p);\n    }\n  });\n\n  /**\n   * Calculate the norm for an array\n   * @param {Array} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _norm (x, p) {\n    // size\n    var sizeX = x.size();\n    \n    // check if it is a vector\n    if (sizeX.length == 1) {\n      // check p\n      if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n        // norm(x, Infinity) = max(abs(x))\n        var pinf = 0;\n        // skip zeros since abs(0) == 0\n        x.forEach(\n          function (value) {\n            var v = abs(value);\n            if (larger(v, pinf))\n              pinf = v;\n          },\n          true);\n        return pinf;\n      }\n      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n        // norm(x, -Infinity) = min(abs(x))\n        var ninf;\n        // skip zeros since abs(0) == 0\n        x.forEach(\n          function (value) {\n            var v = abs(value);\n            if (!ninf || smaller(v, ninf))\n              ninf = v;\n          },\n          true);\n        return ninf || 0;\n      }\n      if (p === 'fro') {\n        return _norm(x, 2);\n      }\n      if (typeof p === 'number' && !isNaN(p)) {\n        // check p != 0\n        if (!equalScalar(p, 0)) {\n          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n          var n = 0;\n          // skip zeros since abs(0) == 0\n          x.forEach(\n            function (value) {\n              n = add(pow(abs(value), p), n);\n            },\n            true);\n          return pow(n, 1 / p);\n        }\n        return Number.POSITIVE_INFINITY;\n      }\n      // invalid parameter value\n      throw new Error('Unsupported parameter value');\n    }\n    // MxN matrix\n    if (sizeX.length == 2) {\n      // check p\n      if (p === 1) {\n        // norm(x) = the largest column sum\n        var c = [];\n        // result\n        var maxc = 0;\n        // skip zeros since abs(0) == 0\n        x.forEach(\n          function (value, index) {\n            var j = index[1];\n            var cj = add(c[j] || 0, abs(value));\n            if (larger(cj, maxc))\n              maxc = cj;\n            c[j] = cj;\n          },\n          true);\n        return maxc;\n      }\n      if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n        // norm(x) = the largest row sum\n        var r = [];\n        // result\n        var maxr = 0;\n        // skip zeros since abs(0) == 0\n        x.forEach(\n          function (value, index) {\n            var i = index[0];\n            var ri = add(r[i] || 0, abs(value));\n            if (larger(ri, maxr))\n              maxr = ri;\n            r[i] = ri;\n          },\n          true);\n        return maxr;\n      }\n      if (p === 'fro') {\n        // norm(x) = sqrt(sum(diag(x'x)))\n        return sqrt(trace(multiply(transpose(x), x)));\n      }\n      if (p === 2) {\n        // not implemented\n        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');\n      }\n      // invalid parameter value\n      throw new Error('Unsupported parameter value');\n    }\n  }\n\n  norm.toTex = {\n    1: '\\\\left\\\\|${args[0]}\\\\right\\\\|',\n    2: undefined  // use default template\n  };\n\n  return norm;\n}\n\nexports.name = 'norm';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../arithmetic/abs\":282,\"../arithmetic/add\":283,\"../arithmetic/multiply\":303,\"../arithmetic/pow\":307,\"../arithmetic/sqrt\":310,\"../matrix/trace\":365,\"../matrix/transpose\":366,\"../relational/equalScalar\":384,\"../relational/larger\":386,\"../relational/smaller\":388}],306:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2);    // returns 3, as 3^2 == 9\n   *     math.sqrt(9);          // returns 3, as 3^2 == 9\n   *     math.nthRoot(64, 3);   // returns 4, as 4^3 == 64\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n  var nthRoot = typed('nthRoot', {\n    \n    'number': function (x) {\n      return _nthRoot(x, 2);\n    },\n    'number, number': _nthRoot,\n\n    'BigNumber': function (x) {\n      return _bigNthRoot(x, new type.BigNumber(2));\n    },\n    'Complex' : function(x) {\n      return _nthComplexRoot(x, 2);\n    }, \n    'Complex, number' : _nthComplexRoot,\n    'BigNumber, BigNumber': _bigNthRoot,\n\n    'Array | Matrix': function (x) {\n      return nthRoot(x, 2);\n    },\n    \n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // density must be one (no zeros in matrix)\n              if (y.density() === 1) {\n                // sparse + sparse\n                c = algorithm06(x, y, nthRoot);\n              }\n              else {\n                // throw exception\n                throw new Error('Root must be non-zero');\n              }\n              break;\n            default:\n              // sparse + dense\n              c = algorithm02(y, x, nthRoot, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // density must be one (no zeros in matrix)\n              if (y.density() === 1) {\n                // dense + sparse\n                c = algorithm01(x, y, nthRoot, false);\n              }\n              else {\n                // throw exception\n                throw new Error('Root must be non-zero');\n              }\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, nthRoot);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return nthRoot(x, matrix(y));\n    },\n    \n    'Matrix, number | BigNumber': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, nthRoot, false);\n          break;\n        default:\n          c = algorithm14(x, y, nthRoot, false);\n          break;\n      }\n      return c;\n    },\n\n    'number | BigNumber, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          // density must be one (no zeros in matrix)\n          if (y.density() === 1) {\n            // sparse - scalar\n            c = algorithm11(y, x, nthRoot, true);\n          }\n          else {\n            // throw exception\n            throw new Error('Root must be non-zero');\n          }\n          break;\n        default:\n          c = algorithm14(y, x, nthRoot, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), y).valueOf();\n    },\n\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return nthRoot(x, matrix(y)).valueOf();\n    }\n  });\n\n  nthRoot.toTex = {2: '\\\\sqrt[${args[1]}]{${args[0]}}'};\n\n  return nthRoot;\n\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * http://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n  function _bigNthRoot(a, root) {\n    var precision = type.BigNumber.precision;\n    var Big = type.BigNumber.clone({precision: precision + 2});\n    var zero = new type.BigNumber(0);\n\n    var one = new Big(1);\n    var inv = root.isNegative();\n    if (inv) {\n      root = root.neg();\n    }\n\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    }\n\n    // edge cases zero and infinity\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n\n    var x = a.abs().pow(one.div(root));\n    // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n    x = a.isNeg() ? x.neg() : x;\n    return new type.BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n}\n\n/**\n * Calculate the nth root of a, solve x^root == a\n * http://rosettacode.org/wiki/Nth_root#JavaScript\n * @param {number} a\n * @param {number} root\n * @private\n */\nfunction _nthRoot(a, root) {\n  var inv = root < 0;\n  if (inv) {\n    root = -root;\n  }\n\n  if (root === 0) {\n    throw new Error('Root must be non-zero');\n  }\n  if (a < 0 && (Math.abs(root) % 2 != 1)) {\n    throw new Error('Root must be odd when a is negative.');\n  }\n\n  // edge cases zero and infinity\n  if (a == 0) {\n    return inv ? Infinity : 0;\n  }\n  if (!isFinite(a)) {\n    return inv ? 0 : a;\n  }\n\n  var x = Math.pow(Math.abs(a), 1/root);\n  // If a < 0, we require that root is an odd integer,\n  // so (-1) ^ (1/root) = -1\n  x = a < 0 ? -x : x;\n  return inv ? 1 / x : x;\n\n  // Very nice algorithm, but fails with nthRoot(-2, 3).\n  // Newton's method has some well-known problems at times:\n  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\n  /*\n  var x = 1; // Initial guess\n  var xPrev = 1;\n  var i = 0;\n  var iMax = 10000;\n  do {\n    var delta = (a / Math.pow(x, root - 1) - x) / root;\n    xPrev = x;\n    x = x + delta;\n    i++;\n  }\n  while (xPrev !== x && i < iMax);\n\n  if (xPrev !== x) {\n    throw new Error('Function nthRoot failed to converge');\n  }\n\n  return inv ? 1 / x : x;\n  */\n}\n\n/**\n * Calculate the nth root of a Complex Number a using De Moviers Theorem.\n * @param  {Complex} a\n * @param  {number} root\n * @return {Array} array or n Complex Roots in Polar Form.\n */\nfunction _nthComplexRoot(a, root) {\n  if (root < 0) throw new Error('Root must be greater than zero');\n  if (root === 0) throw new Error('Root must be non-zero');\n  if (root % 1 !== 0) throw new Error('Root must be an integer');  \n  var arg = a.arg();\n  var abs = a.abs();\n  var roots = [];\n  var r = Math.pow(abs, 1/root);\n  for(var k = 0; k < root; k++) {\n    roots.push({r: r, phi: (arg + 2 * Math.PI * k)/root});\n  }\n  return roots;\n}\n\nexports.name = 'nthRoot';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm01\":485,\"../../type/matrix/utils/algorithm02\":486,\"../../type/matrix/utils/algorithm06\":490,\"../../type/matrix/utils/algorithm11\":495,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498}],307:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar size = require('../../utils/array').size;\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n  var eye = load(require('../matrix/eye'));\n  var multiply = load(require('./multiply'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var fraction = load(require('../../type/fraction/function/fraction'));\n  var number = load(require('../../type/number'));\n\n  /**\n   * Calculates the power of x to y, `x ^ y`.\n   * Matrix exponentiation is supported for square matrices `x`, and positive\n   * integer exponents `y`.\n   *\n   * For cubic roots of negative numbers, the function returns the principal\n   * root by default. In order to let the function return the real root,\n   * math.js can be configured with `math.config({predictable: true})`.\n   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n   *\n   * Syntax:\n   *\n   *    math.pow(x, y)\n   *\n   * Examples:\n   *\n   *    math.pow(2, 3);               // returns number 8\n   *\n   *    var a = math.complex(2, 3);\n   *    math.pow(a, 2)                // returns Complex -5 + 12i\n   *\n   *    var b = [[1, 2], [4, 3]];\n   *    math.pow(b, 2);               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    multiply, sqrt, cbrt, nthRoot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex} y                   The exponent\n   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n   */\n  var pow = typed('pow', {\n    'number, number': _pow,\n\n    'Complex, Complex': function (x, y) {\n      return x.pow(y);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      if (y.isInteger() || x >= 0 || config.predictable) {\n        return x.pow(y);\n      }\n      else {\n        return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n      }\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      if (y.d !== 1) {\n        if (config.predictable) {\n          throw new Error('Function pow does not support non-integer exponents for fractions.');\n        }\n        else {\n          return _pow(x.valueOf(), y.valueOf());\n        }\n      }\n      else {\n        return x.pow(y);\n     }\n    },\n\n    'Array, number': _powArray,\n\n    'Array, BigNumber': function (x, y) {\n      return _powArray(x, y.toNumber());\n    },\n\n    'Matrix, number': _powMatrix,\n\n    'Matrix, BigNumber': function (x, y) {\n      return _powMatrix(x, y.toNumber());\n    },\n\n    'Unit, number': function (x, y) {\n      return x.pow(y);\n    }\n\n  });\n\n  /**\n   * Calculates the power of x to y, x^y, for two numbers.\n   * @param {number} x\n   * @param {number} y\n   * @return {number | Complex} res\n   * @private\n   */\n  function _pow(x, y) {\n\n    // Alternatively could define a 'realmode' config option or something, but\n    // 'predictable' will work for now\n    if (config.predictable && !isInteger(y) && x < 0) {\n      // Check to see if y can be represented as a fraction\n      try {\n        var yFrac = fraction(y);\n        var yNum = number(yFrac);\n        if(y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n          if(yFrac.d % 2 === 1) {\n            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n          }\n        }\n      }\n      catch (ex) {\n        // fraction() throws an error if y is Infinity, etc.\n      }\n\n      // Unable to express y as a fraction, so continue on\n    }\n\n\n    // x^Infinity === 0 if -1 < x < 1\n    // A real number 0 is returned instead of complex(0)\n    if ((x*x < 1 && y ===  Infinity) ||\n        (x*x > 1 && y === -Infinity)) {\n      return 0;\n    }\n\n    // **for predictable mode** x^Infinity === NaN if x < -1\n    // N.B. this behavour is different from `Math.pow` which gives\n    // (-2)^Infinity === Infinity\n    if (config.predictable &&\n        ((x < -1 &&          y ===  Infinity) ||\n         (x > -1 && x < 0 && y === -Infinity))) {\n      return NaN;\n    }\n\n    if (isInteger(y) || x >= 0 || config.predictable) {\n      return Math.pow(x, y);\n    }\n    else {\n      return new type.Complex(x, 0).pow(y, 0);\n    }\n  }\n\n  /**\n   * Calculate the power of a 2d array\n   * @param {Array} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Array}\n   * @private\n   */\n  function _powArray(x, y) {\n    if (!isInteger(y) || y < 0) {\n      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');\n    }\n    // verify that A is a 2 dimensional square matrix\n    var s = size(x);\n    if (s.length != 2) {\n      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n    }\n    if (s[0] != s[1]) {\n      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n    }\n\n    var res = eye(s[0]).valueOf();\n    var px = x;\n    while (y >= 1) {\n      if ((y & 1) == 1) {\n        res = multiply(px, res);\n      }\n      y >>= 1;\n      px = multiply(px, px);\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the power of a 2d matrix\n   * @param {Matrix} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Matrix}\n   * @private\n   */\n  function _powMatrix (x, y) {\n    return matrix(_powArray(x.valueOf(), y));\n  }\n\n\n\n  pow.toTex = {\n    2: '\\\\left(${args[0]}\\\\right)' + latex.operators['pow'] + '{${args[1]}}'\n  };\n\n  return pow;\n}\n\nexports.name = 'pow';\nexports.factory = factory;\n\n},{\"../../type/fraction/function/fraction\":470,\"../../type/matrix/function/matrix\":482,\"../../type/number\":499,\"../../utils/array\":509,\"../../utils/latex\":531,\"../../utils/number\":532,\"../matrix/eye\":348,\"./multiply\":303}],308:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar toFixed = require('../../utils/number').toFixed;\nvar deepMap = require('../../utils/collection/deepMap');\n\nvar NO_INT = 'Number of decimals in function round must be an integer';\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var zeros = load(require('../matrix/zeros'));\n\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.2);              // returns number 3\n   *    math.round(3.8);              // returns number 4\n   *    math.round(-4.2);             // returns number -4\n   *    math.round(-4.7);             // returns number -5\n   *    math.round(math.pi, 3);       // returns number 3.142\n   *    math.round(123.45678, 2);     // returns number 123.46\n   *\n   *    var c = math.complex(3.2, -2.7);\n   *    math.round(c);                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  var round = typed('round', {\n\n    'number': Math.round,\n\n    'number, number': function (x, n) {\n      if (!isInteger(n))   {throw new TypeError(NO_INT);}\n      if (n < 0 || n > 15) {throw new Error('Number of decimals in function round must be in te range of 0-15');}\n\n      return _round(x, n);\n    },\n\n    'Complex': function (x) {\n      return x.round();\n    },\n\n    'Complex, number': function (x, n) {\n      if (n % 1) {throw new TypeError(NO_INT);}\n      \n      return x.round(n);\n    },\n\n    'Complex, BigNumber': function (x, n) {\n      if (!n.isInteger()) {throw new TypeError(NO_INT);}\n\n      var _n = n.toNumber();\n      return x.round(_n);\n    },\n\n    'number, BigNumber': function (x, n) {\n      if (!n.isInteger()) {throw new TypeError(NO_INT);}\n\n      return new type.BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n\n    'BigNumber': function (x) {\n      return x.toDecimalPlaces(0);\n    },\n\n    'BigNumber, BigNumber': function (x, n) {\n      if (!n.isInteger()) {throw new TypeError(NO_INT);}\n\n      return x.toDecimalPlaces(n.toNumber());\n    },\n\n    'Fraction': function (x) {\n      return x.round();\n    },\n\n    'Fraction, number': function (x, n) {\n      if (n % 1) {throw new TypeError(NO_INT);}\n      return x.round(n);\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, round, true);\n    },\n\n    'Matrix, number | BigNumber': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, round, false);\n          break;\n        default:\n          c = algorithm14(x, y, round, false);\n          break;\n      }\n      return c;\n    },\n\n    'number | Complex | BigNumber, Matrix': function (x, y) {\n      // check scalar is zero\n      if (!equalScalar(x, 0)) {\n        // result\n        var c;\n        // check storage format\n        switch (y.storage()) {\n          case 'sparse':\n            c = algorithm12(y, x, round, true);\n            break;\n          default:\n            c = algorithm14(y, x, round, true);\n            break;\n        }\n        return c;\n      }\n      // do not execute algorithm, result will be a zero matrix\n      return zeros(y.size(), y.storage());\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, round, false).valueOf();\n    },\n\n    'number | Complex | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, round, true).valueOf();\n    }\n  });\n\n  round.toTex = {\n    1: '\\\\left\\\\lfloor${args[0]}\\\\right\\\\rceil',\n    2: undefined  // use default template\n  };\n\n  return round;\n}\n\n/**\n * round a number to the given number of decimals, or to zero if decimals is\n * not provided\n * @param {number} value\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\n * @return {number} roundedValue\n * @private\n */\nfunction _round (value, decimals) {\n  return parseFloat(toFixed(value, decimals));\n}\n\nexports.name = 'round';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm11\":495,\"../../type/matrix/utils/algorithm12\":496,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/collection/deepMap\":523,\"../../utils/number\":532,\"../matrix/zeros\":367,\"../relational/equalScalar\":384}],309:[function(require,module,exports){\n'use strict';\n\nvar number = require('../../utils/number');\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Compute the sign of a value. The sign of a value x is:\n   *\n   * -  1 when x > 1\n   * - -1 when x < 0\n   * -  0 when x == 0\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sign(x)\n   *\n   * Examples:\n   *\n   *    math.sign(3.5);               // returns 1\n   *    math.sign(-4.2);              // returns -1\n   *    math.sign(0);                 // returns 0\n   *\n   *    math.sign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]\n   *\n   * See also:\n   *\n   *    abs\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            The number for which to determine the sign\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n   *            The sign of `x`\n   */\n  var sign = typed('sign', {\n    'number': number.sign,\n\n    'Complex': function (x) {\n      return x.sign();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(x.cmp(0));\n    },\n\n    'Fraction': function (x) {\n      return new type.Fraction(x.s, 1);\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since sign(0) = 0\n      return deepMap(x, sign, true);\n    },\n\n    'Unit': function(x) {\n      return sign(x.value);\n    }\n  });\n\n  sign.toTex = {1: '\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)'};\n\n  return sign;\n}\n\nexports.name = 'sign';\nexports.factory = factory;\n\n\n},{\"../../utils/collection/deepMap\":523,\"../../utils/number\":532}],310:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the square root of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sqrt(x)\n   *\n   * Examples:\n   *\n   *    math.sqrt(25);                // returns 5\n   *    math.square(5);               // returns 25\n   *    math.sqrt(-4);                // returns Complex 2i\n   *\n   * See also:\n   *\n   *    square, multiply, cube, cbrt\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x\n   *            Value for which to calculate the square root.\n   * @return {number | BigNumber | Complex | Array | Matrix | Unit}\n   *            Returns the square root of `x`\n   */\n  var sqrt = typed('sqrt', {\n    'number': _sqrtNumber,\n\n    'Complex': function (x) {\n        return x.sqrt();\n    },\n\n    'BigNumber': function (x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.sqrt();\n      }\n      else {\n        // negative value -> downgrade to number to do complex value computation\n        return _sqrtNumber(x.toNumber());\n      }\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since sqrt(0) = 0\n      return deepMap(x, sqrt, true);\n    },\n\n    'Unit': function (x) {\n      // Someday will work for complex units when they are implemented\n      return x.pow(0.5);\n    }\n\n  });\n\n  /**\n   * Calculate sqrt for a number\n   * @param {number} x\n   * @returns {number | Complex} Returns the square root of x\n   * @private\n   */\n  function _sqrtNumber(x) {\n    if (x >= 0 || config.predictable) {\n      return Math.sqrt(x);\n    }\n    else {\n      return new type.Complex(x, 0).sqrt();\n    }\n  }\n\n  sqrt.toTex = {1: '\\\\sqrt{${args[0]}}'};\n\n  return sqrt;\n}\n\nexports.name = 'sqrt';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],311:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Compute the square of a value, `x * x`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.square(x)\n   *\n   * Examples:\n   *\n   *    math.square(2);           // returns number 4\n   *    math.square(3);           // returns number 9\n   *    math.pow(3, 2);           // returns number 9\n   *    math.multiply(3, 3);      // returns number 9\n   *\n   *    math.square([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]\n   *\n   * See also:\n   *\n   *    multiply, cube, sqrt, pow\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            Number for which to calculate the square\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Squared value\n   */\n  var square = typed('square', {\n    'number': function (x) {\n      return x * x;\n    },\n\n    'Complex': function (x) {\n      return x.mul(x);\n    },\n\n    'BigNumber': function (x) {\n      return x.times(x);\n    },\n\n    'Fraction': function (x) {\n      return x.mul(x);\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since square(0) = 0\n      return deepMap(x, square, true);\n    },\n\n    'Unit': function(x) {\n      return x.pow(2);\n    }\n  });\n\n  square.toTex = {1: '\\\\left(${args[0]}\\\\right)^2'};\n\n  return square;\n}\n\nexports.name = 'square';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],312:[function(require,module,exports){\n'use strict';\n\nvar DimensionError = require('../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n  var unaryMinus = load(require('./unaryMinus'));\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  // TODO: split function subtract in two: subtract and subtractScalar\n\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2);        // returns number 3.3\n   *\n   *    var a = math.complex(2, 3);\n   *    var b = math.complex(4, 1);\n   *    math.subtract(a, b);          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4);  // returns Array [1, 3, 0]\n   *\n   *    var c = math.unit('2.1 km');\n   *    var d = math.unit('500m');\n   *    math.subtract(c, d);          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n  var subtract = typed('subtract', {\n\n    'number, number': function (x, y) {\n      return x - y;\n    },\n\n    'Complex, Complex': function (x, y) {\n      return x.sub(y);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.minus(y);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.sub(y);\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (x.value == null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value == null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      var res = x.clone();\n      res.value = subtract(res.value, y.value);\n      res.fixPrefix = false;\n\n      return res;\n    },\n    \n    'Matrix, Matrix': function (x, y) {\n      // matrix sizes\n      var xsize = x.size();\n      var ysize = y.size();\n\n      // check dimensions\n      if (xsize.length !== ysize.length)\n        throw new DimensionError(xsize.length, ysize.length);\n\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse - sparse\n              c = algorithm05(x, y, subtract);\n              break;\n            default:\n              // sparse - dense\n              c = algorithm03(y, x, subtract, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense - sparse\n              c = algorithm01(x, y, subtract, false);\n              break;\n            default:\n              // dense - dense\n              c = algorithm13(x, y, subtract);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n    \n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return subtract(x, matrix(y));\n    },\n    \n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          // algorithm 7 is faster than 9 since it calls f() for nonzero items only!\n          c = algorithm10(x, unaryMinus(y), addScalar);\n          break;\n        default:\n          c = algorithm14(x, y, subtract);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm10(y, x, subtract, true);\n          break;\n        default:\n          c = algorithm14(y, x, subtract, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, subtract, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, subtract, true).valueOf();\n    }\n  });\n\n  subtract.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['subtract'] + '${args[1]}\\\\right)'\n  };\n\n  return subtract;\n}\n\nexports.name = 'subtract';\nexports.factory = factory;\n\n},{\"../../error/DimensionError\":11,\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm01\":485,\"../../type/matrix/utils/algorithm03\":487,\"../../type/matrix/utils/algorithm05\":489,\"../../type/matrix/utils/algorithm10\":494,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/latex\":531,\"./addScalar\":284,\"./unaryMinus\":313}],313:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  /**\n   * Inverse the sign of a value, apply a unary minus operation.\n   *\n   * For matrices, the function is evaluated element wise. Boolean values and\n   * strings will be converted to a number. For complex numbers, both real and\n   * complex value are inverted.\n   *\n   * Syntax:\n   *\n   *    math.unaryMinus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryMinus(3.5);      // returns -3.5\n   *    math.unaryMinus(-4.2);     // returns 4.2\n   *\n   * See also:\n   *\n   *    add, subtract, unaryPlus\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\n   */\n  var unaryMinus = typed('unaryMinus', {\n    'number': function (x) {\n      return -x;\n    },\n\n    'Complex': function (x) {\n      return x.neg();\n    },\n\n    'BigNumber': function (x) {\n      return x.neg();\n    },\n\n    'Fraction': function (x) {\n      return x.neg();\n    },\n\n    'Unit': function (x) {\n      var res = x.clone();\n      res.value = unaryMinus(x.value);\n      return res;\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since unaryMinus(0) = 0\n      return deepMap(x, unaryMinus, true);\n    }\n\n    // TODO: add support for string\n  });\n\n  unaryMinus.toTex = {\n    1: latex.operators['unaryMinus'] + '\\\\left(${args[0]}\\\\right)'\n  };\n\n  return unaryMinus;\n}\n\nexports.name = 'unaryMinus';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523,\"../../utils/latex\":531}],314:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  /**\n   * Unary plus operation.\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.unaryPlus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryPlus(3.5);      // returns 3.5\n   *    math.unaryPlus(1);     // returns 1\n   *\n   * See also:\n   *\n   *    unaryMinus, add, subtract\n   *\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n   *            Input value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\n   */\n  var unaryPlus = typed('unaryPlus', {\n    'number': function (x) {\n      return x;\n    },\n\n    'Complex': function (x) {\n      return x; // complex numbers are immutable\n    },\n\n    'BigNumber': function (x) {\n      return x; // bignumbers are immutable\n    },\n\n    'Fraction': function (x) {\n      return x; // fractions are immutable\n    },\n\n    'Unit': function (x) {\n      return x.clone();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since unaryPlus(0) = 0\n      return deepMap(x, unaryPlus, true);\n    },\n\n    'boolean | string | null': function (x) {\n      // convert to a number or bignumber\n      return (config.number == 'BigNumber') ? new type.BigNumber(+x): +x;\n    }\n  });\n\n  unaryPlus.toTex = {\n    1: latex.operators['unaryPlus'] + '\\\\left(${args[0]}\\\\right)'\n  };\n\n  return unaryPlus;\n}\n\nexports.name = 'unaryPlus';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523,\"../../utils/latex\":531}],315:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Calculate the extended greatest common divisor for two values.\n   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n   *\n   * Syntax:\n   *\n   *    math.xgcd(a, b)\n   *\n   * Examples:\n   *\n   *    math.xgcd(8, 12);             // returns [4, -1, 1]\n   *    math.gcd(8, 12);              // returns 4\n   *    math.xgcd(36163, 21199);      // returns [1247, -7, 12]\n   *\n   * See also:\n   *\n   *    gcd, lcm\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n   *                              where `div = gcd(a, b)` and `a*m + b*n = div`\n   */\n  var xgcd = typed('xgcd', {\n    'number, number': _xgcd,\n    'BigNumber, BigNumber': _xgcdBigNumber\n    // TODO: implement support for Fraction\n  });\n\n  xgcd.toTex = undefined; // use default template\n\n  return xgcd;\n\n  /**\n   * Calculate xgcd for two numbers\n   * @param {number} a\n   * @param {number} b\n   * @return {number} result\n   * @private\n   */\n  function _xgcd (a, b) {\n    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n    var t, // used to swap two variables\n        q, // quotient\n        r, // remainder\n        x = 0, lastx = 1,\n        y = 1, lasty = 0;\n\n    if (!isInteger(a) || !isInteger(b)) {\n      throw new Error('Parameters in function xgcd must be integer numbers');\n    }\n\n    while (b) {\n      q = Math.floor(a / b);\n      r = a - q*b;\n\n      t = x;\n      x = lastx - q * x;\n      lastx = t;\n\n      t = y;\n      y = lasty - q * y;\n      lasty = t;\n\n      a = b;\n      b = r;\n    }\n\n    var res;\n    if (a < 0) {\n      res = [-a, -lastx, -lasty];\n    }\n    else {\n      res = [a, a ? lastx : 0, lasty];\n    }\n    return (config.matrix === 'Array') ? res : matrix(res);\n  }\n\n  /**\n   * Calculate xgcd for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @return {BigNumber[]} result\n   * @private\n   */\n  function _xgcdBigNumber(a, b) {\n    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n    var t, // used to swap two variables\n        q, // quotient\n        r, // remainder\n        zero = new type.BigNumber(0),\n        one = new type.BigNumber(1),\n        x = zero,\n        lastx = one,\n        y = one,\n        lasty = zero;\n\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function xgcd must be integer numbers');\n    }\n\n    while (!b.isZero()) {\n      q = a.div(b).floor();\n      r = a.mod(b);\n\n      t = x;\n      x = lastx.minus(q.times(x));\n      lastx = t;\n\n      t = y;\n      y = lasty.minus(q.times(y));\n      lasty = t;\n\n      a = b;\n      b = r;\n    }\n\n    var res;\n    if (a.lt(zero)) {\n      res = [a.neg(), lastx.neg(), lasty.neg()];\n    }\n    else {\n      res = [a, !a.isZero() ? lastx : 0, lasty];\n    }\n    return (config.matrix === 'Array') ? res : matrix(res);\n  }\n}\n\nexports.name = 'xgcd';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/number\":532}],316:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar bigBitAnd = require('../../utils/bignumber/bitAnd');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Bitwise AND two values, `x & y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitAnd(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitAnd(53, 131);               // returns number 1\n   *\n   *    math.bitAnd([1, 12, 31], 42);       // returns Array [0, 8, 10]\n   *\n   * See also:\n   *\n   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to and\n   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`\n   */\n  var bitAnd = typed('bitAnd', {\n\n    'number, number': function (x, y) {\n      if (!isInteger(x) || !isInteger(y)) {\n        throw new Error('Integers expected in function bitAnd');\n      }\n\n      return x & y;\n    },\n\n    'BigNumber, BigNumber': bigBitAnd,\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse & sparse\n              c = algorithm06(x, y, bitAnd, false);\n              break;\n            default:\n              // sparse & dense\n              c = algorithm02(y, x, bitAnd, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense & sparse\n              c = algorithm02(x, y, bitAnd, false);\n              break;\n            default:\n              // dense & dense\n              c = algorithm13(x, y, bitAnd);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n    \n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return bitAnd(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return bitAnd(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return bitAnd(x, matrix(y));\n    },\n    \n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, bitAnd, false);\n          break;\n        default:\n          c = algorithm14(x, y, bitAnd, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm11(y, x, bitAnd, true);\n          break;\n        default:\n          c = algorithm14(y, x, bitAnd, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, bitAnd, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, bitAnd, true).valueOf();\n    }\n  });\n\n  bitAnd.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['bitAnd'] + '${args[1]}\\\\right)'\n  };\n\n  return bitAnd;\n}\n\nexports.name = 'bitAnd';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm02\":486,\"../../type/matrix/utils/algorithm06\":490,\"../../type/matrix/utils/algorithm11\":495,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/bignumber/bitAnd\":510,\"../../utils/latex\":531,\"../../utils/number\":532}],317:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar bigBitNot = require('../../utils/bignumber/bitNot');\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  /**\n   * Bitwise NOT value, `~x`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.bitNot(x)\n   *\n   * Examples:\n   *\n   *    math.bitNot(1);               // returns number -2\n   *\n   *    math.bitNot([2, -3, 4]);      // returns Array [-3, 2, 5]\n   *\n   * See also:\n   *\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to not\n   * @return {number | BigNumber | Array | Matrix} NOT of `x`\n   */\n  var bitNot = typed('bitNot', {\n    'number': function (x) {\n      if (!isInteger(x)) {\n        throw new Error('Integer expected in function bitNot');\n      }\n\n      return ~x;\n    },\n\n    'BigNumber': bigBitNot,\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, bitNot);\n    }\n  });\n\n  bitNot.toTex = {\n    1: latex.operators['bitNot'] + '\\\\left(${args[0]}\\\\right)'\n  };\n\n  return bitNot;\n}\n\nexports.name = 'bitNot';\nexports.factory = factory;\n\n},{\"../../utils/bignumber/bitNot\":511,\"../../utils/collection/deepMap\":523,\"../../utils/latex\":531,\"../../utils/number\":532}],318:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar bigBitOr = require('../../utils/bignumber/bitOr');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Bitwise OR two values, `x | y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the lowest print base.\n   *\n   * Syntax:\n   *\n   *    math.bitOr(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitOr(1, 2);               // returns number 3\n   *\n   *    math.bitOr([1, 2, 3], 4);       // returns Array [5, 6, 7]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to or\n   * @param  {number | BigNumber | Array | Matrix} y Second value to or\n   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`\n   */\n  var bitOr = typed('bitOr', {\n\n    'number, number': function (x, y) {\n      if (!isInteger(x) || !isInteger(y)) {\n        throw new Error('Integers expected in function bitOr');\n      }\n\n      return x | y;\n    },\n\n    'BigNumber, BigNumber': bigBitOr,\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm04(x, y, bitOr);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm01(y, x, bitOr, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm01(x, y, bitOr, false);\n              break;\n            default:\n              c = algorithm13(x, y, bitOr);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return bitOr(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return bitOr(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return bitOr(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm10(x, y, bitOr, false);\n          break;\n        default:\n          c = algorithm14(x, y, bitOr, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm10(y, x, bitOr, true);\n          break;\n        default:\n          c = algorithm14(y, x, bitOr, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, bitOr, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, bitOr, true).valueOf();\n    }\n  });\n\n  bitOr.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['bitOr'] + '${args[1]}\\\\right)'\n  };\n\n  return bitOr;\n}\n\nexports.name = 'bitOr';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm01\":485,\"../../type/matrix/utils/algorithm04\":488,\"../../type/matrix/utils/algorithm10\":494,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/bignumber/bitOr\":512,\"../../utils/latex\":531,\"../../utils/number\":532}],319:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar bigBitXor = require('../../utils/bignumber/bitXor');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Bitwise XOR two values, `x ^ y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitXor(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitXor(1, 2);               // returns number 3\n   *\n   *    math.bitXor([2, 3, 4], 4);       // returns Array [6, 7, 0]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to xor\n   * @param  {number | BigNumber | Array | Matrix} y Second value to xor\n   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`\n   */\n  var bitXor = typed('bitXor', {\n\n    'number, number': function (x, y) {\n      if (!isInteger(x) || !isInteger(y)) {\n        throw new Error('Integers expected in function bitXor');\n      }\n\n      return x ^ y;\n    },\n\n    'BigNumber, BigNumber': bigBitXor,\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, bitXor);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, bitXor, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, bitXor, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, bitXor);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return bitXor(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return bitXor(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return bitXor(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, bitXor, false);\n          break;\n        default:\n          c = algorithm14(x, y, bitXor, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, bitXor, true);\n          break;\n        default:\n          c = algorithm14(y, x, bitXor, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, bitXor, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, bitXor, true).valueOf();\n    }\n  });\n\n  bitXor.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['bitXor'] + '${args[1]}\\\\right)'\n  };\n\n  return bitXor;\n}\n\nexports.name = 'bitXor';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm03\":487,\"../../type/matrix/utils/algorithm07\":491,\"../../type/matrix/utils/algorithm12\":496,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/bignumber/bitXor\":513,\"../../utils/latex\":531,\"../../utils/number\":532}],320:[function(require,module,exports){\nmodule.exports = [\n  require('./bitAnd'),\n  require('./bitNot'),\n  require('./bitOr'),\n  require('./bitXor'),\n  require('./leftShift'),\n  require('./rightArithShift'),\n  require('./rightLogShift')\n];\n\n},{\"./bitAnd\":316,\"./bitNot\":317,\"./bitOr\":318,\"./bitXor\":319,\"./leftShift\":321,\"./rightArithShift\":322,\"./rightLogShift\":323}],321:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar bigLeftShift = require('../../utils/bignumber/leftShift');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var zeros = load(require('../matrix/zeros'));\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.leftShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.leftShift(1, 2);               // returns number 4\n   *\n   *    math.leftShift([1, 2, 3], 4);       // returns Array [16, 32, 64]\n   *\n   * See also:\n   *\n   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times\n   */\n  var leftShift = typed('leftShift', {\n    \n    'number, number': function (x, y) {\n      if (!isInteger(x) || !isInteger(y)) {\n        throw new Error('Integers expected in function leftShift');\n      }\n\n      return x << y;\n    },\n\n    'BigNumber, BigNumber': bigLeftShift,\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse & sparse\n              c = algorithm08(x, y, leftShift, false);\n              break;\n            default:\n              // sparse & dense\n              c = algorithm02(y, x, leftShift, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense & sparse\n              c = algorithm01(x, y, leftShift, false);\n              break;\n            default:\n              // dense & dense\n              c = algorithm13(x, y, leftShift);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return leftShift(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return leftShift(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return leftShift(x, matrix(y));\n    },\n\n    'Matrix, number | BigNumber': function (x, y) {\n      // check scalar\n      if (!equalScalar(y, 0)) {\n        // result\n        var c;\n        // check storage format\n        switch (x.storage()) {\n          case 'sparse':\n            c = algorithm11(x, y, leftShift, false);\n            break;\n          default:\n            c = algorithm14(x, y, leftShift, false);\n            break;\n        }\n        return c;\n      }\n      return x.clone();\n    },\n\n    'number | BigNumber, Matrix': function (x, y) {\n      // check scalar\n      if (!equalScalar(x, 0)) {\n        // result\n        var c;\n        // check storage format\n        switch (y.storage()) {\n          case 'sparse':\n            c = algorithm10(y, x, leftShift, true);\n            break;\n          default:\n            c = algorithm14(y, x, leftShift, true);\n            break;\n        }\n        return c;\n      }\n      return zeros(y.size(), y.storage());\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return leftShift(matrix(x), y).valueOf();\n    },\n\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return leftShift(x, matrix(y)).valueOf();\n    }\n  });\n\n  leftShift.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['leftShift'] + '${args[1]}\\\\right)'\n  };\n\n  return leftShift;\n}\n\nexports.name = 'leftShift';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm01\":485,\"../../type/matrix/utils/algorithm02\":486,\"../../type/matrix/utils/algorithm08\":492,\"../../type/matrix/utils/algorithm10\":494,\"../../type/matrix/utils/algorithm11\":495,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/bignumber/leftShift\":517,\"../../utils/latex\":531,\"../../utils/number\":532,\"../matrix/zeros\":367,\"../relational/equalScalar\":384}],322:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar bigRightArithShift = require('../../utils/bignumber/rightArithShift');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n  \n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var zeros = load(require('../matrix/zeros'));\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightArithShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightArithShift(4, 2);               // returns number 1\n   *\n   *    math.rightArithShift([16, -32, 64], 4);   // returns Array [1, -2, 3]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times\n   */\n  var rightArithShift = typed('rightArithShift', {\n\n    'number, number': function (x, y) {\n      if (!isInteger(x) || !isInteger(y)) {\n        throw new Error('Integers expected in function rightArithShift');\n      }\n\n      return x >> y;\n    },\n\n    'BigNumber, BigNumber': bigRightArithShift,\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse & sparse\n              c = algorithm08(x, y, rightArithShift, false);\n              break;\n            default:\n              // sparse & dense\n              c = algorithm02(y, x, rightArithShift, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense & sparse\n              c = algorithm01(x, y, rightArithShift, false);\n              break;\n            default:\n              // dense & dense\n              c = algorithm13(x, y, rightArithShift);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return rightArithShift(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return rightArithShift(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return rightArithShift(x, matrix(y));\n    },\n\n    'Matrix, number | BigNumber': function (x, y) {\n      // check scalar\n      if (!equalScalar(y, 0)) {\n        // result\n        var c;\n        // check storage format\n        switch (x.storage()) {\n          case 'sparse':\n            c = algorithm11(x, y, rightArithShift, false);\n            break;\n          default:\n            c = algorithm14(x, y, rightArithShift, false);\n            break;\n        }\n        return c;\n      }\n      return x.clone();\n    },\n\n    'number | BigNumber, Matrix': function (x, y) {\n      // check scalar\n      if (!equalScalar(x, 0)) {\n        // result\n        var c;\n        // check storage format\n        switch (y.storage()) {\n          case 'sparse':\n            c = algorithm10(y, x, rightArithShift, true);\n            break;\n          default:\n            c = algorithm14(y, x, rightArithShift, true);\n            break;\n        }\n        return c;\n      }\n      return zeros(y.size(), y.storage());\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return rightArithShift(matrix(x), y).valueOf();\n    },\n\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return rightArithShift(x, matrix(y)).valueOf();\n    }\n  });\n\n  rightArithShift.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['rightArithShift'] + '${args[1]}\\\\right)'\n  };\n\n  return rightArithShift;\n}\n\nexports.name = 'rightArithShift';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm01\":485,\"../../type/matrix/utils/algorithm02\":486,\"../../type/matrix/utils/algorithm08\":492,\"../../type/matrix/utils/algorithm10\":494,\"../../type/matrix/utils/algorithm11\":495,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/bignumber/rightArithShift\":519,\"../../utils/latex\":531,\"../../utils/number\":532,\"../matrix/zeros\":367,\"../relational/equalScalar\":384}],323:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var zeros = load(require('../matrix/zeros'));\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightLogShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightLogShift(4, 2);               // returns number 1\n   *\n   *    math.rightLogShift([16, -32, 64], 4);   // returns Array [1, 2, 3]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n   *\n   * @param  {number | Array | Matrix} x Value to be shifted\n   * @param  {number} y Amount of shifts\n   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n\n  var rightLogShift = typed('rightLogShift', {\n\n    'number, number': function (x, y) {\n      if (!isInteger(x) || !isInteger(y)) {\n        throw new Error('Integers expected in function rightLogShift');\n      }\n\n      return x >>> y;\n    },\n\n    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse & sparse\n              c = algorithm08(x, y, rightLogShift, false);\n              break;\n            default:\n              // sparse & dense\n              c = algorithm02(y, x, rightLogShift, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense & sparse\n              c = algorithm01(x, y, rightLogShift, false);\n              break;\n            default:\n              // dense & dense\n              c = algorithm13(x, y, rightLogShift);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return rightLogShift(x, matrix(y));\n    },\n\n    'Matrix, number | BigNumber': function (x, y) {\n      // check scalar\n      if (!equalScalar(y, 0)) {\n        // result\n        var c;\n        // check storage format\n        switch (x.storage()) {\n          case 'sparse':\n            c = algorithm11(x, y, rightLogShift, false);\n            break;\n          default:\n            c = algorithm14(x, y, rightLogShift, false);\n            break;\n        }\n        return c;\n      }\n      return x.clone();\n    },\n\n    'number | BigNumber, Matrix': function (x, y) {\n      // check scalar\n      if (!equalScalar(x, 0)) {\n        // result\n        var c;\n        // check storage format\n        switch (y.storage()) {\n          case 'sparse':\n            c = algorithm10(y, x, rightLogShift, true);\n            break;\n          default:\n            c = algorithm14(y, x, rightLogShift, true);\n            break;\n        }\n        return c;\n      }\n      return zeros(y.size(), y.storage());\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), y).valueOf();\n    },\n\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return rightLogShift(x, matrix(y)).valueOf();\n    }\n  });\n\n  rightLogShift.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['rightLogShift'] + '${args[1]}\\\\right)'\n  };\n\n  return rightLogShift;\n}\n\nexports.name = 'rightLogShift';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm01\":485,\"../../type/matrix/utils/algorithm02\":486,\"../../type/matrix/utils/algorithm08\":492,\"../../type/matrix/utils/algorithm10\":494,\"../../type/matrix/utils/algorithm11\":495,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/latex\":531,\"../../utils/number\":532,\"../matrix/zeros\":367,\"../relational/equalScalar\":384}],324:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var stirlingS2 = load(require('./stirlingS2'));\n  var isNegative = load(require('../utils/isNegative'));\n  var isInteger = load(require('../utils/isInteger'));\n\n  /**\n   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\n   * bellNumbers only takes integer arguments.\n   * The following condition must be enforced: n >= 0\n   *\n   * Syntax:\n   *\n   *   math.bellNumbers(n)\n   *\n   * Examples:\n   *\n   *    math.bellNumbers(3); // returns 5;\n   *    math.bellNumbers(8); // returns 4140;\n   *\n   * See also:\n   *\n   *    stirlingS2\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @return {Number | BigNumber}     B(n)\n   */\n  var bellNumbers = typed('bellNumbers', {\n    'number | BigNumber': function (n) {\n\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function bellNumbers');\n      }\n\n      // Sum (k=0, n) S(n,k).\n      var result = 0;\n      for(var i = 0; i <= n; i++) {\n        result = add(result, stirlingS2(n, i));\n      }\n\n      return result;\n    }\n  });\n\n  bellNumbers.toTex = {1: '\\\\mathrm{B}_{${args[0]}}'};\n\n  return bellNumbers;\n}\n\nexports.name = 'bellNumbers';\nexports.factory = factory;\n\n},{\"../arithmetic/add\":283,\"../utils/isInteger\":449,\"../utils/isNegative\":451,\"./stirlingS2\":328}],325:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var divide = load(require('../arithmetic/divide'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var combinations = load(require('../probability/combinations'));\n  var isNegative = load(require('../utils/isNegative'));\n  var isInteger = load(require('../utils/isInteger'));\n\n\n  /**\n   * The Catalan Numbers enumerate combinatorial structures of many different types.\n   * catalan only takes integer arguments.\n   * The following condition must be enforced: n >= 0\n   *\n   * Syntax:\n   *\n   *   math.catalan(n)\n   *\n   * Examples:\n   *\n   *    math.catalan(3); // returns 5;\n   *    math.catalan(8); // returns 1430;\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    nth Catalan number\n   * @return {Number | BigNumber}     Cn(n)\n   */\n  var catalan = typed('catalan', {\n    'number | BigNumber': function (n) {\n\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function catalan');\n      }\n       \n      return divide(combinations(multiply(n,2), n), add(n,1));\n\n    }\n  });\n\n  catalan.toTex = {1: '\\\\mathrm{C}_{${args[0]}}'};\n\n  return catalan;\n}\n\nexports.name = 'catalan';\nexports.factory = factory;\n\n},{\"../arithmetic/add\":283,\"../arithmetic/divide\":288,\"../arithmetic/multiply\":303,\"../probability/combinations\":368,\"../utils/isInteger\":449,\"../utils/isNegative\":451}],326:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var combinations = load(require('../probability/combinations'));\n  var add = load(require('../arithmetic/addScalar'));\n  var isPositive = load(require('../utils/isPositive'));\n  var isInteger = load(require('../utils/isInteger'));\n  var larger = load(require('../relational/larger'));\n\n  /**\n   * The composition counts of n into k parts.\n   *\n   * composition only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *   math.composition(n, k)\n   *\n   * Examples:\n   *\n   *    math.composition(5, 3); // returns 6\n   *\n   * See also:\n   *\n   *    combinations\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.\n   */\n  var composition =  typed('composition', {\n    'number | BigNumber, number | BigNumber': function (n, k) {\n      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {\n        throw new TypeError('Positive integer value expected in function composition');\n      }\n      else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function composition');\n      }\n\n      return combinations(add(n, -1), add(k, -1));\n    }\n  });\n\n  composition.toTex = undefined; // use default template\n\n  return composition;\n}\n\nexports.name = 'composition';\nexports.factory = factory;\n\n},{\"../arithmetic/addScalar\":284,\"../probability/combinations\":368,\"../relational/larger\":386,\"../utils/isInteger\":449,\"../utils/isPositive\":453}],327:[function(require,module,exports){\nmodule.exports = [\n  require('./bellNumbers'),\n  require('./composition'),\n  require('./stirlingS2'),\n  require('./catalan')\n];\n\n},{\"./bellNumbers\":324,\"./catalan\":325,\"./composition\":326,\"./stirlingS2\":328}],328:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var divide = load(require('../arithmetic/divide'));\n  var pow = load(require('../arithmetic/pow'));\n  var factorial = load(require('../probability/factorial'));\n  var combinations = load(require('../probability/combinations'));\n  var isNegative = load(require('../utils/isNegative'));\n  var isInteger = load(require('../utils/isInteger'));\n  var larger = load(require('../relational/larger'));\n\n  /**\n   * The Stirling numbers of the second kind, counts the number of ways to partition\n   * a set of n labelled objects into k nonempty unlabelled subsets.\n   * stirlingS2 only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   *  If n = k or k = 1, then s(n,k) = 1\n   *\n   * Syntax:\n   *\n   *   math.stirlingS2(n, k)\n   *\n   * Examples:\n   *\n   *    math.stirlingS2(5, 3); //returns 25\n   *\n   * See also:\n   *\n   *    Bell numbers\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     S(n,k)\n   */\n  var stirlingS2 = typed('stirlingS2', {\n    'number | BigNumber, number | BigNumber': function (n, k) {\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n      }\n      else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n      }\n\n      // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]\n      var kFactorial = factorial(k);\n      var result = 0;\n      for(var i = 0; i <= k; i++) {\n        var negativeOne = pow(-1, subtract(k,i));\n        var kChooseI = combinations(k,i);\n        var iPower = pow(i,n);\n\n        result = add(result, multiply(multiply(kChooseI, iPower), negativeOne));\n      }\n\n      return divide(result, kFactorial);\n    }\n  });\n\n  stirlingS2.toTex = {2: '\\\\mathrm{S}\\\\left(${args}\\\\right)'};\n\n  return stirlingS2;\n}\n\nexports.name = 'stirlingS2';\nexports.factory = factory;\n\n},{\"../arithmetic/add\":283,\"../arithmetic/divide\":288,\"../arithmetic/multiply\":303,\"../arithmetic/pow\":307,\"../arithmetic/subtract\":312,\"../probability/combinations\":368,\"../probability/factorial\":370,\"../relational/larger\":386,\"../utils/isInteger\":449,\"../utils/isNegative\":451}],329:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Compute the argument of a complex value.\n   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.arg(x)\n   *\n   * Examples:\n   *\n   *    var a = math.complex(2, 2);\n   *    math.arg(a) / math.pi;          // returns number 0.25\n   *\n   *    var b = math.complex('2 + 3i');\n   *    math.arg(b);                    // returns number 0.982793723247329\n   *    math.atan2(3, 2);               // returns number 0.982793723247329\n   *\n   * See also:\n   *\n   *    re, im, conj, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The argument of x\n   */\n  var arg = typed('arg', {\n    'number': function (x) {\n      return Math.atan2(0, x);\n    },\n\n    'BigNumber': function (x) {\n      return type.BigNumber.atan2(0, x);\n    },\n\n    'Complex': function (x) {\n      return x.arg();\n    },\n\n    // TODO: implement BigNumber support for function arg\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, arg);\n    }\n  });\n\n  arg.toTex = {1: '\\\\arg\\\\left(${args[0]}\\\\right)'};\n\n  return arg;\n}\n\nexports.name = 'arg';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],330:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Compute the complex conjugate of a complex value.\n   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.conj(x)\n   *\n   * Examples:\n   *\n   *    math.conj(math.complex('2 + 3i'));  // returns Complex 2 - 3i\n   *    math.conj(math.complex('2 - 3i'));  // returns Complex 2 + 3i\n   *    math.conj(math.complex('-5.2i'));  // returns Complex 5.2i\n   *\n   * See also:\n   *\n   *    re, im, arg, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            The complex conjugate of x\n   */\n  var conj = typed('conj', {\n    'number': function (x) {\n      return x;\n    },\n\n    'BigNumber': function (x) {\n      return x;\n    },\n\n    'Complex': function (x) {\n      return x.conjugate();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, conj);\n    }\n  });\n\n  conj.toTex = {1: '\\\\left(${args[0]}\\\\right)^*'};\n\n  return conj;\n}\n\nexports.name = 'conj';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],331:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Get the imaginary part of a complex number.\n   * For a complex number `a + bi`, the function returns `b`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.im(x)\n   *\n   * Examples:\n   *\n   *    var a = math.complex(2, 3);\n   *    math.re(a);                     // returns number 2\n   *    math.im(a);                     // returns number 3\n   *\n   *    math.re(math.complex('-5.2i')); // returns number -5.2\n   *    math.re(math.complex(2.4));     // returns number 0\n   *\n   * See also:\n   *\n   *    re, conj, abs, arg\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The imaginary part of x\n   */\n  var im = typed('im', {\n    'number': function (x) {\n      return 0;\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(0);\n    },\n\n    'Complex': function (x) {\n      return x.im;\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, im);\n    }\n  });\n\n  im.toTex = {1: '\\\\Im\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace'};\n\n  return im;\n}\n\nexports.name = 'im';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],332:[function(require,module,exports){\nmodule.exports = [\n  require('./arg'),\n  require('./conj'),\n  require('./im'),\n  require('./re')\n];\n\n},{\"./arg\":329,\"./conj\":330,\"./im\":331,\"./re\":333}],333:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Get the real part of a complex number.\n   * For a complex number `a + bi`, the function returns `a`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.re(x)\n   *\n   * Examples:\n   *\n   *    var a = math.complex(2, 3);\n   *    math.re(a);                     // returns number 2\n   *    math.im(a);                     // returns number 3\n   *\n   *    math.re(math.complex('-5.2i')); // returns number 0\n   *    math.re(math.complex(2.4));     // returns number 2.4\n   *\n   * See also:\n   *\n   *    im, conj, abs, arg\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The real part of x\n   */\n  var re = typed('re', {\n    'number': function (x) {\n      return x;\n    },\n\n    'BigNumber': function (x) {\n      return x;\n    },\n\n    'Complex': function (x) {\n      return x.re;\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, re);\n    }\n  });\n\n  re.toTex = {1: '\\\\Re\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace'};\n\n  return re;\n}\n\nexports.name = 're';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],334:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n    * Calculates:\n    *    The eucledian distance between two points in 2 and 3 dimensional spaces.\n    *    Distance between point and a line in 2 and 3 dimensional spaces.\n    *    Pairwise distance between a set of 2D or 3D points\n    * NOTE:\n    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n    *\n    * Syntax:\n    *    math.distance([x1, y1], [x2, y2])\n    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\n    *    math.distance([x1, y1, z1], [x2, y2, z2])\n    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\n    *    math.distance([[A], [B], [C]...])\n    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\n    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\n    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\n    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\n    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])\n    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\n    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\n    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])\n    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\n    *\n    * Examples:\n    *    math.distance([0,0], [4,4])                     // Returns 5.6569\n    *    math.distance(\n    *     {pointOneX: 0, pointOneY: 0},\n    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166\n    *    math.distance(\n    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n    *    math.distance(\n    *     {pointX: 1, pointY: 4},\n    *     {lineOnePtX: 6, lineOnePtY: 3},\n    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n    *    math.distance(\n    *     {pointX: 2, pointY: 3, pointZ: 1},\n    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857\n    *\n    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n    * @return {Number | BigNumber} Returns the distance from two/three points\n  */\n\n  var distance = typed('distance', {\n    'Array, Array, Array': function(x, y, z){\n      // Point to Line 2D; (x=Point, y=LinePoint1, z=LinePoint2)\n      if (x.length == 2 && y.length == 2 && z.length == 2){\n        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }\n        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for second argument'); }\n        if (!_2d(z)) { throw new TypeError('Array with 2 numbers expected for third argument'); }\n        var m = (z[1]-z[0])/(y[1]-y[0]);\n        var xCoeff = m*m*y[0];\n        var yCoeff = -1*(m*y[0]);\n        var constant = x[1];\n\n        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\n      }\n      else{\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object, Object': function(x, y, z){\n      if (Object.keys(x).length == 2 && Object.keys(y).length == 2 && Object.keys(z).length == 2){\n        if (!_2d(x)) { throw new TypeError('Values of pointX and pointY should be numbers'); }\n        if (!_2d(y)) { throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers'); }\n        if (!_2d(z)) { throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers'); }\n        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('lineOnePtX') &&\n          y.hasOwnProperty('lineOnePtY') && z.hasOwnProperty('lineTwoPtX') && z.hasOwnProperty('lineTwoPtY')){\n          var m = (z.lineTwoPtY-z.lineTwoPtX)/(y.lineOnePtY-y.lineOnePtX);\n          var xCoeff = m*m*y.lineOnePtX;\n          var yCoeff = -1*(m*y.lineOnePtX);\n          var constant = x.pointX;\n\n          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\n        }\n        else{\n          throw new TypeError('Key names do not match');\n        }\n      }\n      else{\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array, Array': function(x, y){\n      // Point to Line 2D; (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\n      if (x.length == 2 && y.length == 3){\n        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }\n        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }\n\n        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\n      }\n      // Point to Line 3D\n      else if (x.length == 3 && y.length == 6){\n        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }\n        if (!_parametricLine(y)) { throw new TypeError('Array with 6 numbers expected for second argument'); }\n\n        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\n      }\n      // Point to Point 2D\n      else if (x.length == 2 && y.length == 2){\n        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }\n        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for second argument'); }\n\n        return _distance2d(x[0], x[1], y[0], y[1]);\n      }\n      // Point to Point 3D\n      else if(x.length == 3 && y.length == 3){\n        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }\n        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }\n\n        return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);\n      }\n      else{\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object': function(x, y){\n      if (Object.keys(x).length == 2 && Object.keys(y).length == 3){\n        if (!_2d(x)) { throw new TypeError('Values of pointX and pointY should be numbers'); }\n        if (!_3d(y)) { throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers'); }\n        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('xCoeffLine') &&\n          y.hasOwnProperty('yCoeffLine') && y.hasOwnProperty('yCoeffLine')){\n\n          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\n        }\n        else{\n          throw new TypeError('Key names do not match');\n        }\n      }\n      // Point to Line 3D\n      else if (Object.keys(x).length == 3 && Object.keys(y).length == 6){\n        if (!_3d(x)) { throw new TypeError('Values of pointX, pointY and pointZ should be numbers'); }\n        if (!_parametricLine(y)) { throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers'); }\n        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('x0') &&\n          y.hasOwnProperty('y0') && y.hasOwnProperty('z0') && y.hasOwnProperty('a') &&\n          y.hasOwnProperty('b') && y.hasOwnProperty('c')){\n\n          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\n        }\n        else{\n          throw new TypeError('Key names do not match');\n        }\n      }\n      // Point to Point 2D\n      else if (Object.keys(x).length == 2 && Object.keys(y).length == 2){\n        if (!_2d(x)) { throw new TypeError('Values of pointOneX and pointOneY should be numbers'); }\n        if (!_2d(y)) { throw new TypeError('Values of pointTwoX and pointTwoY should be numbers'); }\n        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') &&\n          y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY')){\n\n          return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);\n        }\n        else{\n          throw new TypeError('Key names do not match');\n        }\n      }\n      // Point to Point 3D\n      else if(Object.keys(x).length == 3 && Object.keys(y).length == 3){\n        if (!_3d(x)) { throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers'); }\n        if (!_3d(y)) { throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers'); }\n        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && x.hasOwnProperty('pointOneZ') &&\n          y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY') && y.hasOwnProperty('pointTwoZ')){\n\n          return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);\n        }\n        else {\n          throw new TypeError('Key names do not match');\n        }\n      }\n      else{\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array': function(arr){\n      if (!_pairwise(arr)) { throw new TypeError('Incorrect array format entered for pairwise distance calculation'); }\n\n      return _distancePairwise(arr);\n    }\n  });\n  return distance;\n}\n\nfunction _2d(a){\n  // checks if the number of arguments are correct in count and are valid (should be numbers)\n  if (a.constructor !== Array){\n    a = _objectToArray(a);\n  }\n  return typeof a[0] === 'number' && typeof a[1] === 'number';\n}\n\nfunction _3d(a){\n  // checks if the number of arguments are correct in count and are valid (should be numbers)\n  if (a.constructor !== Array){\n    a = _objectToArray(a);\n  }\n  return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number';\n}\n\nfunction _parametricLine(a){\n  if (a.constructor !== Array){\n    a = _objectToArray(a);\n  }\n  return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number' &&\n    typeof a[3] === 'number' && typeof a[4] === 'number' && typeof a[5] === 'number';\n\n}\n\nfunction _objectToArray(o){\n  var keys = Object.keys(o);\n  var a = [];\n  for (var i = 0; i < keys.length; i++) {\n    a.push(o[keys[i]]);\n  }\n  return a;\n}\n\nfunction _pairwise(a){\n  //checks for valid arguments passed to _distancePairwise(Array)\n  if (a[0].length == 2 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number'){\n    for(var i in a){\n      if (a[i].length != 2 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number'){\n        return false;\n      }\n    }\n  }\n  else if (a[0].length == 3 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number' && typeof a[0][2] === 'number'){\n    for(var i in a){\n      if (a[i].length != 3 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number' || typeof a[i][2] !== 'number'){\n        return false;\n      }\n    }\n  }\n  else{\n    return false;\n  }\n  return true;\n}\n\nfunction _distancePointLine2D(x, y, a, b, c){\n  var num =  Math.abs(a*x + b*y + c);\n  var den = Math.pow((a*a + b*b), 0.5);\n  var result = (num/den);\n  return result;\n}\n\nfunction _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c){\n  var num = [((y0-y)*(c))-((z0-z)*(b)), ((z0-z)*(a))-((x0-x)*(c)), ((x0-x)*(b))-((y0-y)*(a))]\n  num = Math.pow(num[0]*num[0] + num[1]*num[1] + num[2]*num[2], 0.5);\n  var den = Math.pow(a*a + b*b + c*c, 0.5);\n  var result = num/den;\n  return result;\n}\n\nfunction _distance2d(x1, y1, x2, y2){\n  var yDiff = y2 - y1;\n  var xDiff = x2 - x1;\n  var radicant = yDiff * yDiff + xDiff * xDiff;\n  var result = Math.pow(radicant, 0.5);\n  return result;\n}\n\nfunction _distance3d(x1, y1, z1, x2, y2, z2){\n  var zDiff = z2 - z1;\n  var yDiff = y2 - y1;\n  var xDiff = x2 - x1;\n  var radicant = zDiff * zDiff + yDiff * yDiff + xDiff * xDiff;\n  var result = Math.pow(radicant, 0.5);\n  return result;\n}\n\nfunction _distancePairwise(a){\n  var result = [];\n  for(var i = 0; i < a.length-1; i++){\n    for(var j = i+1; j < a.length; j++){\n      if (a[0].length == 2){\n        result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));\n      }\n      else if (a[0].length == 3){\n        result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));\n      }\n    }\n  }\n  return result;\n}\n\nexports.name = 'distance';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482}],335:[function(require,module,exports){\nmodule.exports = [\n  require('./intersect'),\n  require('./distance')\n];\n\n},{\"./distance\":334,\"./intersect\":336}],336:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var abs = load(require('../arithmetic/abs'));\n  var add = load(require('../arithmetic/add'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var subtract = load(require('../arithmetic/subtract'));\n\n  /**\n   * Calculates the point of intersection of two lines in two or three dimensions\n   * and of a line and a plane in three dimensions. The inputs are in the form of\n   * arrays or 1 dimensional matrices. The line intersection functions return null\n   * if the lines do not meet.\n   *\n   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n   *\n   * Syntax:\n   *\n   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n   *\n   * Examples:\n   *\n   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10]);              // Returns [5, 5]\n   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0]);  // Returns [5, 5, 0]\n   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6]);            // Returns [7, -4, 3]\n   *\n   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n   *                              OR Co-efficients of the plane's equation\n   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n   *                              OR null if the calculation is for line and plane\n   * @return {Array}              Returns the point of intersection of lines/lines-planes\n   */\n  var intersect = typed('intersect', {\n    'Array, Array, Array': function (x, y, plane) {\n      if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }\n      if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }\n      if (!_4d(plane)) { throw new TypeError('Array with 4 numbers expected as third argument'); }\n\n      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);\n    },\n\n    'Array, Array, Array, Array': function (w, x, y, z) {\n      if (w.length === 2) {\n        if (!_2d(w)) { throw new TypeError('Array with 2 numbers expected for first argument'); }\n        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for second argument'); }\n        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for third argument'); }\n        if (!_2d(z)) { throw new TypeError('Array with 2 numbers expected for fourth argument'); }\n\n        return _intersect2d(w, x, y, z);\n      }\n      else if (w.length === 3) {\n        if (!_3d(w)) { throw new TypeError('Array with 3 numbers expected for first argument'); }\n        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for second argument'); }\n        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for third argument'); }\n        if (!_3d(z)) { throw new TypeError('Array with 3 numbers expected for fourth argument'); }\n\n        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);\n      }\n      else {\n        throw new TypeError('Arrays with two or thee dimensional points expected');\n      }\n    },\n\n    'Matrix, Matrix, Matrix': function (x, y, plane) {\n      return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));\n    },\n\n    'Matrix, Matrix, Matrix, Matrix': function (w, x, y, z) {\n      // TODO: output matrix type should match input matrix type\n      return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));\n    }\n  });\n\n  function _2d(x) {\n    return x.length === 2 && typeof x[0] === 'number' && typeof x[1] === 'number';\n  }\n\n  function _3d(x) {\n    return x.length === 3 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number';\n  }\n\n  function _4d(x) {\n    return x.length === 4 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number' && typeof x[3] === 'number';\n  }\n\n  function _intersect2d(p1a, p1b, p2a, p2b){\n    var o1 = p1a;\n    var o2 = p2a;\n    var d1 = subtract(o1, p1b);\n    var d2 = subtract(o2, p2b);\n    var det = d1[0]*d2[1] - d2[0]*d1[1];\n    if (abs(det) < config.epsilon) {\n      return null;\n    }\n    var t = (d2[0]*o1[1] - d2[1]*o1[0] - d2[0]*o2[1] + d2[1]*o2[0]) / det;\n    return add(multiply(d1, t), o1); \n  }\n\n  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4){\n    var d1343 = (x1 - x3)*(x4 - x3) + (y1 - y3)*(y4 - y3) + (z1 - z3)*(z4 - z3);\n    var d4321 = (x4 - x3)*(x2 - x1) + (y4 - y3)*(y2 - y1) + (z4 - z3)*(z2 - z1);\n    var d1321 = (x1 - x3)*(x2 - x1) + (y1 - y3)*(y2 - y1) + (z1 - z3)*(z2 - z1);\n    var d4343 = (x4 - x3)*(x4 - x3) + (y4 - y3)*(y4 - y3) + (z4 - z3)*(z4 - z3);\n    var d2121 = (x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1) + (z2 - z1)*(z2 - z1);\n    var ta = ( d1343*d4321 - d1321*d4343 ) / ( d2121*d4343 - d4321*d4321 );\n    var tb = ( d1343 + ta * d4321 ) / (d4343);\n\n    var pax = x1 + ta * (x2 - x1);\n    var pay = y1 + ta * (y2 - y1);\n    var paz = z1 + ta * (z2 - z1);\n    var pbx = x3 + tb * (x4 - x3);\n    var pby = y3 + tb * (y4 - y3);\n    var pbz = z3 + tb * (z4 - z3);\n    if (pax === pbx && pay === pby && paz === pbz){\n      return [pax, pay, paz];\n    }\n    else{\n      return null;\n    }\n  }\n\n  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c){\n    var t = (c - x1*x - y1*y - z1*z)/(x2*x + y2*y + z2*z - x1*x - y1*y - z1*z);\n    var px = x1 + t * (x2 - x1);\n    var py = y1 + t * (y2 - y1);\n    var pz = z1 + t * (z2 - z1);\n    return [px, py, pz];\n    // TODO: Add cases when line is parallel to the plane:\n    //       (a) no intersection,\n    //       (b) line contained in plane\n  }\n\n  return intersect;\n}\n\nexports.name = 'intersect';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../arithmetic/abs\":282,\"../arithmetic/add\":283,\"../arithmetic/multiply\":303,\"../arithmetic/subtract\":312}],337:[function(require,module,exports){\nmodule.exports = [\n  require('./algebra'),\n  require('./arithmetic'),\n  require('./bitwise'),\n  require('./combinatorics'),\n  require('./complex'),\n  require('./geometry'),\n  require('./logical'),\n  require('./matrix'),\n  require('./probability'),\n  require('./relational'),\n  require('./set'),\n  require('./special'),\n  require('./statistics'),\n  require('./string'),\n  require('./trigonometry'),\n  require('./unit'),\n  require('./utils')\n];\n\n},{\"./algebra\":256,\"./arithmetic\":298,\"./bitwise\":320,\"./combinatorics\":327,\"./complex\":332,\"./geometry\":335,\"./logical\":339,\"./matrix\":352,\"./probability\":372,\"./relational\":385,\"./set\":391,\"./special\":403,\"./statistics\":404,\"./string\":417,\"./trigonometry\":438,\"./unit\":445,\"./utils\":448}],338:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var zeros = load(require('../matrix/zeros'));\n  var not = load(require('./not'));\n  var isZero = load(require('../utils/isZero'));\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4);   // returns true\n   *\n   *    a = [2, 0, 0];\n   *    b = [3, 7, 0];\n   *    c = 0;\n   *\n   *    math.and(a, b);   // returns [true, false, false]\n   *    math.and(a, c);   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n  var and = typed('and', {\n\n    'number, number': function (x, y) {\n      return !!(x && y);\n    },\n\n    'Complex, Complex': function (x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n\n    'Unit, Unit': function (x, y) {\n      return and(x.value, y.value);\n    },\n    \n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse & sparse\n              c = algorithm06(x, y, and, false);\n              break;\n            default:\n              // sparse & dense\n              c = algorithm02(y, x, and, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense & sparse\n              c = algorithm02(x, y, and, false);\n              break;\n            default:\n              // dense & dense\n              c = algorithm13(x, y, and);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return and(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return and(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return and(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, and, false);\n          break;\n        default:\n          c = algorithm14(x, y, and, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm11(y, x, and, true);\n          break;\n        default:\n          c = algorithm14(y, x, and, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return and(matrix(x), y).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return and(x, matrix(y)).valueOf();\n    }\n  });\n\n  and.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['and'] + '${args[1]}\\\\right)'\n  };\n\n  return and;\n}\n\nexports.name = 'and';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm02\":486,\"../../type/matrix/utils/algorithm06\":490,\"../../type/matrix/utils/algorithm11\":495,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/latex\":531,\"../matrix/zeros\":367,\"../utils/isZero\":455,\"./not\":340}],339:[function(require,module,exports){\nmodule.exports = [\n  require('./and'),\n  require('./not'),\n  require('./or'),\n  require('./xor')\n];\n\n},{\"./and\":338,\"./not\":340,\"./or\":341,\"./xor\":342}],340:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  /**\n   * Logical `not`. Flips boolean value of a given parameter.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.not(x)\n   *\n   * Examples:\n   *\n   *    math.not(2);      // returns false\n   *    math.not(0);      // returns true\n   *    math.not(true);   // returns false\n   *\n   *    a = [2, -7, 0];\n   *    math.not(a);      // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    and, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when input is a zero or empty value.\n   */\n  var not = typed('not', {\n    'number': function (x) {\n      return !x;\n    },\n\n    'Complex': function (x) {\n      return x.re === 0 && x.im === 0;\n    },\n\n    'BigNumber': function (x) {\n      return x.isZero() || x.isNaN();\n    },\n\n    'Unit': function (x) {\n      return not(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, not);\n    }\n  });\n\n  not.toTex = {\n    1: latex.operators['not'] + '\\\\left(${args[0]}\\\\right)'\n  };\n\n  return not;\n}\n\nexports.name = 'not';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523,\"../../utils/latex\":531}],341:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.or(x, y)\n   *\n   * Examples:\n   *\n   *    math.or(2, 4);   // returns true\n   *\n   *    a = [2, 5, 0];\n   *    b = [0, 22, 0];\n   *    c = 0;\n   *\n   *    math.or(a, b);   // returns [true, true, false]\n   *    math.or(b, c);   // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    and, not, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\n   */\n  var or = typed('or', {\n\n    'number, number': function (x, y) {\n      return !!(x || y);\n    },\n\n    'Complex, Complex': function (x, y) {\n      return (x.re !== 0 || x.im !== 0) || (y.re !== 0 || y.im !== 0);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return (!x.isZero() && !x.isNaN()) || (!y.isZero() && !y.isNaN());\n    },\n\n    'Unit, Unit': function (x, y) {\n      return or(x.value, y.value);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm05(x, y, or);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, or, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, or, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, or);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return or(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return or(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return or(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, or, false);\n          break;\n        default:\n          c = algorithm14(x, y, or, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, or, true);\n          break;\n        default:\n          c = algorithm14(y, x, or, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, or, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, or, true).valueOf();\n    }\n  });\n\n  or.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['or'] + '${args[1]}\\\\right)'\n  };\n\n  return or;\n}\n\nexports.name = 'or';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm03\":487,\"../../type/matrix/utils/algorithm05\":489,\"../../type/matrix/utils/algorithm12\":496,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/latex\":531}],342:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.xor(x, y)\n   *\n   * Examples:\n   *\n   *    math.xor(2, 4);   // returns false\n   *\n   *    a = [2, 0, 0];\n   *    b = [2, 7, 0];\n   *    c = 0;\n   *\n   *    math.xor(a, b);   // returns [false, true, false]\n   *    math.xor(a, c);   // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    and, not, or\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one and only one input is defined with a nonzero/nonempty value.\n   */\n  var xor = typed('xor', {\n \n    'number, number': function (x, y) {\n      return !!x !== !!y;\n    },\n\n    'Complex, Complex': function (x, y) {\n      return ((x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0));\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return ((!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN()));\n    },\n\n    'Unit, Unit': function (x, y) {\n      return xor(x.value, y.value);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, xor);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, xor, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, xor, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, xor);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return xor(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return xor(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return xor(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, xor, false);\n          break;\n        default:\n          c = algorithm14(x, y, xor, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, xor, true);\n          break;\n        default:\n          c = algorithm14(y, x, xor, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, xor, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, xor, true).valueOf();\n    }\n  });\n\n  xor.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['xor'] + '${args[1]}\\\\right)'\n  };\n\n  return xor;\n}\n\nexports.name = 'xor';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm03\":487,\"../../type/matrix/utils/algorithm07\":491,\"../../type/matrix/utils/algorithm12\":496,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/latex\":531}],343:[function(require,module,exports){\n'use strict';\n\nvar clone = require('../../utils/object').clone;\nvar isInteger = require('../../utils/number').isInteger;\nvar array = require('../../utils/array');\nvar IndexError = require('../../error/IndexError');\nvar DimensionError = require('../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Concatenate two or more matrices.\n   *\n   * Syntax:\n   *\n   *     math.concat(A, B, C, ...)\n   *     math.concat(A, B, C, ..., dim)\n   *\n   * Where:\n   *\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n   *   By default the last dimension of the matrices.\n   *\n   * Examples:\n   *\n   *    var A = [[1, 2], [5, 6]];\n   *    var B = [[3, 4], [7, 8]];\n   *\n   *    math.concat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n   *    math.concat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n   *    math.concat('hello', ' ', 'world'); // returns 'hello world'\n   *\n   * See also:\n   *\n   *    size, squeeze, subset, transpose\n   *\n   * @param {... Array | Matrix} args     Two or more matrices\n   * @return {Array | Matrix} Concatenated matrix\n   */\n  var concat = typed('concat', {\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\n    '...Array | Matrix | number | BigNumber': function (args) {\n      var i;\n      var len = args.length;\n      var dim = -1;  // zero-based dimension\n      var prevDim;\n      var asMatrix = false;\n      var matrices = [];  // contains multi dimensional arrays\n\n      for (i = 0; i < len; i++) {\n        var arg = args[i];\n\n        // test whether we need to return a Matrix (if not we return an Array)\n        if (arg && arg.isMatrix === true) {\n          asMatrix = true;\n        }\n\n        if (typeof arg === 'number' || (arg && arg.isBigNumber === true)) {\n          if (i !== len - 1) {\n            throw new Error('Dimension must be specified as last argument');\n          }\n\n          // last argument contains the dimension on which to concatenate\n          prevDim = dim;\n          dim = arg.valueOf(); // change BigNumber to number\n\n          if (!isInteger(dim)) {\n            throw new TypeError('Integer number expected for dimension');\n          }\n\n          if (dim < 0 || (i > 0 && dim > prevDim)) {\n            // TODO: would be more clear when throwing a DimensionError here\n            throw new IndexError(dim, prevDim + 1);\n          }\n        }\n        else {\n          // this is a matrix or array\n          var m = clone(arg).valueOf();\n          var size = array.size(m);\n          matrices[i] = m;\n          prevDim = dim;\n          dim = size.length - 1;\n\n          // verify whether each of the matrices has the same number of dimensions\n          if (i > 0 && dim != prevDim) {\n            throw new DimensionError(prevDim + 1, dim + 1);\n          }\n        }\n      }\n\n      if (matrices.length == 0) {\n        throw new SyntaxError('At least one matrix expected');\n      }\n\n      var res = matrices.shift();\n      while (matrices.length) {\n        res = _concat(res, matrices.shift(), dim, 0);\n      }\n\n      return asMatrix ? matrix(res) : res;\n    },\n\n    '...string': function (args) {\n      return args.join('');\n    }\n  });\n\n  concat.toTex = undefined; // use default template\n\n  return concat;\n}\n\n/**\n * Recursively concatenate two matrices.\n * The contents of the matrices is not cloned.\n * @param {Array} a             Multi dimensional array\n * @param {Array} b             Multi dimensional array\n * @param {number} concatDim    The dimension on which to concatenate (zero-based)\n * @param {number} dim          The current dim (zero-based)\n * @return {Array} c            The concatenated matrix\n * @private\n */\nfunction _concat(a, b, concatDim, dim) {\n  if (dim < concatDim) {\n    // recurse into next dimension\n    if (a.length != b.length) {\n      throw new DimensionError(a.length, b.length);\n    }\n\n    var c = [];\n    for (var i = 0; i < a.length; i++) {\n      c[i] = _concat(a[i], b[i], concatDim, dim + 1);\n    }\n    return c;\n  }\n  else {\n    // concatenate this dimension\n    return a.concat(b);\n  }\n}\n\nexports.name = 'concat';\nexports.factory = factory;\n\n},{\"../../error/DimensionError\":11,\"../../error/IndexError\":12,\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509,\"../../utils/number\":532,\"../../utils/object\":533}],344:[function(require,module,exports){\n'use strict';\n\nvar array = require('../../utils/array');\n\nfunction factory (type, config, load, typed) {\n  var matrix   = load(require('../../type/matrix/function/matrix'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var multiply = load(require('../arithmetic/multiply'));\n\n  /**\n   * Calculate the cross product for two vectors in three dimensional space.\n   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined\n   * as:\n   *\n   *    cross(A, B) = [\n   *      a2 * b3 - a3 * b2,\n   *      a3 * b1 - a1 * b3,\n   *      a1 * b2 - a2 * b1\n   *    ]\n   *\n   * If one of the input vectors has a dimension greater than 1, the output\n   * vector will be a 1x3 (2-dimensional) matrix.\n   *\n   * Syntax:\n   *\n   *    math.cross(x, y)\n   *\n   * Examples:\n   *\n   *    math.cross([1, 1, 0],   [0, 1, 1]);       // Returns [1, -1, 1]\n   *    math.cross([3, -3, 1],  [4, 9, 2]);       // Returns [-15, -2, 39]\n   *    math.cross([2, 3, 4],   [5, 6, 7]);       // Returns [-3, 6, -3]\n   *    math.cross([[1, 2, 3]], [[4], [5], [6]]); // Returns [[-3, 6, -3]]\n   *\n   * See also:\n   *\n   *    dot, multiply\n   *\n   * @param  {Array | Matrix} x   First vector\n   * @param  {Array | Matrix} y   Second vector\n   * @return {Array | Matrix}     Returns the cross product of `x` and `y`\n   */\n  var cross = typed('cross', {\n    'Matrix, Matrix': function (x, y) {\n      return matrix(_cross(x.toArray(), y.toArray()));\n    },\n\n    'Matrix, Array': function (x, y) {\n      return matrix(_cross(x.toArray(), y));\n    },\n\n    'Array, Matrix': function (x, y) {\n      return matrix(_cross(x, y.toArray()));\n    },\n\n    'Array, Array': _cross\n  });\n\n  cross.toTex = {\n    2: '\\\\left(${args[0]}\\\\right)\\\\times\\\\left(${args[1]}\\\\right)'\n  };\n\n  return cross;\n\n  /**\n   * Calculate the cross product for two arrays\n   * @param {Array} x  First vector\n   * @param {Array} y  Second vector\n   * @returns {Array} Returns the cross product of x and y\n   * @private\n   */\n  function _cross(x, y) {\n    var highestDimension = Math.max(array.size(x).length, array.size(y).length);\n\n    x = array.squeeze(x);\n    y = array.squeeze(y);\n\n    var xSize = array.size(x);\n    var ySize = array.size(y);\n\n    if (xSize.length != 1 || ySize.length != 1 || xSize[0] != 3 || ySize[0] != 3) {\n      throw new RangeError('Vectors with length 3 expected ' +\n      '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');\n    }\n\n    var product = [\n      subtract(multiply(x[1], y[2]), multiply(x[2], y[1])),\n      subtract(multiply(x[2], y[0]), multiply(x[0], y[2])),\n      subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))\n    ];\n\n    if (highestDimension > 1) {\n      return [product];\n    } else {\n      return product;\n    }\n  }\n}\n\nexports.name = 'cross';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509,\"../arithmetic/multiply\":303,\"../arithmetic/subtract\":312}],345:[function(require,module,exports){\n'use strict';\n\nvar util = require('../../utils/index');\nvar object = util.object;\nvar string = util.string;\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var add = load(require('../arithmetic/add'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var unaryMinus = load(require('../arithmetic/unaryMinus'));\n\n  /**\n   * Calculate the determinant of a matrix.\n   *\n   * Syntax:\n   *\n   *    math.det(x)\n   *\n   * Examples:\n   *\n   *    math.det([[1, 2], [3, 4]]); // returns -2\n   *\n   *    var A = [\n   *      [-2, 2, 3],\n   *      [-1, 1, 3],\n   *      [2, 0, -1]\n   *    ]\n   *    math.det(A); // returns 6\n   *\n   * See also:\n   *\n   *    inv\n   *\n   * @param {Array | Matrix} x  A matrix\n   * @return {number} The determinant of `x`\n   */\n  var det = typed('det', {\n    'any': function (x) {\n      return object.clone(x);\n    },\n\n    'Array | Matrix': function det (x) {\n      var size;\n      if (x && x.isMatrix === true) {\n        size = x.size();\n      }\n      else if (Array.isArray(x)) {\n        x = matrix(x);\n        size = x.size();\n      }\n      else {\n        // a scalar\n        size = [];\n      }\n\n      switch (size.length) {\n        case 0:\n          // scalar\n          return object.clone(x);\n\n        case 1:\n          // vector\n          if (size[0] == 1) {\n            return object.clone(x.valueOf()[0]);\n          }\n          else {\n            throw new RangeError('Matrix must be square ' +\n            '(size: ' + string.format(size) + ')');\n          }\n\n        case 2:\n          // two dimensional array\n          var rows = size[0];\n          var cols = size[1];\n          if (rows == cols) {\n            return _det(x.clone().valueOf(), rows, cols);\n          }\n          else {\n            throw new RangeError('Matrix must be square ' +\n            '(size: ' + string.format(size) + ')');\n          }\n\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' +\n          '(size: ' + string.format(size) + ')');\n      }\n    }\n  });\n\n  det.toTex = {1: '\\\\det\\\\left(${args[0]}\\\\right)'};\n\n  return det;\n\n  /**\n   * Calculate the determinant of a matrix\n   * @param {Array[]} matrix  A square, two dimensional matrix\n   * @param {number} rows     Number of rows of the matrix (zero-based)\n   * @param {number} cols     Number of columns of the matrix (zero-based)\n   * @returns {number} det\n   * @private\n   */\n  function _det (matrix, rows, cols) {\n    if (rows == 1) {\n      // this is a 1 x 1 matrix\n      return object.clone(matrix[0][0]);\n    }\n    else if (rows == 2) {\n      // this is a 2 x 2 matrix\n      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12\n      return subtract(\n          multiply(matrix[0][0], matrix[1][1]),\n          multiply(matrix[1][0], matrix[0][1])\n      );\n    }\n    else {\n      // this is an n x n matrix\n      var compute_mu = function (matrix) {\n        var i, j;\n\n        // Compute the matrix with zero lower triangle, same upper triangle,\n        // and diagonals given by the negated sum of the below diagonal\n        // elements.\n        var mu = new Array(matrix.length);\n        var sum = 0;\n        for (i = 1; i < matrix.length; i++) {\n          sum = add(sum, matrix[i][i]);\n        }\n\n        for (i = 0; i < matrix.length; i++) {\n          mu[i] = new Array(matrix.length);\n          mu[i][i] = unaryMinus(sum);\n\n          for (j = 0; j < i; j++) {\n            mu[i][j] = 0; // TODO: make bignumber 0 in case of bignumber computation\n          }\n\n          for (j = i + 1; j < matrix.length; j++) {\n            mu[i][j] = matrix[i][j];\n          }\n\n          if (i+1 < matrix.length) {\n            sum = subtract(sum, matrix[i + 1][i + 1]);\n          }\n        }\n\n        return mu;\n      };\n\n      var fa = matrix;\n      for (var i = 0; i < rows - 1; i++) {\n        fa = multiply(compute_mu(fa), matrix);\n      }\n\n      if (rows % 2 == 0) {\n        return unaryMinus(fa[0][0]);\n      } else {\n        return fa[0][0];\n      }\n    }\n  }\n}\n\nexports.name = 'det';\nexports.factory = factory;\n\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/index\":530,\"../arithmetic/add\":283,\"../arithmetic/multiply\":303,\"../arithmetic/subtract\":312,\"../arithmetic/unaryMinus\":313}],346:[function(require,module,exports){\n'use strict';\n\nvar array     = require('../../utils/array');\nvar clone     = require('../../utils/object').clone;\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  \n  /**\n   * Create a diagonal matrix or retrieve the diagonal of a matrix\n   *\n   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.\n   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.\n   * When k is positive, the values are placed on the super diagonal.\n   * When k is negative, the values are placed on the sub diagonal.\n   *\n   * Syntax:\n   *\n   *     math.diag(X)\n   *     math.diag(X, format)\n   *     math.diag(X, k)\n   *     math.diag(X, k, format)\n   *\n   * Examples:\n   *\n   *     // create a diagonal matrix\n   *     math.diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n   *     math.diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]\n   *     math.diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]\n   *\n   *    // retrieve the diagonal from a matrix\n   *    var a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n   *    math.diag(a);   // returns [1, 5, 9]\n   *\n   * See also:\n   *\n   *     ones, zeros, eye\n   *\n   * @param {Matrix | Array} x          A two dimensional matrix or a vector\n   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled\n   *                                    in or retrieved.\n   * @param {string} [format='dense']   The matrix storage format.\n   *\n   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.\n   */\n  var diag = typed('diag', {\n    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments\n\n    'Array': function (x) {\n      return _diag(x, 0, array.size(x), null);\n    },\n\n    'Array, number': function (x, k) {\n      return _diag(x, k, array.size(x), null);\n    },\n    \n    'Array, BigNumber': function (x, k) {\n      return _diag(x, k.toNumber(), array.size(x), null);\n    },\n\n    'Array, string': function (x, format) {\n      return _diag(x, 0, array.size(x), format);\n    },\n\n    'Array, number, string': function (x, k, format) {\n      return _diag(x, k, array.size(x), format);\n    },\n\n    'Array, BigNumber, string': function (x, k, format) {\n      return _diag(x, k.toNumber(), array.size(x), format);\n    },\n\n    'Matrix': function (x) {\n      return _diag(x, 0, x.size(), x.storage());\n    },\n\n    'Matrix, number': function (x, k) {\n      return _diag(x, k, x.size(), x.storage());\n    },\n\n    'Matrix, BigNumber': function (x, k) {\n      return _diag(x, k.toNumber(), x.size(), x.storage());\n    },\n\n    'Matrix, string': function (x, format) {\n      return _diag(x, 0, x.size(), format);\n    },\n\n    'Matrix, number, string': function (x, k, format) {\n      return _diag(x, k, x.size(), format);\n    },\n\n    'Matrix, BigNumber, string': function (x, k, format) {\n      return _diag(x, k.toNumber(), x.size(), format);\n    }\n  });\n\n  diag.toTex = undefined; // use default template\n\n  return diag;\n\n  /**\n   * Creeate diagonal matrix from a vector or vice versa\n   * @param {Array | Matrix} x\n   * @param {number} k\n   * @param {string} format Storage format for matrix. If null,\n   *                          an Array is returned\n   * @returns {Array | Matrix}\n   * @private\n   */\n  function _diag (x, k, size, format) {\n    if (!isInteger(k)) {\n      throw new TypeError ('Second parameter in function diag must be an integer');\n    }\n    \n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // check dimensions\n    switch (size.length) {\n      case 1:\n        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);\n      case 2:\n        return _getDiagonal(x, k, format, size, kSub, kSuper);\n    }\n    throw new RangeError('Matrix for function diag must be 2 dimensional');\n  }\n  \n  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {\n    // matrix size\n    var ms = [l + kSub, l + kSuper];\n    // get matrix constructor\n    var F = type.Matrix.storage(format || 'dense');\n    // create diagonal matrix\n    var m = F.diagonal(ms, x, k);\n    // check we need to return a matrix\n    return format !== null ? m : m.valueOf();\n  }\n  \n  function _getDiagonal(x, k, format, s, kSub, kSuper) {\n    // check x is a Matrix\n    if (x && x.isMatrix === true) {\n      // get diagonal matrix\n      var dm = x.diagonal(k);\n      // check we need to return a matrix\n      if (format !== null) {\n        // check we need to change matrix format\n        if (format !== dm.storage())\n          return matrix(dm, format);\n        return dm;\n      }\n      return dm.valueOf();\n    }\n    // vector size\n    var n = Math.min(s[0] - kSub, s[1] - kSuper);\n    // diagonal values\n    var vector = [];\n    // loop diagonal\n    for (var i = 0; i < n; i++) {\n      vector[i] = x[i + kSub][i + kSuper];\n    }\n    // check we need to return a matrix\n    return format !== null ? matrix(vector) : vector;\n  }\n}\n\nexports.name = 'diag';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509,\"../../utils/number\":532,\"../../utils/object\":533}],347:[function(require,module,exports){\n'use strict';\n\nvar size = require('../../utils/array').size;\n\nfunction factory (type, config, load, typed) {\n  var add      = load(require('../arithmetic/add'));\n  var multiply = load(require('../arithmetic/multiply'));\n\n  /**\n   * Calculate the dot product of two vectors. The dot product of\n   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:\n   *\n   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn\n   *\n   * Syntax:\n   *\n   *    math.dot(x, y)\n   *\n   * Examples:\n   *\n   *    math.dot([2, 4, 1], [2, 2, 3]);       // returns number 15\n   *    math.multiply([2, 4, 1], [2, 2, 3]);  // returns number 15\n   *\n   * See also:\n   *\n   *    multiply, cross\n   *\n   * @param  {Array | Matrix} x     First vector\n   * @param  {Array | Matrix} y     Second vector\n   * @return {number}               Returns the dot product of `x` and `y`\n   */\n  var dot = typed('dot', {\n    'Matrix, Matrix': function (x, y) {\n      return _dot(x.toArray(), y.toArray());\n    },\n\n    'Matrix, Array': function (x, y) {\n      return _dot(x.toArray(), y);\n    },\n\n    'Array, Matrix': function (x, y) {\n      return _dot(x, y.toArray());\n    },\n\n    'Array, Array': _dot\n  });\n  \n  dot.toTex = {2: '\\\\left(${args[0]}\\\\cdot${args[1]}\\\\right)'};\n\n  return dot;\n\n  /**\n   * Calculate the dot product for two arrays\n   * @param {Array} x  First vector\n   * @param {Array} y  Second vector\n   * @returns {number} Returns the dot product of x and y\n   * @private\n   */\n  // TODO: double code with math.multiply\n  function _dot(x, y) {\n    var xSize= size(x);\n    var ySize = size(y);\n    var len = xSize[0];\n\n    if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message\n    if (xSize[0] != ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');\n    if (len == 0) throw new RangeError('Cannot calculate the dot product of empty vectors');\n\n    var prod = 0;\n    for (var i = 0; i < len; i++) {\n      prod = add(prod, multiply(x[i], y[i]));\n    }\n\n    return prod;\n  }\n}\n\nexports.name = 'dot';\nexports.factory = factory;\n\n},{\"../../utils/array\":509,\"../arithmetic/add\":283,\"../arithmetic/multiply\":303}],348:[function(require,module,exports){\n'use strict';\n\nvar array = require('../../utils/array');\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  \n  var matrix = load(require('../../type/matrix/function/matrix'));\n  \n  /**\n   * Create a 2-dimensional identity matrix with size m x n or n x n.\n   * The matrix has ones on the diagonal and zeros elsewhere.\n   *\n   * Syntax:\n   *\n   *    math.eye(n)\n   *    math.eye(n, format)\n   *    math.eye(m, n)\n   *    math.eye(m, n, format)\n   *    math.eye([m, n])\n   *    math.eye([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.eye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n   *    math.eye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]\n   *\n   *    var A = [[1, 2, 3], [4, 5, 6]];\n   *    math.eye(math.size(A));         // returns [[1, 0, 0], [0, 1, 0]]\n   *\n   * See also:\n   *\n   *    diag, ones, zeros, size, range\n   *\n   * @param {...number | Matrix | Array} size   The size for the matrix\n   * @param {string} [format]                   The Matrix storage format\n   *\n   * @return {Matrix | Array | number} A matrix with ones on the diagonal.\n   */\n  var eye = typed('eye', {\n    '': function () {\n      return (config.matrix === 'Matrix') ? matrix([]) : [];\n    },\n\n    'string': function (format) {\n      return matrix(format);\n    },\n\n    'number | BigNumber': function (rows) {\n      return _eye(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);\n    },\n    \n    'number | BigNumber, string': function (rows, format) {\n      return _eye(rows, rows, format);\n    },\n\n    'number | BigNumber, number | BigNumber': function (rows, cols) {\n      return _eye(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);\n    },\n    \n    'number | BigNumber, number | BigNumber, string': function (rows, cols, format) {\n      return _eye(rows, cols, format);\n    },\n\n    'Array':  function (size) {\n      return _eyeVector(size);\n    },\n    \n    'Array, string':  function (size, format) {\n      return _eyeVector(size, format);\n    },\n\n    'Matrix': function (size) {\n      return _eyeVector(size.valueOf(), size.storage());\n    },\n    \n    'Matrix, string': function (size, format) {\n      return _eyeVector(size.valueOf(), format);\n    }\n  });\n\n  eye.toTex = undefined; // use default template\n\n  return eye;\n\n  function _eyeVector (size, format) {\n    switch (size.length) {\n      case 0: return format ? matrix(format) : [];\n      case 1: return _eye(size[0], size[0], format);\n      case 2: return _eye(size[0], size[1], format);\n      default: throw new Error('Vector containing two values expected');\n    }\n  }\n\n  /**\n   * Create an identity matrix\n   * @param {number | BigNumber} rows\n   * @param {number | BigNumber} cols\n   * @param {string} [format]\n   * @returns {Matrix}\n   * @private\n   */\n  function _eye (rows, cols, format) {\n    // BigNumber constructor with the right precision\n    var Big = (rows && rows.isBigNumber === true)\n        ? type.BigNumber\n        : (cols && cols.isBigNumber === true)\n            ? type.BigNumber\n            : null;\n\n    if (rows && rows.isBigNumber === true) rows = rows.toNumber();\n    if (cols && cols.isBigNumber === true) cols = cols.toNumber();\n\n    if (!isInteger(rows) || rows < 1) {\n      throw new Error('Parameters in function eye must be positive integers');\n    }\n    if (!isInteger(cols) || cols < 1) {\n      throw new Error('Parameters in function eye must be positive integers');\n    }\n    \n    var one = Big ? new type.BigNumber(1) : 1;\n    var defaultValue = Big ? new Big(0) : 0;\n    var size = [rows, cols];\n    \n    // check we need to return a matrix\n    if (format) {\n      // get matrix storage constructor\n      var F = type.Matrix.storage(format);\n      // create diagonal matrix (use optimized implementation for storage format)\n      return F.diagonal(size, one, 0, defaultValue);\n    }\n    \n    // create and resize array\n    var res = array.resize([], size, defaultValue);\n    // fill in ones on the diagonal\n    var minimum = rows < cols ? rows : cols;\n    // fill diagonal\n    for (var d = 0; d < minimum; d++) {\n      res[d][d] = one;\n    }\n    return res;\n  }\n}\n\nexports.name = 'eye';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509,\"../../utils/number\":532}],349:[function(require,module,exports){\n'use strict';\n\nvar size = require('../../utils/array').size;\nvar maxArgumentCount = require('../../utils/function').maxArgumentCount;\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  \n  /**\n   * Filter the items in an array or one dimensional matrix.\n   *\n   * Syntax:\n   *\n   *    math.filter(x, test)\n   *\n   * Examples:\n   *\n   *    function isPositive (x) {\n   *      return x > 0;\n   *    }\n   *    math.filter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]\n   *\n   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/); // returns [\"23\", \"100\", \"55\"]\n   *\n   * See also:\n   *\n   *    forEach, map, sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to filter\n   * @param {Function | RegExp} test\n   *        A function or regular expression to test items.\n   *        All entries for which `test` returns true are returned.\n   *        When `test` is a function, it is invoked with three parameters:\n   *        the value of the element, the index of the element, and the\n   *        matrix/array being traversed. The function must return a boolean.\n   * @return {Matrix | Array} Returns the filtered matrix.\n   */\n  var filter = typed('filter', {\n    'Array, function': _filterCallback,\n\n    'Array, RegExp': _filterRegExp,\n\n    'Matrix, function': function (x, test) {\n      return matrix(_filterCallback(x.toArray(), test));\n    },\n\n    'Matrix, RegExp': function (x, test) {\n      return matrix(_filterRegExp(x.toArray(), test));\n    }\n  });\n\n  filter.toTex = undefined; // use default template\n\n  return filter;\n}\n\n/**\n * Filter values in a callback given a callback function\n * @param {Array} x\n * @param {Function} callback\n * @return {Array} Returns the filtered array\n * @private\n */\nfunction _filterCallback (x, callback) {\n  if (size(x).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  return x.filter(function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    if (args === 1) {\n      return callback(value);\n    }\n    else if (args === 2) {\n      return callback(value, [index]);\n    }\n    else { // 3 or -1\n      return callback(value, [index], array);\n    }\n  });\n}\n\n/**\n * Filter values in a callback given a regular expression\n * @param {Array} x\n * @param {Function} regexp\n * @return {Array} Returns the filtered array\n * @private\n */\nfunction _filterRegExp (x, regexp) {\n  if (size(x).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n\n  return x.filter(function (entry) {\n    return regexp.test(entry);\n  });\n}\n\nexports.name = 'filter';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509,\"../../utils/function\":529}],350:[function(require,module,exports){\n'use strict';\n\nvar clone = require('../../utils/object').clone;\nvar _flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Flatten a multi dimensional matrix into a single dimensional matrix.\n   *\n   * Syntax:\n   *\n   *    math.flatten(x)\n   *\n   * Examples:\n   *\n   *    math.flatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]\n   *\n   * See also:\n   *\n   *    concat, resize, size, squeeze\n   *\n   * @param {Matrix | Array} x   Matrix to be flattened\n   * @return {Matrix | Array} Returns the flattened matrix\n   */\n  var flatten = typed('flatten', {\n    'Array': function (x) {\n      return _flatten(clone(x));\n    },\n\n    'Matrix': function (x) {\n      var flat = _flatten(clone(x.toArray()));\n      // TODO: return the same matrix type as x\n      return matrix(flat);\n    }\n  });\n\n  flatten.toTex = undefined; // use default template\n\n  return flatten;\n}\n\nexports.name = 'flatten';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509,\"../../utils/object\":533}],351:[function(require,module,exports){\n'use strict';\n\nvar maxArgumentCount = require('../../utils/function').maxArgumentCount;\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Iterate over all elements of a matrix/array, and executes the given callback function.\n   *\n   * Syntax:\n   *\n   *    math.forEach(x, callback)\n   *\n   * Examples:\n   *\n   *    math.forEach([1, 2, 3], function(value) {\n   *      console.log(value);\n   *    });\n   *    // outputs 1, 2, 3\n   *\n   * See also:\n   *\n   *    filter, map, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix/array being traversed.\n   */\n  var forEach = typed('forEach', {\n    'Array, function': _forEach,\n\n    'Matrix, function': function (x, callback) {\n      return x.forEach(callback);\n    }\n  });\n\n  forEach.toTex = undefined; // use default template\n\n  return forEach;\n}\n\n/**\n * forEach for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @private\n */\nfunction _forEach (array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  var recurse = function (value, index) {\n    if (Array.isArray(value)) {\n      value.forEach(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        recurse(child, index.concat(i));\n      });\n    }\n    else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        callback(value);\n      }\n      else if (args === 2) {\n        callback(value, index);\n      }\n      else { // 3 or -1\n        callback(value, index, array);\n      }\n    }\n  };\n  recurse(array, []);\n}\n\nexports.name = 'forEach';\nexports.factory = factory;\n\n},{\"../../utils/function\":529}],352:[function(require,module,exports){\nmodule.exports = [\n  require('./concat'),\n  require('./cross'),\n  require('./det'),\n  require('./diag'),\n  require('./dot'),\n  require('./eye'),\n  require('./filter'),\n  require('./flatten'),\n  require('./forEach'),\n  require('./inv'),\n  require('./kron'),\n  require('./map'),\n  require('./ones'),\n  require('./partitionSelect'),\n  require('./range'),\n  require('./reshape'),\n  require('./resize'),\n  require('./size'),\n  require('./sort'),\n  require('./squeeze'),\n  require('./subset'),\n  require('./trace'),\n  require('./transpose'),\n  require('./zeros')\n];\n\n},{\"./concat\":343,\"./cross\":344,\"./det\":345,\"./diag\":346,\"./dot\":347,\"./eye\":348,\"./filter\":349,\"./flatten\":350,\"./forEach\":351,\"./inv\":353,\"./kron\":354,\"./map\":355,\"./ones\":356,\"./partitionSelect\":357,\"./range\":358,\"./reshape\":359,\"./resize\":360,\"./size\":361,\"./sort\":362,\"./squeeze\":363,\"./subset\":364,\"./trace\":365,\"./transpose\":366,\"./zeros\":367}],353:[function(require,module,exports){\n'use strict';\n\nvar util = require('../../utils/index');\n\nfunction factory (type, config, load, typed) {\n  var matrix       = load(require('../../type/matrix/function/matrix'));\n  var divideScalar = load(require('../arithmetic/divideScalar'));\n  var addScalar    = load(require('../arithmetic/addScalar'));\n  var multiply     = load(require('../arithmetic/multiply'));\n  var unaryMinus   = load(require('../arithmetic/unaryMinus'));\n  var det          = load(require('../matrix/det'));\n  var eye          = load(require('./eye'));\n\n  /**\n   * Calculate the inverse of a square matrix.\n   *\n   * Syntax:\n   *\n   *     math.inv(x)\n   *\n   * Examples:\n   *\n   *     math.inv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]\n   *     math.inv(4);                 // returns 0.25\n   *     1 / 4;                       // returns 0.25\n   *\n   * See also:\n   *\n   *     det, transpose\n   *\n   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n   */\n  var inv = typed('inv', {\n    'Array | Matrix': function (x) {\n      var size = (x.isMatrix === true) ? x.size() : util.array.size(x);\n      switch (size.length) {\n        case 1:\n          // vector\n          if (size[0] == 1) {\n            if (x.isMatrix === true) {\n              return matrix([\n                divideScalar(1, x.valueOf()[0])\n              ]);\n            }\n            else {\n              return [\n                divideScalar(1, x[0])\n              ];\n            }\n          }\n          else {\n            throw new RangeError('Matrix must be square ' +\n            '(size: ' + util.string.format(size) + ')');\n          }\n\n        case 2:\n          // two dimensional array\n          var rows = size[0];\n          var cols = size[1];\n          if (rows == cols) {\n            if (x.isMatrix === true) {\n              return matrix(\n                  _inv(x.valueOf(), rows, cols),\n                  x.storage()\n              );\n            }\n            else {\n              // return an Array\n              return _inv(x, rows, cols);\n            }\n          }\n          else {\n            throw new RangeError('Matrix must be square ' +\n            '(size: ' + util.string.format(size) + ')');\n          }\n\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' +\n          '(size: ' + util.string.format(size) + ')');\n      }\n    },\n\n    'any': function (x) {\n      // scalar\n      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers\n    }\n  });\n\n  /**\n   * Calculate the inverse of a square matrix\n   * @param {Array[]} mat     A square matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns, must equal rows\n   * @return {Array[]} inv    Inverse matrix\n   * @private\n   */\n  function _inv (mat, rows, cols){\n    var r, s, f, value, temp;\n\n    if (rows == 1) {\n      // this is a 1 x 1 matrix\n      value = mat[0][0];\n      if (value == 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n      return [[\n        divideScalar(1, value)\n      ]];\n    }\n    else if (rows == 2) {\n      // this is a 2 x 2 matrix\n      var d = det(mat);\n      if (d == 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n      return [\n        [\n          divideScalar(mat[1][1], d),\n          divideScalar(unaryMinus(mat[0][1]), d)\n        ],\n        [\n          divideScalar(unaryMinus(mat[1][0]), d),\n          divideScalar(mat[0][0], d)\n        ]\n      ];\n    }\n    else {\n      // this is a matrix of 3 x 3 or larger\n      // calculate inverse using gauss-jordan elimination\n      //      http://en.wikipedia.org/wiki/Gaussian_elimination\n      //      http://mathworld.wolfram.com/MatrixInverse.html\n      //      http://math.uww.edu/~mcfarlat/inverse.htm\n\n      // make a copy of the matrix (only the arrays, not of the elements)\n      var A = mat.concat();\n      for (r = 0; r < rows; r++) {\n        A[r] = A[r].concat();\n      }\n\n      // create an identity matrix which in the end will contain the\n      // matrix inverse\n      var B = eye(rows).valueOf();\n\n      // loop over all columns, and perform row reductions\n      for (var c = 0; c < cols; c++) {\n        // element Acc should be non zero. if not, swap content\n        // with one of the lower rows\n        r = c;\n        while (r < rows && A[r][c] == 0) {\n          r++;\n        }\n        if (r == rows || A[r][c] == 0) {\n          // TODO: in case of zero det, just return a matrix wih Infinity values? (like octave)\n          throw Error('Cannot calculate inverse, determinant is zero');\n        }\n        if (r != c) {\n          temp = A[c]; A[c] = A[r]; A[r] = temp;\n          temp = B[c]; B[c] = B[r]; B[r] = temp;\n        }\n\n        // eliminate non-zero values on the other rows at column c\n        var Ac = A[c],\n            Bc = B[c];\n        for (r = 0; r < rows; r++) {\n          var Ar = A[r],\n              Br = B[r];\n          if(r != c) {\n            // eliminate value at column c and row r\n            if (Ar[c] != 0) {\n              f = divideScalar(unaryMinus(Ar[c]), Ac[c]);\n\n              // add (f * row c) to row r to eliminate the value\n              // at column c\n              for (s = c; s < cols; s++) {\n                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));\n              }\n              for (s = 0; s < cols; s++) {\n                Br[s] = addScalar(Br[s],  multiply(f, Bc[s]));\n              }\n            }\n          }\n          else {\n            // normalize value at Acc to 1,\n            // divide each value on row r with the value at Acc\n            f = Ac[c];\n            for (s = c; s < cols; s++) {\n              Ar[s] = divideScalar(Ar[s], f);\n            }\n            for (s = 0; s < cols; s++) {\n              Br[s] = divideScalar(Br[s], f);\n            }\n          }\n        }\n      }\n      return B;\n    }\n  }\n\n  inv.toTex = {1: '\\\\left(${args[0]}\\\\right)^{-1}'};\n\n  return inv;\n}\n\nexports.name = 'inv';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/index\":530,\"../arithmetic/addScalar\":284,\"../arithmetic/divideScalar\":289,\"../arithmetic/multiply\":303,\"../arithmetic/unaryMinus\":313,\"../matrix/det\":345,\"./eye\":348}],354:[function(require,module,exports){\n'use strict';\n\nvar size = require('../../utils/array').size;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var multiplyScalar = load(require('../arithmetic/multiplyScalar'))\n    /**\n     * Calculates the kronecker product of 2 matrices or vectors.\n     *\n     * NOTE: If a one dimensional vector / matrix is given, it will be\n     * wrapped so its two dimensions.\n     * See the examples.\n     *\n     * Syntax:\n     *\n     *    math.kron(x, y)\n     *\n     * Examples:\n     *\n     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]]);\n     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]\n     *\n     *    math.kron([1,1], [2,3,4]);\n     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]\n     *\n     * See also:\n     *\n     *    multiply, dot, cross\n     *\n     * @param  {Array | Matrix} x     First vector\n     * @param  {Array | Matrix} y     Second vector\n     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`\n     */\n    var kron = typed('kron', {\n        'Matrix, Matrix': function(x, y) {\n            return matrix(_kron(x.toArray(), y.toArray()));\n        },\n\n        'Matrix, Array': function(x, y) {\n            return matrix(_kron(x.toArray(), y));\n        },\n\n        'Array, Matrix': function(x, y) {\n            return matrix(_kron(x, y.toArray()));\n        },\n\n        'Array, Array': _kron\n    });\n\n    return kron;\n\n    /**\n     * Calculate the kronecker product of two matrices / vectors\n     * @param {Array} a  First vector\n     * @param {Array} b  Second vector\n     * @returns {Array} Returns the kronecker product of x and y\n     * @private\n     */\n    function _kron(a, b) {\n        // Deal with the dimensions of the matricies.\n        if (size(a).length === 1) {\n          // Wrap it in a 2D Matrix\n          a = [a];\n        }\n        if (size(b).length === 1) {\n          // Wrap it in a 2D Matrix\n          b = [b]\n        }\n        if (size(a).length > 2 || size(b).length > 2) {\n            throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' +\n            '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');\n        }\n        var t = [];\n        var r = [];\n\n        return a.map(function(a) {\n            return b.map(function(b) {\n                return a.map(function(y) {\n                    return b.map(function(x) {\n                        return r.push(multiplyScalar(y, x));\n                    });\n                }, t.push(r = []));\n            });\n        }, t = []) && t;\n    }\n}\n\nexports.name = 'kron';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509,\"../arithmetic/multiplyScalar\":304}],355:[function(require,module,exports){\n'use strict';\n\nvar maxArgumentCount = require('../../utils/function').maxArgumentCount;\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a new matrix or array with the results of the callback function executed on\n   * each entry of the matrix/array.\n   *\n   * Syntax:\n   *\n   *    math.map(x, callback)\n   *\n   * Examples:\n   *\n   *    math.map([1, 2, 3], function(value) {\n   *      return value * value;\n   *    });  // returns [1, 4, 9]\n   *\n   * See also:\n   *\n   *    filter, forEach, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the matrix being traversed.\n   * @return {Matrix | array}     Transformed map of x\n   */\n  var map = typed('map', {\n    'Array, function': _map,\n\n    'Matrix, function': function (x, callback) {\n      return x.map(callback);\n    }\n  });\n\n  map.toTex = undefined; // use default template\n\n  return map;\n}\n\n/**\n * Map for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @return {Array}\n * @private\n */\nfunction _map (array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  var recurse = function (value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i));\n      });\n    }\n    else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        return callback(value);\n      }\n      else if (args === 2) {\n        return callback(value, index);\n      }\n      else { // 3 or -1\n        return callback(value, index, array);\n      }\n    }\n  };\n\n  return recurse(array, []);\n}\n\nexports.name = 'map';\nexports.factory = factory;\n\n},{\"../../utils/function\":529}],356:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar resize = require('../../utils/array').resize;\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Create a matrix filled with ones. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.ones(m)\n   *    math.ones(m, format)\n   *    math.ones(m, n)\n   *    math.ones(m, n, format)\n   *    math.ones([m, n])\n   *    math.ones([m, n], format)\n   *    math.ones([m, n, p, ...])\n   *    math.ones([m, n, p, ...], format)\n   *\n   * Examples:\n   *\n   *    math.ones(3);                   // returns [1, 1, 1]\n   *    math.ones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]\n   *    math.ones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n   *\n   *    var A = [[1, 2, 3], [4, 5, 6]];\n   *    math.ones(math.size(A));       // returns [[1, 1, 1], [1, 1, 1]]\n   *\n   * See also:\n   *\n   *    zeros, eye, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix | number}  A matrix filled with ones\n   */\n  var ones = typed('ones', {\n    '': function () {\n      return (config.matrix === 'Array')\n          ? _ones([])\n          : _ones([], 'default');\n    },\n\n    // math.ones(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function (size) {\n      var last = size[size.length - 1];\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _ones(size, format);\n      }\n      else if (config.matrix === 'Array') {\n        return _ones(size);\n      }\n      else {\n        return _ones(size, 'default');\n      }\n    },\n\n    'Array': _ones,\n\n    'Matrix': function (size) {\n      var format = size.storage();\n      return _ones(size.valueOf(), format);\n    },\n\n    'Array | Matrix, string': function (size, format) {\n      return _ones (size.valueOf(), format);\n    }\n  });\n\n  ones.toTex = undefined; // use default template\n\n  return ones;\n\n  /**\n   * Create an Array or Matrix with ones\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n  function _ones(size, format) {\n    var hasBigNumbers = _normalize(size);\n    var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n      return m;\n    }\n    else {\n      // return an Array\n      var arr = [];\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n      return arr;\n    }\n  }\n\n  // replace BigNumbers with numbers, returns true if size contained BigNumbers\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (value && value.isBigNumber === true) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  }\n\n  // validate arguments\n  function _validate (size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function ones must be positive integers');\n      }\n    });\n  }\n}\n\nexports.name = 'ones';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509,\"../../utils/number\":532}],357:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  var asc = load(require('../relational/compare'));\n  function desc(a, b) {\n    return -asc(a, b);\n  }\n\n  /**\n   * Partition-based selection of an array or 1D matrix.\n   * Will find the kth smallest value, and mutates the input array.\n   * Uses Quickselect.\n   *\n   * Syntax:\n   *\n   *    math.partitionSelect(x, k)\n   *    math.partitionSelect(x, k, compare)\n   *\n   * Examples:\n   *\n   *    math.partitionSelect([5, 10, 1], 2);           // returns 10\n   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'\n   *\n   *    function sortByLength (a, b) {\n   *      return a.length - b.length;\n   *    }\n   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'\n   *\n   * See also:\n   *\n   *    sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n   * @param {Number} k            The kth smallest value to be retrieved; zero-based index\n   * @param {Function | 'asc' | 'desc'} [compare='asc']\n   *        An optional comparator function. The function is called as\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n   *        and 0 when a == b.\n   * @return {*} Returns the kth lowest value.\n   */\n  return typed('partitionSelect', {\n    'Array | Matrix, number': function (x, k) {\n      return _partitionSelect(x, k, asc);\n    },\n\n    'Array | Matrix, number, string': function (x, k, compare) {\n      if (compare === 'asc') {\n        return _partitionSelect(x, k, asc);\n      }\n      else if (compare === 'desc') {\n        return _partitionSelect(x, k, desc);\n      }\n      else {\n        throw new Error('Compare string must be \"asc\" or \"desc\"');\n      }\n    },\n\n    'Array | Matrix, number, function': _partitionSelect\n  });\n\n  function _partitionSelect(x, k, compare) {\n    if (!isInteger(k) || k < 0) {\n      throw new Error('k must be a non-negative integer');\n    }\n\n    if (x && x.isMatrix) {\n      var size = x.size();\n      if (size.length > 1) {\n        throw new Error('Only one dimensional matrices supported');\n      }\n      return quickSelect(x.valueOf(), k, compare);\n    }\n\n    if (Array.isArray(x)) {\n      return quickSelect(x, k, compare);\n    }\n  }\n\n  /**\n   * Quickselect algorithm.\n   * Code adapted from:\n   * http://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html\n   *\n   * @param {Array} arr\n   * @param {Number} k\n   * @param {Function} compare\n   * @private\n   */\n  function quickSelect(arr, k, compare) {\n    if (k >= arr.length) {\n      throw new Error('k out of bounds');\n    }\n\n    var from = 0;\n    var to = arr.length - 1;\n\n    // if from == to we reached the kth element\n    while (from < to) {\n      var r = from;\n      var w = to;\n      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];\n\n      // stop if the reader and writer meets\n      while (r < w) {\n        // arr[r] >= pivot\n        if (compare(arr[r], pivot) >= 0) { // put the large values at the end\n          var tmp = arr[w];\n          arr[w] = arr[r];\n          arr[r] = tmp;\n          --w;\n        } else { // the value is smaller than the pivot, skip\n          ++r;\n        }\n      }\n\n      // if we stepped up (r++) we need to step one down (arr[r] > pivot)\n      if (compare(arr[r], pivot) > 0) {\n        --r;\n      }\n\n      // the r pointer is on the end of the first k elements\n      if (k <= r) {\n        to = r;\n      } else {\n        from = r + 1;\n      }\n    }\n\n    return arr[k];\n  }\n}\n\nexports.name = 'partitionSelect';\nexports.factory = factory;\n\n},{\"../../utils/number\":532,\"../relational/compare\":380}],358:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var ZERO = new type.BigNumber(0);\n  var ONE = new type.BigNumber(1);\n\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | BigNumber}`\n   *   Start of the range\n   * - `end: number | BigNumber`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | BigNumber`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6);        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1);   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6');     // [2, 3, 4, 5]\n   *     math.range(2, 6, true);  // [2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n  var range = typed('range', {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n\n    // TODO: a number or boolean should not be converted to string here\n    'string': _strRange,\n    'string, boolean': _strRange,\n\n    'number, number':  function (start, end) {\n      return _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number': function (start, end, step) {\n      return _out(_rangeEx(start, end, step));\n    },\n    'number, number, boolean': function (start, end, includeEnd) {\n      return includeEnd\n          ? _out(_rangeInc(start, end, 1))\n          : _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number, boolean': function (start, end, step, includeEnd) {\n      return includeEnd\n          ? _out(_rangeInc(start, end, step))\n          : _out(_rangeEx(start, end, step));\n    },\n\n    'BigNumber, BigNumber':  function (start, end) {\n      return _out(_bigRangeEx(start, end, ONE));\n    },\n    'BigNumber, BigNumber, BigNumber': function (start, end, step) {\n      return _out(_bigRangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber, boolean': function (start, end, includeEnd) {\n      return includeEnd\n          ? _out(_bigRangeInc(start, end, ONE))\n          : _out(_bigRangeEx(start, end, ONE));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function (start, end, step, includeEnd) {\n      return includeEnd\n          ? _out(_bigRangeInc(start, end, step))\n          : _out(_bigRangeEx(start, end, step));\n    }\n\n  });\n\n  range.toTex = undefined; // use default template\n\n  return range;\n\n  function _out(arr) {\n    return config.matrix === 'Array' ? arr : matrix(arr);\n  }\n\n  function _strRange (str, includeEnd) {\n    var r = _parse(str);\n    if (!r){\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n\n    var fn;\n    if (config.number === 'BigNumber') {\n      fn = includeEnd ? _bigRangeInc : _bigRangeEx;\n      return _out(fn(\n          new type.BigNumber(r.start),\n          new type.BigNumber(r.end),\n          new type.BigNumber(r.step)));\n    }\n    else {\n      fn = includeEnd ? _rangeInc : _rangeEx;\n      return _out(fn(r.start, r.end, r.step));\n    }\n  }\n\n  /**\n   * Create a range with numbers. End is excluded\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n  function _rangeEx (start, end, step) {\n    var array = [],\n        x = start;\n    if (step > 0) {\n      while (x < end) {\n        array.push(x);\n        x += step;\n      }\n    }\n    else if (step < 0) {\n      while (x > end) {\n        array.push(x);\n        x += step;\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * Create a range with numbers. End is included\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n  function _rangeInc (start, end, step) {\n    var array = [],\n        x = start;\n    if (step > 0) {\n      while (x <= end) {\n        array.push(x);\n        x += step;\n      }\n    }\n    else if (step < 0) {\n      while (x >= end) {\n        array.push(x);\n        x += step;\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * Create a range with big numbers. End is excluded\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n  function _bigRangeEx (start, end, step) {\n    var array = [],\n        x = start;\n    if (step.gt(ZERO)) {\n      while (x.lt(end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n    else if (step.lt(ZERO)) {\n      while (x.gt(end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * Create a range with big numbers. End is included\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n  function _bigRangeInc (start, end, step) {\n    var array = [],\n        x = start;\n    if (step.gt(ZERO)) {\n      while (x.lte(end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n    else if (step.lt(ZERO)) {\n      while (x.gte(end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n  function _parse (str) {\n    var args = str.split(':');\n\n    // number\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if(invalid) {\n      return null;\n    }\n\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n\n      default:\n        return null;\n    }\n  }\n\n}\n\nexports.name = 'range';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482}],359:[function(require,module,exports){\n'use strict';\n\nvar DimensionError = require('../../error/DimensionError');\n\nvar isInteger = require('../../utils/number').isInteger;\nvar array = require('../../utils/array');\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Reshape a multi dimensional array to fit the specified dimensions\n   *\n   * Syntax:\n   *\n   *     math.reshape(x, sizes)\n   *\n   * Examples:\n   *\n   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3]);\n   *     // returns Array  [[1, 2, 3], [4, 5, 6]]\n   *\n   *     math.reshape([[1, 2], [3, 4]], [1, 4]);\n   *     // returns Array  [[1, 2, 3, 4]]\n   *\n   *     math.reshape([[1, 2], [3, 4]], [4]);\n   *     // returns Array [1, 2, 3, 4]\n   *\n   *     var x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8]);\n   *     math.reshape(x, [2, 2, 2]);\n   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n   *\n   * See also:\n   *\n   *     size, squeeze, resize\n   *\n   * @param {Array | Matrix | *} x  Matrix to be reshaped\n   * @param {number[]} sizes        One dimensional array with integral sizes for\n   *                                each dimension\n   *\n   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`\n   *\n   * @throws {TypeError}            If `sizes` does not contain solely integers\n   * @throws {DimensionError}       If the product of the new dimension sizes does\n   *                                not equal that of the old ones\n   */\n  var reshape = typed('reshape', {\n\n    'Matrix, Array': function (x, sizes) {\n      if(x.reshape) {\n        return x.reshape(sizes);\n      } else {\n        return matrix(array.reshape(x.valueOf(), sizes));\n      }\n    },\n\n    'Array, Array': function (x, sizes) {\n      sizes.forEach(function (size) {\n        if (!isInteger(size)) {\n          throw new TypeError('Invalid size for dimension: ' + size);\n        }\n      });\n      return array.reshape(x, sizes);\n    }\n\n  });\n\n  reshape.toTex = undefined; // use default template\n\n  return reshape;\n}\n\nexports.name = 'reshape';\nexports.factory = factory;\n\n},{\"../../error/DimensionError\":11,\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509,\"../../utils/number\":532}],360:[function(require,module,exports){\n'use strict';\n\nvar DimensionError = require('../../error/DimensionError');\nvar ArgumentsError = require('../../error/ArgumentsError');\n\nvar isInteger = require('../../utils/number').isInteger;\nvar format = require('../../utils/string').format;\nvar clone = require('../../utils/object').clone;\nvar array = require('../../utils/array');\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Resize a matrix\n   *\n   * Syntax:\n   *\n   *     math.resize(x, size)\n   *     math.resize(x, size, defaultValue)\n   *\n   * Examples:\n   *\n   *     math.resize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]\n   *     math.resize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]\n   *     math.resize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]\n   *     math.resize(\"hello\", [8], \"!\");    // returns string 'hello!!!'\n   *\n   * See also:\n   *\n   *     size, squeeze, subset, reshape\n   *\n   * @param {Array | Matrix | *} x             Matrix to be resized\n   * @param {Array | Matrix} size              One dimensional array with numbers\n   * @param {number | string} [defaultValue=0] Zero by default, except in\n   *                                           case of a string, in that case\n   *                                           defaultValue = ' '\n   * @return {* | Array | Matrix} A resized clone of matrix `x`\n   */\n  // TODO: rework resize to a typed-function\n  var resize = function resize (x, size, defaultValue) {\n    if (arguments.length != 2 && arguments.length != 3) {\n      throw new ArgumentsError('resize', arguments.length, 2, 3);\n    }\n\n    if (size && size.isMatrix === true) {\n      size = size.valueOf(); // get Array\n    }\n\n    if (size.length && size[0] && size[0].isBigNumber === true) {\n      // convert bignumbers to numbers\n      size = size.map(function (value) {\n        return (value && value.isBigNumber === true) ? value.toNumber() : value;\n      });\n    }\n    \n    // check x is a Matrix\n    if (x && x.isMatrix === true) {\n      // use optimized matrix implementation, return copy\n      return x.resize(size, defaultValue, true);\n    }\n    \n    if (typeof x === 'string') {\n      // resize string\n      return _resizeString(x, size, defaultValue);\n    }\n    \n    // check result should be a matrix\n    var asMatrix = Array.isArray(x) ? false : (config.matrix !== 'Array');\n\n    if (size.length == 0) {\n      // output a scalar\n      while (Array.isArray(x)) {\n        x = x[0];\n      }\n\n      return clone(x);\n    }\n    else {\n      // output an array/matrix\n      if (!Array.isArray(x)) {\n        x = [x];\n      }\n      x = clone(x);\n\n      var res = array.resize(x, size, defaultValue);\n      return asMatrix ? matrix(res) : res;\n    }\n  };\n\n  resize.toTex = undefined; // use default template\n\n  return resize;\n\n  /**\n   * Resize a string\n   * @param {string} str\n   * @param {number[]} size\n   * @param {string} [defaultChar=' ']\n   * @private\n   */\n  function _resizeString(str, size, defaultChar) {\n    if (defaultChar !== undefined) {\n      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {\n        throw new TypeError('Single character expected as defaultValue');\n      }\n    }\n    else {\n      defaultChar = ' ';\n    }\n\n    if (size.length !== 1) {\n      throw new DimensionError(size.length, 1);\n    }\n    var len = size[0];\n    if (typeof len !== 'number' || !isInteger(len)) {\n      throw new TypeError('Invalid size, must contain positive integers ' +\n          '(size: ' + format(size) + ')');\n    }\n\n    if (str.length > len) {\n      return str.substring(0, len);\n    }\n    else if (str.length < len) {\n      var res = str;\n      for (var i = 0, ii = len - str.length; i < ii; i++) {\n        res += defaultChar;\n      }\n      return res;\n    }\n    else {\n      return str;\n    }\n  }\n}\n\nexports.name = 'resize';\nexports.factory = factory;\n\n},{\"../../error/ArgumentsError\":10,\"../../error/DimensionError\":11,\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509,\"../../utils/number\":532,\"../../utils/object\":533,\"../../utils/string\":534}],361:[function(require,module,exports){\n'use strict';\n\nvar array = require('../../utils/array');\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Calculate the size of a matrix or scalar.\n   *\n   * Syntax:\n   *\n   *     math.size(x)\n   *\n   * Examples:\n   *\n   *     math.size(2.3);                  // returns []\n   *     math.size('hello world');        // returns [11]\n   *\n   *     var A = [[1, 2, 3], [4, 5, 6]];\n   *     math.size(A);                    // returns [2, 3]\n   *     math.size(math.range(1,6));      // returns [5]\n   *\n   * See also:\n   *\n   *     resize, squeeze, subset\n   *\n   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix\n   * @return {Array | Matrix} A vector with size of `x`.\n   */\n  var size = typed('size', {\n    'Matrix': function (x) {\n      // TODO: return the same matrix type as the input\n      return matrix(x.size());\n    },\n\n    'Array': array.size,\n\n    'string': function (x) {\n      return (config.matrix === 'Array') ? [x.length] : matrix([x.length]);\n    },\n\n    'number | Complex | BigNumber | Unit | boolean | null': function (x) {\n      // scalar\n      return (config.matrix === 'Array') ? [] : matrix([]);\n    }\n  });\n\n  size.toTex = undefined; // use default template\n\n  return size;\n}\n\nexports.name = 'size';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509}],362:[function(require,module,exports){\n'use strict';\n\nvar size = require('../../utils/array').size;\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var compareAsc = load(require('../relational/compare'));\n  var compareDesc = function (a, b) {\n    return -compareAsc(a, b);\n  };\n  var compareNatural = load(require('../relational/compareNatural'));\n\n  /**\n   * Sort the items in a matrix.\n   *\n   * Syntax:\n   *\n   *    math.sort(x)\n   *    math.sort(x, compare)\n   *\n   * Examples:\n   *\n   *    math.sort([5, 10, 1]); // returns [1, 5, 10]\n   *    math.sort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']\n   *\n   *    function sortByLength (a, b) {\n   *      return a.length - b.length;\n   *    }\n   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']\n   *\n   * See also:\n   *\n   *    filter, forEach, map, compare, compareNatural\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']\n   *        An optional _comparator function or name. The function is called as\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n   *        and 0 when a == b.\n   * @return {Matrix | Array} Returns the sorted matrix.\n   */\n  var sort = typed('sort', {\n    'Array': function (x) {\n      _arrayIsVector(x);\n      return x.sort(compareAsc);\n    },\n\n    'Matrix': function (x) {\n      _matrixIsVector(x);\n      return matrix(x.toArray().sort(compareAsc), x.storage());\n    },\n\n    'Array, function': function (x, _comparator) {\n      _arrayIsVector(x);\n      return x.sort(_comparator);\n    },\n\n    'Matrix, function': function (x, _comparator) {\n      _matrixIsVector(x);\n      return matrix(x.toArray().sort(_comparator), x.storage());\n    },\n\n    'Array, string': function (x, order) {\n      _arrayIsVector(x);\n      return x.sort(_comparator(order));\n    },\n\n    'Matrix, string': function (x, order) {\n      _matrixIsVector(x);\n      return matrix(x.toArray().sort(_comparator(order)), x.storage());\n    }\n  });\n\n  sort.toTex = undefined; // use default template\n\n  /**\n   * Get the comparator for given order ('asc', 'desc', 'natural')\n   * @param {'asc' | 'desc' | 'natural'} order\n   * @return {Function} Returns a _comparator function\n   */\n  function _comparator (order) {\n    if (order === 'asc') {\n      return compareAsc;\n    }\n    else if (order === 'desc') {\n      return compareDesc;\n    }\n    else if (order === 'natural') {\n      return compareNatural;\n    }\n    else {\n      throw new Error('String \"asc\", \"desc\", or \"natural\" expected');\n    }\n  }\n\n  /**\n   * Validate whether an array is one dimensional\n   * Throws an error when this is not the case\n   * @param {Array} array\n   * @private\n   */\n  function _arrayIsVector (array) {\n    if (size(array).length !== 1) {\n      throw new Error('One dimensional array expected');\n    }\n  }\n\n  /**\n   * Validate whether a matrix is one dimensional\n   * Throws an error when this is not the case\n   * @param {Matrix} matrix\n   * @private\n   */\n  function _matrixIsVector (matrix) {\n    if (matrix.size().length !== 1) {\n      throw new Error('One dimensional matrix expected');\n    }\n  }\n\n  return sort;\n}\n\nexports.name = 'sort';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509,\"../relational/compare\":380,\"../relational/compareNatural\":381}],363:[function(require,module,exports){\n'use strict';\n\nvar object = require('../../utils/object');\nvar array = require('../../utils/array');\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.\n   *\n   * Syntax:\n   *\n   *     math.squeeze(x)\n   *\n   * Examples:\n   *\n   *     math.squeeze([3]);           // returns 3\n   *     math.squeeze([[3]]);         // returns 3\n   *\n   *     var A = math.zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)\n   *     math.squeeze(A);             // returns [0, 0, 0] (size 3)\n   *\n   *     var B = math.zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)\n   *     math.squeeze(B);             // returns [0, 0, 0] (size 3)\n   *\n   *     // only inner and outer dimensions are removed\n   *     var C = math.zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n   *     math.squeeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n   *\n   * See also:\n   *\n   *     subset\n   *\n   * @param {Matrix | Array} x      Matrix to be squeezed\n   * @return {Matrix | Array} Squeezed matrix\n   */\n  var squeeze = typed('squeeze', {\n    'Array': function (x) {\n      return array.squeeze(object.clone(x));\n    },\n\n    'Matrix': function (x) {\n      var res = array.squeeze(x.toArray());\n      // FIXME: return the same type of matrix as the input\n      return Array.isArray(res) ? matrix(res) : res;\n    },\n\n    'any': function (x) {\n      // scalar\n      return object.clone(x);\n    }\n  });\n\n  squeeze.toTex = undefined; // use default template\n\n  return squeeze;\n}\n\nexports.name = 'squeeze';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509,\"../../utils/object\":533}],364:[function(require,module,exports){\n'use strict';\n\nvar clone = require('../../utils/object').clone;\nvar validateIndex = require('../../utils/array').validateIndex;\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\nvar DimensionError = require('../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     var d = [[1, 2], [3, 4]];\n   *     math.subset(d, math.index(1, 0));        // returns 3\n   *     math.subset(d, math.index([0, 2], 1));   // returns [[2], [4]]\n   *\n   *     // replace a subset\n   *     var e = [];\n   *     var f = math.subset(e, math.index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]\n   *     var g = math.subset(f, math.index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index                     An index containing ranges for each\n   *                                          dimension\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n  var subset = typed('subset', {\n    // get subset\n    'Array, Index': function (value, index) {\n      var m = matrix(value);\n      var subset = m.subset(index);       // returns a Matrix\n      return index.isScalar()\n          ? subset\n          : subset.valueOf();  // return an Array (like the input)\n    },\n\n    'Matrix, Index': function (value, index) {\n      return value.subset(index);\n    },\n\n    'Object, Index': _getObjectProperty,\n\n    'string, Index': _getSubstring,\n\n    // set subset\n    'Array, Index, any': function (value, index, replacement) {\n      return matrix(clone(value))\n          .subset(index, replacement, undefined)\n          .valueOf();\n    },\n\n    'Array, Index, any, any': function (value, index, replacement, defaultValue) {\n      return matrix(clone(value))\n          .subset(index, replacement, defaultValue)\n          .valueOf();\n    },\n\n    'Matrix, Index, any': function (value, index, replacement) {\n      return value.clone().subset(index, replacement);\n    },\n\n    'Matrix, Index, any, any': function (value, index, replacement, defaultValue) {\n      return value.clone().subset(index, replacement, defaultValue);\n    },\n\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n\n  subset.toTex = undefined; // use default template\n\n  return subset;\n\n  /**\n   * Retrieve a subset of a string\n   * @param {string} str            string from which to get a substring\n   * @param {Index} index           An index containing ranges for each dimension\n   * @returns {string} substring\n   * @private\n   */\n  function _getSubstring(str, index) {\n    if (!index || index.isIndex !== true) {\n      // TODO: better error message\n      throw new TypeError('Index expected');\n    }\n    if (index.size().length != 1) {\n      throw new DimensionError(index.size().length, 1);\n    }\n\n    // validate whether the range is out of range\n    var strLen = str.length;\n    validateIndex(index.min()[0], strLen);\n    validateIndex(index.max()[0], strLen);\n\n    var range = index.dimension(0);\n\n    var substr = '';\n    range.forEach(function (v) {\n      substr += str.charAt(v);\n    });\n\n    return substr;\n  }\n\n  /**\n   * Replace a substring in a string\n   * @param {string} str            string to be replaced\n   * @param {Index} index           An index containing ranges for each dimension\n   * @param {string} replacement    Replacement string\n   * @param {string} [defaultValue] Default value to be uses when resizing\n   *                                the string. is ' ' by default\n   * @returns {string} result\n   * @private\n   */\n  function _setSubstring(str, index, replacement, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      // TODO: better error message\n      throw new TypeError('Index expected');\n    }\n    if (index.size().length != 1) {\n      throw new DimensionError(index.size().length, 1);\n    }\n    if (defaultValue !== undefined) {\n      if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n        throw new TypeError('Single character expected as defaultValue');\n      }\n    }\n    else {\n      defaultValue = ' ';\n    }\n\n    var range = index.dimension(0);\n    var len = range.size()[0];\n\n    if (len != replacement.length) {\n      throw new DimensionError(range.size()[0], replacement.length);\n    }\n\n    // validate whether the range is out of range\n    var strLen = str.length;\n    validateIndex(index.min()[0]);\n    validateIndex(index.max()[0]);\n\n    // copy the string into an array with characters\n    var chars = [];\n    for (var i = 0; i < strLen; i++) {\n      chars[i] = str.charAt(i);\n    }\n\n    range.forEach(function (v, i) {\n      chars[v] = replacement.charAt(i[0]);\n    });\n\n    // initialize undefined characters with a space\n    if (chars.length > strLen) {\n      for (i = strLen - 1, len = chars.length; i < len; i++) {\n        if (!chars[i]) {\n          chars[i] = defaultValue;\n        }\n      }\n    }\n\n    return chars.join('');\n  }\n}\n\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\nfunction _getObjectProperty (object, index) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  return getSafeProperty(object, key);\n}\n\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\nfunction _setObjectProperty (object, index, replacement) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  // clone the object, and apply the property to the clone\n  var updated = clone(object);\n  setSafeProperty(updated, key, replacement);\n\n  return updated;\n}\n\nexports.name = 'subset';\nexports.factory = factory;\n\n},{\"../../error/DimensionError\":11,\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509,\"../../utils/customs\":527,\"../../utils/object\":533}],365:[function(require,module,exports){\n'use strict';\n\nvar clone = require('../../utils/object').clone;\nvar format = require('../../utils/string').format;\n\nfunction factory (type, config, load, typed) {\n  \n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var add = load(require('../arithmetic/add'));\n\n  /**\n   * Calculate the trace of a matrix: the sum of the elements on the main\n   * diagonal of a square matrix.\n   *\n   * Syntax:\n   *\n   *    math.trace(x)\n   *\n   * Examples:\n   *\n   *    math.trace([[1, 2], [3, 4]]); // returns 5\n   *\n   *    var A = [\n   *      [1, 2, 3],\n   *      [-1, 2, 3],\n   *      [2, 0, 3]\n   *    ]\n   *    math.trace(A); // returns 6\n   *\n   * See also:\n   *\n   *    diag\n   *\n   * @param {Array | Matrix} x  A matrix\n   *\n   * @return {number} The trace of `x`\n   */\n  var trace = typed('trace', {\n    \n    'Array': function (x) {\n      // use dense matrix implementation\n      return trace(matrix(x));\n    },\n\n    'Matrix': function (x) {\n      // result\n      var c;\n      // process storage format\n      switch (x.storage()) {\n        case 'dense':\n          c = _denseTrace(x);\n          break;\n        case 'sparse':\n          c = _sparseTrace(x);\n          break;\n      }\n      return c;\n    },\n    \n    'any': clone\n  });\n  \n  var _denseTrace = function (m) {\n    // matrix size & data\n    var size = m._size;\n    var data = m._data;\n    \n    // process dimensions\n    switch (size.length) {\n      case 1:\n        // vector\n        if (size[0] == 1) {\n          // return data[0]\n          return clone(data[0]);\n        }\n        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n      case 2:\n        // two dimensional\n        var rows = size[0];\n        var cols = size[1];\n        if (rows === cols) {\n          // calulate sum\n          var sum = 0;\n          // loop diagonal\n          for (var i = 0; i < rows; i++)\n            sum = add(sum, data[i][i]);\n          // return trace\n          return sum;\n        }\n        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');        \n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');\n    }\n  };\n  \n  var _sparseTrace = function (m) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    var size = m._size;\n    // check dimensions\n    var rows = size[0];\n    var columns = size[1];\n    // matrix must be square\n    if (rows === columns) {\n      // calulate sum\n      var sum = 0;\n      // check we have data (avoid looping columns)\n      if (values.length > 0) {\n        // loop columns\n        for (var j = 0; j < columns; j++) {\n          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n          var k0 = ptr[j];\n          var k1 = ptr[j + 1];\n          // loop k within [k0, k1[\n          for (var k = k0; k < k1; k++) {\n            // row index\n            var i = index[k];\n            // check row\n            if (i === j) {\n              // accumulate value\n              sum = add(sum, values[k]);\n              // exit loop\n              break;\n            }\n            if (i > j) {\n              // exit loop, no value on the diagonal for column j\n              break;\n            }\n          }\n        }\n      }\n      // return trace\n      return sum;\n    }\n    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');   \n  };\n\n  trace.toTex = {1: '\\\\mathrm{tr}\\\\left(${args[0]}\\\\right)'};\n  \n  return trace;\n}\n\nexports.name = 'trace';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/object\":533,\"../../utils/string\":534,\"../arithmetic/add\":283}],366:[function(require,module,exports){\n'use strict';\n\nvar clone = require('../../utils/object').clone;\nvar format = require('../../utils/string').format;\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var DenseMatrix = type.DenseMatrix,\n      SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Transpose a matrix. All values of the matrix are reflected over its\n   * main diagonal. Only applicable to two dimensional matrices containing\n   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional\n   * vectors and scalars return the input unchanged.\n   *\n   * Syntax:\n   *\n   *     math.transpose(x)\n   *\n   * Examples:\n   *\n   *     var A = [[1, 2, 3], [4, 5, 6]];\n   *     math.transpose(A);               // returns [[1, 4], [2, 5], [3, 6]]\n   *\n   * See also:\n   *\n   *     diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be transposed\n   * @return {Array | Matrix}   The transposed matrix\n   */\n  var transpose = typed('transpose', {\n\n    'Array': function (x) {\n      // use dense matrix implementation\n      return transpose(matrix(x)).valueOf();\n    },\n\n    'Matrix': function (x) {\n      // matrix size\n      var size = x.size();\n\n      // result\n      var c;\n      \n      // process dimensions\n      switch (size.length) {\n        case 1:\n          // vector\n          c = x.clone();\n          break;\n\n        case 2:\n          // rows and columns\n          var rows = size[0];\n          var columns = size[1];\n\n          // check columns\n          if (columns === 0) {\n            // throw exception\n            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');\n          }\n\n          // process storage format\n          switch (x.storage()) {\n            case 'dense':\n              c = _denseTranspose(x, rows, columns);\n              break;\n            case 'sparse':\n              c = _sparseTranspose(x, rows, columns);\n              break;\n          }\n          break;\n          \n        default:\n          // multi dimensional\n          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');\n      }\n      return c;\n    },\n\n    // scalars\n    'any': function (x) {\n      return clone(x);\n    }\n  });\n\n  var _denseTranspose = function (m, rows, columns) {\n    // matrix array\n    var data = m._data;\n    // transposed matrix data\n    var transposed = [];\n    var transposedRow;\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // initialize row\n      transposedRow = transposed[j] = [];\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // set data\n        transposedRow[i] = clone(data[i][j]);\n      }\n    }\n    // return matrix\n    return new DenseMatrix({\n      data: transposed,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  };\n\n  var _sparseTranspose = function (m, rows, columns) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // result matrices\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // row counts\n    var w = [];\n    for (var x = 0; x < rows; x++)\n      w[x] = 0;\n    // vars\n    var p, l, j;\n    // loop values in matrix\n    for (p = 0, l = index.length; p < l; p++) {\n      // number of values in row\n      w[index[p]]++;\n    }\n    // cumulative sum\n    var sum = 0;\n    // initialize cptr with the cummulative sum of row counts\n    for (var i = 0; i < rows; i++) {\n      // update cptr\n      cptr.push(sum);\n      // update sum\n      sum += w[i];\n      // update w\n      w[i] = cptr[i];\n    }\n    // update cptr\n    cptr.push(sum);\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // values & index in column\n      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {\n        // C values & index\n        var q = w[index[k]]++;\n        // C[j, i] = A[i, j]\n        cindex[q] = j;\n        // check we need to process values (pattern matrix)\n        if (values)\n          cvalues[q] = clone(values[k]);\n      }\n    }\n    // return matrix\n    return new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  };\n\n  transpose.toTex = {1: '\\\\left(${args[0]}\\\\right)' + latex.operators['transpose']};\n\n  return transpose;\n}\n\nexports.name = 'transpose';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/latex\":531,\"../../utils/object\":533,\"../../utils/string\":534}],367:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar resize = require('../../utils/array').resize;\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Create a matrix filled with zeros. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.zeros(m)\n   *    math.zeros(m, format)\n   *    math.zeros(m, n)\n   *    math.zeros(m, n, format)\n   *    math.zeros([m, n])\n   *    math.zeros([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.zeros(3);                  // returns [0, 0, 0]\n   *    math.zeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]\n   *    math.zeros(3, 'dense');         // returns [0, 0, 0]\n   *\n   *    var A = [[1, 2, 3], [4, 5, 6]];\n   *    math.zeros(math.size(A));       // returns [[0, 0, 0], [0, 0, 0]]\n   *\n   * See also:\n   *\n   *    ones, eye, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix}           A matrix filled with zeros\n   */\n  var zeros = typed('zeros', {\n    '': function () {\n      return (config.matrix === 'Array')\n          ? _zeros([])\n          : _zeros([], 'default');\n    },\n\n    // math.zeros(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function (size) {\n      var last = size[size.length - 1];\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _zeros(size, format);\n      }\n      else if (config.matrix === 'Array') {\n        return _zeros(size);\n      }\n      else {\n        return _zeros(size, 'default');\n      }\n    },\n\n    'Array': _zeros,\n\n    'Matrix': function (size) {\n      var format = size.storage();\n      return _zeros(size.valueOf(), format);\n    },\n\n    'Array | Matrix, string': function (size, format) {\n      return _zeros (size.valueOf(), format);\n    }\n  });\n\n  zeros.toTex = undefined; // use default template\n\n  return zeros;\n\n  /**\n   * Create an Array or Matrix with zeros\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n  function _zeros(size, format) {\n    var hasBigNumbers = _normalize(size);\n    var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n      return m;\n    }\n    else {\n      // return an Array\n      var arr = [];\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n      return arr;\n    }\n  }\n\n  // replace BigNumbers with numbers, returns true if size contained BigNumbers\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (value && value.isBigNumber === true) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  }\n\n  // validate arguments\n  function _validate (size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function zeros must be positive integers');\n      }\n    });\n  }\n}\n\n// TODO: zeros contains almost the same code as ones. Reuse this?\n\nexports.name = 'zeros';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509,\"../../utils/number\":532}],368:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities.\n   *\n   * Combinations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.combinations(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinations(7, 5); // returns 21\n   *\n   * See also:\n   *\n   *    permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations.\n   */\n  var combinations = typed('combinations', {\n    'number, number': function (n, k) {\n      var max, result, i;\n\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n      if (k > n) {\n        throw new TypeError('k must be less than or equal to n');\n      }\n\n      max = Math.max(k, n - k);\n      result = 1;\n      for (i = 1; i <= n - max; i++) {\n        result = result * (max + i) / i;\n      }\n\n      return result;\n    },\n\n    'BigNumber, BigNumber': function (n, k) {\n      var max, result, i, ii;\n      var one = new type.BigNumber(1);\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n      if (k.gt(n)) {\n        throw new TypeError('k must be less than n in function combinations');\n      }\n\n      max = n.minus(k);\n      if (k.lt(max)) max = k;\n      result = one;\n      for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {\n        result = result.times(max.plus(i)).dividedBy(i);\n      }\n\n      return result;\n    }\n\n    // TODO: implement support for collection in combinations\n  });\n\n  combinations.toTex = {2: '\\\\binom{${args[0]}}{${args[1]}}'};\n\n  return combinations;\n}\n\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}\n\nexports.name = 'combinations';\nexports.factory = factory;\n\n},{\"../../utils/number\":532}],369:[function(require,module,exports){\n'use strict';\n\nvar ArgumentsError = require('../../error/ArgumentsError');\nvar isCollection = require('../../utils/collection/isCollection');\nvar isNumber = require('../../utils/number').isNumber;\n\n// TODO: rethink math.distribution\n// TODO: rework to a typed function\nfunction factory (type, config, load, typed, math) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var array = require('../../utils/array');\n\n  // seeded pseudo random number generator\n  var rng = load(require('./seededRNG'));\n\n  /**\n   * Create a distribution object with a set of random functions for given\n   * random distribution.\n   *\n   * Syntax:\n   *\n   *     math.distribution(name)\n   *\n   * Examples:\n   *\n   *     var normalDist = math.distribution('normal'); // create a normal distribution\n   *     normalDist.random(0, 10);                     // get a random value between 0 and 10\n   *\n   * See also:\n   *\n   *     random, randomInt, pickRandom\n   *\n   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.\n   * @return {Object}       Returns a distribution object containing functions:\n   *                        `random([size] [, min] [, max])`,\n   *                        `randomInt([min] [, max])`,\n   *                        `pickRandom(array)`\n   */\n  function distribution(name) {\n    if (!distributions.hasOwnProperty(name))\n      throw new Error('Unknown distribution ' + name);\n\n    var args = Array.prototype.slice.call(arguments, 1),\n        distribution = distributions[name].apply(this, args);\n\n    return (function(distribution) {\n\n      // This is the public API for all distributions\n      var randFunctions = {\n\n        random: function(arg1, arg2, arg3) {\n          var size, min, max;\n\n          if (arguments.length > 3) {\n            throw new ArgumentsError('random', arguments.length, 0, 3);\n          } else if (arguments.length === 1) {\n            // `random(max)` or `random(size)`\n            if (isCollection(arg1)) {\n              size = arg1;\n            } else {\n              max = arg1;\n            }\n          } else if (arguments.length === 2) {\n            // `random(min, max)` or `random(size, max)`\n            if (isCollection(arg1)) {\n              size = arg1;\n              max = arg2;\n            } else {\n              min = arg1;\n              max = arg2;\n            }\n          } else {\n            // `random(size, min, max)`\n            size = arg1;\n            min = arg2;\n            max = arg3;\n          }\n\n          // TODO: validate type of size\n          if ((min !== undefined && !isNumber(min)) || (max !== undefined && !isNumber(max))) {\n            throw new TypeError('Invalid argument in function random');\n          }\n\n          if (max === undefined) max = 1;\n          if (min === undefined) min = 0;\n          if (size !== undefined) {\n            var res = _randomDataForMatrix(size.valueOf(), min, max, _random);\n            return (size && size.isMatrix === true) ? matrix(res) : res;\n          }\n          return _random(min, max);\n        },\n\n        randomInt: typed({\n          'number | Array': function(arg) {\n            var min = 0;\n\n            if (isCollection(arg)) {\n              var size = arg;\n              var max = 1;\n              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);\n              return (size && size.isMatrix === true) ? matrix(res) : res;\n            } else {\n              var max = arg;\n              return _randomInt(min, max);\n            }\n          },\n          'number | Array, number': function(arg1, arg2) {\n            if (isCollection(arg1)) {\n              var size = arg1;\n              var max = arg2;\n              var min = 0;\n              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);\n              return (size && size.isMatrix === true) ? matrix(res) : res;\n            }\n            else {\n              var min = arg1;\n              var max = arg2;\n              return _randomInt(min, max);\n            }\n          },\n          'Array, number, number': function(size, min, max) {\n            var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);\n            return (size && size.isMatrix === true) ? matrix(res) : res;\n          }\n        }),\n\n        pickRandom: typed({\n          'Array': function(possibles) {\n            return _pickRandom(possibles);\n          },\n          'Array, number | Array': function(possibles, arg2) {\n            var number, weights;\n\n            if (Array.isArray(arg2)) {\n              weights = arg2;\n            } else if (isNumber(arg2)) {\n              number = arg2;\n            } else {\n              throw new TypeError('Invalid argument in function pickRandom')\n            }\n\n            return _pickRandom(possibles, number, weights);\n          },\n          'Array, number | Array, Array | number': function(possibles, arg2, arg3) {\n            var number, weights;\n\n            if (Array.isArray(arg2)) {\n              weights = arg2;\n              number = arg3;\n            } else {\n              weights = arg3;\n              number = arg2;\n            }\n\n            if (!Array.isArray(weights) || !isNumber(number)) {\n              throw new TypeError('Invalid argument in function pickRandom');\n            }\n\n            return _pickRandom(possibles, number, weights);\n          }\n        })\n      }\n\n      var _pickRandom = function(possibles, number, weights) {\n        var single = (typeof number === 'undefined');\n\n        if (single) {\n          number = 1;\n        }\n\n        if (possibles && possibles.isMatrix === true) {\n          possibles = possibles.valueOf(); // get Array\n        } else if (!Array.isArray(possibles)) {\n          throw new TypeError('Unsupported type of value in function pickRandom');\n        }\n\n        if (array.size(possibles).length > 1) {\n          throw new Error('Only one dimensional vectors supported');\n        }\n\n        if (typeof weights !== 'undefined') {\n          if (weights.length != possibles.length) {\n            throw new Error('Weights must have the same length as possibles');\n          }\n\n          var totalWeights = 0;\n\n          for (var i = 0, len = weights.length; i < len; i++) {\n            if (!isNumber(weights[i]) || weights[i] < 0) {\n              throw new Error('Weights must be an array of positive numbers');\n            }\n\n            totalWeights += weights[i];\n          }\n        }\n\n        var length = possibles.length;\n\n        if (length == 0) {\n          return [];\n        } else if (number >= length) {\n          return possibles;\n        }\n\n        var result = [];\n        var pick;\n\n        while (result.length < number) {\n          if (typeof weights === 'undefined') {\n            pick = possibles[Math.floor(rng() * length)];\n          } else {\n            var randKey = rng() * totalWeights;\n\n            for (var i = 0, len = possibles.length; i < len; i++) {\n              randKey -= weights[i];\n\n              if (randKey < 0) {\n                pick = possibles[i];\n                break;\n              }\n            }\n          }\n\n          if (result.indexOf(pick) == -1) {\n            result.push(pick);\n          }\n        }\n\n        return single ? result[0] : result;\n\n        // TODO: add support for multi dimensional matrices\n      }\n\n      var _random = function(min, max) {\n        return min + distribution() * (max - min);\n      };\n\n      var _randomInt = function(min, max) {\n        return Math.floor(min + distribution() * (max - min));\n      };\n\n      // This is a function for generating a random matrix recursively.\n      var _randomDataForMatrix = function(size, min, max, randFunc) {\n        var data = [], length, i;\n        size = size.slice(0);\n\n        if (size.length > 1) {\n          for (var i = 0, length = size.shift(); i < length; i++) {\n            data.push(_randomDataForMatrix(size, min, max, randFunc));\n          }\n        } else {\n          for (var i = 0, length = size.shift(); i < length; i++) {\n            data.push(randFunc(min, max));\n          }\n        }\n\n        return data;\n      };\n\n      return randFunctions;\n\n    })(distribution);\n  }\n\n  // Each distribution is a function that takes no argument and when called returns\n  // a number between 0 and 1.\n  var distributions = {\n\n    uniform: function() {\n      return rng;\n    },\n\n    // Implementation of normal distribution using Box-Muller transform\n    // ref : http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform\n    // We take : mean = 0.5, standard deviation = 1/6\n    // so that 99.7% values are in [0, 1].\n    normal: function() {\n      return function() {\n        var u1, u2,\n            picked = -1;\n        // We reject values outside of the interval [0, 1]\n        // TODO: check if it is ok to do that?\n        while (picked < 0 || picked > 1) {\n          u1 = rng();\n          u2 = rng();\n          picked = 1/6 * Math.pow(-2 * Math.log(u1), 0.5) * Math.cos(2 * Math.PI * u2) + 0.5;\n        }\n        return picked;\n      }\n    }\n  };\n\n  distribution.toTex = undefined; // use default template\n\n  return distribution;\n}\n\nexports.name = 'distribution';\nexports.factory = factory;\n\n},{\"../../error/ArgumentsError\":10,\"../../type/matrix/function/matrix\":482,\"../../utils/array\":509,\"../../utils/collection/isCollection\":524,\"../../utils/number\":532,\"./seededRNG\":379}],370:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var gamma = load(require('./gamma'));\n  var latex = require('../../utils/latex');\n\n  /**\n   * Compute the factorial of a value\n   *\n   * Factorial only supports an integer value as argument.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.factorial(n)\n   *\n   * Examples:\n   *\n   *    math.factorial(5);    // returns 120\n   *    math.factorial(3);    // returns 6\n   *\n   * See also:\n   *\n   *    combinations, gamma, permutations\n   *\n   * @param {number | BigNumber | Array | Matrix} n   An integer number\n   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`\n   */\n  var factorial = typed('factorial', {\n    'number': function (n) {\n      if (n < 0) {\n        throw new Error('Value must be non-negative');\n      }\n\n      return gamma(n + 1);\n    },\n\n    'BigNumber': function (n) {\n      if (n.isNegative()) {\n        throw new Error('Value must be non-negative');\n      }\n\n      return gamma(n.plus(1));\n    },\n\n    'Array | Matrix': function (n) {\n      return deepMap(n, factorial);\n    }\n  });\n\n  factorial.toTex = {\n    1: '\\\\left(${args[0]}\\\\right)' + latex.operators['factorial']\n  };\n\n  return factorial;\n}\n\nexports.name = 'factorial';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523,\"../../utils/latex\":531,\"./gamma\":371}],371:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  var multiply = load(require('../arithmetic/multiply'));\n  var pow = load(require('../arithmetic/pow'));\n\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5);       // returns 24\n   *    math.gamma(-0.5);    // returns -3.5449077018110335\n   *    math.gamma(math.i);  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | Array | Matrix} n   A real or complex number\n   * @return {number | Array | Matrix}    The gamma of `n`\n   */\n  var gamma = typed('gamma', {\n    'number': function (n) {\n      var t, x;\n\n      if (isInteger(n)) {\n        if (n <= 0) {\n          return isFinite(n) ? Infinity : NaN;\n        }\n\n        if (n > 171) {\n          return Infinity;                  // Will overflow\n        }\n\n        var value = n - 2;\n        var res = n - 1;\n        while (value > 1) {\n          res *= value;\n          value--;\n        }\n\n        if (res == 0) {\n          res = 1;                          // 0! is per definition 1\n        }\n\n        return res;\n      }\n\n      if (n < 0.5) {\n        return Math.PI / (Math.sin(Math.PI * n) * gamma(1-n));\n      }\n\n      if (n >= 171.35) {\n        return Infinity;                    // will overflow\n      }\n\n      if (n > 85.0) {                       // Extended Stirling Approx\n        var twoN = n*n;\n        var threeN = twoN*n;\n        var fourN = threeN*n;\n        var fiveN = fourN*n;\n        return Math.sqrt(2*Math.PI/n) * Math.pow((n/Math.E), n) *\n            (1 + 1/(12*n) + 1/(288*twoN) - 139/(51840*threeN) -\n            571/(2488320*fourN) + 163879/(209018880*fiveN) +\n            5246819/(75246796800*fiveN*n));\n      }\n\n      --n;\n      x = p[0];\n      for (var i = 1; i < p.length; ++i) {\n        x += p[i] / (n+i);\n      }\n\n      t = n + g + 0.5;\n      return Math.sqrt(2*Math.PI) * Math.pow(t, n+0.5) * Math.exp(-t) * x;\n    },\n\n    'Complex': function (n) {\n      var t, x;\n\n      if (n.im == 0) {\n        return gamma(n.re);\n      }\n\n      n = new type.Complex(n.re - 1, n.im);\n      x = new type.Complex(p[0], 0);\n      for (var i = 1; i < p.length; ++i) {\n        var real = n.re + i;                // x += p[i]/(n+i)\n        var den = real*real + n.im*n.im;\n        if (den != 0) {\n          x.re += p[i] * real / den;\n          x.im += -(p[i] * n.im) / den;\n        } else {\n          x.re = p[i] < 0\n              ? -Infinity\n              :  Infinity;\n        }\n      }\n\n      t = new type.Complex(n.re + g + 0.5, n.im);\n      var twoPiSqrt = Math.sqrt(2*Math.PI);\n\n      n.re += 0.5;\n      var result = pow(t, n);\n      if (result.im == 0) {                 // sqrt(2*PI)*result\n        result.re *= twoPiSqrt;\n      } else if (result.re == 0) {\n        result.im *= twoPiSqrt;\n      } else {\n        result.re *= twoPiSqrt;\n        result.im *= twoPiSqrt;\n      }\n\n      var r = Math.exp(-t.re);              // exp(-t)\n      t.re = r * Math.cos(-t.im);\n      t.im = r * Math.sin(-t.im);\n\n      return multiply(multiply(result, t), x);\n    },\n\n    'BigNumber': function (n) {\n      if (n.isInteger()) {\n        return (n.isNegative() || n.isZero())\n            ? new type.BigNumber(Infinity)\n            : bigFactorial(n.minus(1));\n      }\n\n      if (!n.isFinite()) {\n        return new type.BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n\n      throw new Error('Integer BigNumber expected');\n    },\n\n    'Array | Matrix': function (n) {\n      return deepMap(n, gamma);\n    }\n  });\n\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n  function bigFactorial(n) {\n    if (n.isZero()) {\n      return new type.BigNumber(1); // 0! is per definition 1\n    }\n\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n    var Big = type.BigNumber.clone({precision: precision});\n\n    var res = new Big(n);\n    var value = n.toNumber() - 1; // number\n    while (value > 1) {\n      res = res.times(value);\n      value--;\n    }\n\n    return new type.BigNumber(res.toPrecision(type.BigNumber.precision));\n  }\n\n  gamma.toTex = {1: '\\\\Gamma\\\\left(${args[0]}\\\\right)'};\n\n  return gamma;\n}\n\n// TODO: comment on the variables g and p\n\nvar g = 4.7421875;\n\nvar p = [\n  0.99999999999999709182,\n  57.156235665862923517,\n  -59.597960355475491248,\n  14.136097974741747174,\n  -0.49191381609762019978,\n  0.33994649984811888699e-4,\n  0.46523628927048575665e-4,\n  -0.98374475304879564677e-4,\n  0.15808870322491248884e-3,\n  -0.21026444172410488319e-3,\n  0.21743961811521264320e-3,\n  -0.16431810653676389022e-3,\n  0.84418223983852743293e-4,\n  -0.26190838401581408670e-4,\n  0.36899182659531622704e-5\n];\n\nexports.name = 'gamma';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523,\"../../utils/number\":532,\"../arithmetic/multiply\":303,\"../arithmetic/pow\":307}],372:[function(require,module,exports){\nmodule.exports = [\n  //require('./distribution'), // TODO: rethink math.distribution\n  require('./combinations'),\n  require('./factorial'),\n  require('./gamma'),\n  require('./kldivergence'),\n  require('./multinomial'),\n  require('./permutations'),\n  require('./pickRandom'),\n  require('./random'),\n  require('./randomInt')\n];\n\n},{\"./combinations\":368,\"./factorial\":370,\"./gamma\":371,\"./kldivergence\":373,\"./multinomial\":374,\"./permutations\":375,\"./pickRandom\":376,\"./random\":377,\"./randomInt\":378}],373:[function(require,module,exports){\n'use strict';\n\n\nfunction factory(type, config, load, typed) {\n    var matrix = load(require('../../type/matrix/function/matrix'));\n    var divide = load(require('../arithmetic/divide'));\n    var sum = load(require('../statistics/sum'));\n    var multiply = load(require('../arithmetic/multiply'));\n    var dotDivide = load(require('../arithmetic/dotDivide'));\n    var log = load(require('../arithmetic/log'));\n    var isNumeric = load(require('../utils/isNumeric'));\n\n    /**\n     * Calculate the Kullback-Leibler (KL) divergence  between two distributions\n     *\n     * Syntax:\n     *\n     *     math.kldivergence(x, y)\n     *\n     * Examples:\n     *\n     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5]);   //returns 0.24376698773121153\n     *\n     *\n     * @param  {Array | Matrix} q    First vector\n     * @param  {Array | Matrix} p    Second vector\n     * @return {number}              Returns distance between q and p\n     */\n    var kldivergence = typed('kldivergence', {\n        'Array, Array': function(q, p) {\n            return _kldiv(matrix(q), matrix(p));\n        },\n\n        'Matrix, Array': function(q, p) {\n            return _kldiv(q, matrix(p));\n        },\n\n        'Array, Matrix': function(q, p){\n            return _kldiv(matrix(q), p);\n        },\n\n        'Matrix, Matrix': function(q, p){\n            return _kldiv(q, p);\n        }\n\n    });\n\n    function _kldiv(q, p) {\n        var plength = p.size().length;\n        var qlength = q.size().length;\n        if (plength > 1) {\n            throw new Error('first object must be one dimensional');\n        }\n        \n        if (qlength > 1) {\n            throw new Error('second object must be one dimensional');\n        }\n        \n        if(plength !== qlength){\n            throw new Error(\"Length of two vectors must be equal\");\n        }\n        \n        //Before calculation, apply normalization\n        var sumq = sum(q);\n        if (sumq === 0) {\n            throw new Error(\"Sum of elements in first object must be non zero\");\n        }\n\n        var sump = sum(p);\n        if (sump === 0) {\n            throw new Error(\"Sum of elements in second object must be non zero\");\n        }\n        var qnorm = divide(q, sum(q));\n        var pnorm = divide(p, sum(p));\n\n        var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));\n        if (isNumeric(result)) {\n            return result;\n        }\n        else {\n            return Number.NaN;\n        }\n    }\n\n    return kldivergence;\n}\n\n\nexports.name = 'kldivergence';\nexports.factory = factory;\n \n\n},{\"../../type/matrix/function/matrix\":482,\"../arithmetic/divide\":288,\"../arithmetic/dotDivide\":290,\"../arithmetic/log\":300,\"../arithmetic/multiply\":303,\"../statistics/sum\":414,\"../utils/isNumeric\":452}],374:[function(require,module,exports){\n'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var divide = load(require('../arithmetic/divide'));\n  var factorial = load(require('../probability/factorial'));\n  var isInteger = load(require('../utils/isInteger'));\n  var isPositive = load(require('../utils/isPositive'));\n\n  /**\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n   *\n   * multinomial takes one array of integers as an argument.\n   * The following condition must be enforced: every ai <= 0\n   *\n   * Syntax:\n   *\n   *     math.multinomial(a) // a is an array type\n   *\n   * Examples:\n   *\n   *    math.multinomial([1,2,1]); // returns 12\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n   * @return {Number | BigNumber}         Multinomial coefficient.\n   */\n  return typed('multinomial', {\n    'Array | Matrix': function (a) {\n      var sum = 0;\n      var denom = 1;\n\n      deepForEach(a, function(ai) {\n        if(!isInteger(ai) || !isPositive(ai)) {\n          throw new TypeError('Positive integer value expected in function multinomial');\n        }\n        sum = add(sum, ai);\n        denom = multiply(denom, factorial(ai));\n      });\n\n      return divide(factorial(sum), denom);\n    }\n  });\n}\n\nexports.name = 'multinomial';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepForEach\":522,\"../arithmetic/add\":283,\"../arithmetic/divide\":288,\"../arithmetic/multiply\":303,\"../probability/factorial\":370,\"../utils/isInteger\":449,\"../utils/isPositive\":453}],375:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  var factorial = load(require('./factorial'));\n\n  /**\n   * Compute the number of ways of obtaining an ordered subset of `k` elements\n   * from a set of `n` elements.\n   *\n   * Permutations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.permutations(n)\n   *     math.permutations(n, k)\n   *\n   * Examples:\n   *\n   *    math.permutations(5);     // 120\n   *    math.permutations(5, 3);  // 60\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number | BigNumber} n   The number of objects in total\n   * @param {number | BigNumber} [k] The number of objects in the subset\n   * @return {number | BigNumber}    The number of permutations\n   */\n  var permutations = typed('permutations', {\n    'number | BigNumber': factorial,\n\n    'number, number': function (n, k) {\n      var result, i;\n\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k > n) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n\n      // Permute n objects, k at a time\n      result = 1;\n      for (i = n - k + 1; i <= n; i++) {\n        result = result * i;\n      }\n\n      return result;\n    },\n\n    'BigNumber, BigNumber': function (n, k) {\n      var result, i;\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k.gt(n)) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n\n      result = new type.BigNumber(1);\n      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {\n        result = result.times(i);\n      }\n\n      return result;\n    }\n\n    // TODO: implement support for collection in permutations\n  });\n\n  permutations.toTex = undefined; // use default template\n\n  return permutations;\n}\n\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}\n\nexports.name = 'permutations';\nexports.factory = factory;\n\n},{\"../../utils/number\":532,\"./factorial\":370}],376:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var distribution = load(require('./distribution'));\n\n  /**\n   * Random pick one or more values from a one dimensional array.\n   * Array elements are picked using a random function with uniform or weighted distribution.\n   *\n   * Syntax:\n   *\n   *     math.pickRandom(array)\n   *     math.pickRandom(array, number)\n   *     math.pickRandom(array, weights)\n   *     math.pickRandom(array, number, weights)\n   *     math.pickRandom(array, weights, number)\n   *\n   * Examples:\n   *\n   *     math.pickRandom([3, 6, 12, 2]);                  // returns one of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], 2);               // returns an array of two of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1]);    // returns one of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]); // returns an array of two of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2); // returns an array of two of the values in the array with weighted distribution\n   *\n   * See also:\n   *\n   *     random, randomInt\n   *\n   * @param {Array} array     A one dimensional array\n   * @param {Int} number      An int or float\n   * @param {Array} weights   An array of ints or floats\n   * @return {number} One of the elements of the provided input array\n   * @return {array} An array of elements of the provided input array\n   */\n  // TODO: rework pickRandom to a typed-function\n  var pickRandom =  distribution('uniform').pickRandom;\n\n  pickRandom.toTex = undefined; // use default template\n\n  return pickRandom;\n}\n\nexports.name = 'pickRandom';\nexports.factory = factory;\n\n},{\"./distribution\":369}],377:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var distribution = load(require('./distribution'));\n\n  /**\n   * Return a random number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.random()                // generate a random number between 0 and 1\n   *     math.random(max)             // generate a random number between 0 and max\n   *     math.random(min, max)        // generate a random number between min and max\n   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\n   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\n   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\n   *\n   * Examples:\n   *\n   *     math.random();       // returns a random number between 0 and 1\n   *     math.random(100);    // returns a random number between 0 and 100\n   *     math.random(30, 40); // returns a random number between 30 and 40\n   *     math.random([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1\n   *\n   * See also:\n   *\n   *     randomInt, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random number\n   */\n  // TODO: rework random to a typed-function\n  var random = distribution('uniform').random;\n\n  random.toTex = undefined; // use default template\n\n  return random;\n}\n\nexports.name = 'random';\nexports.factory = factory;\n\n},{\"./distribution\":369}],378:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var distribution = load(require('./distribution'));\n\n  /**\n   * Return a random integer number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.randomInt(max)             // generate a random integer between 0 and max\n   *     math.randomInt(min, max)        // generate a random integer between min and max\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n   *\n   * Examples:\n   *\n   *     math.randomInt(100);    // returns a random integer between 0 and 100\n   *     math.randomInt(30, 40); // returns a random integer between 30 and 40\n   *     math.randomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1\n   *\n   * See also:\n   *\n   *     random, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random integer value\n   */\n  // TODO: rework randomInt to a typed-function\n  var randomInt = distribution('uniform').randomInt;\n\n  randomInt.toTex = undefined; // use default template\n\n  return randomInt;\n}\n\nexports.name = 'randomInt';\nexports.factory = factory;\n\n},{\"./distribution\":369}],379:[function(require,module,exports){\n'use strict';\n\nvar seedrandom = require('seed-random');\n\n// create a random seed here to prevent an infinite loop from seed-random\n// inside the factory. Reason is that math.random is defined as a getter/setter\n// and seed-random generates a seed from the local entropy by reading every\n// defined object including `math` itself. That means that whilst getting\n// math.random, it tries to get math.random, etc... an infinite loop.\n// See https://github.com/ForbesLindesay/seed-random/issues/6\nvar singletonRandom = seedrandom();\n\nfunction factory (type, config, load, typed, math) {\n  var random;\n\n  // create a new random generator with given seed\n  function setSeed (seed) {\n    random = seed === null ? singletonRandom : seedrandom(String(seed));\n  }\n\n  // initialize a seeded pseudo random number generator with config's random seed\n  setSeed(config.randomSeed)\n\n  // wrapper function so the rng can be updated via generator\n  function rng() {\n      return random();\n  }\n\n  // updates generator with a new instance of a seeded pseudo random number generator\n  math.on('config', function (curr, prev, changes) {\n    // if the user specified a randomSeed\n    if(changes.randomSeed !== undefined) {\n      // update generator with a new instance of a seeded pseudo random number generator\n      setSeed(curr.randomSeed)\n    }\n  });\n\n  return rng;\n}\n\nexports.factory = factory;\nexports.math = true;\n\n},{\"seed-random\":536}],380:[function(require,module,exports){\n'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * x and y are considered equal when the relative difference between x and y\n   * is smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.compare(x, y)\n   *\n   * Examples:\n   *\n   *    math.compare(6, 1);           // returns 1\n   *    math.compare(2, 3);           // returns -1\n   *    math.compare(7, 7);           // returns 0\n   *\n   *    var a = math.unit('5 cm');\n   *    var b = math.unit('40 mm');\n   *    math.compare(a, b);           // returns 1\n   *\n   *    math.compare(2, [1, 2, 3]);   // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural\n   *\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison: 1, 0 or -1.\n   */\n  var compare = typed('compare', {\n\n    'boolean, boolean': function (x, y) {\n      return x === y ? 0 : (x > y ? 1 : -1);\n    },\n\n    'number, number': function (x, y) {\n      return (x === y || nearlyEqual(x, y, config.epsilon))\n          ? 0\n          : (x > y ? 1 : -1);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return (x.eq(y) || bigNearlyEqual(x, y, config.epsilon))\n          ? new type.BigNumber(0)\n          : new type.BigNumber(x.cmp(y));\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return new type.Fraction(x.compare(y));\n    },\n\n    'Complex, Complex': function () {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return compare(x.value, y.value);\n    },\n\n    'string, string': function (x, y) {\n      return x === y ? 0 : (x > y ? 1 : -1);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm05(x, y, compare);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, compare, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, compare, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, compare);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return compare(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return compare(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return compare(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, compare, false);\n          break;\n        default:\n          c = algorithm14(x, y, compare, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, compare, true);\n          break;\n        default:\n          c = algorithm14(y, x, compare, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, compare, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, compare, true).valueOf();\n    }\n  });\n\n  compare.toTex = undefined; // use default template\n\n  return compare;\n}\n\nexports.name = 'compare';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm03\":487,\"../../type/matrix/utils/algorithm05\":489,\"../../type/matrix/utils/algorithm12\":496,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/bignumber/nearlyEqual\":518,\"../../utils/number\":532}],381:[function(require,module,exports){\n'use strict';\n\nvar naturalSort = require('javascript-natural-sort');\n\nfunction factory (type, config, load, typed) {\n  var getTypeOf = load(require('../utils/typeof'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var compare = load(require('./compare'));\n\n  var compareBooleans = compare.signatures['boolean,boolean']\n\n  /**\n   * Compare two values of any type in a deterministic, natural way.\n   *\n   * For numeric values, the function works the same as `math.compare`.\n   * For types of values that can't be compared mathematically,\n   * the function compares in a natural way.\n   *\n   * For numeric values, x and y are considered equal when the relative\n   * difference between x and y is smaller than the configured epsilon.\n   * The function cannot be used to compare values smaller than\n   * approximately 2.22e-16.\n   *\n   * For Complex numbers, first the real parts are compared. If equal,\n   * the imaginary parts are compared.\n   *\n   * Arrays and Matrices are compared value by value until there is an\n   * unequal pair of values encountered. Objects are compared by sorted\n   * keys until the keys or their values are unequal.\n   *\n   * Syntax:\n   *\n   *    math.compareNatural(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareNatural(6, 1);              // returns 1\n   *    math.compareNatural(2, 3);              // returns -1\n   *    math.compareNatural(7, 7);              // returns 0\n   *\n   *    math.compareNatural('10', '2');         // returns 1\n   *\n   *    var a = math.unit('5 cm');\n   *    var b = math.unit('40 mm');\n   *    math.compareNatural(a, b);              // returns 1\n   *\n   *    var c = math.complex('2 + 3i');\n   *    var d = math.complex('2 + 4i');\n   *    math.compareNatural(c, d);              // returns -1\n   *\n   *    math.compareNatural([1, 2, 4], [1, 2, 3]); // returns 1\n   *    math.compareNatural([1, 2, 3], [1, 2]);    // returns 1\n   *    math.compareNatural([1, 5], [1, 2, 3]);    // returns 1\n   *    math.compareNatural([1, 2], [1, 2]);       // returns 0\n   *\n   *    math.compareNatural({a: 2}, {a: 4});       // returns -1\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compare\n   *\n   * @param  {*} x First value to compare\n   * @param  {*} y Second value to compare\n   * @return {number} Returns the result of the comparison: 1, 0 or -1.\n   */\n  var compareNatural = typed('compareNatural', {\n    'any, any': function (x, y) {\n      var typeX = getTypeOf(x);\n      var typeY = getTypeOf(y);\n      var c;\n\n      // numeric types\n      if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') &&\n          (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {\n        c = compare(x, y);\n        if (c.toString() !== '0') {\n          // c can be number, BigNumber, or Fraction\n          return c > 0 ? 1 : -1; // return a number\n        }\n        else {\n          return naturalSort(typeX, typeY);\n        }\n      }\n\n      // matrix types\n      if (typeX === 'Array' || typeX === 'Matrix' ||\n          typeY === 'Array' || typeY === 'Matrix') {\n        c = compareMatricesAndArrays (x, y);\n        if (c !== 0) {\n          return c;\n        }\n        else {\n          return naturalSort(typeX, typeY);\n        }\n      }\n\n      // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'\n      if (typeX !== typeY) {\n        return naturalSort(typeX, typeY);\n      }\n\n      if (typeX === 'Complex') {\n        return compareComplexNumbers(x, y);\n      }\n\n      if (typeX === 'Unit') {\n        if (x.equalBase(y)) {\n          return compareNatural(x.value, y.value);\n        }\n\n        // compare by units\n        return compareArrays(x.formatUnits(), y.formatUnits());\n      }\n\n      if (typeX === 'boolean') {\n        return compareBooleans(x, y);\n      }\n\n      if (typeX === 'string') {\n        return naturalSort(x, y);\n      }\n\n      if (typeX === 'Object') {\n        return compareObjects(x, y);\n      }\n\n      if (typeX === 'null') {\n        return 0;\n      }\n\n      if (typeX === 'undefined') {\n        return 0;\n      }\n\n      // this should not occur...\n      throw new TypeError('Unsupported type of value \"' + typeX + '\"');\n    }\n  });\n\n  compareNatural.toTex = undefined; // use default template\n\n  /**\n   * Compare mixed matrix/array types, by converting to same-shaped array.\n   * This comparator is non-deterministic regarding input types.\n   * @param {Array | SparseMatrix | DenseMatrix | *} x\n   * @param {Array | SparseMatrix | DenseMatrix | *} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  function compareMatricesAndArrays (x, y) {\n    if (x && x.isSparseMatrix && y && y.isSparseMatrix) {\n      return compareArrays(x.toJSON().values, y.toJSON().values);\n    }\n    if (x && x.isSparseMatrix) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(x.toArray(), y);\n    }\n    if (y && y.isSparseMatrix) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(x, y.toArray());\n    }\n\n    // convert DenseArray into Array\n    if (x && x.isDenseMatrix) {\n      return compareMatricesAndArrays(x.toJSON().data, y);\n    }\n    if (y && y.isDenseMatrix) {\n      return compareMatricesAndArrays(x, y.toJSON().data);\n    }\n\n    // convert scalars to array\n    if (!Array.isArray(x)) {\n      return compareMatricesAndArrays([x], y);\n    }\n    if (!Array.isArray(y)) {\n      return compareMatricesAndArrays(x, [y]);\n    }\n\n    return compareArrays(x, y);\n  }\n\n  /**\n   * Compare two Arrays\n   *\n   * - First, compares value by value\n   * - Next, if all corresponding values are equal,\n   *   look at the length: longest array will be considered largest\n   *\n   * @param {Array} x\n   * @param {Array} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  function compareArrays (x, y) {\n    // compare each value\n    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {\n      var v = compareNatural(x[i], y[i]);\n      if (v !== 0) {\n        return v;\n      }\n    }\n\n    // compare the size of the arrays\n    if (x.length > y.length) { return 1; }\n    if (x.length < y.length) { return -1; }\n\n    // both Arrays have equal size and content\n    return 0;\n  }\n\n  /**\n   * Compare two objects\n   *\n   * - First, compare sorted property names\n   * - Next, compare the property values\n   *\n   * @param {Object} x\n   * @param {Object} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  function compareObjects (x, y) {\n    var keysX = Object.keys(x);\n    var keysY = Object.keys(y);\n\n    // compare keys\n    keysX.sort(naturalSort)\n    keysY.sort(naturalSort)\n    var c = compareArrays(keysX, keysY);\n    if (c !== 0) {\n      return c;\n    }\n\n    // compare values\n    for (var i = 0; i < keysX.length; i++) {\n      var v = compareNatural(x[keysX[i]], y[keysY[i]]);\n      if (v !== 0) {\n        return v;\n      }\n    }\n\n    return 0;\n  }\n\n  return compareNatural;\n}\n\n/**\n * Compare two complex numbers, `x` and `y`:\n *\n * - First, compare the real values of `x` and `y`\n * - If equal, compare the imaginary values of `x` and `y`\n * \n * @params {Complex} x\n * @params {Complex} y\n * @returns {number} Returns the comparison result: -1, 0, or 1\n */\nfunction compareComplexNumbers (x, y) {\n  if (x.re > y.re) { return 1; }\n  if (x.re < y.re) { return -1; }\n\n  if (x.im > y.im) { return 1; }\n  if (x.im < y.im) { return -1; }\n\n  return 0;\n}\n\nexports.name = 'compareNatural';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../utils/typeof\":456,\"./compare\":380,\"javascript-natural-sort\":4}],382:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var equal = load(require('./equal'));\n\n  /**\n   * Test element wise whether two matrices are equal.\n   * The function accepts both matrices and scalar values.\n   *\n   * Syntax:\n   *\n   *    math.deepEqual(x, y)\n   *\n   * Examples:\n   *\n   *    math.deepEqual(2, 4);   // returns false\n   *\n   *    a = [2, 5, 1];\n   *    b = [2, 7, 1];\n   *\n   *    math.deepEqual(a, b);   // returns false\n   *    math.equal(a, b);       // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    equal, unequal\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns true when the input matrices have the same size and each of their elements is equal.\n   */\n  var deepEqual = typed('deepEqual', {\n    'any, any': function (x, y) {\n      return _deepEqual(x.valueOf(), y.valueOf());\n    }\n  });\n\n  deepEqual.toTex = undefined; // use default template\n\n  return deepEqual;\n\n  /**\n   * Test whether two arrays have the same size and all elements are equal\n   * @param {Array | *} x\n   * @param {Array | *} y\n   * @return {boolean} Returns true if both arrays are deep equal\n   */\n  function _deepEqual(x, y) {\n    if (Array.isArray(x)) {\n      if (Array.isArray(y)) {\n        var len = x.length;\n        if (len !== y.length) {\n          return false;\n        }\n\n        for (var i = 0; i < len; i++) {\n          if (!_deepEqual(x[i], y[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n    else {\n      if (Array.isArray(y)) {\n        return false;\n      }\n      else {\n        return equal(x, y);\n      }\n    }\n  }\n}\n\nexports.name = 'deepEqual';\nexports.factory = factory;\n\n},{\"./equal\":383}],383:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  \n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('./equalScalar'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n\n  /**\n   * Test whether two values are equal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is only\n   * equal to `null` and nothing else, and `undefined` is only equal to\n   * `undefined` and nothing else.\n   *\n   * Syntax:\n   *\n   *    math.equal(x, y)\n   *\n   * Examples:\n   *\n   *    math.equal(2 + 2, 3);         // returns false\n   *    math.equal(2 + 2, 4);         // returns true\n   *\n   *    var a = math.unit('50 cm');\n   *    var b = math.unit('5 m');\n   *    math.equal(a, b);             // returns true\n   *\n   *    var c = [2, 5, 1];\n   *    var d = [2, 7, 1];\n   *\n   *    math.equal(c, d);             // returns [true, false, true]\n   *    math.deepEqual(c, d);         // returns false\n   *\n   *    math.equal(0, null);          // returns false\n   *\n   * See also:\n   *\n   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual\n   *\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false\n   */\n  var equal = typed('equal', {\n    \n    'any, any': function (x, y) {\n      // strict equality for null and undefined?\n      if (x === null) { return y === null; }\n      if (y === null) { return x === null; }\n      if (x === undefined) { return y === undefined; }\n      if (y === undefined) { return x === undefined; }\n\n      return equalScalar(x, y);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, equalScalar);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, equalScalar, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, equalScalar, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, equalScalar);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n    \n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return equal(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return equal(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return equal(x, matrix(y));\n    },\n    \n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, equalScalar, false);\n          break;\n        default:\n          c = algorithm14(x, y, equalScalar, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, equalScalar, true);\n          break;\n        default:\n          c = algorithm14(y, x, equalScalar, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, equalScalar, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, equalScalar, true).valueOf();\n    }\n  });\n\n  equal.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['equal'] + '${args[1]}\\\\right)'\n  };\n\n  return equal;\n}\n\nexports.name = 'equal';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm03\":487,\"../../type/matrix/utils/algorithm07\":491,\"../../type/matrix/utils/algorithm12\":496,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/latex\":531,\"./equalScalar\":384}],384:[function(require,module,exports){\n'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory (type, config, load, typed) {\n  \n  /**\n   * Test whether two values are equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  var equalScalar = typed('equalScalar', {\n\n    'boolean, boolean': function (x, y) {\n      return x === y;\n    },\n\n    'number, number': function (x, y) {\n      return x === y || nearlyEqual(x, y, config.epsilon);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.equals(y);\n    },\n\n    'Complex, Complex': function (x, y) {\n      return x.equals(y);\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return equalScalar(x.value, y.value);\n    },\n\n    'string, string': function (x, y) {\n      return x === y;\n    }\n  });\n  \n  return equalScalar;\n}\n\nexports.factory = factory;\n\n},{\"../../utils/bignumber/nearlyEqual\":518,\"../../utils/number\":532}],385:[function(require,module,exports){\nmodule.exports = [\n  require('./compare'),\n  require('./compareNatural'),\n  require('./deepEqual'),\n  require('./equal'),\n  require('./larger'),\n  require('./largerEq'),\n  require('./smaller'),\n  require('./smallerEq'),\n  require('./unequal')\n];\n\n},{\"./compare\":380,\"./compareNatural\":381,\"./deepEqual\":382,\"./equal\":383,\"./larger\":386,\"./largerEq\":387,\"./smaller\":388,\"./smallerEq\":389,\"./unequal\":390}],386:[function(require,module,exports){\n'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory (type, config, load, typed) {\n  \n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n\n  /**\n   * Test whether value x is larger than y.\n   *\n   * The function returns true when x is larger than y and the relative\n   * difference between x and y is larger than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.larger(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 3);             // returns false\n   *    math.larger(5, 2 + 2);         // returns true\n   *\n   *    var a = math.unit('5 cm');\n   *    var b = math.unit('2 inch');\n   *    math.larger(a, b);             // returns false\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false\n   */\n  var larger = typed('larger', {\n\n    'boolean, boolean': function (x, y) {\n      return x > y;\n    },\n\n    'number, number': function (x, y) {\n      return x > y && !nearlyEqual(x, y, config.epsilon);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.compare(y) === 1;\n    },\n\n    'Complex, Complex': function () {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return larger(x.value, y.value);\n    },\n\n    'string, string': function (x, y) {\n      return x > y;\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, larger);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, larger, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, larger, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, larger);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return larger(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return larger(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return larger(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, larger, false);\n          break;\n        default:\n          c = algorithm14(x, y, larger, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, larger, true);\n          break;\n        default:\n          c = algorithm14(y, x, larger, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, larger, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, larger, true).valueOf();\n    }\n  });\n\n  larger.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['larger'] + '${args[1]}\\\\right)'\n  };\n\n  return larger;\n}\n\nexports.name = 'larger';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm03\":487,\"../../type/matrix/utils/algorithm07\":491,\"../../type/matrix/utils/algorithm12\":496,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/bignumber/nearlyEqual\":518,\"../../utils/latex\":531,\"../../utils/number\":532}],387:[function(require,module,exports){\n'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory (type, config, load, typed) {\n  \n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n\n  /**\n   * Test whether value x is larger or equal to y.\n   *\n   * The function returns true when x is larger than y or the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.largerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 1 + 1);         // returns false\n   *    math.largerEq(2, 1 + 1);       // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false\n   */\n  var largerEq = typed('largerEq', {\n\n    'boolean, boolean': function (x, y) {\n      return x >= y;\n    },\n\n    'number, number': function (x, y) {\n      return x >= y || nearlyEqual(x, y, config.epsilon);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.compare(y) !== -1;\n    },\n\n    'Complex, Complex': function () {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return largerEq(x.value, y.value);\n    },\n\n    'string, string': function (x, y) {\n      return x >= y;\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, largerEq);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, largerEq, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, largerEq, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, largerEq);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return largerEq(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return largerEq(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return largerEq(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, largerEq, false);\n          break;\n        default:\n          c = algorithm14(x, y, largerEq, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, largerEq, true);\n          break;\n        default:\n          c = algorithm14(y, x, largerEq, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, largerEq, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, largerEq, true).valueOf();\n    }\n  });\n\n  largerEq.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['largerEq'] + '${args[1]}\\\\right)'\n  };\n\n  return largerEq;\n}\n\nexports.name = 'largerEq';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm03\":487,\"../../type/matrix/utils/algorithm07\":491,\"../../type/matrix/utils/algorithm12\":496,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/bignumber/nearlyEqual\":518,\"../../utils/latex\":531,\"../../utils/number\":532}],388:[function(require,module,exports){\n'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3);            // returns true\n   *    math.smaller(5, 2 * 2);        // returns false\n   *\n   *    var a = math.unit('5 cm');\n   *    var b = math.unit('2 inch');\n   *    math.smaller(a, b);            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n  var smaller = typed('smaller', {\n\n    'boolean, boolean': function (x, y) {\n      return x < y;\n    },\n\n    'number, number': function (x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.compare(y) === -1;\n    },\n\n    'Complex, Complex': function (x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return smaller(x.value, y.value);\n    },\n\n    'string, string': function (x, y) {\n      return x < y;\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, smaller);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, smaller, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, smaller, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, smaller);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return smaller(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, smaller, false);\n          break;\n        default:\n          c = algorithm14(x, y, smaller, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, smaller, true);\n          break;\n        default:\n          c = algorithm14(y, x, smaller, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, smaller, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, smaller, true).valueOf();\n    }\n  });\n\n  smaller.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['smaller'] + '${args[1]}\\\\right)'\n  };\n\n  return smaller;\n}\n\nexports.name = 'smaller';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm03\":487,\"../../type/matrix/utils/algorithm07\":491,\"../../type/matrix/utils/algorithm12\":496,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/bignumber/nearlyEqual\":518,\"../../utils/latex\":531,\"../../utils/number\":532}],389:[function(require,module,exports){\n'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n\n  /**\n   * Test whether value x is smaller or equal to y.\n   *\n   * The function returns true when x is smaller than y or the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.smallerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(1 + 2, 3);        // returns false\n   *    math.smallerEq(1 + 2, 3);      // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n  var smallerEq = typed('smallerEq', {\n\n    'boolean, boolean': function (x, y) {\n      return x <= y;\n    },\n\n    'number, number': function (x, y) {\n      return x <= y || nearlyEqual(x, y, config.epsilon);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.lte(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.compare(y) !== 1;\n    },\n\n    'Complex, Complex': function () {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return smallerEq(x.value, y.value);\n    },\n\n    'string, string': function (x, y) {\n      return x <= y;\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, smallerEq);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, smallerEq, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, smallerEq, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, smallerEq);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return smallerEq(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return smallerEq(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return smallerEq(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, smallerEq, false);\n          break;\n        default:\n          c = algorithm14(x, y, smallerEq, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, smallerEq, true);\n          break;\n        default:\n          c = algorithm14(y, x, smallerEq, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, smallerEq, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, smallerEq, true).valueOf();\n    }\n  });\n\n  smallerEq.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['smallerEq'] + '${args[1]}\\\\right)'\n  };\n\n  return smallerEq;\n}\n\nexports.name = 'smallerEq';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm03\":487,\"../../type/matrix/utils/algorithm07\":491,\"../../type/matrix/utils/algorithm12\":496,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/bignumber/nearlyEqual\":518,\"../../utils/latex\":531,\"../../utils/number\":532}],390:[function(require,module,exports){\n'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n\n  /**\n   * Test whether two values are unequal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * larger than the configured epsilon. The function cannot be used to compare\n   * values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\n   * with everything except `null`, and `undefined` is unequal with everying\n   * except. `undefined`.\n   *\n   * Syntax:\n   *\n   *    math.unequal(x, y)\n   *\n   * Examples:\n   *\n   *    math.unequal(2 + 2, 3);       // returns true\n   *    math.unequal(2 + 2, 4);       // returns false\n   *\n   *    var a = math.unit('50 cm');\n   *    var b = math.unit('5 m');\n   *    math.unequal(a, b);           // returns false\n   *\n   *    var c = [2, 5, 1];\n   *    var d = [2, 7, 1];\n   *\n   *    math.unequal(c, d);           // returns [false, true, false]\n   *    math.deepEqual(c, d);         // returns false\n   *\n   *    math.unequal(0, null);        // returns true\n   * See also:\n   *\n   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false\n   */\n  var unequal = typed('unequal', {\n    \n    'any, any': function (x, y) {\n      // strict equality for null and undefined?\n      if (x === null) { return y !== null; }\n      if (y === null) { return x !== null; }\n      if (x === undefined) { return y !== undefined; }\n      if (y === undefined) { return x !== undefined; }\n\n      return _unequal(x, y);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, _unequal);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, _unequal, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, _unequal, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, _unequal);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return unequal(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return unequal(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return unequal(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, _unequal, false);\n          break;\n        default:\n          c = algorithm14(x, y, _unequal, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, _unequal, true);\n          break;\n        default:\n          c = algorithm14(y, x, _unequal, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, _unequal, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, _unequal, true).valueOf();\n    }\n  });\n\n  var _unequal = typed('_unequal', {\n\n    'boolean, boolean': function (x, y) {\n      return x !== y;\n    },\n\n    'number, number': function (x, y) {\n      return !nearlyEqual(x, y, config.epsilon);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return !bigNearlyEqual(x, y, config.epsilon);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return !x.equals(y);\n    },\n\n    'Complex, Complex': function (x, y) {\n      return !x.equals(y);\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return unequal(x.value, y.value);\n    },\n\n    'string, string': function (x, y) {\n      return x !== y;\n    }\n  });\n\n  unequal.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['unequal'] + '${args[1]}\\\\right)'\n  };\n\n  return unequal;\n}\n\nexports.name = 'unequal';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm03\":487,\"../../type/matrix/utils/algorithm07\":491,\"../../type/matrix/utils/algorithm12\":496,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/bignumber/nearlyEqual\":518,\"../../utils/latex\":531,\"../../utils/number\":532}],391:[function(require,module,exports){\nmodule.exports = [\n  require('./setCartesian'),\n  require('./setDifference'),\n  require('./setDistinct'),\n  require('./setIntersect'),\n  require('./setIsSubset'),\n  require('./setMultiplicity'),\n  require('./setPowerset'),\n  require('./setSize'),\n  require('./setSymDifference'),\n  require('./setUnion')\n];\n\n},{\"./setCartesian\":392,\"./setDifference\":393,\"./setDistinct\":394,\"./setIntersect\":395,\"./setIsSubset\":396,\"./setMultiplicity\":397,\"./setPowerset\":398,\"./setSize\":399,\"./setSymDifference\":400,\"./setUnion\":401}],392:[function(require,module,exports){\n'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var matrix = load(require('../../type/matrix/DenseMatrix'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  var compareNatural = load(require('../relational/compareNatural'));\n  \n  /**\n   * Create the cartesian product of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setCartesian(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setCartesian([1, 2], [3, 4]);        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference, setPowerset\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The cartesian product of two (multi)sets\n   */\n  var setCartesian = typed('setCartesian', {\n    'Array | Matrix, Array | Matrix': function (a1, a2) {\n      if (subset(size(a1), new index(0)) === 0 || subset(size(a2), new index(0)) === 0) { // if any of them is empty, return empty\n        var result = [];\n      }\n      else {\n        var b1 = flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);\n        var b2 = flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);\n        var result = [];\n        for (var i=0; i<b1.length; i++) {\n          for (var j=0; j<b2.length; j++) {\n            result.push([b1[i], b2[j]]);\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return result;\n      }\n      // return a matrix otherwise\n      return new matrix(result);\n    }\n  });\n\n  return setCartesian;\n}\n\nexports.name = 'setCartesian';\nexports.factory = factory;\n\n},{\"../../type/matrix/DenseMatrix\":473,\"../../type/matrix/MatrixIndex\":477,\"../../utils/array\":509,\"../matrix/size\":361,\"../matrix/subset\":364,\"../relational/compareNatural\":381}],393:[function(require,module,exports){\n'use strict';\n\nvar flatten = require('../../utils/array').flatten;\nvar identify = require('../../utils/array').identify;\nvar generalize = require('../../utils/array').generalize;\n\nfunction factory (type, config, load, typed) {\n  var equal = load(require('../relational/equal'));\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var matrix = load(require('../../type/matrix/DenseMatrix'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  var compareNatural = load(require('../relational/compareNatural'));\n  \n  /**\n   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6]);            // returns [1, 2]\n   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]]);    // returns [1, 2]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setSymDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The difference of two (multi)sets\n   */\n  var setDifference = typed('setDifference', {\n    'Array | Matrix, Array | Matrix': function (a1, a2) {\n      if (subset(size(a1), new index(0)) === 0) { // empty-anything=empty\n        var result = [];\n      }\n      else if (subset(size(a2), new index(0)) === 0) { // anything-empty=anything\n        return flatten(a1.toArray());\n      }\n      else {\n        var b1 = identify(flatten(Array.isArray(a1) ? a1: a1.toArray()).sort(compareNatural));\n        var b2 = identify(flatten(Array.isArray(a2) ? a2: a2.toArray()).sort(compareNatural));\n        var result = [];\n        var inb2;\n        for (var i=0; i<b1.length; i++) {\n          inb2 = false;\n          for (var j=0; j<b2.length; j++) {\n            if (equal(b1[i].value, b2[j].value) && b1[i].identifier === b2[j].identifier) { // the identifier is always a decimal int\n              inb2 = true;\n              break;\n            }\n          }\n          if (!inb2) {\n            result.push(b1[i]);\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return generalize(result);\n      }\n      // return a matrix otherwise\n      return new matrix(generalize(result));\n    }\n  });\n\n  return setDifference;\n}\n\nexports.name = 'setDifference';\nexports.factory = factory;\n\n},{\"../../type/matrix/DenseMatrix\":473,\"../../type/matrix/MatrixIndex\":477,\"../../utils/array\":509,\"../matrix/size\":361,\"../matrix/subset\":364,\"../relational/compareNatural\":381,\"../relational/equal\":383}],394:[function(require,module,exports){\n'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var equal = load(require('../relational/equal'));\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var matrix = load(require('../../type/matrix/DenseMatrix'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  var compareNatural = load(require('../relational/compareNatural'));\n  \n  /**\n   * Collect the distinct elements of a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDistinct(set)\n   *\n   * Examples:\n   *\n   *    math.setDistinct([1, 1, 1, 2, 2, 3]);        // returns [1, 2, 3]\n   *\n   * See also:\n   *\n   *    setMultiplicity\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {Array | Matrix}    A set containing the distinc elements of the multiset\n   */\n  var setDistinct = typed('setDistinct', {\n    'Array | Matrix': function (a) {\n      if (subset(size(a), new index(0)) === 0) { // if empty, return empty\n        var result = [];\n      }\n      else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        var result = [];\n        result.push(b[0]);\n        for (var i=1; i<b.length; i++) {\n          if (!equal(b[i], b[i-1])) {\n            result.push(b[i]);\n          }\n        }\n      }\n      // return an array, if the input was an array\n      if (Array.isArray(a)) {\n        return result;\n      }\n      // return a matrix otherwise\n      return new matrix(result);\n    }\n  });\n\n  return setDistinct;\n}\n\nexports.name = 'setDistinct';\nexports.factory = factory;\n\n},{\"../../type/matrix/DenseMatrix\":473,\"../../type/matrix/MatrixIndex\":477,\"../../utils/array\":509,\"../matrix/size\":361,\"../matrix/subset\":364,\"../relational/compareNatural\":381,\"../relational/equal\":383}],395:[function(require,module,exports){\n'use strict';\n\nvar flatten = require('../../utils/array').flatten;\nvar identify = require('../../utils/array').identify;\nvar generalize = require('../../utils/array').generalize;\n\nfunction factory (type, config, load, typed) {\n  var equal = load(require('../relational/equal'));\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var matrix = load(require('../../type/matrix/DenseMatrix'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  var compareNatural = load(require('../relational/compareNatural'));\n  \n  /**\n   * Create the intersection of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIntersect(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6]);            // returns [3, 4]\n   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]]);    // returns [3, 4]\n   *\n   * See also:\n   *\n   *    setUnion, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The intersection of two (multi)sets\n   */\n  var setIntersect = typed('setIntersect', {\n    'Array | Matrix, Array | Matrix': function (a1, a2) {\n      if (subset(size(a1), new index(0)) === 0 || subset(size(a2), new index(0)) === 0) { // of any of them is empty, return empty\n        var result = [];\n      }\n      else {\n        var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        var result = [];\n        for (var i=0; i<b1.length; i++) {\n          for (var j=0; j<b2.length; j++) {\n              if (equal(b1[i].value, b2[j].value) && b1[i].identifier === b2[j].identifier) { // the identifier is always a decimal int\n                result.push(b1[i]);\n                break;\n              }\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return generalize(result);\n      }\n      // return a matrix otherwise\n      return new matrix(generalize(result));\n    }\n  });\n\n  return setIntersect;\n}\n\nexports.name = 'setIntersect';\nexports.factory = factory;\n\n},{\"../../type/matrix/DenseMatrix\":473,\"../../type/matrix/MatrixIndex\":477,\"../../utils/array\":509,\"../matrix/size\":361,\"../matrix/subset\":364,\"../relational/compareNatural\":381,\"../relational/equal\":383}],396:[function(require,module,exports){\n'use strict';\n\nvar flatten = require('../../utils/array').flatten;\nvar identify = require('../../utils/array').identify;\n\nfunction factory (type, config, load, typed) {\n  var equal = load(require('../relational/equal'));\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  var compareNatural = load(require('../relational/compareNatural'));\n  \n  /**\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIsSubset(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6]);        // returns false\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6]);        // returns true\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {boolean}            true | false\n   */\n  var setIsSubset = typed('setIsSubset', {\n    'Array | Matrix, Array | Matrix': function (a1, a2) {\n      if (subset(size(a1), new index(0)) === 0) { // empty is a subset of anything\n        return true;\n      }\n      else if (subset(size(a2), new index(0)) === 0) { // anything is not a subset of empty\n        return false;\n      }\n      var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n      var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n      var inb2;\n      for (var i=0; i<b1.length; i++) {\n        inb2 = false;\n        for (var j=0; j<b2.length; j++) {\n          if (equal(b1[i].value, b2[j].value) && b1[i].identifier === b2[j].identifier) { // the identifier is always a decimal int\n            inb2 = true;\n            break;\n          }\n        }\n        if (inb2 === false) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n\n  return setIsSubset;\n}\n\nexports.name = 'setIsSubset';\nexports.factory = factory;\n\n},{\"../../type/matrix/MatrixIndex\":477,\"../../utils/array\":509,\"../matrix/size\":361,\"../matrix/subset\":364,\"../relational/compareNatural\":381,\"../relational/equal\":383}],397:[function(require,module,exports){\n'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var equal = load(require('../relational/equal'));\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  \n  /**\n   * Count the multiplicity of an element in a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setMultiplicity(element, set)\n   *\n   * Examples:\n   *\n   *    math.setMultiplicity(1, [1, 2, 2, 4]);    // returns 1\n   *    math.setMultiplicity(2, [1, 2, 2, 4]);    // returns 2\n   *\n   * See also:\n   *\n   *    setDistinct, setSize\n   *\n   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset\n   * @param {Array | Matrix}     a  A multiset\n   * @return {number}            The number of how many times the multiset contains the element\n   */\n  var setMultiplicity = typed('setMultiplicity', {\n    'number | BigNumber | Fraction | Complex, Array | Matrix': function (e, a) {\n      if (subset(size(a), new index(0)) === 0) { // if empty, return 0\n        return 0;\n      }\n      var b = flatten(Array.isArray(a) ? a : a.toArray());\n      var count = 0;\n      for (var i=0; i<b.length; i++) {\n        if (equal(b[i], e)) {\n          count++;\n        }\n      }\n      return count;\n    }\n  });\n\n  return setMultiplicity;\n}\n\nexports.name = 'setMultiplicity';\nexports.factory = factory;\n\n},{\"../../type/matrix/MatrixIndex\":477,\"../../utils/array\":509,\"../matrix/size\":361,\"../matrix/subset\":364,\"../relational/equal\":383}],398:[function(require,module,exports){\n'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  var compareNatural = load(require('../relational/compareNatural'));\n  \n  /**\n   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setPowerset(set)\n   *\n   * Examples:\n   *\n   *    math.setPowerset([1, 2, 3]);        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n   *\n   * See also:\n   *\n   *    setCartesian\n   *\n   * @param {Array | Matrix}    a  A (multi)set\n   * @return {Array}    The powerset of the (multi)set\n   */\n  var setPowerset = typed('setPowerset', {\n    'Array | Matrix': function (a) {\n      if (subset(size(a), new index(0)) === 0) { // if empty, return empty\n        return [];\n      }\n      var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n      var result = [];\n      var number = 0;\n      while (number.toString(2).length <= b.length) {\n        result.push(_subset(b, number.toString(2).split(\"\").reverse()));\n        number++;\n      }\n      // can not return a matrix, because of the different size of the subarrays\n      return _sort(result);\n    }\n  });\n\n  return setPowerset;\n  \n  // create subset\n  function _subset(array, bitarray) {\n    var result = [];\n    for (var i=0; i<bitarray.length; i++) {\n      if (bitarray[i] === \"1\") {\n        result.push(array[i]);\n      }\n    }\n    return result;\n  }\n  \n  // sort subsests by length\n  function _sort(array) {\n    var temp = [];\n    for (var i=array.length-1; i>0; i--) {\n      for (var j=0; j<i; j++) {\n        if (array[j].length > array[j+1].length) {\n          temp = array[j];\n          array[j] = array[j+1];\n          array[j+1] = temp;\n        }\n      }\n    }\n    return array;\n  }\n}\n\nexports.name = 'setPowerset';\nexports.factory = factory;\n\n},{\"../../type/matrix/MatrixIndex\":477,\"../../utils/array\":509,\"../matrix/size\":361,\"../matrix/subset\":364,\"../relational/compareNatural\":381}],399:[function(require,module,exports){\n'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var equal = load(require('../relational/equal'));\n  var compareNatural = load(require('../relational/compareNatural'));\n  \n  /**\n   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSize(set)\n   *    math.setSize(set, unique)\n   *\n   * Examples:\n   *\n   *    math.setSize([1, 2, 2, 4]);          // returns 4\n   *    math.setSize([1, 2, 2, 4], true);    // returns 3\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {number}            The number of elements of the (multi)set\n   */\n  var setSize = typed('setSize', {\n    'Array | Matrix': function (a) {\n      return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n    },\n    'Array | Matrix, boolean': function (a, unique) {\n      if (unique === false || a.length === 0) {\n        return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n      }\n      else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        var count = 1;\n        for (var i=1; i<b.length; i++) {\n          if (!equal(b[i], b[i-1])) {\n            count++;\n          }\n        }\n        return count;\n      }\n    }\n  });\n\n  return setSize;\n}\n\nexports.name = 'setSize';\nexports.factory = factory;\n\n},{\"../../utils/array\":509,\"../relational/compareNatural\":381,\"../relational/equal\":383}],400:[function(require,module,exports){\n'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var concat = load(require('../matrix/concat'));\n  var size = load(require('../matrix/size'));\n  var sort = load(require('../matrix/sort'));\n  var subset = load(require('../matrix/subset'));\n  var setDifference = load(require('../set/setDifference'));\n  \n  /**\n   * Create the symmetric difference of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSymDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6]);            // returns [1, 2, 5, 6]\n   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]]);    // returns [1, 2, 5, 6]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The symmetric difference of two (multi)sets\n   */\n  var setSymDifference = typed('setSymDifference', {\n    'Array | Matrix, Array | Matrix': function (a1, a2) {\n      if (subset(size(a1), new index(0)) === 0) { // if any of them is empty, return the other one\n        return flatten(a2);\n      }\n      else if (subset(size(a2), new index(0)) === 0) {\n        return flatten(a1);\n      }\n      var b1 = flatten(a1);\n      var b2 = flatten(a2);\n      return concat(setDifference(b1, b2), setDifference(b2, b1));\n    }\n  });\n\n  return setSymDifference;\n}\n\nexports.name = 'setSymDifference';\nexports.factory = factory;\n\n},{\"../../type/matrix/MatrixIndex\":477,\"../../utils/array\":509,\"../matrix/concat\":343,\"../matrix/size\":361,\"../matrix/sort\":362,\"../matrix/subset\":364,\"../set/setDifference\":393}],401:[function(require,module,exports){\n'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var concat = load(require('../matrix/concat'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  var setIntersect = load(require('../set/setIntersect'));\n  var setSymDifference = load(require('../set/setSymDifference'));\n  \n  /**\n   * Create the union of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setUnion(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6]);            // returns [1, 2, 3, 4, 5, 6]\n   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]]);    // returns [1, 2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *    setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The union of two (multi)sets\n   */\n  var setUnion = typed('setUnion', {\n    'Array | Matrix, Array | Matrix': function (a1, a2) {\n      if (subset(size(a1), new index(0)) === 0) { // if any of them is empty, return the other one\n        return flatten(a2);\n      }\n      else if (subset(size(a2), new index(0)) === 0) {\n        return flatten(a1);\n      }\n      var b1 = flatten(a1);\n      var b2 = flatten(a2);\n      return concat(setSymDifference(b1, b2), setIntersect(b1, b2));\n    }\n  });\n\n  return setUnion;\n}\n\nexports.name = 'setUnion';\nexports.factory = factory;\n\n},{\"../../type/matrix/MatrixIndex\":477,\"../../utils/array\":509,\"../matrix/concat\":343,\"../matrix/size\":361,\"../matrix/subset\":364,\"../set/setIntersect\":395,\"../set/setSymDifference\":400}],402:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar sign = require('../../utils/number').sign;\n\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Compute the erf function of a value using a rational Chebyshev\n   * approximations for different intervals of x.\n   *\n   * This is a translation of W. J. Cody's Fortran implementation from 1987\n   * ( http://www.netlib.org/specfun/erf ). See the AMS publication\n   * \"Rational Chebyshev Approximations for the Error Function\" by W. J. Cody\n   * for an explanation of this process.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.erf(x)\n   *\n   * Examples:\n   *\n   *    math.erf(0.2);    // returns 0.22270258921047847\n   *    math.erf(-0.5);   // returns -0.5204998778130465\n   *    math.erf(4);      // returns 0.9999999845827421\n   *\n   * @param {number | Array | Matrix} x   A real number\n   * @return {number | Array | Matrix}    The erf of `x`\n   */\n  var erf = typed('erf', {\n    'number': function (x) {\n      var y = Math.abs(x);\n\n      if (y >= MAX_NUM) {\n        return sign(x);\n      }\n      if (y <= THRESH) {\n        return sign(x) * erf1(y);\n      }\n      if (y <= 4.0) {\n        return sign(x) * (1 - erfc2(y));\n      }\n      return sign(x) * (1 - erfc3(y));\n    },\n\n    // TODO: Not sure if there's a way to guarantee some degree of accuracy here.\n    //  Perhaps it would be best to set the precision of the number to that which\n    //  is guaranteed by erf()\n    'BigNumber': function (n) {\n      return new type.BigNumber(erf(n.toNumber()));\n    },\n\n    'Array | Matrix': function (n) {\n      return deepMap(n, erf);\n    }\n\n    // TODO: For complex numbers, use the approximation for the Faddeeva function\n    //  from \"More Efficient Computation of the Complex Error Function\" (AMS)\n\n  });\n\n  /**\n   * Approximates the error function erf() for x <= 0.46875 using this function:\n   *               n\n   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))\n   *              j=0\n   */\n  function erf1(y) {\n    var ysq = y * y;\n    var xnum = P[0][4]*ysq;\n    var xden = ysq;\n    var i;\n\n    for (i = 0; i < 3; i += 1) {\n      xnum = (xnum + P[0][i]) * ysq;\n      xden = (xden + Q[0][i]) * ysq;\n    }\n    return y * (xnum + P[0][3]) / (xden + Q[0][3]);\n  }\n\n  /**\n   * Approximates the complement of the error function erfc() for\n   * 0.46875 <= x <= 4.0 using this function:\n   *                       n\n   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)\n   *                      j=0\n   */\n  function erfc2(y) {\n    var xnum = P[1][8] * y;\n    var xden = y;\n    var i;\n\n    for (i = 0; i < 7; i += 1) {\n      xnum = (xnum + P[1][i]) * y;\n      xden = (xden + Q[1][i]) * y;\n    }\n    var result = (xnum + P[1][7]) / (xden + Q[1][7]);\n    var ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq*ysq) * Math.exp(-del) * result;\n  }\n\n  /**\n   * Approximates the complement of the error function erfc() for x > 4.0 using\n   * this function:\n   *\n   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +\n   *               n\n   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]\n   *              j=0\n   */\n  function erfc3(y) {\n    var ysq = 1 / (y * y);\n    var xnum = P[2][5] * ysq;\n    var xden = ysq;\n    var i;\n\n    for (i = 0; i < 4; i += 1) {\n      xnum = (xnum + P[2][i]) * ysq;\n      xden = (xden + Q[2][i]) * ysq;\n    }\n    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);\n    result = (SQRPI - result) / y;\n    ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq*ysq) * Math.exp(-del) * result;\n  }\n\n  erf.toTex = {1: 'erf\\\\left(${args[0]}\\\\right)'};\n\n  return erf;\n}\n\n/**\n * Upper bound for the first approximation interval, 0 <= x <= THRESH\n * @constant\n */\nvar THRESH = 0.46875;\n\n/**\n * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)\n * @constant\n */\nvar SQRPI = 5.6418958354775628695e-1;\n\n/**\n * Coefficients for each term of the numerator sum (p_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\nvar P = [[\n  3.16112374387056560e00, 1.13864154151050156e02,\n  3.77485237685302021e02, 3.20937758913846947e03,\n  1.85777706184603153e-1\n], [\n  5.64188496988670089e-1, 8.88314979438837594e00,\n  6.61191906371416295e01, 2.98635138197400131e02,\n  8.81952221241769090e02, 1.71204761263407058e03,\n  2.05107837782607147e03, 1.23033935479799725e03,\n  2.15311535474403846e-8\n], [\n  3.05326634961232344e-1, 3.60344899949804439e-1,\n  1.25781726111229246e-1, 1.60837851487422766e-2,\n  6.58749161529837803e-4, 1.63153871373020978e-2\n]];\n\n/**\n * Coefficients for each term of the denominator sum (q_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\nvar Q = [[\n  2.36012909523441209e01, 2.44024637934444173e02,\n  1.28261652607737228e03, 2.84423683343917062e03\n], [\n  1.57449261107098347e01, 1.17693950891312499e02,\n  5.37181101862009858e02, 1.62138957456669019e03,\n  3.29079923573345963e03, 4.36261909014324716e03,\n  3.43936767414372164e03, 1.23033935480374942e03\n], [\n  2.56852019228982242e00, 1.87295284992346047e00,\n  5.27905102951428412e-1, 6.05183413124413191e-2,\n  2.33520497626869185e-3\n]];\n\n/**\n * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is\n * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will\n * return 1\n */\nvar MAX_NUM = Math.pow(2, 53);\n\n\nexports.name = 'erf';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523,\"../../utils/number\":532}],403:[function(require,module,exports){\nmodule.exports = [\n  require('./erf')\n];\n\n},{\"./erf\":402}],404:[function(require,module,exports){\nmodule.exports = [\n  require('./mad'),\n  require('./max'),\n  require('./mean'),\n  require('./median'),\n  require('./min'),\n  require('./mode'),\n  require('./prod'),\n  require('./quantileSeq'),\n  require('./std'),\n  require('./sum'),\n  require('./var')\n];\n\n},{\"./mad\":405,\"./max\":406,\"./mean\":407,\"./median\":408,\"./min\":409,\"./mode\":410,\"./prod\":411,\"./quantileSeq\":412,\"./std\":413,\"./sum\":414,\"./var\":415}],405:[function(require,module,exports){\n'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var abs      = load(require('../arithmetic/abs'));\n  var map      = load(require('../matrix/map'));\n  var median   = load(require('../statistics/median'));\n  var subtract = load(require('../arithmetic/subtract'));\n\n  /**\n   * Compute the median absolute deviation of a matrix or a list with values.\n   * The median absolute deviation is defined as the median of the absolute\n   * deviations from the median.\n   *\n   * Syntax:\n   *\n   *     math.mad(a, b, c, ...)\n   *     math.mad(A)\n   *\n   * Examples:\n   *\n   *     math.mad(10, 20, 30);             // returns 10\n   *     math.mad([1, 2, 3]);              // returns 1\n   *     math.mad([[1, 2, 3], [4, 5, 6]]); // returns 1.5\n   *\n   * See also:\n   *\n   *     median, mean, std, abs\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or multiple scalar values.\n   * @return {*} The median absolute deviation.\n   */\n  var mad = typed('mad', {\n    // mad([a, b, c, d, ...])\n    'Array | Matrix': _mad,\n\n    // mad(a, b, c, d, ...)\n    '...': function (args) {\n      return _mad(args);\n    }\n  });\n\n  mad.toTex = undefined; // use default template\n\n  return mad;\n\n  function _mad(array) {\n    array = flatten(array.valueOf());\n\n    if (array.length === 0) {\n      throw new Error('Cannot calculate median absolute deviation of an empty array');\n    }\n\n    var med = median(array);\n    return median(map(array, function (value) {\n      return abs(subtract(value, med));\n    }));\n  }\n}\n\nexports.name = 'mad';\nexports.factory = factory;\n\n},{\"../../utils/array\":509,\"../arithmetic/abs\":282,\"../arithmetic/subtract\":312,\"../matrix/map\":355,\"../statistics/median\":408}],406:[function(require,module,exports){\n'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\nvar reduce = require('../../utils/collection/reduce');\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory (type, config, load, typed) {\n  var larger = load(require('../relational/larger'));\n\n  /**\n   * Compute the maximum value of a matrix or a  list with values.\n   * In case of a multi dimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.max(a, b, c, ...)\n   *     math.max(A)\n   *     math.max(A, dim)\n   *\n   * Examples:\n   *\n   *     math.max(2, 1, 4, 3);                  // returns 4\n   *     math.max([2, 1, 4, 3]);                // returns 4\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]\n   *     math.max([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, min, prod, std, sum, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The maximum value\n   */\n  var max = typed('max', {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function (array, dim) {\n      return reduce(array, dim.valueOf(), _largest);\n    },\n\n    // max(a, b, c, d, ...)\n    '...': function (args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n\n      return _max(args);\n    }\n  });\n\n  max.toTex = '\\\\max\\\\left(${args}\\\\right)';\n\n  return max;\n\n  /**\n   * Return the largest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is largest, or y when y is largest\n   * @private\n   */\n  function _largest(x, y){\n    return larger(x, y) ? x : y;\n  }\n\n  /**\n   * Recursively calculate the maximum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} max\n   * @private\n   */\n  function _max(array) {\n    var max = undefined;\n\n    deepForEach(array, function (value) {\n      if (max === undefined || larger(value, max)) {\n        max = value;\n      }\n    });\n\n    if (max === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    }\n\n    return max;\n  }\n}\n\nexports.name = 'max';\nexports.factory = factory;\n\n},{\"../../utils/collection/containsCollections\":521,\"../../utils/collection/deepForEach\":522,\"../../utils/collection/reduce\":525,\"../relational/larger\":386}],407:[function(require,module,exports){\n'use strict';\n\nvar size = require('../../utils/array').size;\nvar deepForEach = require('../../utils/collection/deepForEach');\nvar reduce = require('../../utils/collection/reduce');\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var divide = load(require('../arithmetic/divide'));\n\n  /**\n   * Compute the mean value of matrix or a list with values.\n   * In case of a multi dimensional array, the mean of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.mean(a, b, c, ...)\n   *     math.mean(A)\n   *     math.mean(A, dim)\n   *\n   * Examples:\n   *\n   *     math.mean(2, 1, 4, 3);                     // returns 2.5\n   *     math.mean([1, 2.7, 3.2, 4]);               // returns 2.725\n   *\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]\n   *\n   * See also:\n   *\n   *     median, min, max, sum, prod, std, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The mean of all values\n   */\n  var mean = typed('mean', {\n      // mean([a, b, c, d, ...])\n    'Array | Matrix': _mean,\n\n      // mean([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nmean,\n\n    // mean(a, b, c, d, ...)\n    '...': function (args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function mean');\n      }\n\n      return _mean(args);\n    }\n  });\n\n  mean.toTex = undefined; // use default template\n\n  return mean;\n\n  /**\n   * Calculate the mean value in an n-dimensional array, returning a\n   * n-1 dimensional array\n   * @param {Array} array\n   * @param {number} dim\n   * @return {number} mean\n   * @private\n   */\n  function _nmean(array, dim){\n    var sum = reduce(array, dim, add);\n    var s = Array.isArray(array) ? size(array) : array.size();\n    return divide(sum, s[dim]);\n  }\n\n  /**\n   * Recursively calculate the mean value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} mean\n   * @private\n   */\n  function _mean(array) {\n    var sum = 0;\n    var num = 0;\n\n    deepForEach(array, function (value) {\n      sum = add(sum, value);\n      num++;\n    });\n\n    if (num === 0) {\n      throw new Error('Cannot calculate mean of an empty array');\n    }\n\n    return divide(sum, num);\n  }\n}\n\nexports.name = 'mean';\nexports.factory = factory;\n\n},{\"../../utils/array\":509,\"../../utils/collection/containsCollections\":521,\"../../utils/collection/deepForEach\":522,\"../../utils/collection/reduce\":525,\"../arithmetic/add\":283,\"../arithmetic/divide\":288}],408:[function(require,module,exports){\n'use strict';\n\nvar flatten = require('../../utils/array').flatten;\nvar reduce = require('../../utils/collection/reduce');\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/addScalar'));\n  var divide = load(require('../arithmetic/divideScalar'));\n  var compare = load(require('../relational/compare'));\n  var partitionSelect = load(require('../matrix/partitionSelect'));\n\n  /**\n   * Compute the median of a matrix or a list with values. The values are\n   * sorted and the middle value is returned. In case of an even number of\n   * values, the average of the two middle values is returned.\n   * Supported types of values are: Number, BigNumber, Unit\n   *\n   * In case of a (multi dimensional) array or matrix, the median of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.median(a, b, c, ...)\n   *     math.median(A)\n   *\n   * Examples:\n   *\n   *     math.median(5, 2, 7);        // returns 5\n   *     math.median([3, -1, 5, 7]);  // returns 4\n   *\n   * See also:\n   *\n   *     mean, min, max, sum, prod, std, var, quantileSeq\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The median\n   */\n  var median = typed('median', {\n    // median([a, b, c, d, ...])\n    'Array | Matrix': _median,\n\n    // median([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function (array, dim) {\n      // TODO: implement median(A, dim)\n      throw new Error('median(A, dim) is not yet supported');\n      //return reduce(arguments[0], arguments[1], ...);\n    },\n\n    // median(a, b, c, d, ...)\n    '...': function (args) {\n      if (containsCollections(args)) {\n          throw new TypeError('Scalar values expected in function median');\n      }\n\n      return _median(args);\n    }\n  });\n\n\n  /**\n   * Recursively calculate the median of an n-dimensional array\n   * @param {Array} array\n   * @return {Number} median\n   * @private\n   */\n  function _median(array) {\n    array = flatten(array.valueOf());\n\n    var num = array.length;\n    if (num == 0) {\n      throw new Error('Cannot calculate median of an empty array');\n    }\n\n    if (num % 2 == 0) {\n      // even: return the average of the two middle values\n      var mid = num / 2 - 1;\n      var right = partitionSelect(array, mid + 1);\n\n      // array now partitioned at mid + 1, take max of left part\n      var left = array[mid];\n      for (var i = 0; i < mid; ++i) {\n        if (compare(array[i], left) > 0) {\n          left = array[i];\n        }\n      }\n\n      return middle2(left, right);\n    }\n    else {\n      // odd: return the middle value\n      var m = partitionSelect(array, (num - 1) / 2);\n\n      return middle(m);\n    }\n  }\n\n  // helper function to type check the middle value of the array\n  var middle = typed({\n    'number | BigNumber | Complex | Unit': function (value) {\n      return value;\n    }\n  });\n\n  // helper function to type check the two middle value of the array\n  var middle2 = typed({\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function (left, right) {\n      return divide(add(left, right), 2);\n    }\n  });\n\n  median.toTex = undefined; // use default template\n\n  return median;\n}\n\nexports.name = 'median';\nexports.factory = factory;\n\n},{\"../../utils/array\":509,\"../../utils/collection/containsCollections\":521,\"../../utils/collection/reduce\":525,\"../arithmetic/addScalar\":284,\"../arithmetic/divideScalar\":289,\"../matrix/partitionSelect\":357,\"../relational/compare\":380}],409:[function(require,module,exports){\n'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\nvar reduce = require('../../utils/collection/reduce');\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory (type, config, load, typed) {\n  var smaller = load(require('../relational/smaller'));\n  \n  /**\n   * Compute the maximum value of a matrix or a  list of values.\n   * In case of a multi dimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.min(a, b, c, ...)\n   *     math.min(A)\n   *     math.min(A, dim)\n   *\n   * Examples:\n   *\n   *     math.min(2, 1, 4, 3);                  // returns 1\n   *     math.min([2, 1, 4, 3]);                // returns 1\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.min([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]\n   *     math.min([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, max, prod, std, sum, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The minimum value\n   */\n  var min = typed('min', {\n    // min([a, b, c, d, ...])\n    'Array | Matrix': _min,\n\n    // min([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function (array, dim) {\n      return reduce(array, dim.valueOf(), _smallest);\n    },\n\n    // min(a, b, c, d, ...)\n    '...': function (args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function min');\n      }\n\n      return _min(args);\n    }\n  });\n\n  min.toTex = '\\\\min\\\\left(${args}\\\\right)';\n\n  return min;\n\n  /**\n   * Return the smallest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is smallest, or y when y is smallest\n   * @private\n   */\n  function _smallest(x, y) {\n    return smaller(x, y) ? x : y;\n  }\n\n  /**\n   * Recursively calculate the minimum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} min\n   * @private\n   */\n  function _min(array) {\n    var min = undefined;\n\n    deepForEach(array, function (value) {\n      if (min === undefined || smaller(value, min)) {\n        min = value;\n      }\n    });\n\n    if (min === undefined) {\n      throw new Error('Cannot calculate min of an empty array');\n    }\n\n    return min;\n  }\n}\n\nexports.name = 'min';\nexports.factory = factory;\n\n},{\"../../utils/collection/containsCollections\":521,\"../../utils/collection/deepForEach\":522,\"../../utils/collection/reduce\":525,\"../relational/smaller\":388}],410:[function(require,module,exports){\n'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n\n  /**\n  * Computes the mode of a set of numbers or a list with values(numbers or characters).\n  * If there are more than one modes, it returns a list of those values.\n  *\n  * Syntax:\n  *\n  *     math.mode(a, b, c, ...)\n  *     math.mode(A)\n  *\n  * Examples:\n  *\n  *     math.mode(2, 1, 4, 3, 1);                            // returns [1]\n  *     math.mode([1, 2.7, 3.2, 4, 2.7]);                    // returns [2.7]\n  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\n  *     math.mode('a','a','b','c')                           // returns [\"a\"]\n  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\n  *\n  * See also:\n  *\n  *     median,\n  *     mean\n  *\n  * @param {... *} args  A single matrix\n  * @return {*} The mode of all values\n  */\n\n  var mode = typed('mode', {\n    'Array | Matrix' : _mode,\n    \n    '...': function (args) {\n      return _mode(args);\n    }\n  });\n  \n  return mode;\n\n  /**\n   * Calculates the mode in an 1-dimensional array\n   * @param {Array} values\n   * @return {number} mode\n   * @private\n   */\n  function _mode(values) {\n    values = flatten(values.valueOf());\n    var num = values.length;\n    if (num == 0) {\n      throw new Error('Cannot calculate mode of an empty array');\n    }\n    \n    var count = {},\n        mode = [],\n        max = 0;\n    for (var i in values) {\n      if (!(values[i] in count)){\n        count[values[i]] = 0;\n      }\n      count[values[i]]++;\n      if (count[values[i]] == max){\n        mode.push(values[i]);\n      }\n      else if (count[values[i]] > max) {\n        max = count[values[i]];\n        mode = [values[i]];\n      }\n    }\n    return mode; \n  };\n}\n\nexports.name = 'mode';\nexports.factory = factory;\n},{\"../../utils/array\":509}],411:[function(require,module,exports){\n'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nfunction factory (type, config, load, typed) {\n  var multiply = load(require('../arithmetic/multiplyScalar'));\n\n  /**\n   * Compute the product of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.prod(a, b, c, ...)\n   *     math.prod(A)\n   *\n   * Examples:\n   *\n   *     math.multiply(2, 3);           // returns 6\n   *     math.prod(2, 3);               // returns 6\n   *     math.prod(2, 3, 4);            // returns 24\n   *     math.prod([2, 3, 4]);          // returns 24\n   *     math.prod([[2, 5], [4, 3]]);   // returns 120\n   *\n   * See also:\n   *\n   *    mean, median, min, max, sum, std, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The product of all values\n   */\n  var prod = typed('prod', {\n    // prod([a, b, c, d, ...])\n    'Array | Matrix': _prod,\n\n    // prod([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function (array, dim) {\n      // TODO: implement prod(A, dim)\n      throw new Error('prod(A, dim) is not yet supported');\n      //return reduce(arguments[0], arguments[1], math.prod);\n    },\n\n    // prod(a, b, c, d, ...)\n    '...': function (args) {\n      return _prod(args);\n    }\n  });\n\n  prod.toTex = undefined; // use default template\n\n  return prod;\n\n  /**\n   * Recursively calculate the product of an n-dimensional array\n   * @param {Array} array\n   * @return {number} prod\n   * @private\n   */\n  function _prod(array) {\n    var prod = undefined;\n\n    deepForEach(array, function (value) {\n      prod = (prod === undefined) ? value : multiply(prod, value);\n    });\n\n    if (prod === undefined) {\n      throw new Error('Cannot calculate prod of an empty array');\n    }\n\n    return prod;\n  }\n}\n\nexports.name = 'prod';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepForEach\":522,\"../arithmetic/multiplyScalar\":304}],412:[function(require,module,exports){\n'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar isNumber = require('../../utils/number').isNumber;\nvar flatten = require('../../utils/array').flatten;\nvar isCollection = require('../../utils/collection/isCollection');\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var partitionSelect = load(require('../matrix/partitionSelect'));\n  var compare = load(require('../relational/compare'));\n\n  /**\n   * Compute the prob order quantile of a matrix or a list with values.\n   * The sequence is sorted and the middle value is returned.\n   * Supported types of sequence values are: Number, BigNumber, Unit\n   * Supported types of probability are: Number, BigNumber\n   *\n   * In case of a (multi dimensional) array or matrix, the prob order quantile\n   * of all elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.quantileSeq(A, prob[, sorted])\n   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])\n   *     math.quantileSeq(A, N[, sorted])\n   *\n   * Examples:\n   *\n   *     math.quantileSeq([3, -1, 5, 7], 0.5);         // returns 4\n   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]\n   *     math.quantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]\n   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4\n   *\n   * See also:\n   *\n   *     median, mean, min, max, sum, prod, std, var\n   *\n   * @param {Array, Matrix} data                A single matrix or Array\n   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is\n   *                                            the amount of evenly distributed steps of\n   *                                            probabilities; only one of these options can\n   *                                            be provided\n   * @param {Boolean} sorted=false              is data sorted in ascending order\n   * @return {Number, BigNumber, Unit, Array}   Quantile(s)\n   */\n  function quantileSeq(data, probOrN, sorted) {\n    var probArr, dataArr, one;\n\n    if (arguments.length < 2 || arguments.length > 3) {\n      throw new SyntaxError('Function quantileSeq requires two or three parameters');\n    }\n\n    if (isCollection(data)) {\n      sorted = sorted || false;\n      if (typeof sorted === 'boolean') {\n        dataArr = data.valueOf();\n        if (isNumber(probOrN)) {\n          if (probOrN < 0) {\n            throw new Error('N/prob must be non-negative');\n          }\n\n          if (probOrN <= 1) {\n            // quantileSeq([a, b, c, d, ...], prob[,sorted])\n            return _quantileSeq(dataArr, probOrN, sorted);\n          }\n\n          if (probOrN > 1) {\n            // quantileSeq([a, b, c, d, ...], N[,sorted])\n            if (!isInteger(probOrN)) {\n              throw new Error('N must be a positive integer');\n            }\n\n            var nPlusOne = probOrN + 1;\n            probArr = new Array(probOrN);\n            for (var i = 0; i < probOrN;) {\n              probArr[i] = _quantileSeq(dataArr, (++i) / nPlusOne, sorted);\n            }\n            return probArr;\n          }\n        }\n\n        if (probOrN && probOrN.isBigNumber) {\n          if (probOrN.isNegative()) {\n            throw new Error('N/prob must be non-negative');\n          }\n\n          one = new probOrN.constructor(1);\n\n          if (probOrN.lte(one)) {\n            // quantileSeq([a, b, c, d, ...], prob[,sorted])\n            return _quantileSeq(dataArr, probOrN, sorted);\n          }\n\n          if (probOrN.gt(one)) {\n            // quantileSeq([a, b, c, d, ...], N[,sorted])\n            if (!probOrN.isInteger()) {\n              throw new Error('N must be a positive integer');\n            }\n\n            // largest possible Array length is 2^32-1;\n            // 2^32 < 10^15, thus safe conversion guaranteed\n            var intN = probOrN.toNumber();\n            if (intN > 4294967295) {\n              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');\n            }\n\n            var nPlusOne = new type.BigNumber(intN + 1);\n            probArr = new Array(intN);\n            for (var i = 0; i < intN;) {\n              probArr[i] = _quantileSeq(dataArr, new type.BigNumber(++i).div(nPlusOne), sorted);\n            }\n            return probArr;\n          }\n        }\n\n        if (Array.isArray(probOrN)) {\n          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])\n          probArr = new Array(probOrN.length);\n          for (var i = 0; i < probArr.length; ++i) {\n            var currProb = probOrN[i];\n            if (isNumber(currProb)) {\n              if (currProb < 0 || currProb > 1) {\n                throw new Error('Probability must be between 0 and 1, inclusive');\n              }\n            } else if (currProb && currProb.isBigNumber) {\n              one = new currProb.constructor(1);\n              if (currProb.isNegative() || currProb.gt(one)) {\n                throw new Error('Probability must be between 0 and 1, inclusive');\n              }\n            } else {\n              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n            }\n\n            probArr[i] = _quantileSeq(dataArr, currProb, sorted);\n          }\n          return probArr;\n        }\n\n        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n      }\n\n      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n    }\n\n    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n  }\n\n  /**\n   * Calculate the prob order quantile of an n-dimensional array.\n   * \n   * @param {Array} array\n   * @param {Number, BigNumber} prob\n   * @param {Boolean} sorted\n   * @return {Number, BigNumber, Unit} prob order quantile\n   * @private\n   */\n  function _quantileSeq(array, prob, sorted) {\n    var flat = flatten(array);\n    var len = flat.length;\n    if (len === 0) {\n      throw new Error('Cannot calculate quantile of an empty sequence');\n    }\n\n    if (isNumber(prob)) {\n      var index = prob * (len-1);\n      var fracPart = index % 1;\n      if (fracPart === 0) {\n        var value = sorted ? flat[index] : partitionSelect(flat, index);\n\n        validate(value);\n\n        return value;\n      }\n\n      var integerPart = Math.floor(index);\n\n      var left, right;\n      if (sorted) {\n        left = flat[integerPart];\n        right = flat[integerPart+1];\n      } else {\n        right = partitionSelect(flat, integerPart+1);\n\n        // max of partition is kth largest\n        left = flat[integerPart];\n        for (var i = 0; i < integerPart; ++i) {\n          if (compare(flat[i], left) > 0) {\n            left = flat[i];\n          }\n        }\n      }\n\n      validate(left);\n      validate(right);\n\n      // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]\n      return add(multiply(left, 1 - fracPart), multiply(right, fracPart));\n    }\n\n    // If prob is a BigNumber\n    var index = prob.times(len-1);\n    if (index.isInteger()) {\n      index = index.toNumber();\n      var value = sorted ? flat[index] : partitionSelect(flat, index);\n\n      validate(value);\n\n      return value;\n    }\n\n    var integerPart = index.floor();\n    var fracPart = index.minus(integerPart);\n    var integerPartNumber = integerPart.toNumber();\n\n    var left, right;\n    if (sorted) {\n      left = flat[integerPartNumber];\n      right = flat[integerPartNumber+1];\n    } else {\n      right = partitionSelect(flat, integerPartNumber+1);\n\n      // max of partition is kth largest\n      left = flat[integerPartNumber];\n      for (var i = 0; i < integerPartNumber; ++i) {\n        if (compare(flat[i], left) > 0) {\n          left = flat[i];\n        }\n      }\n    }\n\n    validate(left);\n    validate(right);\n\n    // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]\n    var one = new fracPart.constructor(1);\n    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));\n  }\n\n  /**\n   * Check if array value types are valid, throw error otherwise.\n   * @param {number | BigNumber | Unit} x\n   * @param {number | BigNumber | Unit} x\n   * @private\n   */\n  var validate = typed({\n    'number | BigNumber | Unit': function (x) {\n      return x;\n    }\n  });\n\n  return quantileSeq;\n}\n\nexports.name = 'quantileSeq';\nexports.factory = factory;\n\n},{\"../../utils/array\":509,\"../../utils/collection/isCollection\":524,\"../../utils/number\":532,\"../arithmetic/add\":283,\"../arithmetic/multiply\":303,\"../matrix/partitionSelect\":357,\"../relational/compare\":380}],413:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var sqrt       = load(require('../arithmetic/sqrt'));\n  var variance   = load(require('../statistics/var'));\n\n  /**\n   * Compute the standard deviation of a matrix or a  list with values.\n   * The standard deviations is defined as the square root of the variance:\n   * `std(A) = sqrt(var(A))`.\n   * In case of a (multi dimensional) array or matrix, the standard deviation\n   * over all elements will be calculated.\n   *\n   * Optionally, the type of normalization can be specified as second\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   * Syntax:\n   *\n   *     math.std(a, b, c, ...)\n   *     math.std(A)\n   *     math.std(A, normalization)\n   *\n   * Examples:\n   *\n   *     math.std(2, 4, 6);                     // returns 2\n   *     math.std([2, 4, 6, 8]);                // returns 2.581988897471611\n   *     math.std([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979\n   *     math.std([2, 4, 6, 8], 'biased');      // returns 2\n   *\n   *     math.std([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, sum, var\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @return {*} The standard deviation\n   */\n  var std = typed('std', {\n    // std([a, b, c, d, ...])\n    'Array | Matrix': _std,\n\n    // std([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _std,\n\n    // std(a, b, c, d, ...)\n    '...': function (args) {\n      return _std(args);\n    }\n  });\n  \n  std.toTex = undefined; // use default template\n\n  return std;\n\n  function _std(array, normalization) {\n    if (array.length == 0) {\n      throw new SyntaxError('Function std requires one or more parameters (0 provided)');\n    }\n\n    return sqrt(variance.apply(null, arguments));\n  }\n}\n\nexports.name = 'std';\nexports.factory = factory;\n\n},{\"../arithmetic/sqrt\":310,\"../statistics/var\":415}],414:[function(require,module,exports){\n'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/addScalar'));\n\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3);               // returns 10\n   *     math.sum([2, 1, 4, 3]);             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]); // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The sum of all values\n   */\n  var sum = typed('sum', {\n    'Array | Matrix': function (args) {\n      // sum([a, b, c, d, ...])\n      return _sum(args);\n    },\n\n    'Array | Matrix, number | BigNumber': function () {\n      // sum([a, b, c, d, ...], dim)\n      // TODO: implement sum(A, dim)\n      throw new Error('sum(A, dim) is not yet supported');\n    },\n\n    '...': function (args) {\n      // sum(a, b, c, d, ...)\n      return _sum(args);\n    }\n  });\n\n  sum.toTex = undefined; // use default template\n\n  return sum;\n\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array} array\n   * @return {number} sum\n   * @private\n   */\n  function _sum(array) {\n    var sum = undefined;\n\n    deepForEach(array, function (value) {\n      sum = (sum === undefined) ? value : add(sum, value);\n    });\n\n    if (sum === undefined) {\n      switch (config.number) {\n        case 'number':\n          return 0;\n        case 'BigNumber':\n          return new type.BigNumber(0);\n        case 'Fraction':\n          return new type.Fraction(0);\n        default:\n          return 0;\n      }\n    }\n\n    return sum;\n  }\n}\n\nexports.name = 'sum';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepForEach\":522,\"../arithmetic/addScalar\":284}],415:[function(require,module,exports){\n'use strict';\n\nvar DEFAULT_NORMALIZATION = 'unbiased';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/addScalar'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var multiply = load(require('../arithmetic/multiplyScalar'));\n  var divide = load(require('../arithmetic/divideScalar'));\n\n  /**\n   * Compute the variance of a matrix or a  list with values.\n   * In case of a (multi dimensional) array or matrix, the variance over all\n   * elements will be calculated.\n   *\n   * Optionally, the type of normalization can be specified as second\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   * Note that older browser may not like the variable name `var`. In that\n   * case, the function can be called as `math['var'](...)` instead of\n   * `math.var(...)`.\n   *\n   * Syntax:\n   *\n   *     math.var(a, b, c, ...)\n   *     math.var(A)\n   *     math.var(A, normalization)\n   *\n   * Examples:\n   *\n   *     math.var(2, 4, 6);                     // returns 4\n   *     math.var([2, 4, 6, 8]);                // returns 6.666666666666667\n   *     math.var([2, 4, 6, 8], 'uncorrected'); // returns 5\n   *     math.var([2, 4, 6, 8], 'biased');      // returns 4\n   *\n   *     math.var([[1, 2, 3], [4, 5, 6]]);      // returns 3.5\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, std, sum\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @return {*} The variance\n   */\n  var variance = typed('variance', {\n    // var([a, b, c, d, ...])\n    'Array | Matrix': function (array) {\n      return _var(array, DEFAULT_NORMALIZATION);\n    },\n\n    // var([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _var,\n\n    // var(a, b, c, d, ...)\n    '...': function (args) {\n      return _var(args, DEFAULT_NORMALIZATION);\n    }\n  });\n\n  variance.toTex = '\\\\mathrm{Var}\\\\left(${args}\\\\right)';\n\n  return variance;\n\n  /**\n   * Recursively calculate the variance of an n-dimensional array\n   * @param {Array} array\n   * @param {string} normalization\n   *                        Determines how to normalize the variance:\n   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)\n   *                        - 'uncorrected' The sum of squared errors is divided by n\n   *                        - 'biased'      The sum of squared errors is divided by (n + 1)\n   * @return {number | BigNumber} variance\n   * @private\n   */\n  function _var(array, normalization) {\n    var sum = 0;\n    var num = 0;\n\n    if (array.length == 0) {\n      throw new SyntaxError('Function var requires one or more parameters (0 provided)');\n    }\n\n    // calculate the mean and number of elements\n    deepForEach(array, function (value) {\n      sum = add(sum, value);\n      num++;\n    });\n    if (num === 0) throw new Error('Cannot calculate var of an empty array');\n\n    var mean = divide(sum, num);\n\n    // calculate the variance\n    sum = 0;\n    deepForEach(array, function (value) {\n      var diff = subtract(value, mean);\n      sum = add(sum, multiply(diff, diff));\n    });\n\n    switch (normalization) {\n      case 'uncorrected':\n        return divide(sum, num);\n\n      case 'biased':\n        return divide(sum, num + 1);\n\n      case 'unbiased':\n        var zero = (sum && sum.isBigNumber === true) ? new type.BigNumber(0) : 0;\n        return (num == 1) ? zero : divide(sum, num - 1);\n\n      default:\n        throw new Error('Unknown normalization \"' + normalization + '\". ' +\n        'Choose \"unbiased\" (default), \"uncorrected\", or \"biased\".');\n    }\n  }\n}\n\nexports.name = 'var';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepForEach\":522,\"../arithmetic/addScalar\":284,\"../arithmetic/divideScalar\":289,\"../arithmetic/multiplyScalar\":304,\"../arithmetic/subtract\":312}],416:[function(require,module,exports){\n'use strict';\n\nvar string = require('../../utils/string');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Format a value of any type into a string.\n   *\n   * Syntax:\n   *\n   *    math.format(value)\n   *    math.format(value, options)\n   *    math.format(value, precision)\n   *    math.format(value, callback)\n   *\n   * Where:\n   *\n   *  - `value: *`\n   *    The value to be formatted\n   *  - `options: Object`\n   *    An object with formatting options. Available options:\n   *    - `notation: string`\n   *      Number notation. Choose from:\n   *      - 'fixed'\n   *        Always use regular number notation.\n   *        For example '123.40' and '14000000'\n   *      - 'exponential'\n   *        Always use exponential notation.\n   *        For example '1.234e+2' and '1.4e+7'\n   *      - 'engineering'\n   *        Always use engineering notation.\n   *        For example '123.4e+0' and '14.0e+6'\n   *      - 'auto' (default)\n   *        Regular number notation for numbers having an absolute value between\n   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.\n   *        Lower bound is included, upper bound is excluded.\n   *        For example '123.4' and '1.4e7'.\n   *    - `precision: number`\n   *      A number between 0 and 16 to round the digits of the number. In case\n   *      of notations 'exponential' and 'auto', `precision` defines the total\n   *      number of significant digits returned and is undefined by default.\n   *      In case of notation 'fixed', `precision` defines the number of\n   *      significant digits after the decimal point, and is 0 by default.\n   *    - `exponential: Object`\n   *      An object containing two parameters, {number} lower and {number} upper,\n   *      used by notation 'auto' to determine when to return exponential\n   *      notation. Default values are `lower=1e-3` and `upper=1e5`. Only\n   *      applicable for notation `auto`.\n   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.\n   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is\n   *      configured, and will output `0.(3)` when 'decimal' is configured.\n   * - `callback: function`\n   *   A custom formatting function, invoked for all numeric elements in `value`,\n   *   for example all elements of a matrix, or the real and imaginary\n   *   parts of a complex number. This callback can be used to override the\n   *   built-in numeric notation with any type of formatting. Function `callback`\n   *   is called with `value` as parameter and must return a string.\n   *\n   * When `value` is an Object:\n   *\n   * - When the object contains a property `format` being a function, this function\n   *   is invoked as `value.format(options)` and the result is returned.\n   * - When the object has its own `toString` method, this method is invoked\n   *   and the result is returned.\n   * - In other cases the function will loop over all object properties and\n   *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n   *\n   * When value is a function:\n   *\n   * - When the function has a property `syntax`, it returns this\n   *   syntax description.\n   * - In other cases, a string `'function'` is returned.\n   *\n   * Examples:\n   *\n   *    math.format(6.4);                                        // returns '6.4'\n   *    math.format(1240000);                                    // returns '1.24e6'\n   *    math.format(1/3);                                        // returns '0.3333333333333333'\n   *    math.format(1/3, 3);                                     // returns '0.333'\n   *    math.format(21385, 2);                                   // returns '21000'\n   *    math.format(12.071, {notation: 'fixed'});                // returns '12'\n   *    math.format(2.3,    {notation: 'fixed', precision: 2});  // returns '2.30'\n   *    math.format(52.8,   {notation: 'exponential'});          // returns '5.28e+1'\n   *    math.format(12400,  {notation: 'engineering'});         // returns '12.400e+3'\n   *\n   *    function formatCurrency(value) {\n   *      // return currency notation with two digits:\n   *      return '$' + value.toFixed(2);\n   *\n   *      // you could also use math.format inside the callback:\n   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2});\n   *    }\n   *    math.format([2.1, 3, 0.016], formatCurrency};            // returns '[$2.10, $3.00, $0.02]'\n   *\n   * See also:\n   *\n   *    print\n   *\n   * @param {*} value                               Value to be stringified\n   * @param {Object | Function | number} [options]  Formatting options\n   * @return {string} The formatted value\n   */\n  var format = typed('format', {\n    'any': string.format,\n    'any, Object | function | number': string.format\n  });\n\n  format.toTex = undefined; // use default template\n\n  return format;\n}\n\nexports.name = 'format';\nexports.factory = factory;\n\n},{\"../../utils/string\":534}],417:[function(require,module,exports){\nmodule.exports = [\n  require('./format'),\n  require('./print')\n];\n\n},{\"./format\":416,\"./print\":418}],418:[function(require,module,exports){\n'use strict';\n\nvar isString = require('../../utils/string').isString;\nvar format = require('../../utils/string').format;\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Interpolate values into a string template.\n   *\n   * Syntax:\n   *\n   *     math.print(template, values)\n   *     math.print(template, values, precision)\n   *     math.print(template, values, options)\n   *\n   * Example usage:\n   *\n   *     // the following outputs: 'Lucy is 5 years old'\n   *     math.print('Lucy is $age years old', {age: 5});\n   *\n   *     // the following outputs: 'The value of pi is 3.141592654'\n   *     math.print('The value of pi is $pi', {pi: math.pi}, 10);\n   *\n   *     // the following outputs: 'hello Mary! The date is 2013-03-23'\n   *     math.print('Hello $user.name! The date is $date', {\n   *       user: {\n   *         name: 'Mary',\n   *       },\n   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)\n   *     });\n   *\n   * See also:\n   *\n   *     format\n   *\n   * @param {string} template     A string containing variable placeholders.\n   * @param {Object} values       An object containing variables which will\n   *                              be filled in in the template.\n   * @param {number | Object} [options]  Formatting options,\n   *                              or the number of digits to format numbers.\n   *                              See function math.format for a description\n   *                              of all options.\n   * @return {string} Interpolated string\n   */\n  var print = typed ('print', {\n    'string, Object': _print,\n    'string, Object, number | Object': _print\n  });\n\n  print.toTex = undefined; // use default template\n\n  return print;\n}\n\n/**\n * Interpolate values into a string template.\n * @param {string} template\n * @param {Object} values\n * @param {number | Object} [options]\n * @returns {string} Interpolated string\n * @private\n */\nfunction _print(template, values, options) {\n  return template.replace(/\\$([\\w\\.]+)/g, function (original, key) {\n        var keys = key.split('.');\n        var value = values[keys.shift()];\n        while (keys.length && value !== undefined) {\n          var k = keys.shift();\n          value = k ? value[k] : value + '.';\n        }\n\n        if (value !== undefined) {\n          if (!isString(value)) {\n            return format(value, options);\n          }\n          else {\n            return value;\n          }\n        }\n\n        return original;\n      }\n  );\n}\n\nexports.name = 'print';\nexports.factory = factory;\n\n},{\"../../utils/string\":534}],419:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the inverse cosine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acos(x)\n   *\n   * Examples:\n   *\n   *    math.acos(0.5);           // returns number 1.0471975511965979\n   *    math.acos(math.cos(1.5)); // returns number 1.5\n   *\n   *    math.acos(2);             // returns Complex 0 + 1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    cos, atan, asin\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x\n   */\n  var acos = typed('acos', {\n    'number': function (x) {\n      if ((x >= -1 && x <= 1) || config.predictable) {\n        return Math.acos(x);\n      }\n      else {\n        return new type.Complex(x, 0).acos();\n      }\n    },\n\n    'Complex': function (x) {\n      return x.acos();\n    },\n\n    'BigNumber': function (x) {\n      return x.acos();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, acos);\n    }\n  });\n\n  acos.toTex = {1: '\\\\cos^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return acos;\n}\n\nexports.name = 'acos';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],420:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the hyperbolic arccos of a value,\n   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acosh(x)\n   *\n   * Examples:\n   *\n   *    math.acosh(1.5);       // returns 0.9624236501192069\n   *\n   * See also:\n   *\n   *    cosh, asinh, atanh\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x\n   */\n  var acosh = typed('acosh', {\n    'number': function (x) {\n      if (x >= 1 || config.predictable) {\n        return _acosh(x);\n      }\n      if (x <= -1) {\n        return new type.Complex(Math.log(Math.sqrt(x*x - 1) - x), Math.PI);\n      }\n      return new type.Complex(x, 0).acosh();\n    },\n\n    'Complex': function (x) {\n      return x.acosh();\n    },\n\n    'BigNumber': function (x) {\n      return x.acosh();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, acosh);\n    }\n  });\n\n  acosh.toTex = {1: '\\\\cosh^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return acosh;\n}\n\n/**\n * Calculate the hyperbolic arccos of a number\n * @param {number} x\n * @return {number}\n * @private\n */\nvar _acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x*x - 1) + x)\n};\n\nexports.name = 'acosh';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],421:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acot(x)\n   *\n   * Examples:\n   *\n   *    math.acot(0.5);           // returns number 0.4636476090008061\n   *    math.acot(math.cot(1.5)); // returns number 1.5\n   *\n   *    math.acot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    cot, atan\n   *\n   * @param {number | Complex | Array | Matrix} x   Function input\n   * @return {number | Complex | Array | Matrix} The arc cotangent of x\n   */\n  var acot = typed('acot', {\n    'number': function (x) {\n      return Math.atan(1 / x);\n    },\n\n    'Complex': function (x) {\n      return x.acot();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x).atan();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, acot);\n    }\n  });\n\n  acot.toTex = {1: '\\\\cot^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return acot;\n}\n\nexports.name = 'acot';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],422:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the hyperbolic arccotangent of a value,\n   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acoth(x)\n   *\n   * Examples:\n   *\n   *    math.acoth(0.5);       // returns 0.8047189562170503\n   *\n   * See also:\n   *\n   *    acsch, asech\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x\n   */\n  var acoth = typed('acoth', {\n    'number': function (x) {\n      if (x >= 1 || x <= -1 || config.predictable) {\n        return isFinite(x) ? (Math.log((x+1)/x) + Math.log(x/(x-1))) / 2 : 0;\n      }\n      return new type.Complex(x, 0).acoth();\n    },\n\n    'Complex': function (x) {\n      return x.acoth();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x).atanh();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, acoth);\n    }\n  });\n\n  acoth.toTex = {1: '\\\\coth^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return acoth;\n}\n\nexports.name = 'acoth';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],423:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acsc(x)\n   *\n   * Examples:\n   *\n   *    math.acsc(0.5);           // returns number 0.5235987755982989\n   *    math.acsc(math.csc(1.5)); // returns number ~1.5\n   *\n   *    math.acsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    csc, asin, asec\n   *\n   * @param {number | Complex | Array | Matrix} x   Function input\n   * @return {number | Complex | Array | Matrix} The arc cosecant of x\n   */\n  var acsc = typed('acsc', {\n    'number': function (x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return Math.asin(1 / x);\n      }\n      return new type.Complex(x, 0).acsc();\n    },\n\n    'Complex': function (x) {\n      return x.acsc();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x).asin();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, acsc);\n    }\n  });\n\n  acsc.toTex = {1: '\\\\csc^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return acsc;\n}\n\nexports.name = 'acsc';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],424:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the hyperbolic arccosecant of a value,\n   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acsch(x)\n   *\n   * Examples:\n   *\n   *    math.acsch(0.5);       // returns 1.4436354751788103\n   *\n   * See also:\n   *\n   *    asech, acoth\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x\n   */\n  var acsch = typed('acsch', {\n    'number': function (x) {\n      x = 1 / x;\n      return Math.log(x + Math.sqrt(x*x + 1));\n    },\n\n    'Complex': function (x) {\n      return x.acsch();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x).asinh();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, acsch);\n    }\n  });\n\n  acsch.toTex = {1: '\\\\mathrm{csch}^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return acsch;\n}\n\nexports.name = 'acsch';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],425:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asec(x)\n   *\n   * Examples:\n   *\n   *    math.asec(0.5);           // returns 1.0471975511965979\n   *    math.asec(math.sec(1.5)); // returns 1.5\n   *\n   *    math.asec(2);             // returns 0 + 1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    acos, acot, acsc\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} The arc secant of x\n   */\n  var asec = typed('asec', {\n    'number': function (x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return Math.acos(1 / x);\n      }\n      return new type.Complex(x, 0).asec();\n    },\n\n    'Complex': function (x) {\n      return x.asec();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x).acos();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, asec);\n    }\n  });\n\n  asec.toTex = {1: '\\\\sec^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return asec;\n}\n\nexports.name = 'asec';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],426:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var acosh = typed.find(load(require('./acosh')), ['Complex']);\n\n  /**\n   * Calculate the hyperbolic arcsecant of a value,\n   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asech(x)\n   *\n   * Examples:\n   *\n   *    math.asech(0.5);       // returns 1.3169578969248166\n   *\n   * See also:\n   *\n   *    acsch, acoth\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x\n   */\n  var asech = typed('asech', {\n    'number': function (x) {\n      if ((x <= 1 && x >= -1) || config.predictable) {\n        x = 1 / x;\n\n        var ret = Math.sqrt(x*x - 1);\n        if (x > 0 || config.predictable) {\n          return Math.log(ret + x);\n        }\n\n        return new type.Complex(Math.log(ret - x), Math.PI);\n      }\n\n      return new type.Complex(x, 0).asech();\n    },\n\n    'Complex': function (x) {\n      return x.asech()\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x).acosh();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, asech);\n    }\n  });\n\n  asech.toTex = {1: '\\\\mathrm{sech}^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return asech;\n}\n\nexports.name = 'asech';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523,\"./acosh\":420}],427:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the inverse sine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asin(x)\n   *\n   * Examples:\n   *\n   *    math.asin(0.5);           // returns number 0.5235987755982989\n   *    math.asin(math.sin(1.5)); // returns number ~1.5\n   *\n   *    math.asin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    sin, atan, acos\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x\n   */\n  var asin = typed('asin', {\n    'number': function (x) {\n      if ((x >= -1 && x <= 1) || config.predictable) {\n        return Math.asin(x);\n      }\n      else {\n        return new type.Complex(x, 0).asin();\n      }\n    },\n\n    'Complex': function (x) {\n      return x.asin();\n    },\n\n    'BigNumber': function (x) {\n      return x.asin();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since asin(0) = 0\n      return deepMap(x, asin, true);\n    }\n  });\n\n  asin.toTex = {1: '\\\\sin^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return asin;\n}\n\nexports.name = 'asin';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],428:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the hyperbolic arcsine of a value,\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asinh(x)\n   *\n   * Examples:\n   *\n   *    math.asinh(0.5);       // returns 0.48121182505960347\n   *\n   * See also:\n   *\n   *    acosh, atanh\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x\n   */\n  var asinh = typed('asinh', {\n    'number': Math.asinh || function (x) {\n      return Math.log(Math.sqrt(x*x + 1) + x);\n    },\n\n    'Complex': function (x) {\n        return x.asinh();\n    },\n\n    'BigNumber': function (x) {\n      return x.asinh();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since asinh(0) = 0\n      return deepMap(x, asinh, true);\n    }\n  });\n\n  asinh.toTex = {1: '\\\\sinh^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return asinh;\n}\n\nexports.name = 'asinh';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],429:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the inverse tangent of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atan(x)\n   *\n   * Examples:\n   *\n   *    math.atan(0.5);           // returns number 0.4636476090008061\n   *    math.atan(math.tan(1.5)); // returns number 1.5\n   *\n   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    tan, asin, acos\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x\n   */\n  var atan = typed('atan', {\n    'number': function (x) {\n      return Math.atan(x);\n    },\n\n    'Complex': function (x) {\n      return x.atan();\n    },\n\n    'BigNumber': function (x) {\n      return x.atan();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since atan(0) = 0\n      return deepMap(x, atan, true);\n    }\n  });\n\n  atan.toTex = {1: '\\\\tan^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return atan;\n}\n\nexports.name = 'atan';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],430:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm09 = load(require('../../type/matrix/utils/algorithm09'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Calculate the inverse tangent function with two arguments, y/x.\n   * By providing two arguments, the right quadrant of the computed angle can be\n   * determined.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atan2(y, x)\n   *\n   * Examples:\n   *\n   *    math.atan2(2, 2) / math.pi;       // returns number 0.25\n   *\n   *    var angle = math.unit(60, 'deg'); // returns Unit 60 deg\n   *    var x = math.cos(angle);\n   *    var y = math.sin(angle);\n   *\n   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    tan, atan, sin, cos\n   *\n   * @param {number | Array | Matrix} y  Second dimension\n   * @param {number | Array | Matrix} x  First dimension\n   * @return {number | Array | Matrix} Four-quadrant inverse tangent\n   */\n  var atan2 = typed('atan2', {\n\n    'number, number': Math.atan2,\n\n    // Complex numbers doesn't seem to have a reasonable implementation of\n    // atan2(). Even Matlab removed the support, after they only calculated\n    // the atan only on base of the real part of the numbers and ignored the imaginary.\n\n    'BigNumber, BigNumber': function (y, x) {\n      return type.BigNumber.atan2(y, x);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse .* sparse\n              c = algorithm09(x, y, atan2, false);\n              break;\n            default:\n              // sparse .* dense\n              c = algorithm02(y, x, atan2, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense .* sparse\n              c = algorithm03(x, y, atan2, false);\n              break;\n            default:\n              // dense .* dense\n              c = algorithm13(x, y, atan2);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return atan2(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return atan2(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return atan2(x, matrix(y));\n    },\n\n    'Matrix, number | BigNumber': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, atan2, false);\n          break;\n        default:\n          c = algorithm14(x, y, atan2, false);\n          break;\n      }\n      return c;\n    },\n\n    'number | BigNumber, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, atan2, true);\n          break;\n        default:\n          c = algorithm14(y, x, atan2, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, atan2, false).valueOf();\n    },\n\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, atan2, true).valueOf();\n    }\n  });\n\n  atan2.toTex = {2: '\\\\mathrm{atan2}\\\\left(${args}\\\\right)'};\n\n  return atan2;\n}\n\nexports.name = 'atan2';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm02\":486,\"../../type/matrix/utils/algorithm03\":487,\"../../type/matrix/utils/algorithm09\":493,\"../../type/matrix/utils/algorithm11\":495,\"../../type/matrix/utils/algorithm12\":496,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498}],431:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the hyperbolic arctangent of a value,\n   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atanh(x)\n   *\n   * Examples:\n   *\n   *    math.atanh(0.5);       // returns 0.5493061443340549\n   *\n   * See also:\n   *\n   *    acosh, asinh\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x\n   */\n  var atanh = typed('atanh', {\n    'number': function (x) {\n      if ((x <= 1 && x >= -1) || config.predictable) {\n        return _atanh(x);\n      }\n      return new type.Complex(x, 0).atanh();\n    },\n\n    'Complex': function (x) {\n      return x.atanh();\n    },\n\n    'BigNumber': function (x) {\n      return x.atanh();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since atanh(0) = 0\n      return deepMap(x, atanh, true);\n    }\n  });\n\n  atanh.toTex = {1: '\\\\tanh^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return atanh;\n}\n\n/**\n * Calculate the hyperbolic arctangent of a number\n * @param {number} x\n * @return {number}\n * @private\n */\nvar _atanh = Math.atanh || function (x) {\n  return Math.log((1 + x)/(1 - x)) / 2\n};\n\nexports.name = 'atanh';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],432:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the cosine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cos(x)\n   *\n   * Examples:\n   *\n   *    math.cos(2);                      // returns number -0.4161468365471422\n   *    math.cos(math.pi / 4);            // returns number  0.7071067811865475\n   *    math.cos(math.unit(180, 'deg'));  // returns number -1\n   *    math.cos(math.unit(60, 'deg'));   // returns number  0.5\n   *\n   *    var angle = 0.2;\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x\n   */\n  var cos = typed('cos', {\n    'number': Math.cos,\n\n    'Complex': function (x) {\n      return x.cos();\n    },\n\n    'BigNumber': function (x) {\n      return x.cos();\n    },\n\n    'Unit': function (x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError ('Unit in function cos is no angle');\n      }\n      return cos(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, cos);\n    }\n  });\n\n  cos.toTex = {1: '\\\\cos\\\\left(${args[0]}\\\\right)'};\n\n  return cos;\n}\n\nexports.name = 'cos';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],433:[function(require,module,exports){\n'use strict';\r\n\r\nvar deepMap = require('../../utils/collection/deepMap');\r\n\r\nfunction factory (type, config, load, typed) {\r\n  /**\r\n   * Calculate the hyperbolic cosine of a value,\r\n   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.cosh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.cosh(0.5);       // returns number 1.1276259652063807\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, tanh\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x\r\n   */\r\n  var cosh = typed('cosh', {\r\n    'number': _cosh,\r\n\r\n    'Complex': function (x) {\r\n      return x.cosh();\r\n    },\r\n\r\n    'BigNumber': function (x) {\r\n      return x.cosh();\r\n    },\r\n\r\n    'Unit': function (x) {\r\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n        throw new TypeError ('Unit in function cosh is no angle');\r\n      }\r\n      return cosh(x.value);\r\n    },\r\n\r\n    'Array | Matrix': function (x) {\r\n      return deepMap(x, cosh);\r\n    }\r\n  });\r\n\r\n  cosh.toTex = {1: '\\\\cosh\\\\left(${args[0]}\\\\right)'};\r\n\r\n  return cosh;\r\n}\r\n\r\n/**\r\n * Calculate the hyperbolic cosine of a number\r\n * @param {number} x\r\n * @returns {number}\r\n * @private\r\n */\r\nvar _cosh = Math.cosh || function (x) {\r\n  return (Math.exp(x) + Math.exp(-x)) / 2;\r\n};\r\n\r\nexports.name = 'cosh';\r\nexports.factory = factory;\r\n\n},{\"../../utils/collection/deepMap\":523}],434:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cot(x)\n   *\n   * Examples:\n   *\n   *    math.cot(2);      // returns number -0.45765755436028577\n   *    1 / math.tan(2);  // returns number -0.45765755436028577\n   *\n   * See also:\n   *\n   *    tan, sec, csc\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Cotangent of x\n   */\n  var cot = typed('cot', {\n    'number': function (x) {\n      return 1 / Math.tan(x);\n    },\n\n    'Complex': function (x) {\n      return x.cot();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x.tan());\n    },\n\n    'Unit': function (x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError ('Unit in function cot is no angle');\n      }\n      return cot(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, cot);\n    }\n  });\n\n  cot.toTex = {1: '\\\\cot\\\\left(${args[0]}\\\\right)'};\n\n  return cot;\n}\n\nexports.name = 'cot';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],435:[function(require,module,exports){\n'use strict';\r\n\r\nvar deepMap = require('../../utils/collection/deepMap');\r\n\r\nfunction factory (type, config, load, typed) {\r\n  /**\r\n   * Calculate the hyperbolic cotangent of a value,\r\n   * defined as `coth(x) = 1 / tanh(x)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.coth(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // coth(x) = 1 / tanh(x)\r\n   *    math.coth(2);         // returns 1.0373147207275482\r\n   *    1 / math.tanh(2);     // returns 1.0373147207275482\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, tanh, cosh\r\n   *\r\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x\r\n   */\r\n  var coth = typed('coth', {\r\n    'number': _coth,\r\n\r\n    'Complex': function (x) {\r\n      return x.coth();\r\n    },\r\n\r\n    'BigNumber': function (x) {\r\n      return new type.BigNumber(1).div(x.tanh());\r\n    },\r\n\r\n    'Unit': function (x) {\r\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n        throw new TypeError ('Unit in function coth is no angle');\r\n      }\r\n      return coth(x.value);\r\n    },\r\n\r\n    'Array | Matrix': function (x) {\r\n      return deepMap(x, coth);\r\n    }\r\n  });\r\n\r\n  coth.toTex = {1: '\\\\coth\\\\left(${args[0]}\\\\right)'};\r\n\r\n  return coth;\r\n}\r\n\r\n/**\r\n * Calculate the hyperbolic cosine of a number\r\n * @param {number} x\r\n * @returns {number}\r\n * @private\r\n */\r\nfunction _coth(x) {\r\n  var e = Math.exp(2 * x);\r\n  return (e + 1) / (e - 1);\r\n}\r\n\r\nexports.name = 'coth';\r\nexports.factory = factory;\r\n\n},{\"../../utils/collection/deepMap\":523}],436:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.csc(x)\n   *\n   * Examples:\n   *\n   *    math.csc(2);      // returns number 1.099750170294617\n   *    1 / math.sin(2);  // returns number 1.099750170294617\n   *\n   * See also:\n   *\n   *    sin, sec, cot\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Cosecant of x\n   */\n  var csc = typed('csc', {\n    'number': function (x) {\n      return 1 / Math.sin(x);\n    },\n\n    'Complex': function (x) {\n      return x.csc();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x.sin());\n    },\n\n    'Unit': function (x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError ('Unit in function csc is no angle');\n      }\n      return csc(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, csc);\n    }\n  });\n\n  csc.toTex = {1: '\\\\csc\\\\left(${args[0]}\\\\right)'};\n\n  return csc;\n}\n\nexports.name = 'csc';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],437:[function(require,module,exports){\n'use strict';\r\n\r\nvar deepMap = require('../../utils/collection/deepMap');\r\nvar sign = require('../../utils/number').sign;\r\n\r\nfunction factory (type, config, load, typed) {\r\n  /**\r\n   * Calculate the hyperbolic cosecant of a value,\r\n   * defined as `csch(x) = 1 / sinh(x)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.csch(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // csch(x) = 1/ sinh(x)\r\n   *    math.csch(0.5);       // returns 1.9190347513349437\r\n   *    1 / math.sinh(0.5);   // returns 1.9190347513349437\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, sech, coth\r\n   *\r\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x\r\n   */\r\n  var csch = typed('csch', {\r\n    'number': _csch,\r\n\r\n    'Complex': function (x) {\r\n      return x.csch();\r\n    },\r\n\r\n    'BigNumber': function (x) {\r\n      return new type.BigNumber(1).div(x.sinh());\r\n    },\r\n\r\n    'Unit': function (x) {\r\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n        throw new TypeError ('Unit in function csch is no angle');\r\n      }\r\n      return csch(x.value);\r\n    },\r\n\r\n    'Array | Matrix': function (x) {\r\n      return deepMap(x, csch);\r\n    }\r\n  });\r\n\r\n  csch.toTex = {1: '\\\\mathrm{csch}\\\\left(${args[0]}\\\\right)'};\r\n\r\n  return csch;\r\n}\r\n\r\n/**\r\n * Calculate the hyperbolic cosecant of a number\r\n * @param {number} x\r\n * @returns {number}\r\n * @private\r\n */\r\nfunction _csch(x) {\r\n  // consider values close to zero (+/-)\r\n  if (x == 0) {\r\n    return Number.POSITIVE_INFINITY;\r\n  }\r\n  else {\r\n    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);\r\n  }\r\n}\r\n\r\nexports.name = 'csch';\r\nexports.factory = factory;\r\n\n},{\"../../utils/collection/deepMap\":523,\"../../utils/number\":532}],438:[function(require,module,exports){\nmodule.exports = [\n  require('./acos'),\n  require('./acosh'),\n  require('./acot'),\n  require('./acoth'),\n  require('./acsc'),\n  require('./acsch'),\n  require('./asec'),\n  require('./asech'),\n  require('./asin'),\n  require('./asinh'),\n  require('./atan'),\n  require('./atan2'),\n  require('./atanh'),\n  require('./cos'),\n  require('./cosh'),\n  require('./cot'),\n  require('./coth'),\n  require('./csc'),\n  require('./csch'),\n  require('./sec'),\n  require('./sech'),\n  require('./sin'),\n  require('./sinh'),\n  require('./tan'),\n  require('./tanh')\n];\n\n},{\"./acos\":419,\"./acosh\":420,\"./acot\":421,\"./acoth\":422,\"./acsc\":423,\"./acsch\":424,\"./asec\":425,\"./asech\":426,\"./asin\":427,\"./asinh\":428,\"./atan\":429,\"./atan2\":430,\"./atanh\":431,\"./cos\":432,\"./cosh\":433,\"./cot\":434,\"./coth\":435,\"./csc\":436,\"./csch\":437,\"./sec\":439,\"./sech\":440,\"./sin\":441,\"./sinh\":442,\"./tan\":443,\"./tanh\":444}],439:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sec(x)\n   *\n   * Examples:\n   *\n   *    math.sec(2);      // returns number -2.4029979617223822\n   *    1 / math.cos(2);  // returns number -2.4029979617223822\n   *\n   * See also:\n   *\n   *    cos, csc, cot\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Secant of x\n   */\n  var sec = typed('sec', {\n    'number': function (x) {\n      return 1 / Math.cos(x);\n    },\n\n    'Complex': function (x) {\n      return x.sec();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x.cos());\n    },\n\n    'Unit': function (x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError ('Unit in function sec is no angle');\n      }\n      return sec(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, sec);\n    }\n  });\n\n  sec.toTex = {1: '\\\\sec\\\\left(${args[0]}\\\\right)'};\n\n  return sec;\n}\n\nexports.name = 'sec';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],440:[function(require,module,exports){\n'use strict';\r\n\r\nvar deepMap = require('../../utils/collection/deepMap');\r\n\r\nfunction factory (type, config, load, typed) {\r\n  /**\r\n   * Calculate the hyperbolic secant of a value,\r\n   * defined as `sech(x) = 1 / cosh(x)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sech(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // sech(x) = 1/ cosh(x)\r\n   *    math.sech(0.5);       // returns 0.886818883970074\r\n   *    1 / math.cosh(0.5);   // returns 0.886818883970074\r\n   *\r\n   * See also:\r\n   *\r\n   *    cosh, csch, coth\r\n   *\r\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x\r\n   */\r\n  var sech = typed('sech', {\r\n    'number': _sech,\r\n\r\n    'Complex': function (x) {\r\n      return x.sech();\r\n    },\r\n\r\n    'BigNumber': function (x) {\r\n      return new type.BigNumber(1).div(x.cosh());\r\n    },\r\n\r\n    'Unit': function (x) {\r\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n        throw new TypeError ('Unit in function sech is no angle');\r\n      }\r\n      return sech(x.value);\r\n    },\r\n\r\n    'Array | Matrix': function (x) {\r\n      return deepMap(x, sech);\r\n    }\r\n  });\r\n\r\n  sech.toTex = {1: '\\\\mathrm{sech}\\\\left(${args[0]}\\\\right)'};\r\n\r\n  return sech;\r\n}\r\n\r\n/**\r\n * Calculate the hyperbolic secant of a number\r\n * @param {number} x\r\n * @returns {number}\r\n * @private\r\n */\r\nfunction _sech(x) {\r\n  return 2 / (Math.exp(x) + Math.exp(-x));\r\n}\r\n\r\nexports.name = 'sech';\r\nexports.factory = factory;\r\n\n},{\"../../utils/collection/deepMap\":523}],441:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the sine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sin(x)\n   *\n   * Examples:\n   *\n   *    math.sin(2);                      // returns number 0.9092974268256813\n   *    math.sin(math.pi / 4);            // returns number 0.7071067811865475\n   *    math.sin(math.unit(90, 'deg'));   // returns number 1\n   *    math.sin(math.unit(30, 'deg'));   // returns number 0.5\n   *\n   *    var angle = 0.2;\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x\n   */\n  var sin = typed('sin', {\n    'number': Math.sin,\n\n    'Complex': function (x) {\n      return x.sin();\n    },\n\n    'BigNumber': function (x) {\n      return x.sin();\n    },\n\n    'Unit': function (x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError ('Unit in function sin is no angle');\n      }\n      return sin(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since sin(0) = 0\n      return deepMap(x, sin, true);\n    }\n  });\n\n  sin.toTex = {1: '\\\\sin\\\\left(${args[0]}\\\\right)'};\n\n  return sin;\n}\n\nexports.name = 'sin';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],442:[function(require,module,exports){\n'use strict';\r\n\r\nvar deepMap = require('../../utils/collection/deepMap');\r\n\r\nfunction factory (type, config, load, typed) {\r\n  /**\r\n   * Calculate the hyperbolic sine of a value,\r\n   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sinh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sinh(0.5);       // returns number 0.5210953054937474\r\n   *\r\n   * See also:\r\n   *\r\n   *    cosh, tanh\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x\r\n   */\r\n  var sinh = typed('sinh', {\r\n    'number': _sinh,\r\n\r\n    'Complex': function (x) {\r\n      return x.sinh();\r\n    },\r\n\r\n    'BigNumber': function (x) {\r\n      return x.sinh();\r\n    },\r\n\r\n    'Unit': function (x) {\r\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n        throw new TypeError ('Unit in function sinh is no angle');\r\n      }\r\n      return sinh(x.value);\r\n    },\r\n\r\n    'Array | Matrix': function (x) {\r\n      // deep map collection, skip zeros since sinh(0) = 0\r\n      return deepMap(x, sinh, true);\r\n    }\r\n  });\r\n\r\n  sinh.toTex = {1: '\\\\sinh\\\\left(${args[0]}\\\\right)'};\r\n\r\n  return sinh;\r\n}\r\n\r\n/**\r\n * Calculate the hyperbolic sine of a number\r\n * @param {number} x\r\n * @returns {number}\r\n * @private\r\n */\r\nvar _sinh = Math.sinh || function (x) {\r\n  return (Math.exp(x) - Math.exp(-x)) / 2;\r\n};\r\n\r\nexports.name = 'sinh';\r\nexports.factory = factory;\r\n\n},{\"../../utils/collection/deepMap\":523}],443:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.tan(x)\n   *\n   * Examples:\n   *\n   *    math.tan(0.5);                    // returns number 0.5463024898437905\n   *    math.sin(0.5) / math.cos(0.5);    // returns number 0.5463024898437905\n   *    math.tan(math.pi / 4);            // returns number 1\n   *    math.tan(math.unit(45, 'deg'));   // returns number 1\n   *\n   * See also:\n   *\n   *    atan, sin, cos\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x\n   */\n  var tan = typed('tan', {\n    'number': Math.tan,\n\n    'Complex': function (x) {\n        return x.tan();\n    },\n\n    'BigNumber': function (x) {\n      return x.tan();\n    },\n\n    'Unit': function (x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError ('Unit in function tan is no angle');\n      }\n      return tan(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since tan(0) = 0\n      return deepMap(x, tan, true);\n    }\n  });\n\n  tan.toTex = {1: '\\\\tan\\\\left(${args[0]}\\\\right)'};\n\n  return tan;\n}\n\nexports.name = 'tan';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],444:[function(require,module,exports){\n'use strict';\r\n\r\nvar deepMap = require('../../utils/collection/deepMap');\r\n\r\nfunction factory (type, config, load, typed) {\r\n  /**\r\n   * Calculate the hyperbolic tangent of a value,\r\n   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.tanh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\r\n   *    math.tanh(0.5);                   // returns 0.46211715726000974\r\n   *    math.sinh(0.5) / math.cosh(0.5);  // returns 0.46211715726000974\r\n   *    1 / math.coth(0.5);               // returns 0.46211715726000974\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, cosh, coth\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x\r\n   */\r\n  var tanh = typed('tanh', {\r\n    'number': _tanh,\r\n\r\n    'Complex': function (x) {\r\n        return x.tanh();\r\n    },\r\n\r\n    'BigNumber': function (x) {\r\n      return x.tanh();\r\n    },\r\n\r\n    'Unit': function (x) {\r\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n        throw new TypeError ('Unit in function tanh is no angle');\r\n      }\r\n      return tanh(x.value);\r\n    },\r\n\r\n    'Array | Matrix': function (x) {\r\n      // deep map collection, skip zeros since tanh(0) = 0\r\n      return deepMap(x, tanh, true);\r\n    }\r\n  });\r\n\r\n  tanh.toTex = {1: '\\\\tanh\\\\left(${args[0]}\\\\right)'};\r\n\r\n  return tanh;\r\n}\r\n\r\n/**\r\n * Calculate the hyperbolic tangent of a number\r\n * @param {number} x\r\n * @returns {number}\r\n * @private\r\n */\r\nvar _tanh = Math.tanh || function (x) {\r\n  var e = Math.exp(2 * x);\r\n  return (e - 1) / (e + 1);\r\n};\r\n\r\nexports.name = 'tanh';\r\nexports.factory = factory;\r\n\n},{\"../../utils/collection/deepMap\":523}],445:[function(require,module,exports){\nmodule.exports = [\n  require('./to')\n];\n},{\"./to\":446}],446:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm');                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'));  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits');              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n  var to = typed('to', {\n\n    'Unit, Unit | string': function (x, unit) {\n      return x.to(unit);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // SparseMatrix does not support Units\n      return algorithm13(x, y, to);\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return to(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return to(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return to(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(x, y, to, false);\n    },\n\n    'any, Matrix': function (x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(y, x, to, true);\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, to, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, to, true).valueOf();\n    }\n  });\n\n  to.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['to'] + '${args[1]}\\\\right)'\n  };\n\n  return to;\n}\n\nexports.name = 'to';\nexports.factory = factory;\n\n},{\"../../type/matrix/function/matrix\":482,\"../../type/matrix/utils/algorithm13\":497,\"../../type/matrix/utils/algorithm14\":498,\"../../utils/latex\":531}],447:[function(require,module,exports){\n'use strict';\n\nvar object= require('../../utils/object');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Clone an object.\n   *\n   * Syntax:\n   *\n   *     math.clone(x)\n   *\n   * Examples:\n   *\n   *    math.clone(3.5);                   // returns number 3.5\n   *    math.clone(math.complex('2-4i'); // returns Complex 2 - 4i\n   *    math.clone(math.unit(45, 'deg'));  // returns Unit 45 deg\n   *    math.clone([[1, 2], [3, 4]]);      // returns Array [[1, 2], [3, 4]]\n   *    math.clone(\"hello world\");         // returns string \"hello world\"\n   *\n   * @param {*} x   Object to be cloned\n   * @return {*} A clone of object x\n   */\n  var clone = typed('clone', {\n    'any': object.clone\n  });\n\n  clone.toTex = undefined; // use default template\n\n  return clone;\n}\n\nexports.name = 'clone';\nexports.factory = factory;\n\n},{\"../../utils/object\":533}],448:[function(require,module,exports){\nmodule.exports = [\n  require('./clone'),\n  require('./isInteger'),\n  require('./isNegative'),\n  require('./isNumeric'),\n  require('./isPositive'),\n  require('./isPrime'),\n  require('./isZero'),\n  require('./isNaN'),\n  require('./typeof')\n];\n\n},{\"./clone\":447,\"./isInteger\":449,\"./isNaN\":450,\"./isNegative\":451,\"./isNumeric\":452,\"./isPositive\":453,\"./isPrime\":454,\"./isZero\":455,\"./typeof\":456}],449:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar number = require('../../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2);                     // returns true\n   *    math.isInteger(0);                     // returns true\n   *    math.isInteger(0.5);                   // returns false\n   *    math.isInteger(math.bignumber(500));   // returns true\n   *    math.isInteger(math.fraction(4));      // returns true\n   *    math.isInteger('3');                   // returns true\n   *    math.isInteger([3, 0.5, -2]);          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i');   // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isInteger = typed('isInteger', {\n    'number': number.isInteger, // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n\n    'BigNumber': function (x) {\n      return x.isInt();\n    },\n\n    'Fraction': function (x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, isInteger);\n    }\n  });\n\n  return isInteger;\n}\n\nexports.name = 'isInteger';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523,\"../../utils/number\":532}],450:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar number = require('../../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Test whether a value is NaN (not a number).\n   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNaN(x)\n   *\n   * Examples:\n   *\n   *    math.isNaN(3);                     // returns false\n   *    math.isNaN(NaN);                   // returns true\n   *    math.isNaN(0);                     // returns false\n   *    math.isNaN(math.bignumber(NaN));   // returns true\n   *    math.isNaN(math.bignumber(0));     // returns false\n   *    math.isNaN(math.fraction(-2, 5));  // returns false\n   *    math.isNaN('-2');                  // returns false\n   *    math.isNaN([2, 0, -3, NaN]');      // returns [false, false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isNegative, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is NaN.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isNaN = typed('isNaN', {\n    'number': function (x) {\n      return Number.isNaN(x);\n    },\n\n    'BigNumber': function (x) {\n      return x.isNaN();\n    },\n\n    'Fraction': function (x) {\n      return false;\n    },\n\n    'Complex': function (x) {\n      return Number.isNaN(x.re) && Number.isNaN(x.im);\n    },\n\n    'Unit': function (x) {\n      return Number.isNaN(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, Number.isNaN);\n    }\n  });\n\n  return isNaN;\n}\n\nexports.name = 'isNaN';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523,\"../../utils/number\":532}],451:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar number = require('../../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Test whether a value is negative: smaller than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNegative(x)\n   *\n   * Examples:\n   *\n   *    math.isNegative(3);                     // returns false\n   *    math.isNegative(-2);                    // returns true\n   *    math.isNegative(0);                     // returns false\n   *    math.isNegative(-0);                    // returns false\n   *    math.isNegative(math.bignumber(2));     // returns false\n   *    math.isNegative(math.fraction(-2, 5));  // returns true\n   *    math.isNegative('-2');                  // returns true\n   *    math.isNegative([2, 0, -3]');           // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isNegative = typed('isNegative', {\n    'number': function (x) {\n      return x < 0;\n    },\n\n    'BigNumber': function (x) {\n      return x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n\n    'Fraction': function (x) {\n      return x.s < 0; // It's enough to decide on the sign\n    },\n\n    'Unit': function (x) {\n      return isNegative(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, isNegative);\n    }\n  });\n\n  return isNegative;\n}\n\nexports.name = 'isNegative';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523,\"../../utils/number\":532}],452:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar number = require('../../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Test whether a value is an numeric value.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNumeric(x)\n   *\n   * Examples:\n   *\n   *    math.isNumeric(2);                     // returns true\n   *    math.isNumeric(0);                     // returns true\n   *    math.isNumeric(math.bignumber(500));   // returns true\n   *    math.isNumeric(math.fraction(4));      // returns true\n   *    math.isNumeric(math.complex('2-4i');   // returns false\n   *    math.isNumeric('3');                   // returns false\n   *    math.isNumeric([2.3, 'foo', false]);   // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    isZero, isPositive, isNegative, isInteger\n   *\n   * @param {*} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n   *                    `Fraction`, or `boolean`. Returns false for other types.\n   *                    Throws an error in case of unknown types.\n   */\n  var isNumeric = typed('isNumeric', {\n    'number | BigNumber | Fraction | boolean': function () {\n      return true;\n    },\n\n    'Complex | Unit | string': function () {\n      return false;\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, isNumeric);\n    }\n  });\n\n  return isNumeric;\n}\n\nexports.name = 'isNumeric';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523,\"../../utils/number\":532}],453:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar number = require('../../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Test whether a value is positive: larger than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPositive(x)\n   *\n   * Examples:\n   *\n   *    math.isPositive(3);                     // returns true\n   *    math.isPositive(-2);                    // returns false\n   *    math.isPositive(0);                     // returns false\n   *    math.isPositive(-0);                    // returns false\n   *    math.isPositive(0.5);                   // returns true\n   *    math.isPositive(math.bignumber(2));     // returns true\n   *    math.isPositive(math.fraction(-2, 5));  // returns false\n   *    math.isPositive(math.fraction(1,3));    // returns false\n   *    math.isPositive('2');                   // returns true\n   *    math.isPositive([2, 0, -3]');           // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isPositive = typed('isPositive', {\n    'number': function (x) {\n      return x > 0;\n    },\n\n    'BigNumber': function (x) {\n      return !x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n\n    'Fraction': function (x) {\n      return x.s > 0 && x.n > 0;\n    },\n\n    'Unit': function (x) {\n      return isPositive(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, isPositive);\n    }\n  });\n\n  return isPositive;\n}\n\nexports.name = 'isPositive';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523,\"../../utils/number\":532}],454:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Test whether a value is prime: has no divisors other than itself and one.\n   * The function supports type `number`, `bignumber`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPrime(x)\n   *\n   * Examples:\n   *\n   *    math.isPrime(3);                     // returns true\n   *    math.isPrime(-2);                    // returns false\n   *    math.isPrime(0);                     // returns false\n   *    math.isPrime(-0);                    // returns false\n   *    math.isPrime(0.5);                   // returns false\n   *    math.isPrime('2');                   // returns true\n   *    math.isPrime([2, 17, 100]');           // returns [true, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isPrime = typed('isPrime', {\n    'number': function (x) {\n      if (x < 2){\n        return false;\n      }\n      if (x == 2){\n        return true;\n      }\n      if (x % 2 == 0){ \n        return false;\n      }\n      for (var i = 3; i * i <= x; i += 2){\n        if (x % i == 0){\n          return false;\n        }\n      }\n      return true;\n    },\n\n    'BigNumber': function (x) {\n      if (x.lt(2)){\n        return false;\n      }\n      if (x.equals(2)){\n        return true;\n      }\n      if (x.mod(2).isZero()){\n        return false;\n      }\n      for(var i = type.BigNumber(3); i.times(i).lte(x); i = i.plus(1)){\n        if (x.mod(i).isZero()){\n          return false;\n        }\n      }\n      return true;\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, isPrime);\n    }\n  });\n\n  return isPrime;\n}\n\nexports.name = 'isPrime';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523}],455:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar number = require('../../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Test whether a value is zero.\n   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\n   * `Complex`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isZero(x)\n   *\n   * Examples:\n   *\n   *    math.isZero(0);                     // returns true\n   *    math.isZero(2);                     // returns false\n   *    math.isZero(0.5);                   // returns false\n   *    math.isZero(math.bignumber(0));     // returns true\n   *    math.isZero(math.fraction(0));      // returns true\n   *    math.isZero(math.fraction(1,3));    // returns false\n   *    math.isZero(math.complex('2 - 4i'); // returns false\n   *    math.isZero(math.complex('0i');     // returns true\n   *    math.isZero('0');                   // returns true\n   *    math.isZero('2');                   // returns false\n   *    math.isZero([2, 0, -3]');           // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isZero = typed('isZero', {\n    'number': function (x) {\n      return x === 0;\n    },\n\n    'BigNumber': function (x) {\n      return x.isZero();\n    },\n\n    'Complex': function (x) {\n      return x.re === 0 && x.im === 0;\n    },\n\n    'Fraction': function (x) {\n      return x.d === 1 && x.n === 0;\n    },\n\n    'Unit': function (x) {\n      return isZero(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, isZero);\n    }\n  });\n\n  return isZero;\n}\n\nexports.name = 'isZero';\nexports.factory = factory;\n\n},{\"../../utils/collection/deepMap\":523,\"../../utils/number\":532}],456:[function(require,module,exports){\n'use strict';\n\nvar types = require('../../utils/types');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Determine the type of a variable.\n   *\n   * Function `typeof` recognizes the following types of objects:\n   *\n   * Object                 | Returns       | Example\n   * ---------------------- | ------------- | ------------------------------------------\n   * null                   | `'null'`      | `math.typeof(null)`\n   * number                 | `'number'`    | `math.typeof(3.5)`\n   * boolean                | `'boolean'`   | `math.typeof (true)`\n   * string                 | `'string'`    | `math.typeof ('hello world')`\n   * Array                  | `'Array'`     | `math.typeof ([1, 2, 3])`\n   * Date                   | `'Date'`      | `math.typeof (new Date())`\n   * Function               | `'Function'`  | `math.typeof (function () {})`\n   * Object                 | `'Object'`    | `math.typeof ({a: 2, b: 3})`\n   * RegExp                 | `'RegExp'`    | `math.typeof (/a regexp/)`\n   * undefined              | `'undefined'` | `math.typeof(undefined)`\n   * math.type.BigNumber    | `'BigNumber'` | `math.typeof (math.bignumber('2.3e500'))`\n   * math.type.Chain        | `'Chain'`     | `math.typeof (math.chain(2))`\n   * math.type.Complex      | `'Complex'`   | `math.typeof (math.complex(2, 3))`\n   * math.type.Fraction     | `'Fraction'`  | `math.typeof (math.fraction(1, 3))`\n   * math.type.Help         | `'Help'`      | `math.typeof (math.help('sqrt'))`\n   * math.type.Index        | `'Index'`     | `math.typeof (math.index(1, 3))`\n   * math.type.Matrix       | `'Matrix'`    | `math.typeof (math.matrix([[1,2], [3, 4]]))`\n   * math.type.Range        | `'Range'`     | `math.typeof (math.range(0, 10))`\n   * math.type.Unit         | `'Unit'`      | `math.typeof (math.unit('45 deg'))`\n   *\n   * Syntax:\n   *\n   *    math.typeof(x)\n   *\n   * Examples:\n   *\n   *    math.typeof(3.5);                     // returns 'number'\n   *    math.typeof(math.complex('2-4i'));    // returns 'Complex'\n   *    math.typeof(math.unit('45 deg'));     // returns 'Unit'\n   *    math.typeof('hello world');           // returns 'string'\n   *\n   * @param {*} x     The variable for which to test the type.\n   * @return {string} Returns the name of the type. Primitive types are lower case,\n   *                  non-primitive types are upper-camel-case.\n   *                  For example 'number', 'string', 'Array', 'Date'.\n   */\n  var _typeof = typed('_typeof', {\n    'any': function (x) {\n      // JavaScript types\n      var t = types.type(x);\n\n      // math.js types\n      if (t === 'Object') {\n        if (x.isBigNumber === true) return 'BigNumber';\n        if (x.isComplex === true)   return 'Complex';\n        if (x.isFraction === true)  return 'Fraction';\n        if (x.isMatrix === true)    return 'Matrix';\n        if (x.isUnit === true)      return 'Unit';\n        if (x.isIndex === true)     return 'Index';\n        if (x.isRange === true)     return 'Range';\n        if (x.isChain === true)     return 'Chain';\n        if (x.isHelp === true)      return 'Help';\n      }\n\n      return t;\n    }\n  });\n\n  _typeof.toTex = undefined; // use default template\n\n  return _typeof;\n}\n\nexports.name = 'typeof';\nexports.factory = factory;\n\n},{\"../../utils/types\":535}],457:[function(require,module,exports){\nmodule.exports = [\n  require('./reviver')\n];\n\n},{\"./reviver\":458}],458:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Instantiate mathjs data types from their JSON representation\n   * @param {string} key\n   * @param {*} value\n   * @returns {*} Returns the revived object\n   */\n  return function reviver(key, value) {\n    var constructor = type[value && value.mathjs];\n    if (constructor && typeof constructor.fromJSON === 'function') {\n      return constructor.fromJSON(value);\n    }\n\n    return value;\n  }\n}\n\nexports.name = 'reviver';\nexports.path = 'json';\nexports.factory = factory;\n\n},{}],459:[function(require,module,exports){\nvar Decimal = require('decimal.js/decimal.js'); // make sure to pick the es5 version\n\nfunction factory (type, config, load, typed, math) {\n  var BigNumber = Decimal.clone({precision: config.precision});\n\n  /**\n   * Attach type information\n   */\n  BigNumber.prototype.type = 'BigNumber';\n  BigNumber.prototype.isBigNumber = true;\n\n  /**\n   * Get a JSON representation of a BigNumber containing\n   * type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   */\n  BigNumber.prototype.toJSON = function () {\n    return {\n      mathjs: 'BigNumber',\n      value: this.toString()\n    };\n  };\n\n  /**\n   * Instantiate a BigNumber from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   * @return {BigNumber}\n   */\n  BigNumber.fromJSON = function (json) {\n    return new BigNumber(json.value);\n  };\n\n  // listen for changed in the configuration, automatically apply changed precision\n  math.on('config', function (curr, prev) {\n    if (curr.precision !== prev.precision) {\n      BigNumber.config({ precision: curr.precision });\n    }\n  });\n\n  return BigNumber;\n}\n\nexports.name = 'BigNumber';\nexports.path = 'type';\nexports.factory = factory;\nexports.math = true; // request access to the math namespace\n},{\"decimal.js/decimal.js\":2}],460:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2;                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2);  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500;                                    // returns number Infinity\n   *    math.bignumber('7.2e500');                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  var bignumber = typed('bignumber', {\n    '': function () {\n      return new type.BigNumber(0);\n    },\n\n    'number': function (x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new type.BigNumber(x + '');\n    },\n\n    'string': function (x) {\n      return new type.BigNumber(x);\n    },\n\n    'BigNumber': function (x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n\n    'Fraction': function (x) {\n      return new type.BigNumber(x.n).div(x.d);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, bignumber);\n    }\n  });\n\n  bignumber.toTex = {\n    0: '0',\n    1: '\\\\left(${args[0]}\\\\right)'\n  };\n\n  return bignumber;\n}\n\nexports.name = 'bignumber';\nexports.factory = factory;\n\n},{\"../../../utils/collection/deepMap\":523}],461:[function(require,module,exports){\nmodule.exports = [\n  // type\n  require('./BigNumber'),\n\n  // construction function\n  require('./function/bignumber')\n];\n\n},{\"./BigNumber\":459,\"./function/bignumber\":460}],462:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('./../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a boolean or convert a string or number to a boolean.\n   * In case of a number, `true` is returned for non-zero numbers, and `false` in\n   * case of zero.\n   * Strings can be `'true'` or `'false'`, or can contain a number.\n   * When value is a matrix, all elements will be converted to boolean.\n   *\n   * Syntax:\n   *\n   *    math.boolean(x)\n   *\n   * Examples:\n   *\n   *    math.boolean(0);     // returns false\n   *    math.boolean(1);     // returns true\n   *    math.boolean(-3);     // returns true\n   *    math.boolean('true');     // returns true\n   *    math.boolean('false');     // returns false\n   *    math.boolean([1, 0, 1, 1]);     // returns [true, false, true, true]\n   *\n   * See also:\n   *\n   *    bignumber, complex, index, matrix, string, unit\n   *\n   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\n   * @return {boolean | Array | Matrix} The boolean value\n   */\n  var bool = typed('bool', {\n    '': function () {\n      return false;\n    },\n\n    'boolean': function (x) {\n      return x;\n    },\n\n    'number': function (x) {\n      return !!x;\n    },\n\n    'BigNumber': function (x) {\n      return !x.isZero();\n    },\n\n    'string': function (x) {\n      // try case insensitive\n      var lcase = x.toLowerCase();\n      if (lcase === 'true') {\n        return true;\n      }\n      else if (lcase === 'false') {\n        return false;\n      }\n\n      // test whether value is a valid number\n      var num = Number(x);\n      if (x != '' && !isNaN(num)) {\n        return !!num;\n      }\n\n      throw new Error('Cannot convert \"' + x + '\" to a boolean');\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, bool);\n    }\n  });\n\n  return bool;\n}\n\nexports.name = 'boolean';\nexports.factory = factory;\n\n},{\"./../utils/collection/deepMap\":523}],463:[function(require,module,exports){\n'use strict';\n\nvar format = require('../../utils/string').format;\nvar lazy = require('../../utils/object').lazy;\n\nfunction factory (type, config, load, typed, math) {\n  /**\n   * @constructor Chain\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing chain.done(), which will return\n   * the final value.\n   *\n   * The Chain has a number of special functions:\n   * - done()             Finalize the chained operation and return the\n   *                      chain's value.\n   * - valueOf()          The same as done()\n   * - toString()         Returns a string representation of the chain's value.\n   *\n   * @param {*} [value]\n   */\n  function Chain (value) {\n    if (!(this instanceof Chain)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (value && value.isChain) {\n      this.value = value.value;\n    }\n    else {\n      this.value = value;\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Chain.prototype.type = 'Chain';\n  Chain.prototype.isChain = true;\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method valueOf()\n   * @returns {*} value\n   */\n  Chain.prototype.done = function () {\n    return this.value;\n  };\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method done()\n   * @returns {*} value\n   */\n  Chain.prototype.valueOf = function () {\n    return this.value;\n  };\n\n  /**\n   * Get a string representation of the value in the chain\n   * @returns {string}\n   */\n  Chain.prototype.toString = function () {\n    return format(this.value);\n  };\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {Function} fn      The function to be proxied\n   *                           If fn is no function, it is silently ignored.\n   * @private\n   */\n  function createProxy(name, fn) {\n    if (typeof fn === 'function') {\n      Chain.prototype[name] = chainify(fn);\n    }\n  }\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {function} resolver   The function resolving with the\n   *                              function to be proxied\n   * @private\n   */\n  function createLazyProxy(name, resolver) {\n    lazy(Chain.prototype, name, function outerResolver() {\n      var fn = resolver();\n      if (typeof fn === 'function') {\n        return chainify(fn);\n      }\n\n      return undefined; // if not a function, ignore\n    });\n  }\n\n  /**\n   * Make a function chainable\n   * @param {function} fn\n   * @return {Function} chain function\n   * @private\n   */\n  function chainify (fn) {\n    return function () {\n      var args = [this.value];  // `this` will be the context of a Chain instance\n      for (var i = 0; i < arguments.length; i++) {\n        args[i + 1] = arguments[i];\n      }\n\n      return new Chain(fn.apply(fn, args));\n    }\n  }\n\n  /**\n   * Create a proxy for a single method, or an object with multiple methods.\n   * Example usage:\n   *\n   *   Chain.createProxy('add', function add (x, y) {...});\n   *   Chain.createProxy({\n   *     add:      function add (x, y) {...},\n   *     subtract: function subtract (x, y) {...}\n   *   }\n   *\n   * @param {string | Object} arg0   A name (string), or an object with\n   *                                 functions\n   * @param {*} [arg1]               A function, when arg0 is a name\n   */\n  Chain.createProxy = function (arg0, arg1) {\n    if (typeof arg0 === 'string') {\n      // createProxy(name, value)\n      createProxy(arg0, arg1);\n    }\n    else {\n      // createProxy(values)\n      for (var prop in arg0) {\n        if (arg0.hasOwnProperty(prop)) {\n          createProxy(prop, arg0[prop]);\n        }\n      }\n    }\n  };\n\n  // create proxy for everything that is in math.js\n  Chain.createProxy(math);\n\n  // register on the import event, automatically add a proxy for every imported function.\n  math.on('import', function (name, resolver, path) {\n    if (path === undefined) {\n      // an imported function (not a data type or something special)\n      createLazyProxy(name, resolver);\n    }\n  });\n\n  return Chain;\n}\n\nexports.name = 'Chain';\nexports.path = 'type';\nexports.factory = factory;\nexports.math = true;  // require providing the math namespace as 5th argument\nexports.lazy = false; // we need to register a listener on the import events, so no lazy loading\n\n},{\"../../utils/object\":533,\"../../utils/string\":534}],464:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing `chain.done()`, which returns\n   * the final value.\n   *\n   * The chain has a number of special functions:\n   *\n   * - `done()`     Finalize the chain and return the chain's value.\n   * - `valueOf()`  The same as `done()`\n   * - `toString()` Executes `math.format()` onto the chain's value, returning\n   *                a string representation of the value.\n   *\n   * Syntax:\n   *\n   *    math.chain(value)\n   *\n   * Examples:\n   *\n   *     math.chain(3)\n   *         .add(4)\n   *         .subtract(2)\n   *         .done();     // 5\n   *\n   *     math.chain( [[1, 2], [3, 4]] )\n   *         .subset(math.index(0, 0), 8)\n   *         .multiply(3)\n   *         .done();     // [[24, 6], [9, 12]]\n   *\n   * @param {*} [value]   A value of any type on which to start a chained operation.\n   * @return {math.type.Chain} The created chain\n   */\n  return typed('chain', {\n    '': function() {\n      return new type.Chain();\n    },\n\n    'any': function(value) {\n      return new type.Chain(value);\n    }\n  });\n}\n\nexports.name = 'chain';\nexports.factory = factory;\n\n},{}],465:[function(require,module,exports){\nmodule.exports = [\n  // type\n  require('./Chain'),\n\n  // construction function\n  require('./function/chain')\n];\n\n},{\"./Chain\":463,\"./function/chain\":464}],466:[function(require,module,exports){\nvar Complex = require('complex.js');\nvar format = require('../../utils/number').format;\nvar isNumber = require('../../utils/number').isNumber;\n\nfunction factory (type, config, load, typed, math) {\n\n  /**\n   * Attach type information\n   */\n  Complex.prototype.type = 'Complex';\n  Complex.prototype.isComplex = true;\n\n\n  /**\n   * Get a JSON representation of the complex number\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\n   */\n  Complex.prototype.toJSON = function () {\n    return {\n      mathjs: 'Complex',\n      re: this.re,\n      im: this.im\n    };\n  };\n\n  /*\n   * Return the value of the complex number in polar notation\n   * The angle phi will be set in the interval of [-pi, pi].\n   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\n   */\n  Complex.prototype.toPolar = function () {\n    return {\n      r: this.abs(),\n      phi: this.arg()\n    };\n  };\n\n  /**\n   * Get a string representation of the complex number,\n   * with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string} str\n   */\n  Complex.prototype.format = function (options) {\n    var str = '';\n    var im = this.im;\n    var re = this.re;\n    var strRe = format(this.re, options);\n    var strIm = format(this.im, options);\n\n    // round either re or im when smaller than the configured precision\n    var precision = isNumber(options) ? options : options ? options.precision : null;\n    if (precision !== null) {\n      var epsilon = Math.pow(10, -precision);\n      if (Math.abs(re / im) < epsilon) {\n        re = 0;\n      }\n      if (Math.abs(im / re) < epsilon) {\n        im = 0;\n      }\n    }\n\n    if (im == 0) {\n      // real value\n      str = strRe;\n    } else if (re == 0) {\n      // purely complex value\n      if (im == 1) {\n        str = 'i';\n      } else if (im == -1) {\n        str = '-i';\n      } else {\n        str = strIm + 'i';\n      }\n    } else {\n      // complex value\n      if (im < 0) {\n        if (im == -1) {\n          str = strRe + ' - i';\n        } else {\n          str = strRe + ' - ' + (/[\\d-.]/.test(strIm.charAt(0)) ? strIm.substring(1) : strIm) + 'i';\n        }\n      } else {\n        if (im == 1) {\n          str = strRe + ' + i';\n        } else {\n          str = strRe + ' + ' + strIm + 'i';\n        }\n      }\n    }\n    return str;\n  };\n\n  /**\n   * Create a complex number from polar coordinates\n   *\n   * Usage:\n   *\n   *     Complex.fromPolar(r: number, phi: number) : Complex\n   *     Complex.fromPolar({r: number, phi: number}) : Complex\n   *\n   * @param {*} args...\n   * @return {Complex}\n   */\n  Complex.fromPolar = function (args) {\n    switch (arguments.length) {\n      case 1:\n        var arg = arguments[0];\n        if (typeof arg === 'object') {\n          return Complex(arg);\n        }\n        throw new TypeError('Input has to be an object with r and phi keys.');\n\n      case 2:\n        var r = arguments[0],\n            phi = arguments[1];\n        if (isNumber(r)) {\n          if (phi && phi.isUnit && phi.hasBase('ANGLE')) {\n            // convert unit to a number in radians\n            phi = phi.toNumber('rad');\n          }\n\n          if (isNumber(phi)) {\n            return new Complex({r: r, phi: phi});\n          }\n\n          throw new TypeError('Phi is not a number nor an angle unit.');\n        } else {\n          throw new TypeError('Radius r is not a number.');\n        }\n\n      default:\n        throw new SyntaxError('Wrong number of arguments in function fromPolar');\n    }\n  };\n\n\n  Complex.prototype.valueOf = Complex.prototype.toString;\n\n  /**\n   * Create a Complex number from a JSON object\n   * @param {Object} json  A JSON Object structured as\n   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n   *                       All properties are optional, default values\n   *                       for `re` and `im` are 0.\n   * @return {Complex} Returns a new Complex number\n   */\n  Complex.fromJSON = function (json) {\n    return new Complex(json);\n  };\n\n  // apply the current epsilon\n  Complex.EPSILON = config.epsilon;\n\n  // listen for changed in the configuration, automatically apply changed epsilon\n  math.on('config', function (curr, prev) {\n    if (curr.epsilon !== prev.epsilon) {\n      Complex.EPSILON = curr.epsilon;\n    }\n  });\n\n  /**\n   * Compare two complex numbers, `a` and `b`:\n   *\n   * - Returns 1 when the real part of `a` is larger than the real part of `b`\n   * - Returns -1 when the real part of `a` is smaller than the real part of `b`\n   * - Returns 1 when the real parts are equal\n   *   and the imaginary part of `a` is larger than the imaginary part of `b`\n   * - Returns -1 when the real parts are equal\n   *   and the imaginary part of `a` is smaller than the imaginary part of `b`\n   * - Returns 0 when both real and imaginary parts are equal.\n   *\n   * @params {Complex} a\n   * @params {Complex} b\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  Complex.compare = function (a, b) {\n    if (a.re > b.re) { return 1; }\n    if (a.re < b.re) { return -1; }\n\n    if (a.im > b.im) { return 1; }\n    if (a.im < b.im) { return -1; }\n\n    return 0;\n  }\n\n  return Complex;\n}\n\nexports.name = 'Complex';\nexports.path = 'type';\nexports.factory = factory;\nexports.math = true; // request access to the math namespace\n\n},{\"../../utils/number\":532,\"complex.js\":1}],467:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../../utils/latex');\n\n  /**\n   * Create a complex value or convert a value to a complex value.\n   *\n   * Syntax:\n   *\n   *     math.complex()                           // creates a complex value with zero\n   *                                              // as real and imaginary part.\n   *     math.complex(re : number, im : string)   // creates a complex value with provided\n   *                                              // values for real and imaginary part.\n   *     math.complex(re : number)                // creates a complex value with provided\n   *                                              // real value and zero imaginary part.\n   *     math.complex(complex : Complex)          // clones the provided complex value.\n   *     math.complex(arg : string)               // parses a string into a complex value.\n   *     math.complex(array : Array)              // converts the elements of the array\n   *                                              // or matrix element wise into a\n   *                                              // complex value.\n   *     math.complex({re: number, im: number})   // creates a complex value with provided\n   *                                              // values for real an imaginary part.\n   *     math.complex({r: number, phi: number})   // creates a complex value with provided\n   *                                              // polar coordinates\n   *\n   * Examples:\n   *\n   *    var a = math.complex(3, -4);     // a = Complex 3 - 4i\n   *    a.re = 5;                        // a = Complex 5 - 4i\n   *    var i = a.im;                    // Number -4;\n   *    var b = math.complex('2 + 6i');  // Complex 2 + 6i\n   *    var c = math.complex();          // Complex 0 + 0i\n   *    var d = math.add(a, b);          // Complex 5 + 2i\n   *\n   * See also:\n   *\n   *    bignumber, boolean, index, matrix, number, string, unit\n   *\n   * @param {* | Array | Matrix} [args]\n   *            Arguments specifying the real and imaginary part of the complex number\n   * @return {Complex | Array | Matrix} Returns a complex value\n   */\n  var complex = typed('complex', {\n    '': function () {\n      return type.Complex.ZERO;\n    },\n\n    'number': function (x) {\n      return new type.Complex(x, 0);\n    },\n\n    'number, number': function (re, im) {\n      return new type.Complex(re, im);\n    },\n\n    // TODO: this signature should be redundant\n    'BigNumber, BigNumber': function (re, im) {\n      return new type.Complex(re.toNumber(), im.toNumber());\n    },\n\n    'Complex': function (x) {\n      return x.clone();\n    },\n\n    'string': function (x) {\n      return type.Complex(x); // for example '2 + 3i'\n    },\n\n    'Object': function (x) {\n      if('re' in x && 'im' in x) {\n        return new type.Complex(x.re, x.im);\n      }\n\n      if ('r' in x && 'phi' in x) {\n        return new type.Complex(x);\n      }\n\n      throw new Error('Expected object with either properties re and im, or properties r and phi.');\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, complex);\n    }\n  });\n\n  complex.toTex = {\n    0: '0',\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(\\\\left(${args[0]}\\\\right)+'\n      + latex.symbols['i'] + '\\\\cdot\\\\left(${args[1]}\\\\right)\\\\right)'\n  };\n\n  return complex;\n}\n\nexports.name = 'complex';\nexports.factory = factory;\n\n},{\"../../../utils/collection/deepMap\":523,\"../../../utils/latex\":531}],468:[function(require,module,exports){\nmodule.exports = [\n  // type\n  require('./Complex'),\n\n  // construction function\n  require('./function/complex')\n];\n\n},{\"./Complex\":466,\"./function/complex\":467}],469:[function(require,module,exports){\nvar Fraction = require('fraction.js');\n\n/**\n * Attach type information\n */\nFraction.prototype.type = 'Fraction';\nFraction.prototype.isFraction = true;\n\n/**\n * Get a JSON representation of a Fraction containing type information\n * @returns {Object} Returns a JSON object structured as:\n *                   `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`\n */\nFraction.prototype.toJSON = function () {\n  return {\n    mathjs: 'Fraction',\n    n: this.s * this.n,\n    d: this.d\n  };\n};\n\n/**\n * Instantiate a Fraction from a JSON object\n * @param {Object} json  a JSON object structured as:\n *                       `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`\n * @return {BigNumber}\n */\nFraction.fromJSON = function (json) {\n  return new Fraction(json);\n};\n\n\nfunction factory (type, config, load, typed) {\n  return Fraction;\n}\n\nexports.name = 'Fraction';\nexports.path = 'type';\nexports.factory = factory;\n\n},{\"fraction.js\":3}],470:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a fraction convert a value to a fraction.\n   *\n   * Syntax:\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n   *                                                   into fractions\n   *\n   * Examples:\n   *\n   *     math.fraction(1, 3);\n   *     math.fraction('2/3');\n   *     math.fraction({n: 2, d: 3});\n   *     math.fraction([0.2, 0.25, 1.25]);\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  var fraction = typed('fraction', {\n    'number': function (x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n\n      return new type.Fraction(x);\n    },\n\n    'string': function (x) {\n      return new type.Fraction(x);\n    },\n\n    'number, number': function (numerator, denominator) {\n      return new type.Fraction(numerator, denominator);\n    },\n\n    'BigNumber': function (x) {\n      return new type.Fraction(x.toString());\n    },\n\n    'Fraction': function (x) {\n      return x; // fractions are immutable\n    },\n\n    'Object': function (x) {\n      return new type.Fraction(x);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, fraction);\n    }\n  });\n\n  return fraction;\n}\n\nexports.name = 'fraction';\nexports.factory = factory;\n\n},{\"../../../utils/collection/deepMap\":523}],471:[function(require,module,exports){\nmodule.exports = [\n  // type\n  require('./Fraction'),\n\n  // construction function\n  require('./function/fraction')\n];\n\n},{\"./Fraction\":469,\"./function/fraction\":470}],472:[function(require,module,exports){\nmodule.exports = [\n  require('./bignumber'),\n  require('./boolean'),\n  require('./chain'),\n  require('./complex'),\n  require('./fraction'),\n  require('./matrix'),\n  require('./number'),\n  require('./resultset'),\n  require('./string'),\n  require('./unit')\n];\n\n},{\"./bignumber\":461,\"./boolean\":462,\"./chain\":465,\"./complex\":468,\"./fraction\":471,\"./matrix\":484,\"./number\":499,\"./resultset\":501,\"./string\":502,\"./unit\":507}],473:[function(require,module,exports){\n'use strict';\n\nvar util = require('../../utils/index');\nvar DimensionError = require('../../error/DimensionError');\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\n\nvar string = util.string;\nvar array = util.array;\nvar object = util.object;\nvar number = util.number;\n\nvar isArray = Array.isArray;\nvar isNumber = number.isNumber;\nvar isInteger = number.isInteger;\nvar isString = string.isString;\n\nvar validateIndex = array.validateIndex;\n\nfunction factory (type, config, load, typed) {\n  var Matrix = load(require('./Matrix')); // force loading Matrix (do not use via type.Matrix)\n\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   */\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix))\n      throw new SyntaxError('Constructor must be called with the new operator');\n    if (datatype && !isString(datatype))\n      throw new Error('Invalid datatype: ' + datatype);\n\n    if (data && data.isMatrix === true) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = object.clone(data._data);\n        this._size = object.clone(data._size);\n        this._datatype = datatype || data._datatype;\n      }\n      else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    }\n    else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    }\n    else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data);\n      // get the dimensions of the array\n      this._size = array.size(this._data);\n      // verify the dimensions of the array, TODO: compute size while processing array\n      array.validate(this._data, this._size);\n      // data type unknown\n      this._datatype = datatype;\n    }\n    else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n    }\n    else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n  \n  DenseMatrix.prototype = new Matrix();\n\n  /**\n   * Attach type information\n   */\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     var format = matrix.storage()                   // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     var format = matrix.datatype()                   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     var subset = matrix.subset(index)               // retrieve subset\n   *     var value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | DenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n\n        // intentional fall through\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  \n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  DenseMatrix.prototype.get = function (index) {\n    if (!isArray(index))\n      throw new TypeError('Array expected');\n    if (index.length != this._size.length)\n      throw new DimensionError(index.length, this._size.length);\n\n    // check index\n    for (var x = 0; x < index.length; x++)\n      validateIndex(index[x], this._size[x]);\n\n    var data = this._data;\n    for (var i = 0, ii = index.length; i < ii; i++) {\n      var index_i = index[i];\n      validateIndex(index_i, data.length);\n      data = data[index_i];\n    }\n\n    return data;\n  };\n  \n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index))\n      throw new TypeError('Array expected');\n    if (index.length < this._size.length)\n      throw new DimensionError(index.length, this._size.length, '<');\n\n    var i, ii, index_i;\n\n    // enlarge matrix when needed\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n    _fit(this, size, defaultValue);\n\n    // traverse over the dimensions\n    var data = this._data;\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      index_i = index[i];\n      validateIndex(index_i, data.length);\n      data = data[index_i];\n    }\n\n    // set new value\n    index_i = index[index.length - 1];\n    validateIndex(index_i, data.length);\n    data[index_i] = value;\n\n    return this;\n  };\n  \n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n  function _get (matrix, index) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    var isScalar = index.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    }\n    else {\n      // validate dimensions\n      var size = index.size();\n      if (size.length != matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      }\n\n      // validate if any of the ranges in the index is out of range\n      var min = index.min();\n      var max = index.max();\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      }\n\n      // retrieve submatrix\n      // TODO: more efficient when creating an empty matrix and setting _data and _size manually\n      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);\n    }\n  }\n  \n  /**\n   * Recursively get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim    Current dimension\n   * @return {Array} submatrix\n   * @private\n   */\n  function _getSubmatrix (data, index, dims, dim) {\n    var last = (dim === dims - 1);\n    var range = index.dimension(dim);\n\n    if (last) {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        return data[i];\n      }).valueOf();\n    }\n    else {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        var child = data[i];\n        return _getSubmatrix(child, index, dims, dim + 1);\n      }).valueOf();\n    }\n  }\n  \n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n  function _set (matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size(),\n        isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (submatrix && submatrix.isMatrix === true) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    }\n    else {\n      sSize = array.size(submatrix);\n    }\n\n    if (isScalar) {\n      // set a scalar\n\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n\n      matrix.set(index.min(), submatrix, defaultValue);\n    }\n    else {\n      // set a submatrix\n\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n\n        // unsqueeze both outer and inner dimensions\n        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!object.deepEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // enlarge matrix when needed\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n      _fit(matrix, size, defaultValue);\n\n      // insert the sub matrix\n      var dims = iSize.length,\n          dim = 0;\n      _setSubmatrix (matrix._data, index, submatrix, dims, dim);\n    }\n\n    return matrix;\n  }\n  \n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim\n   * @private\n   */\n  function _setSubmatrix (data, index, submatrix, dims, dim) {\n    var last = (dim === dims - 1),\n        range = index.dimension(dim);\n\n    if (last) {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        data[dataIndex] = submatrix[subIndex[0]];\n      });\n    }\n    else {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);\n      });\n    }\n  }\n  \n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isArray(size))\n      throw new TypeError('Array expected');\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, size, defaultValue);\n  };\n  \n  var _resize = function (matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data;\n      // go deep\n      while (isArray(v)) {\n        v = v[0];\n      }\n      return v;\n    }\n    // resize matrix\n    matrix._size = size.slice(0); // copy the array\n    matrix._data = array.resize(matrix._data, matrix._size, defaultValue);\n    // return matrix\n    return matrix;\n  };\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n\n    m._data = array.reshape(m._data, size);\n    m._size = size.slice(0);\n    return m;\n  };\n  \n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n  function _fit(matrix, size, defaultValue) {\n    var newSize = matrix._size.slice(0), // copy the array\n        changed = false;\n\n    // add dimensions when needed\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    }\n\n    // enlarge size when needed\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n  \n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: object.clone(this._data),\n      size: object.clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n  \n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n  DenseMatrix.prototype.size = function() {\n    return this._size.slice(0); // return a clone of _size\n  };\n  \n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   *\n   * @return {DenseMatrix} matrix\n   */\n  DenseMatrix.prototype.map = function (callback) {\n    // matrix instance\n    var me = this;\n    var recurse = function (value, index) {\n      if (isArray(value)) {\n        return value.map(function (child, i) {\n          return recurse(child, index.concat(i));\n        });\n      }\n      else {\n        return callback(value, index, me);\n      }\n    };\n    // return dense format\n    return new DenseMatrix({\n      data: recurse(this._data, []),\n      size: object.clone(this._size),\n      datatype: this._datatype\n    });\n  };\n  \n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n  DenseMatrix.prototype.forEach = function (callback) {\n    // matrix instance\n    var me = this;\n    var recurse = function (value, index) {\n      if (isArray(value)) {\n        value.forEach(function (child, i) {\n          recurse(child, index.concat(i));\n        });\n      }\n      else {\n        callback(value, index, me);\n      }\n    };\n    recurse(this._data, []);\n  };\n  \n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.toArray = function () {\n    return object.clone(this._data);\n  };\n  \n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n  \n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.format = function (options) {\n    return string.format(this._data, options);\n  };\n  \n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.toString = function () {\n    return string.format(this._data);\n  };\n  \n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  \n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Array}                      The array vector with the diagonal values.\n   */\n  DenseMatrix.prototype.diagonal = function(k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (k.isBigNumber === true)\n        k = k.toNumber();\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError ('The parameter k must be an integer number');\n      }\n    }\n    else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns -  kSuper);\n    \n    // x is a matrix get diagonal from matrix\n    var data = [];\n    \n    // loop rows\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data: data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n  \n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                   The matrix size.\n   * @param {number | Array} value          The values for the diagonal.\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]        The default value for non-diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!isArray(size))\n      throw new TypeError('Array expected, size parameter');\n    if (size.length !== 2)\n      throw new Error('Only two dimensions matrix are supported');\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (s && s.isBigNumber === true) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      } \n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (k && k.isBigNumber === true)\n        k = k.toNumber();\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError ('The parameter k must be an integer number');\n      }\n    }\n    else {\n      // default value\n      k = 0;\n    }\n    \n    if (defaultValue && isString(datatype)) {\n      // convert defaultValue to the same datatype\n      defaultValue = typed.convert(defaultValue, datatype);\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n    \n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns -  kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function (i) {\n        // return value @ i\n        return value[i];\n      };      \n    }\n    else if (value && value.isMatrix === true) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function (i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    }\n    else {\n      // define function\n      _value = function () {\n        // return value\n        return value;\n      };\n    }\n    \n    // discover default value if needed\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = (_value(0) && _value(0).isBigNumber === true) ? new type.BigNumber(0) : 0;\n    }\n\n    // empty array\n    var data = [];\n\n    // check we need to resize array\n    if (size.length > 0) {\n      // resize array\n      data = array.resize(data, size, defaultValue);\n      // fill diagonal\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    }\n    \n    // create DenseMatrix\n    return new DenseMatrix({\n      data: data,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n  \n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    DenseMatrix._swapRows(i, j, this._data);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   */\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @return {Array} data\n   */\n  function preprocess(data) {\n    for (var i = 0, ii = data.length; i < ii; i++) {\n      var elem = data[i];\n      if (isArray(elem)) {\n        data[i] = preprocess(elem);\n      }\n      else if (elem && elem.isMatrix === true) {\n        data[i] = preprocess(elem.valueOf());\n      }\n    }\n\n    return data;\n  }\n\n  // register this type in the base class Matrix\n  type.Matrix._storage.dense = DenseMatrix;\n  type.Matrix._storage['default'] = DenseMatrix;\n\n  // exports\n  return DenseMatrix;\n}\n\nexports.name = 'DenseMatrix';\nexports.path = 'type';\nexports.factory = factory;\nexports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage\n\n},{\"../../error/DimensionError\":11,\"../../utils/customs\":527,\"../../utils/index\":530,\"./Matrix\":476}],474:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  \n  var smaller = load(require('../../function/relational/smaller'));\n  var larger = load(require('../../function/relational/larger'));\n  \n  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n  \n  /**\n   * Fibonacci Heap implementation, used interally for Matrix math.\n   * @class FibonacciHeap\n   * @constructor FibonacciHeap\n   */\n  function FibonacciHeap() {\n    if (!(this instanceof FibonacciHeap))\n      throw new SyntaxError('Constructor must be called with the new operator');\n\n    // initialize fields\n    this._minimum = null;\n    this._size = 0;\n  }\n\n  /**\n   * Attach type information\n   */\n  FibonacciHeap.prototype.type = 'FibonacciHeap';\n  FibonacciHeap.prototype.isFibonacciHeap = true;\n\n  /**\n   * Inserts a new data element into the heap. No heap consolidation is\n   * performed at this time, the new node is simply inserted into the root\n   * list of this heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.insert = function (key, value) {\n    // create node\n    var node = {\n      key: key,\n      value: value,\n      degree: 0\n    };\n    // check we have a node in the minimum\n    if (this._minimum) {\n      // minimum node\n      var minimum = this._minimum;\n      // update left & right of node\n      node.left = minimum;\n      node.right = minimum.right;\n      minimum.right = node;\n      node.right.left = node;\n      // update minimum node in heap if needed\n      if (smaller(key, minimum.key)) {\n        // node has a smaller key, use it as minimum\n        this._minimum = node;\n      }\n    }\n    else {\n      // set left & right\n      node.left = node;\n      node.right = node;\n      // this is the first node\n      this._minimum = node;\n    }\n    // increment number of nodes in heap\n    this._size++;\n    // return node\n    return node;\n  };\n\n  /**\n   * Returns the number of nodes in heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.size = function () {\n    return this._size;\n  };\n\n  /**\n   * Removes all elements from this heap.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.clear = function () {\n    this._minimum = null;\n    this._size = 0;\n  };\n\n  /**\n   * Returns true if the heap is empty, otherwise false.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.isEmpty = function () {\n    return !!this._minimum;\n  };\n  \n  /**\n   * Extracts the node with minimum key from heap. Amortized running \n   * time: O(log n).\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.extractMinimum = function () {\n    // node to remove\n    var node = this._minimum;\n    // check we have a minimum\n    if (node === null)\n      return node;\n    // current minimum\n    var minimum = this._minimum;\n    // get number of children\n    var numberOfChildren = node.degree;\n    // pointer to the first child\n    var x = node.child;\n    // for each child of node do...\n    while (numberOfChildren > 0) {\n      // store node in right side\n      var tempRight = x.right;\n      // remove x from child list\n      x.left.right = x.right;\n      x.right.left = x.left;\n      // add x to root list of heap\n      x.left = minimum;\n      x.right = minimum.right;\n      minimum.right = x;\n      x.right.left = x;\n      // set Parent[x] to null\n      x.parent = null;\n      x = tempRight;\n      numberOfChildren--;\n    }\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // update minimum\n    if (node == node.right) {\n      // empty\n      minimum = null;\n    }\n    else {\n      // update minimum\n      minimum = node.right;\n      // we need to update the pointer to the root with minimum key\n      minimum = _findMinimumNode(minimum, this._size);\n    }\n    // decrement size of heap\n    this._size--;\n    // update minimum\n    this._minimum = minimum;\n    // return node\n    return node;\n  };\n  \n  /**\n   * Removes a node from the heap given the reference to the node. The trees\n   * in the heap will be consolidated, if necessary. This operation may fail\n   * to remove the correct element if there are nodes with key value -Infinity.\n   * Running time: O(log n) amortized.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.remove = function (node) {\n    // decrease key value\n    this._minimum = _decreaseKey(this._minimum, node, -1);\n    // remove the smallest\n    this.extractMinimum();\n  };\n  \n  /**\n   * Decreases the key value for a heap node, given the new value to take on.\n   * The structure of the heap may be changed and will not be consolidated. \n   * Running time: O(1) amortized.\n   * @memberof FibonacciHeap\n   */\n  var _decreaseKey = function (minimum, node, key) {\n    // set node key\n    node.key = key;\n    // get parent node\n    var parent = node.parent;\n    if (parent && smaller(node.key, parent.key)) {\n      // remove node from parent\n      _cut(minimum, node, parent);\n      // remove all nodes from parent to the root parent\n      _cascadingCut(minimum, parent);\n    }\n    // update minimum node if needed\n    if (smaller(node.key, minimum.key))\n      minimum = node;\n    // return minimum\n    return minimum;\n  };\n  \n  /**\n   * The reverse of the link operation: removes node from the child list of parent.\n   * This method assumes that min is non-null. Running time: O(1).\n   * @memberof FibonacciHeap\n   */\n  var _cut = function (minimum, node, parent) {\n    // remove node from parent children and decrement Degree[parent]\n    node.left.right = node.right;\n    node.right.left = node.left;\n    parent.degree--;\n    // reset y.child if necessary\n    if (parent.child == node)\n      parent.child = node.right;\n    // remove child if degree is 0\n    if (parent.degree === 0)\n      parent.child = null;\n    // add node to root list of heap\n    node.left = minimum;\n    node.right = minimum.right;\n    minimum.right = node;\n    node.right.left = node;\n    // set parent[node] to null\n    node.parent = null;\n    // set mark[node] to false\n    node.mark = false;\n  };\n  \n  /**\n   * Performs a cascading cut operation. This cuts node from its parent and then\n   * does the same for its parent, and so on up the tree.\n   * Running time: O(log n); O(1) excluding the recursion.\n   * @memberof FibonacciHeap\n   */\n  var _cascadingCut= function (minimum, node) {\n    // store parent node\n    var parent = node.parent;\n    // if there's a parent...\n    if (!parent)\n      return;\n    // if node is unmarked, set it marked\n    if (!node.mark) {\n      node.mark = true;\n    }\n    else {\n      // it's marked, cut it from parent\n      _cut(minimum, node, parent);\n      // cut its parent as well\n      _cascadingCut(parent);\n    }\n  };\n  \n  /**\n   * Make the first node a child of the second one. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  var _linkNodes = function (node, parent) {\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // make node a Child of parent\n    node.parent = parent;\n    if (!parent.child) {\n      parent.child = node;\n      node.right = node;\n      node.left = node;\n    }\n    else {\n      node.left = parent.child;\n      node.right = parent.child.right;\n      parent.child.right = node;\n      node.right.left = node;\n    }\n    // increase degree[parent]\n    parent.degree++;\n    // set mark[node] false\n    node.mark = false;\n  };\n  \n  var _findMinimumNode = function (minimum, size) {\n    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree\n    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;\n    // create list with initial capacity\n    var array = new Array(arraySize);\n    // find the number of root nodes.\n    var numRoots = 0;\n    var x = minimum;\n    if (x) {\n      numRoots++;\n      x = x.right;\n      while (x !== minimum) {\n        numRoots++;\n        x = x.right;\n      }\n    }\n    // vars\n    var y;\n    // For each node in root list do...\n    while (numRoots > 0) {\n      // access this node's degree..\n      var d = x.degree;\n      // get next node\n      var next = x.right;\n      // check if there is a node already in array with the same degree\n      while (true) {\n        // get node with the same degree is any\n        y = array[d];\n        if (!y)\n          break;\n        // make one node with the same degree a child of the other, do this based on the key value.\n        if (larger(x.key, y.key)) {\n          var temp = y;\n          y = x;\n          x = temp;\n        }\n        // make y a child of x\n        _linkNodes(y, x);\n        // we have handled this degree, go to next one.\n        array[d] = null;\n        d++;\n      }\n      // save this node for later when we might encounter another of the same degree.\n      array[d] = x;\n      // move forward through list.\n      x = next;\n      numRoots--;\n    }\n    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].\n    minimum = null;\n    // loop nodes in array\n    for (var i = 0; i < arraySize; i++) {\n      // get current node\n      y = array[i];\n      if (!y)\n        continue;\n      // check if we have a linked list\n      if (minimum) {\n        // First remove node from root list.\n        y.left.right = y.right;\n        y.right.left = y.left;\n        // now add to root list, again.\n        y.left = minimum;\n        y.right = minimum.right;\n        minimum.right = y;\n        y.right.left = y;\n        // check if this is a new min.\n        if (smaller(y.key, minimum.key))\n          minimum = y;\n      }\n      else\n        minimum = y;\n    }\n    return minimum;\n  };\n  \n  return FibonacciHeap;\n}\n\nexports.name = 'FibonacciHeap';\nexports.path = 'type';\nexports.factory = factory;\n\n},{\"../../function/relational/larger\":386,\"../../function/relational/smaller\":388}],475:[function(require,module,exports){\n'use strict';\n\nvar util = require('../../utils/index');\n\nvar string = util.string;\nvar object = util.object;\n\nvar isArray = Array.isArray;\nvar isString = string.isString;\n\nfunction factory (type, config, load) {\n\n  var DenseMatrix = load(require('./DenseMatrix'));\n\n  var smaller = load(require('../../function/relational/smaller'));\n\n  function ImmutableDenseMatrix(data, datatype) {\n    if (!(this instanceof ImmutableDenseMatrix))\n      throw new SyntaxError('Constructor must be called with the new operator');\n    if (datatype && !isString(datatype))\n      throw new Error('Invalid datatype: ' + datatype);\n\n    if ((data && data.isMatrix === true) || isArray(data)) {\n      // use DenseMatrix implementation\n      var matrix = new DenseMatrix(data, datatype);\n      // internal structures\n      this._data = matrix._data;\n      this._size = matrix._size;\n      this._datatype = matrix._datatype;\n      this._min = null;\n      this._max = null;\n    }\n    else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = data.datatype;\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\n    }\n    else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n    }\n    else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n      this._min = null;\n      this._max = null;\n    }\n  }\n\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n\n  /**\n   * Attach type information\n   */\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     var subset = matrix.subset(index)               // retrieve subset\n   *     var value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  ImmutableDenseMatrix.prototype.subset = function (index) {\n    switch (arguments.length) {\n      case 1:\n        // use base implementation\n        var m = DenseMatrix.prototype.subset.call(this, index);\n        // check result is a matrix\n        if (m.isMatrix) {\n          // return immutable matrix\n          return new ImmutableDenseMatrix({\n            data: m._data,\n            size: m._size,\n            datatype: m._datatype\n          });\n        }\n        return m;\n        \n        // intentional fall through\n      case 2:\n      case 3:\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @param {Number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {ImmutableDenseMatrix} self\n   */\n  ImmutableDenseMatrix.prototype.set = function () {\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\n  };\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {Number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  ImmutableDenseMatrix.prototype.resize = function () {\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\n  };\n\n  /**\n   * Disallows reshaping in favor of immutability.\n   *\n   * @throws {Error} Operation not allowed\n   */\n  ImmutableDenseMatrix.prototype.reshape = function () {\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @return {ImmutableDenseMatrix} clone\n   */\n  ImmutableDenseMatrix.prototype.clone = function () {\n    var m = new ImmutableDenseMatrix({\n      data: object.clone(this._data),\n      size: object.clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @returns {Object}\n   */\n  ImmutableDenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'ImmutableDenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {ImmutableDenseMatrix}\n   */\n  ImmutableDenseMatrix.fromJSON = function (json) {\n    return new ImmutableDenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @param {Number} i       Matrix row index 1\n   * @param {Number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  ImmutableDenseMatrix.prototype.swapRows = function () {\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\n  };\n\n  /**\n   * Calculate the minimum value in the set\n   * @return {Number | undefined} min\n   */\n  ImmutableDenseMatrix.prototype.min = function () {\n    // check min has been calculated before\n    if (this._min === null) {\n      // minimum\n      var m = null;\n      // compute min\n      this.forEach(function (v) {\n        if (m === null || smaller(v, m))\n          m = v;\n      });\n      this._min = m !== null ? m : undefined;\n    }\n    return this._min;\n  };\n\n  /**\n   * Calculate the maximum value in the set\n   * @return {Number | undefined} max\n   */\n  ImmutableDenseMatrix.prototype.max = function () {\n    // check max has been calculated before\n    if (this._max === null) {\n      // maximum\n      var m = null;\n      // compute max\n      this.forEach(function (v) {\n        if (m === null || smaller(m, v))\n          m = v;\n      });\n      this._max = m !== null ? m : undefined;\n    }\n    return this._max;\n  };\n\n  // exports\n  return ImmutableDenseMatrix;\n}\n\nexports.name = 'ImmutableDenseMatrix';\nexports.path = 'type';\nexports.factory = factory;\n\n},{\"../../function/relational/smaller\":388,\"../../utils/index\":530,\"./DenseMatrix\":473}],476:[function(require,module,exports){\n'use strict';\n\nvar util = require('../../utils/index');\n\nvar string = util.string;\n\nvar isString = string.isString;\n\nfunction factory (type, config, load, typed) {\n  /**\n   * @constructor Matrix\n   *\n   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n   * array. A matrix can be constructed as:\n   *     var matrix = math.matrix(data)\n   *\n   * Matrix contains the functions to resize, get and set values, get the size,\n   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n   * Furthermore, one can iterate over the matrix using map and forEach.\n   * The internal Array of the Matrix can be accessed using the function valueOf.\n   *\n   * Example usage:\n   *     var matrix = math.matrix([[1, 2], [3, 4]]);\n   *     matix.size();              // [2, 2]\n   *     matrix.resize([3, 2], 5);\n   *     matrix.valueOf();          // [[1, 2], [3, 4], [5, 5]]\n   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n   *\n   */\n  function Matrix() {\n    if (!(this instanceof Matrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Matrix.prototype.type = 'Matrix';\n  Matrix.prototype.isMatrix = true;\n\n  /**\n   * Get the Matrix storage constructor for the given format.\n   *\n   * @param {string} format       The Matrix storage format.\n   *\n   * @return {Function}           The Matrix storage constructor.\n   */\n  Matrix.storage = function (format) {\n    // check storage format is a string\n    if (!isString(format)) {\n      throw new TypeError('format must be a string value');\n    }\n\n    // get storage format constructor\n    var constructor = Matrix._storage[format];\n    if (!constructor) {\n      throw new SyntaxError('Unsupported matrix storage format: ' + format);\n    }\n\n    // return storage constructor\n    return constructor;\n  };\n\n  // a map with all constructors for all storage types\n  Matrix._storage = {};\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     var format = matrix.storage()                   // retrieve storage format\n   *\n   * @return {string}           The storage format.\n   */\n  Matrix.prototype.storage = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke storage on a Matrix interface');\n  };\n  \n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     var format = matrix.datatype()                   // retrieve matrix datatype\n   *\n   * @return {string}           The datatype.\n   */\n  Matrix.prototype.datatype = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke datatype on a Matrix interface');\n  };\n\n  /**\n   * Create a new Matrix With the type of the current matrix instance\n   * @param {Array | Object} data\n   * @param {string} [datatype]\n   */\n  Matrix.prototype.create = function (data, datatype) {\n    throw new Error('Cannot invoke create on a Matrix interface');\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     var subset = matrix.subset(index)               // retrieve subset\n   *     var value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  Matrix.prototype.subset = function (index, replacement, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke subset on a Matrix interface');\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  Matrix.prototype.get = function (index) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke get on a Matrix interface');\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {Matrix} self\n   */\n  Matrix.prototype.set = function (index, value, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke set on a Matrix interface');\n  };\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when \n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  Matrix.prototype.resize = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke resize on a Matrix interface');\n  };\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  Matrix.prototype.reshape = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke reshape on a Matrix interface');\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @return {Matrix} clone\n   */\n  Matrix.prototype.clone = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke clone on a Matrix interface');\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @returns {number[]} size\n   */\n  Matrix.prototype.size = function() {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke size on a Matrix interface');\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {Matrix} matrix\n   */\n  Matrix.prototype.map = function (callback, skipZeros) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke map on a Matrix interface');\n  };\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n  Matrix.prototype.forEach = function (callback) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke forEach on a Matrix interface');\n  };\n\n  /**\n   * Create an Array with a copy of the data of the Matrix\n   * @returns {Array} array\n   */\n  Matrix.prototype.toArray = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toArray on a Matrix interface');\n  };\n\n  /**\n   * Get the primitive value of the Matrix: a multidimensional array\n   * @returns {Array} array\n   */\n  Matrix.prototype.valueOf = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke valueOf on a Matrix interface');\n  };\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  Matrix.prototype.format = function (options) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke format on a Matrix interface');\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @returns {string} str\n   */\n  Matrix.prototype.toString = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toString on a Matrix interface');\n  };\n   \n  // exports\n  return Matrix;\n}\n\nexports.name = 'Matrix';\nexports.path = 'type';\nexports.factory = factory;\n\n},{\"../../utils/index\":530}],477:[function(require,module,exports){\n'use strict';\n\nvar clone = require('../../utils/object').clone;\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type) {\n  \n  /**\n   * Create an index. An Index can store ranges and sets for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Usage:\n   *     var index = new Index(range1, range2, matrix1, array1, ...);\n   *\n   * Where each parameter can be any of:\n   *     A number\n   *     A string (containing a name of an object property)\n   *     An instance of Range\n   *     An Array with the Set values\n   *     A Matrix with the Set values\n   *\n   * The parameters start, end, and step must be integer numbers.\n   *\n   * @class Index\n   * @Constructor Index\n   * @param {...*} ranges\n   */\n  function Index(ranges) {\n    if (!(this instanceof Index)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this._dimensions = [];\n    this._isScalar = true;\n\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n\n      if (arg && (arg.isRange === true)) {\n        this._dimensions.push(arg);\n        this._isScalar = false;\n      }\n      else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {\n        // create matrix\n        var m = _createImmutableMatrix(arg.valueOf());\n        this._dimensions.push(m);\n        // size\n        var size = m.size();\n        // scalar\n        if (size.length !== 1 || size[0] !== 1) {\n          this._isScalar = false;\n        }\n      }\n      else if (typeof arg === 'number') {\n        this._dimensions.push(_createImmutableMatrix([arg]));\n      }\n      else if (typeof arg === 'string') {\n        // object property (arguments.count should be 1)\n        this._dimensions.push(arg);\n      }\n      // TODO: implement support for wildcard '*'\n      else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Index.prototype.type = 'Index';\n  Index.prototype.isIndex = true;\n\n  function _createImmutableMatrix(arg) {\n    // loop array elements\n    for (var i = 0, l = arg.length; i < l; i++) {\n      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {\n        throw new TypeError('Index parameters must be positive integer numbers');\n      }\n    }\n    // create matrix\n    return new type.ImmutableDenseMatrix(arg);\n  }\n\n  /**\n   * Create a clone of the index\n   * @memberof Index\n   * @return {Index} clone\n   */\n  Index.prototype.clone = function () {\n    var index = new Index();\n    index._dimensions = clone(this._dimensions);\n    index._isScalar = this._isScalar;\n    return index;\n  };\n\n  /**\n   * Create an index from an array with ranges/numbers\n   * @memberof Index\n   * @param {Array.<Array | number>} ranges\n   * @return {Index} index\n   * @private\n   */\n  Index.create = function (ranges) {\n    var index = new Index();\n    Index.apply(index, ranges);\n    return index;\n  };\n\n  /**\n   * Retrieve the size of the index, the number of elements for each dimension.\n   * @memberof Index\n   * @returns {number[]} size\n   */\n  Index.prototype.size = function () {\n    var size = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var d = this._dimensions[i];\n      size[i] = (typeof d === 'string') ? 1 : d.size()[0];\n    }\n\n    return size;\n  };\n\n  /**\n   * Get the maximum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} max\n   */\n  Index.prototype.max = function () {\n    var values = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = (typeof range === 'string') ? range : range.max();\n    }\n\n    return values;\n  };\n\n  /**\n   * Get the minimum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} min\n   */\n  Index.prototype.min = function () {\n    var values = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = (typeof range === 'string') ? range : range.min();\n    }\n\n    return values;\n  };\n\n  /**\n   * Loop over each of the ranges of the index\n   * @memberof Index\n   * @param {Function} callback   Called for each range with a Range as first\n   *                              argument, the dimension as second, and the\n   *                              index object as third.\n   */\n  Index.prototype.forEach = function (callback) {\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      callback(this._dimensions[i], i, this);\n    }\n  };\n\n  /**\n   * Retrieve the dimension for the given index\n   * @memberof Index\n   * @param {Number} dim                  Number of the dimension\n   * @returns {Range | null} range\n   */\n  Index.prototype.dimension = function (dim) {\n    return this._dimensions[dim] || null;\n  };\n\n  /**\n   * Test whether this index contains an object property\n   * @returns {boolean} Returns true if the index is an object property\n   */\n  Index.prototype.isObjectProperty = function () {\n    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';\n  };\n\n  /**\n   * Returns the object property name when the Index holds a single object property,\n   * else returns null\n   * @returns {string | null}\n   */\n  Index.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this._dimensions[0] : null;\n  };\n\n  /**\n   * Test whether this index contains only a single value.\n   *\n   * This is the case when the index is created with only scalar values as ranges,\n   * not for ranges resolving into a single value.\n   * @memberof Index\n   * @return {boolean} isScalar\n   */\n  Index.prototype.isScalar = function () {\n    return this._isScalar;\n  };\n\n  /**\n   * Expand the Index into an array.\n   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.toArray = function () {\n    var array = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      array.push((typeof dimension === 'string') ? dimension : dimension.toArray());\n    }\n    return array;\n  };\n\n  /**\n   * Get the primitive value of the Index, a two dimensional array.\n   * Equivalent to Index.toArray().\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.valueOf = Index.prototype.toArray;\n\n  /**\n   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'\n   * @memberof Index\n   * @returns {String} str\n   */\n  Index.prototype.toString = function () {\n    var strings = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      if (typeof dimension === 'string') {\n        strings.push(JSON.stringify(dimension));\n      }\n      else {\n        strings.push(dimension.toString());\n      }\n    }\n\n    return '[' + strings.join(', ') + ']';\n  };\n\n  /**\n   * Get a JSON representation of the Index\n   * @memberof Index\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   */\n  Index.prototype.toJSON = function () {\n    return {\n      mathjs: 'Index',\n      dimensions: this._dimensions\n    };\n  };\n\n  /**\n   * Instantiate an Index from a JSON object\n   * @memberof Index\n   * @param {Object} json A JSON object structured as:\n   *                     `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   * @return {Index}\n   */\n  Index.fromJSON = function (json) {\n    return Index.create(json.dimensions);\n  };\n\n  return Index;\n}\n\nexports.name = 'Index';\nexports.path = 'type';\nexports.factory = factory;\n\n},{\"../../utils/number\":532,\"../../utils/object\":533}],478:[function(require,module,exports){\n'use strict';\n\nvar number = require('../../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a range. A range has a start, step, and end, and contains functions\n   * to iterate over the range.\n   *\n   * A range can be constructed as:\n   *     var range = new Range(start, end);\n   *     var range = new Range(start, end, step);\n   *\n   * To get the result of the range:\n   *     range.forEach(function (x) {\n   *         console.log(x);\n   *     });\n   *     range.map(function (x) {\n   *         return math.sin(x);\n   *     });\n   *     range.toArray();\n   *\n   * Example usage:\n   *     var c = new Range(2, 6);         // 2:1:5\n   *     c.toArray();                     // [2, 3, 4, 5]\n   *     var d = new Range(2, -3, -1);    // 2:-1:-2\n   *     d.toArray();                     // [2, 1, 0, -1, -2]\n   *\n   * @class Range\n   * @constructor Range\n   * @param {number} start  included lower bound\n   * @param {number} end    excluded upper bound\n   * @param {number} [step] step size, default value is 1\n   */\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (start != null) {\n      if (start.isBigNumber === true)\n        start = start.toNumber();\n      else if (typeof start !== 'number')\n        throw new TypeError('Parameter start must be a number');\n    }\n    if (end != null) {\n      if (end.isBigNumber === true)\n        end = end.toNumber();\n      else if (typeof end !== 'number')\n        throw new TypeError('Parameter end must be a number');\n    }\n    if (step != null) {\n      if (step.isBigNumber === true)\n        step = step.toNumber();\n      else if (typeof step !== 'number')\n        throw new TypeError('Parameter step must be a number');\n    }\n\n    this.start = (start != null) ? parseFloat(start) : 0;\n    this.end   = (end != null)   ? parseFloat(end)   : 0;\n    this.step  = (step != null)  ? parseFloat(step)  : 1;\n  }\n\n  /**\n   * Attach type information\n   */\n  Range.prototype.type = 'Range';\n  Range.prototype.isRange = true;\n\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @memberof Range\n   * @param {string} str\n   * @return {Range | null} range\n   */\n  Range.parse = function (str) {\n    if (typeof str !== 'string') {\n      return null;\n    }\n\n    var args = str.split(':');\n    var nums = args.map(function (arg) {\n      return parseFloat(arg);\n    });\n\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if (invalid) {\n      return null;\n    }\n\n    switch (nums.length) {\n      case 2:\n        return new Range(nums[0], nums[1]);\n      case 3:\n        return new Range(nums[0], nums[2], nums[1]);\n      default:\n        return null;\n    }\n  };\n\n  /**\n   * Create a clone of the range\n   * @return {Range} clone\n   */\n  Range.prototype.clone = function () {\n    return new Range(this.start, this.end, this.step);\n  };\n\n  /**\n   * Retrieve the size of the range.\n   * Returns an array containing one number, the number of elements in the range.\n   * @memberof Range\n   * @returns {number[]} size\n   */\n  Range.prototype.size = function () {\n    var len = 0,\n        start = this.start,\n        step = this.step,\n        end = this.end,\n        diff = end - start;\n\n    if (number.sign(step) == number.sign(diff)) {\n      len = Math.ceil((diff) / step);\n    }\n    else if (diff == 0) {\n      len = 0;\n    }\n\n    if (isNaN(len)) {\n      len = 0;\n    }\n    return [len];\n  };\n\n  /**\n   * Calculate the minimum value in the range\n   * @memberof Range\n   * @return {number | undefined} min\n   */\n  Range.prototype.min = function () {\n    var size = this.size()[0];\n\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start;\n      }\n      else {\n        // negative step\n        return this.start + (size - 1) * this.step;\n      }\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  /**\n   * Calculate the maximum value in the range\n   * @memberof Range\n   * @return {number | undefined} max\n   */\n  Range.prototype.max = function () {\n    var size = this.size()[0];\n\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start + (size - 1) * this.step;\n      }\n      else {\n        // negative step\n        return this.start;\n      }\n    }\n    else {\n      return undefined;\n    }\n  };\n\n\n  /**\n   * Execute a callback function for each value in the range.\n   * @memberof Range\n   * @param {function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Range being traversed.\n   */\n  Range.prototype.forEach = function (callback) {\n    var x = this.start;\n    var step = this.step;\n    var end = this.end;\n    var i = 0;\n\n    if (step > 0) {\n      while (x < end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    }\n    else if (step < 0) {\n      while (x > end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    }\n  };\n\n  /**\n   * Execute a callback function for each value in the Range, and return the\n   * results as an array\n   * @memberof Range\n   * @param {function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @returns {Array} array\n   */\n  Range.prototype.map = function (callback) {\n    var array = [];\n    this.forEach(function (value, index, obj) {\n      array[index[0]] = callback(value, index, obj);\n    });\n    return array;\n  };\n\n  /**\n   * Create an Array with a copy of the Ranges data\n   * @memberof Range\n   * @returns {Array} array\n   */\n  Range.prototype.toArray = function () {\n    var array = [];\n    this.forEach(function (value, index) {\n      array[index[0]] = value;\n    });\n    return array;\n  };\n\n  /**\n   * Get the primitive value of the Range, a one dimensional array\n   * @memberof Range\n   * @returns {Array} array\n   */\n  Range.prototype.valueOf = function () {\n    // TODO: implement a caching mechanism for range.valueOf()\n    return this.toArray();\n  };\n\n  /**\n   * Get a string representation of the range, with optional formatting options.\n   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'\n   * @memberof Range\n   * @param {Object | number | function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  Range.prototype.format = function (options) {\n    var str = number.format(this.start, options);\n\n    if (this.step != 1) {\n      str += ':' + number.format(this.step, options);\n    }\n    str += ':' + number.format(this.end, options);\n    return str;\n  };\n\n  /**\n   * Get a string representation of the range.\n   * @memberof Range\n   * @returns {string}\n   */\n  Range.prototype.toString = function () {\n    return this.format();\n  };\n\n  /**\n   * Get a JSON representation of the range\n   * @memberof Range\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n   */\n  Range.prototype.toJSON = function () {\n    return {\n      mathjs: 'Range',\n      start: this.start,\n      end: this.end,\n      step: this.step\n    };\n  };\n\n  /**\n   * Instantiate a Range from a JSON object\n   * @memberof Range\n   * @param {Object} json A JSON object structured as:\n   *                      `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n   * @return {Range}\n   */\n  Range.fromJSON = function (json) {\n    return new Range(json.start, json.end, json.step);\n  };\n\n  return Range;\n}\n\nexports.name = 'Range';\nexports.path = 'type';\nexports.factory = factory;\n\n},{\"../../utils/number\":532}],479:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load) {\n  \n  var add = load(require('../../function/arithmetic/add'));\n  var equalScalar = load(require('../../function/relational/equalScalar'));\n  \n  /**\n   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array \n   * of the vector elements and an ordered list of non-zero elements.\n   */\n  function Spa() {\n    if (!(this instanceof Spa))\n      throw new SyntaxError('Constructor must be called with the new operator');\n    \n    // allocate vector, TODO use typed arrays\n    this._values = [];\n    this._heap = new type.FibonacciHeap();\n  }\n\n  /**\n   * Attach type information\n   */\n  Spa.prototype.type = 'Spa';\n  Spa.prototype.isSpa = true;\n\n  /**\n   * Set the value for index i.\n   *\n   * @param {number} i                       The index\n   * @param {number | BigNumber | Complex}   The value at index i\n   */\n  Spa.prototype.set = function (i, v) {\n    // check we have a value @ i\n    if (!this._values[i]) {\n      // insert in heap\n      var node = this._heap.insert(i, v);\n      // set the value @ i\n      this._values[i] = node;\n    }\n    else {\n      // update the value @ i\n      this._values[i].value = v;\n    }\n  };\n  \n  Spa.prototype.get = function (i) {\n    var node = this._values[i];\n    if (node)\n      return node.value;\n    return 0;\n  };\n  \n  Spa.prototype.accumulate = function (i, v) {\n    // node @ i\n    var node = this._values[i];\n    if (!node) {\n      // insert in heap\n      node = this._heap.insert(i, v);\n      // initialize value\n      this._values[i] = node;\n    }\n    else {\n      // accumulate value\n      node.value = add(node.value, v);\n    }\n  };\n  \n  Spa.prototype.forEach = function (from, to, callback) {\n    // references\n    var heap = this._heap;\n    var values = this._values;\n    // nodes\n    var nodes = [];\n    // node with minimum key, save it\n    var node = heap.extractMinimum();\n    if (node)\n      nodes.push(node);\n    // extract nodes from heap (ordered)\n    while (node && node.key <= to) {\n      // check it is in range\n      if (node.key >= from) {\n        // check value is not zero\n        if (!equalScalar(node.value, 0)) {\n          // invoke callback\n          callback(node.key, node.value, this);\n        }\n      }\n      // extract next node, save it\n      node = heap.extractMinimum();\n      if (node)\n        nodes.push(node);\n    }\n    // reinsert all nodes in heap\n    for (var i = 0; i < nodes.length; i++) {\n      // current node\n      var n = nodes[i];\n      // insert node in heap\n      node = heap.insert(n.key, n.value);\n      // update values\n      values[node.key] = node;\n    }\n  };\n  \n  Spa.prototype.swap = function (i, j) {\n    // node @ i and j\n    var nodei = this._values[i];\n    var nodej = this._values[j];\n    // check we need to insert indeces\n    if (!nodei && nodej) {\n      // insert in heap\n      nodei = this._heap.insert(i, nodej.value);\n      // remove from heap\n      this._heap.remove(nodej);\n      // set values\n      this._values[i] = nodei;\n      this._values[j] = undefined;\n    }\n    else if (nodei && !nodej) {\n      // insert in heap\n      nodej = this._heap.insert(j, nodei.value);\n      // remove from heap\n      this._heap.remove(nodei);\n      // set values\n      this._values[j] = nodej;\n      this._values[i] = undefined;\n    }\n    else if (nodei && nodej) {\n      // swap values\n      var v = nodei.value;\n      nodei.value = nodej.value;\n      nodej.value = v;\n    }\n  };\n  \n  return Spa;\n}\n\nexports.name = 'Spa';\nexports.path = 'type';\nexports.factory = factory;\n\n},{\"../../function/arithmetic/add\":283,\"../../function/relational/equalScalar\":384}],480:[function(require,module,exports){\n'use strict';\n\nvar util = require('../../utils/index');\nvar DimensionError = require('../../error/DimensionError');\n\nvar array = util.array;\nvar object = util.object;\nvar string = util.string;\nvar number = util.number;\n\nvar isArray = Array.isArray;\nvar isNumber = number.isNumber;\nvar isInteger = number.isInteger;\nvar isString = string.isString;\n\nvar validateIndex = array.validateIndex;\n\nfunction factory (type, config, load, typed) {\n  var Matrix = load(require('./Matrix')); // force loading Matrix (do not use via type.Matrix)\n  var equalScalar = load(require('../../function/relational/equalScalar'));\n\n  /**\n   * Sparse Matrix implementation. This type implements a Compressed Column Storage format\n   * for sparse matrices.\n   * @class SparseMatrix\n   */\n  function SparseMatrix(data, datatype) {\n    if (!(this instanceof SparseMatrix))\n      throw new SyntaxError('Constructor must be called with the new operator');\n    if (datatype && !isString(datatype))\n      throw new Error('Invalid datatype: ' + datatype);\n    \n    if (data && data.isMatrix === true) {\n      // create from matrix\n      _createFromMatrix(this, data, datatype);\n    }\n    else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {\n      // initialize fields\n      this._values = data.values;\n      this._index = data.index;\n      this._ptr = data.ptr;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    }\n    else if (isArray(data)) {\n      // create from array\n      _createFromArray(this, data, datatype);\n    }\n    else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n    }\n    else {\n      // nothing provided\n      this._values = [];\n      this._index = [];\n      this._ptr = [0];\n      this._size = [0, 0];\n      this._datatype = datatype;\n    }\n  }\n  \n  var _createFromMatrix = function (matrix, source, datatype) {\n    // check matrix type\n    if (source.type === 'SparseMatrix') {\n      // clone arrays\n      matrix._values = source._values ? object.clone(source._values) : undefined;\n      matrix._index = object.clone(source._index);\n      matrix._ptr = object.clone(source._ptr);\n      matrix._size = object.clone(source._size);\n      matrix._datatype = datatype || source._datatype;\n    }\n    else {\n      // build from matrix data\n      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);\n    }\n  };\n  \n  var _createFromArray = function (matrix, data, datatype) {\n    // initialize fields\n    matrix._values = [];\n    matrix._index = [];\n    matrix._ptr = [];\n    matrix._datatype = datatype;\n    // discover rows & columns, do not use math.size() to avoid looping array twice\n    var rows = data.length;\n    var columns = 0;\n    \n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    \n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, datatype);\n    }\n\n    // check we have rows (empty array)\n    if (rows > 0) {\n      // column index\n      var j = 0;\n      do {\n        // store pointer to values index\n        matrix._ptr.push(matrix._index.length);\n        // loop rows\n        for (var i = 0; i < rows; i++) {\n          // current row\n          var row = data[i];\n          // check row is an array\n          if (isArray(row)) {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < row.length)\n              columns = row.length;\n            // check row has column\n            if (j < row.length) {\n              // value\n              var v = row[j];\n              // check value != 0\n              if (!eq(v, zero)) {\n                // store value\n                matrix._values.push(v);\n                // index\n                matrix._index.push(i);\n              }\n            }\n          }\n          else {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < 1)\n              columns = 1;\n            // check value != 0 (row is a scalar)\n            if (!eq(row, zero)) {\n              // store value\n              matrix._values.push(row);\n              // index\n              matrix._index.push(i);\n            }\n          }\n        }\n        // increment index\n        j++;      \n      }\n      while (j < columns);\n    }\n    // store number of values in ptr\n    matrix._ptr.push(matrix._index.length);\n    // size\n    matrix._size = [rows, columns];\n  };\n  \n  SparseMatrix.prototype = new Matrix();\n\n  /**\n   * Attach type information\n   */\n  SparseMatrix.prototype.type = 'SparseMatrix';\n  SparseMatrix.prototype.isSparseMatrix = true;\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     var format = matrix.storage()                   // retrieve storage format\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The storage format.\n   */\n  SparseMatrix.prototype.storage = function () {\n    return 'sparse';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     var format = matrix.datatype()                   // retrieve matrix datatype\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The datatype.\n   */\n  SparseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new SparseMatrix\n   * @memberof SparseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  SparseMatrix.prototype.create = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n\n  /**\n   * Get the matrix density.\n   *\n   * Usage:\n   *     var density = matrix.density()                   // retrieve matrix density\n   *\n   * @memberof SparseMatrix\n   * @return {number}           The matrix density.\n   */\n  SparseMatrix.prototype.density = function () {\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // calculate density\n    return rows !== 0 && columns !== 0 ? (this._index.length / (rows * columns)) : 0;\n  };\n  \n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     var subset = matrix.subset(index)               // retrieve subset\n   *     var value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof SparseMatrix\n   * @param {Index} index\n   * @param {Array | Maytrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) { // check it is a pattern matrix\n    if (!this._values)\n      throw new Error('Cannot invoke subset on a Pattern only matrix');\n\n    // check arguments\n    switch (arguments.length) {\n      case 1:\n        return _getsubset(this, index);\n\n        // intentional fall through\n      case 2:\n      case 3:\n        return _setsubset(this, index, replacement, defaultValue);\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  \n  var _getsubset = function (matrix, idx) {\n    // check idx\n    if (!idx || idx.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    var isScalar = idx.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(idx.min());\n    }\n    // validate dimensions\n    var size = idx.size();\n    if (size.length != matrix._size.length) {\n      throw new DimensionError(size.length, matrix._size.length);\n    }\n\n    // vars\n    var i, ii, k, kk;\n    \n    // validate if any of the ranges in the index is out of range\n    var min = idx.min();\n    var max = idx.max();\n    for (i = 0, ii = matrix._size.length; i < ii; i++) {\n      validateIndex(min[i], matrix._size[i]);\n      validateIndex(max[i], matrix._size[i]);\n    }\n    \n    // matrix arrays\n    var mvalues = matrix._values;\n    var mindex = matrix._index;\n    var mptr = matrix._ptr;\n        \n    // rows & columns dimensions for result matrix\n    var rows = idx.dimension(0);\n    var columns = idx.dimension(1);\n    \n    // workspace & permutation vector\n    var w = [];\n    var pv = [];\n    \n    // loop rows in resulting matrix\n    rows.forEach(function (i, r) {\n      // update permutation vector\n      pv[i] = r[0];  \n      // mark i in workspace\n      w[i] = true;\n    });\n\n    // result matrix arrays\n    var values = mvalues ? [] : undefined;\n    var index = [];\n    var ptr = [];\n        \n    // loop columns in result matrix\n    columns.forEach(function (j) {\n      // update ptr\n      ptr.push(index.length);\n      // loop values in column j\n      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {\n        // row\n        i = mindex[k];\n        // check row is in result matrix\n        if (w[i] === true) {\n          // push index\n          index.push(pv[i]);\n          // check we need to process values\n          if (values)\n            values.push(mvalues[k]);\n        }\n      }\n    });\n    // update ptr\n    ptr.push(index.length);\n    \n    // return matrix\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: size,\n      datatype: matrix._datatype\n    });\n  };\n  \n  var _setsubset = function (matrix, index, submatrix, defaultValue) {\n    // check index\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n    \n    // get index size and check whether the index contains a single value\n    var iSize = index.size(),\n        isScalar = index.isScalar();\n    \n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (submatrix && submatrix.isMatrix === true) {\n      // submatrix size\n      sSize = submatrix.size();\n      // use array representation\n      submatrix = submatrix.toArray();\n    }\n    else {\n      // get submatrix size (array, scalar)\n      sSize = array.size(submatrix);\n    }\n    \n    // check index is a scalar\n    if (isScalar) {\n      // verify submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      // set value\n      matrix.set(index.min(), submatrix, defaultValue);\n    }\n    else {\n      // validate dimensions, index size must be one or two dimensions\n      if (iSize.length !== 1 && iSize.length !== 2) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n      \n      // check submatrix and index have the same dimensions\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n        // unsqueeze both outer and inner dimensions\n        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n      \n      // check whether the size of the submatrix matches the index size\n      if (!object.deepEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n      \n      // offsets\n      var x0 = index.min()[0];\n      var y0 = index.min()[1];      \n      \n      // submatrix rows and columns\n      var m = sSize[0];\n      var n = sSize[1];\n\n      // loop submatrix\n      for (var x = 0; x < m; x++) {\n        // loop columns\n        for (var y = 0; y < n; y++) {\n          // value at i, j\n          var v = submatrix[x][y];\n          // invoke set (zero value will remove entry from matrix)\n          matrix.set([x + x0, y + y0], v, defaultValue);\n        }\n      }\n    }\n    return matrix;\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  SparseMatrix.prototype.get = function (index) {\n    if (!isArray(index))\n      throw new TypeError('Array expected');\n    if (index.length != this._size.length)\n      throw new DimensionError(index.length, this._size.length);\n\n    // check it is a pattern matrix\n    if (!this._values)\n      throw new Error('Cannot invoke get on a Pattern only matrix');\n\n    // row and column\n    var i = index[0];\n    var j = index[1];\n\n    // check i, j are valid\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[1]);\n\n    // find value index\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n    // check k is prior to next column k and it is in the correct row\n    if (k < this._ptr[j + 1] && this._index[k] === i)\n      return this._values[k];\n\n    return 0;\n  };\n  \n  /**\n   * Replace a single element in the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be set to zero.\n   * @return {SparseMatrix} self\n   */\n  SparseMatrix.prototype.set = function (index, v, defaultValue) {\n    if (!isArray(index))\n      throw new TypeError('Array expected');\n    if (index.length != this._size.length)\n      throw new DimensionError(index.length, this._size.length);\n\n    // check it is a pattern matrix\n    if (!this._values)\n      throw new Error('Cannot invoke set on a Pattern only matrix');\n      \n    // row and column\n    var i = index[0];\n    var j = index[1];\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    \n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    if (isString(this._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, this._datatype);\n    }\n\n    // check we need to resize matrix\n    if (i > rows - 1 || j > columns - 1) {\n      // resize matrix\n      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);\n      // update rows & columns\n      rows = this._size[0];\n      columns = this._size[1];\n    }\n\n    // check i, j are valid\n    validateIndex(i, rows);\n    validateIndex(j, columns);\n\n    // find value index\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n    // check k is prior to next column k and it is in the correct row\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      // check value != 0\n      if (!eq(v, zero)) {\n        // update value\n        this._values[k] = v;\n      }\n      else {\n        // remove value from matrix\n        _remove(k, j, this._values, this._index, this._ptr);\n      }\n    }\n    else {\n      // insert value @ (i, j)\n      _insert(k, i, j, v, this._values, this._index, this._ptr);\n    }\n\n    return this;\n  };\n  \n  var _getValueIndex = function(i, top, bottom, index) {\n    // check row is on the bottom side\n    if (bottom - top === 0)\n      return bottom;\n    // loop rows [top, bottom[\n    for (var r = top; r < bottom; r++) {\n      // check we found value index\n      if (index[r] === i)\n        return r;\n    }\n    // we did not find row\n    return top;\n  };\n\n  var _remove = function (k, j, values, index, ptr) {\n    // remove value @ k\n    values.splice(k, 1);\n    index.splice(k, 1);\n    // update pointers\n    for (var x = j + 1; x < ptr.length; x++)\n      ptr[x]--;\n  };\n\n  var _insert = function (k, i, j, v, values, index, ptr) {\n    // insert value\n    values.splice(k, 0, v);\n    // update row for k\n    index.splice(k, 0, i);\n    // update column pointers\n    for (var x = j + 1; x < ptr.length; x++)\n      ptr[x]++;\n  };\n  \n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when \n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof SparseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {    \n    // validate arguments\n    if (!isArray(size))\n      throw new TypeError('Array expected');\n    if (size.length !== 2)\n      throw new Error('Only two dimensions matrix are supported');\n\n    // check sizes\n    size.forEach(function (value) {\n      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {\n        throw new TypeError('Invalid size, must contain positive integers ' +\n                            '(size: ' + string.format(size) + ')');\n      }\n    });\n    \n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, size[0], size[1], defaultValue);\n  };\n  \n  var _resize = function (matrix, rows, columns, defaultValue) {\n    // value to insert at the time of growing matrix\n    var value = defaultValue || 0;\n    \n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, matrix._datatype);\n      // convert value to the same datatype\n      value = typed.convert(value, matrix._datatype);\n    }\n    \n    // should we insert the value?\n    var ins = !eq(value, zero);\n\n    // old columns and rows\n    var r = matrix._size[0];\n    var c = matrix._size[1];\n\n    var i, j, k;\n\n    // check we need to increase columns\n    if (columns > c) {\n      // loop new columns\n      for (j = c; j < columns; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._values.length;\n        // check we need to insert matrix._values\n        if (ins) {\n          // loop rows\n          for (i = 0; i < r; i++) {\n            // add new matrix._values\n            matrix._values.push(value);\n            // update matrix._index\n            matrix._index.push(i);\n          }\n        }        \n      }\n      // store number of matrix._values in matrix._ptr\n      matrix._ptr[columns] = matrix._values.length;\n    }\n    else if (columns < c) {\n      // truncate matrix._ptr\n      matrix._ptr.splice(columns + 1, c - columns);\n      // truncate matrix._values and matrix._index\n      matrix._values.splice(matrix._ptr[columns], matrix._values.length);\n      matrix._index.splice(matrix._ptr[columns], matrix._index.length);\n    }\n    // update columns\n    c = columns;\n\n    // check we need to increase rows\n    if (rows > r) {\n      // check we have to insert values\n      if (ins) {\n        // inserts\n        var n = 0;\n        // loop columns\n        for (j = 0; j < c; j++) {\n          // update matrix._ptr for current column\n          matrix._ptr[j] = matrix._ptr[j] + n;\n          // where to insert matrix._values\n          k = matrix._ptr[j + 1] + n;\n          // pointer\n          var p = 0;\n          // loop new rows, initialize pointer\n          for (i = r; i < rows; i++, p++) {\n            // add value\n            matrix._values.splice(k + p, 0, value);\n            // update matrix._index\n            matrix._index.splice(k + p, 0, i);\n            // increment inserts\n            n++;\n          }\n        }\n        // store number of matrix._values in matrix._ptr\n        matrix._ptr[c] = matrix._values.length;\n      }\n    }\n    else if (rows < r) {\n      // deletes\n      var d = 0;\n      // loop columns\n      for (j = 0; j < c; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._ptr[j] - d;\n        // where matrix._values start for next column\n        var k0 = matrix._ptr[j];\n        var k1 = matrix._ptr[j + 1] - d;\n        // loop matrix._index\n        for (k = k0; k < k1; k++) {\n          // row\n          i = matrix._index[k];\n          // check we need to delete value and matrix._index\n          if (i > rows - 1) {\n            // remove value\n            matrix._values.splice(k, 1);\n            // remove item from matrix._index\n            matrix._index.splice(k, 1);\n            // increase deletes\n            d++;\n          }\n        }\n      }\n      // update matrix._ptr for current column\n      matrix._ptr[j] = matrix._values.length;\n    }\n    // update matrix._size\n    matrix._size[0] = rows;\n    matrix._size[1] = columns;\n    // return matrix\n    return matrix;\n  };\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof SparseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  SparseMatrix.prototype.reshape = function (size, copy) {\n\n    // validate arguments\n    if (!isArray(size))\n      throw new TypeError('Array expected');\n    if (size.length !== 2)\n      throw new Error('Sparse matrices can only be reshaped in two dimensions');\n\n    // check sizes\n    size.forEach(function (value) {\n      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {\n        throw new TypeError('Invalid size, must contain positive integers ' +\n                            '(size: ' + string.format(size) + ')');\n      }\n    });\n\n    // m * n must not change\n    if(this._size[0] * this._size[1] !== size[0] * size[1]) {\n      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');\n    }\n\n    // matrix to reshape\n    var m = copy ? this.clone() : this;\n\n    // return unchanged if the same shape\n    if(this._size[0] === size[0] && this._size[1] === size[1]) {\n      return m;\n    }\n\n    // Convert to COO format (generate a column index)\n    var colIndex = [];\n    for(var i=0; i<m._ptr.length; i++) {\n      for(var j=0; j<m._ptr[i+1]-m._ptr[i]; j++) {\n        colIndex.push(i);\n      }\n    }\n\n    // Clone the values array\n    var values = m._values.slice();\n\n    // Clone the row index array\n    var rowIndex = m._index.slice();\n\n    // Transform the (row, column) indices\n    for(var i=0; i<m._index.length; i++) {\n      var r1 = rowIndex[i];\n      var c1 = colIndex[i];\n      var flat = r1 * m._size[1] + c1;\n      colIndex[i] = flat % size[1];\n      rowIndex[i] = Math.floor(flat / size[1]);\n    }\n\n    // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored\n    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,\n    // sorting several arrays based on some other array.\n\n    // OR, we could easily just:\n\n    // 1. Remove all values from the matrix\n    m._values.length = 0;\n    m._index.length = 0;\n    m._ptr.length = size[1] + 1;\n    m._size = size.slice();\n    for(var i=0; i<m._ptr.length; i++) {\n      m._ptr[i] = 0;\n    }\n\n    // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)\n    // This step is probably the most time-consuming\n    for(var h=0; h<values.length; h++) {\n      var i = rowIndex[h];\n      var j = colIndex[h];\n      var v = values[h];\n      var k = _getValueIndex(i, m._ptr[j], m._ptr[j + 1], m._index);\n      _insert(k, i, j, v, m._values, m._index, m._ptr);\n    }\n\n    // The value indices are inserted out of order, but apparently that's... still OK?\n\n    return m;\n  }\n  \n  /**\n   * Create a clone of the matrix\n   * @memberof SparseMatrix\n   * @return {SparseMatrix} clone\n   */\n  SparseMatrix.prototype.clone = function () {\n    var m = new SparseMatrix({\n      values: this._values ? object.clone(this._values) : undefined,\n      index: object.clone(this._index),\n      ptr: object.clone(this._ptr),\n      size: object.clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n  \n  /**\n   * Retrieve the size of the matrix.\n   * @memberof SparseMatrix\n   * @returns {number[]} size\n   */\n  SparseMatrix.prototype.size = function() {\n    return this._size.slice(0); // copy the Array\n  };\n  \n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {SparseMatrix} matrix\n   */\n  SparseMatrix.prototype.map = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values)\n      throw new Error('Cannot invoke map on a Pattern only matrix');\n    // matrix instance\n    var me = this;\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // invoke callback\n    var invoke = function (v, i, j) {\n      // invoke callback\n      return callback(v, [i, j], me);\n    };\n    // invoke _map\n    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on the interval\n   * [minRow..maxRow, minColumn..maxColumn].\n   */\n  var _map = function (matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {\n    // result arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n    \n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, matrix._datatype);\n    }\n    \n    // invoke callback\n    var invoke = function (v, x, y) {\n      // invoke callback\n      v = callback(v, x, y);\n      // check value != 0\n      if (!eq(v, zero)) {\n        // store value\n        values.push(v);\n        // index\n        index.push(x);\n      }\n    };\n    // loop columns\n    for (var j = minColumn; j <= maxColumn; j++) {\n      // store pointer to values index\n      ptr.push(values.length);\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = matrix._ptr[j];\n      var k1 = matrix._ptr[j + 1];\n      // row pointer\n      var p = minRow;\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = matrix._index[k];\n        // check i is in range\n        if (i >= minRow && i <= maxRow) {\n          // zero values\n          if (!skipZeros) {\n           for (var x = p; x < i; x++)\n             invoke(0, x - minRow, j - minColumn);\n          }\n          // value @ k\n          invoke(matrix._values[k], i - minRow, j - minColumn);\n        }\n        // update pointer\n        p = i + 1;\n      }\n      // zero values\n      if (!skipZeros) {\n        for (var y = p; y <= maxRow; y++)\n          invoke(0, y - minRow, j - minColumn);\n      }\n    }\n    // store number of values in ptr\n    ptr.push(values.length);\n    // return sparse matrix\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]\n    });\n  };\n  \n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   */\n  SparseMatrix.prototype.forEach = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values)\n      throw new Error('Cannot invoke forEach on a Pattern only matrix');\n    // matrix instance\n    var me = this;\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // column pointer\n      var p = 0;\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        // check we need to process zeros\n        if (!skipZeros) {\n          // zero values\n          for (var x = p; x < i; x++)\n            callback(0, [x, j], me);\n        }\n        // value @ k\n        callback(this._values[k], [i, j], me);\n        // update pointer\n        p = i + 1;\n      }\n      // check we need to process zeros\n      if (!skipZeros) {\n        // zero values\n        for (var y = p; y < rows; y++)\n          callback(0, [y, j], me);\n      }\n    }\n  };\n  \n  /**\n   * Create an Array with a copy of the data of the SparseMatrix\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n  SparseMatrix.prototype.toArray = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, true);\n  };\n\n  /**\n   * Get the primitive value of the SparseMatrix: a two dimensions array\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n  SparseMatrix.prototype.valueOf = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, false);\n  };\n  \n  var _toArray = function (values, index, ptr, size, copy) {    \n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n    // result\n    var a = [];\n    // vars\n    var i, j;\n    // initialize array\n    for (i = 0; i < rows; i++) {\n      a[i] = [];\n      for (j = 0; j < columns; j++)\n        a[i][j] = 0;\n    }\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        i = index[k];\n        // set value (use one for pattern matrix)\n        a[i][j] = values ? (copy ? object.clone(values[k]) : values[k]) : 1;\n      }\n    }\n    return a;\n  };\n  \n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof SparseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  SparseMatrix.prototype.format = function (options) {\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // density\n    var density = this.density();\n    // rows & columns\n    var str = 'Sparse Matrix [' + string.format(rows, options) + ' x ' + string.format(columns, options) + '] density: ' + string.format(density, options) + '\\n';\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        // append value\n        str += '\\n    (' + string.format(i, options) + ', ' + string.format(j, options) + ') ==> ' + (this._values ? string.format(this._values[k], options) : 'X');\n      }\n    }\n    return str;\n  };\n  \n  /**\n   * Get a string representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {string} str\n   */\n  SparseMatrix.prototype.toString = function () {\n    return string.format(this.toArray());\n  };\n  \n  /**\n   * Get a JSON representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {Object}\n   */\n  SparseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'SparseMatrix',\n      values: this._values,\n      index: this._index,\n      ptr: this._ptr,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof SparseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix vector with the diagonal values.\n   */\n  SparseMatrix.prototype.diagonal = function(k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (k.isBigNumber === true)\n        k = k.toNumber();\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError ('The parameter k must be an integer number');\n      }\n    }\n    else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n    \n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    \n    // number diagonal values\n    var n = Math.min(rows - kSub, columns -  kSuper);\n    \n    // diagonal arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n    // initial ptr value\n    ptr[0] = 0;\n    // loop columns\n    for (var j = kSuper; j < columns && values.length < n; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // loop x within [k0, k1[\n      for (var x = k0; x < k1; x++) {\n        // row index\n        var i = this._index[x];\n        // check row\n        if (i === j - kSuper + kSub) {\n          // value on this column\n          values.push(this._values[x]);\n          // store row\n          index[values.length - 1] = i - kSub;\n          // exit loop\n          break;\n        }\n      }\n    }\n    // close ptr\n    ptr.push(values.length);\n    // return matrix\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: [n, 1]\n    });\n  };\n  \n  /**\n   * Generate a matrix from a JSON object\n   * @memberof SparseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,\n   *                       where mathjs is optional\n   * @returns {SparseMatrix}\n   */\n  SparseMatrix.fromJSON = function (json) {\n    return new SparseMatrix(json);\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {Array} size                       The matrix size.\n   * @param {number | Array | Matrix } value   The values for the diagonal.\n   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.\n   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.\n   *\n   * @returns {SparseMatrix}\n   */\n  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!isArray(size))\n      throw new TypeError('Array expected, size parameter');\n    if (size.length !== 2)\n      throw new Error('Only two dimensions matrix are supported');\n    \n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (s && s.isBigNumber === true) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      } \n      return s;\n    });\n    \n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (k.isBigNumber === true)\n        k = k.toNumber();\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError ('The parameter k must be an integer number');\n      }\n    }\n    else {\n      // default value\n      k = 0;\n    }\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, datatype);\n    }\n    \n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n    \n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n    \n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns -  kSuper);\n    \n    // value extraction function\n    var _value;\n      \n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function (i) {\n        // return value @ i\n        return value[i];\n      };\n    }\n    else if (value && value.isMatrix === true) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function (i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    }\n    else {\n      // define function\n      _value = function () {\n        // return value\n        return value;\n      };\n    }\n    \n    // create arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n    \n    // loop items\n    for (var j = 0; j < columns; j++) {\n      // number of rows with value\n      ptr.push(values.length);\n      // diagonal index\n      var i = j - kSuper;      \n      // check we need to set diagonal value\n      if (i >= 0 && i < n) {\n        // get value @ i\n        var v = _value(i);\n        // check for zero\n        if (!eq(v, zero)) {\n          // column\n          index.push(i + kSub);\n          // add value\n          values.push(v);\n        }\n      }\n    }\n    // last value should be number of values\n    ptr.push(values.length);\n    // create SparseMatrix\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: [rows, columns]\n    });\n  };\n  \n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  SparseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n    \n    // swap rows\n    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);\n    // return current instance\n    return this;\n  };\n  \n  /**\n   * Loop rows with data in column j.\n   *\n   * @param {number} j            Column\n   * @param {Array} values        Matrix values\n   * @param {Array} index         Matrix row indeces\n   * @param {Array} ptr           Matrix column pointers\n   * @param {Function} callback   Callback function invoked for every row in column j\n   */\n  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {\n    // indeces for column j\n    var k0 = ptr[j];\n    var k1 = ptr[j + 1];\n    // loop\n    for (var k = k0; k < k1; k++) {\n      // invoke callback\n      callback(index[k], values[k]);\n    }\n  };\n  \n  /**\n   * Swap rows x and y in Sparse Matrix data structures.\n   *\n   * @param {number} x         Matrix row index 1\n   * @param {number} y         Matrix row index 2\n   * @param {number} columns   Number of columns in matrix\n   * @param {Array} values     Matrix values\n   * @param {Array} index      Matrix row indeces\n   * @param {Array} ptr        Matrix column pointers\n   */\n  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // find value index @ x\n      var kx = _getValueIndex(x, k0, k1, index);\n      // find value index @ x\n      var ky = _getValueIndex(y, k0, k1, index);\n      // check both rows exist in matrix\n      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {\n        // swap values (check for pattern matrix)\n        if (values) {\n          var v = values[kx];\n          values[kx] = values[ky];\n          values[ky] = v;\n        }\n        // next column\n        continue;\n      }\n      // check x row exist & no y row\n      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {\n        // value @ x (check for pattern matrix)\n        var vx = values ? values[kx] : undefined;\n        // insert value @ y\n        index.splice(ky, 0, y);\n        if (values)\n          values.splice(ky, 0, vx);        \n        // remove value @ x (adjust array index if needed)\n        index.splice(ky <= kx ? kx + 1 : kx, 1);\n        if (values)\n          values.splice(ky <= kx ? kx + 1 : kx, 1);\n        // next column\n        continue;\n      }\n      // check y row exist & no x row\n      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {\n        // value @ y (check for pattern matrix)\n        var vy = values ? values[ky] : undefined;\n        // insert value @ x\n        index.splice(kx, 0, x);\n        if (values)\n          values.splice(kx, 0, vy);\n        // remove value @ y (adjust array index if needed)\n        index.splice(kx <= ky ? ky + 1 : ky, 1);\n        if (values)\n          values.splice(kx <= ky ? ky + 1 : ky, 1);\n      }\n    }\n  };\n\n  // register this type in the base class Matrix\n  type.Matrix._storage.sparse = SparseMatrix;\n\n  return SparseMatrix;\n}\n\nexports.name = 'SparseMatrix';\nexports.path = 'type';\nexports.factory = factory;\nexports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage\n\n},{\"../../error/DimensionError\":11,\"../../function/relational/equalScalar\":384,\"../../utils/index\":530,\"./Matrix\":476}],481:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create an index. An Index can store ranges having start, step, and end\n   * for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Syntax:\n   *\n   *     math.index(range1, range2, ...)\n   *\n   * Where each range can be any of:\n   *\n   * - A number\n   * - A string for getting/setting an object property\n   * - An instance of `Range`\n   * - A one-dimensional Array or a Matrix with numbers\n   *\n   * Indexes must be zero-based, integer numbers.\n   *\n   * Examples:\n   *\n   *    var math = math.js\n   *\n   *    var b = [1, 2, 3, 4, 5];\n   *    math.subset(b, math.index([1, 2, 3]));     // returns [2, 3, 4]\n   *\n   *    var a = math.matrix([[1, 2], [3, 4]]);\n   *    a.subset(math.index(0, 1));             // returns 2\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, matrix, number, string, unit\n   *\n   * @param {...*} ranges   Zero or more ranges or numbers.\n   * @return {Index}        Returns the created index\n   */\n  return typed('index', {\n    '...number | string | BigNumber | Range | Array | Matrix': function (args) {\n      var ranges = args.map(function (arg) {\n        if (arg && arg.isBigNumber === true) {\n          return arg.toNumber(); // convert BigNumber to Number\n        }\n        else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {\n          return arg.map(function (elem) {\n            // convert BigNumber to Number\n            return (elem && elem.isBigNumber === true) ? elem.toNumber() : elem;\n          });\n        }\n        else {\n          return arg;\n        }\n      });\n\n      var res = new type.Index();\n      type.Index.apply(res, ranges);\n      return res;\n    }\n  });\n}\n\nexports.name = 'index';\nexports.factory = factory;\n\n},{}],482:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a Matrix. The function creates a new `math.type.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Supported storage formats are 'dense' and 'sparse'.\n   *\n   * Syntax:\n   *\n   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n   *\n   * Examples:\n   *\n   *    var m = math.matrix([[1, 2], [3, 4]]);\n   *    m.size();                        // Array [2, 2]\n   *    m.resize([3, 2], 5);\n   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, sparse\n   *\n   * @param {Array | Matrix} [data]    A multi dimensional array\n   * @param {string} [format]          The Matrix storage format\n   *\n   * @return {Matrix} The created matrix\n   */\n  var matrix = typed('matrix', {\n    '': function () {\n      return _create([]);\n    },\n\n    'string': function (format) {\n      return _create([], format);\n    },\n    \n    'string, string': function (format, datatype) {\n      return _create([], format, datatype);\n    },\n\n    'Array': function (data) {\n      return _create(data);\n    },\n      \n    'Matrix': function (data) {\n      return _create(data, data.storage());\n    },\n    \n    'Array | Matrix, string': _create,\n    \n    'Array | Matrix, string, string': _create\n  });\n\n  matrix.toTex = {\n    0: '\\\\begin{bmatrix}\\\\end{bmatrix}',\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(${args[0]}\\\\right)'\n  };\n\n  return matrix;\n\n  /**\n   * Create a new Matrix with given storage format\n   * @param {Array} data\n   * @param {string} [format]\n   * @param {string} [datatype]\n   * @returns {Matrix} Returns a new Matrix\n   * @private\n   */\n  function _create(data, format, datatype) {\n    // get storage format constructor\n    var M = type.Matrix.storage(format || 'default');\n\n    // create instance\n    return new M(data, datatype);\n  }\n}\n\nexports.name = 'matrix';\nexports.factory = factory;\n\n},{}],483:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   *\n   * Syntax:\n   *\n   *    math.sparse()               // creates an empty sparse matrix.\n   *    math.sparse(data)           // creates a sparse matrix with initial data.\n   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n   *\n   * Examples:\n   *\n   *    var m = math.sparse([[1, 2], [3, 4]]);\n   *    m.size();                        // Array [2, 2]\n   *    m.resize([3, 2], 5);\n   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, matrix\n   *\n   * @param {Array | Matrix} [data]    A two dimensional array\n   *\n   * @return {Matrix} The created matrix\n   */\n  var sparse = typed('sparse', {\n    '': function () {\n      return new SparseMatrix([]);\n    },\n    \n    'string': function (datatype) {\n      return new SparseMatrix([], datatype);\n    },\n\n    'Array | Matrix': function (data) {\n      return new SparseMatrix(data);\n    },\n    \n    'Array | Matrix, string': function (data, datatype) {\n      return new SparseMatrix(data, datatype);\n    }\n  });\n\n  sparse.toTex = {\n    0: '\\\\begin{bsparse}\\\\end{bsparse}',\n    1: '\\\\left(${args[0]}\\\\right)'\n  };\n\n  return sparse;\n}\n\nexports.name = 'sparse';\nexports.factory = factory;\n\n},{}],484:[function(require,module,exports){\nmodule.exports = [\n  // types\n  require('./Matrix'),\n  require('./DenseMatrix'),\n  require('./SparseMatrix'),\n  require('./Spa'),\n  require('./FibonacciHeap'),\n  require('./ImmutableDenseMatrix'),\n  require('./MatrixIndex'),\n  require('./Range'),\n\n  // construction functions\n  require('./function/index'),\n  require('./function/matrix'),\n  require('./function/sparse')\n];\n\n},{\"./DenseMatrix\":473,\"./FibonacciHeap\":474,\"./ImmutableDenseMatrix\":475,\"./Matrix\":476,\"./MatrixIndex\":477,\"./Range\":478,\"./Spa\":479,\"./SparseMatrix\":480,\"./function/index\":481,\"./function/matrix\":482,\"./function/sparse\":483}],485:[function(require,module,exports){\n'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). \n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  Dij          ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  var algorithm01 = function (denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype;\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues)\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // process data types\n    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;\n    // callback function\n    var cf = dt ? typed.find(callback, [dt, dt]) : callback;\n\n    // vars\n    var i, j;\n    \n    // result (DenseMatrix)\n    var cdata = [];\n    // initialize c\n    for (i = 0; i < rows; i++)\n      cdata[i] = [];      \n    \n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns in b\n    for (j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // update workspace\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        // mark i as updated\n        w[i] = mark;\n      }\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // check row is in workspace\n        if (w[i] === mark) {\n          // c[i][j] was already calculated\n          cdata[i][j] = x[i];\n        }\n        else {\n          // item does not exist in S\n          cdata[i][j] = adata[i][j];\n        }\n      }\n    }\n\n    // return dense matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n  \n  return algorithm01;\n}\n\nexports.name = 'algorithm01';\nexports.factory = factory;\n\n},{\"../../../error/DimensionError\":11}],486:[function(require,module,exports){\n'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). \n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  var algorithm02 = function (denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype;\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues)\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n    \n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result (SparseMatrix)\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // loop columns in b\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k];\n        // update C(i,j)\n        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        // check for nonzero\n        if (!eq(cij, zero)) {\n          // push i & v\n          cindex.push(i);\n          cvalues.push(cij);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n  \n  return algorithm02;\n}\n\nexports.name = 'algorithm02';\nexports.factory = factory;\n\n},{\"../../../error/DimensionError\":11,\"../../../function/relational/equalScalar\":384}],487:[function(require,module,exports){\n'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked M*N times.\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(Dij, 0)    ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  var algorithm03 = function (denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype;\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues)\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result (DenseMatrix)\n    var cdata = [];\n\n    // initialize dense matrix\n    for (var z = 0; z < rows; z++) {\n      // initialize row\n      cdata[z] = [];\n    }\n\n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns in b\n    for (var j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k];\n        // update workspace\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        w[i] = mark;\n      }\n      // process workspace\n      for (var y = 0; y < rows; y++) {\n        // check we have a calculated value for current row\n        if (w[y] === mark) {\n          // use calculated value\n          cdata[y][j] = x[y];\n        }\n        else {\n          // calculate value\n          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);\n        }\n      }\n    }\n\n    // return dense matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n  \n  return algorithm03;\n}\n\nexports.name = 'algorithm03';\nexports.factory = factory;\n\n},{\"../../../error/DimensionError\":11}],488:[function(require,module,exports){\n'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n   *          └  B(i,j)       ; B(i,j) !== 0\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  var algorithm04 = function (a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // matrix\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspace\n    var xa = avalues && bvalues ? [] : undefined;\n    var xb = avalues && bvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // vars \n    var i, j, k, k0, k1;\n    \n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop A(:,j)\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // update c\n        cindex.push(i);\n        // update workspace\n        wa[i] = mark;\n        // check we need to process values\n        if (xa)\n          xa[i] = avalues[k];\n      }\n      // loop B(:,j)\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check row exists in A\n        if (wa[i] === mark) {\n          // update record in xa @ i\n          if (xa) {\n            // invoke callback\n            var v = cf(xa[i], bvalues[k]);\n            // check for zero\n            if (!eq(v, zero)) {\n              // update workspace\n              xa[i] = v;              \n            }\n            else {\n              // remove mark (index will be removed later)\n              wa[i] = null;\n            }\n          }\n        }\n        else {\n          // update c\n          cindex.push(i);\n          // update workspace\n          wb[i] = mark;\n          // check we need to process values\n          if (xb)\n            xb[i] = bvalues[k];\n        }\n      }\n      // check we need to process values (non pattern matrix)\n      if (xa && xb) {\n        // initialize first index in j\n        k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          i = cindex[k];\n          // check workspace has value @ i\n          if (wa[i] === mark) {\n            // push value (Aij != 0 || (Aij != 0 && Bij != 0))\n            cvalues[k] = xa[i];\n            // increment pointer\n            k++;\n          }\n          else if (wb[i] === mark) {\n            // push value (bij != 0)\n            cvalues[k] = xb[i];\n            // increment pointer\n            k++;\n          }\n          else {\n            // remove index @ k\n            cindex.splice(k, 1);\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n  \n  return algorithm04;\n}\n\nexports.name = 'algorithm04';\nexports.factory = factory;\n\n},{\"../../../error/DimensionError\":11,\"../../../function/relational/equalScalar\":384}],489:[function(require,module,exports){\n'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  \n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n   * C(i,j) = ┤  \n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  var algorithm05 = function (a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // matrix\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspaces\n    var xa = cvalues ? [] : undefined;\n    var xb = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // vars\n    var i, j, k, k1;\n    \n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop values A(:,j)\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // push index\n        cindex.push(i);\n        // update workspace\n        wa[i] = mark;\n        // check we need to process values\n        if (xa)\n          xa[i] = avalues[k];\n      }\n      // loop values B(:,j)\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check row existed in A\n        if (wa[i] !== mark) {\n          // push index\n          cindex.push(i);\n        }\n        // update workspace\n        wb[i] = mark;\n        // check we need to process values\n        if (xb)\n          xb[i] = bvalues[k];\n      }\n      // check we need to process values (non pattern matrix)\n      if (cvalues) {\n        // initialize first index in j\n        k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          i = cindex[k];\n          // marks\n          var wai = wa[i];\n          var wbi = wb[i];\n          // check Aij or Bij are nonzero\n          if (wai === mark || wbi === mark) {\n            // matrix values @ i,j\n            var va = wai === mark ? xa[i] : zero;\n            var vb = wbi === mark ? xb[i] : zero;\n            // Cij\n            var vc = cf(va, vb);\n            // check for zero\n            if (!eq(vc, zero)) {\n              // push value\n              cvalues.push(vc);\n              // increment pointer\n              k++;\n            }\n            else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n\n  return algorithm05;\n}\n\nexports.name = 'algorithm05';\nexports.factory = factory;\n\n},{\"../../../error/DimensionError\":11,\"../../../function/relational/equalScalar\":384}],490:[function(require,module,exports){\n'use strict';\n\nvar scatter = require('./../../../utils/collection/scatter');\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  \n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  var algorithm06 = function (a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // matrix\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspaces\n    var x = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var w = [];\n    // marks indicating value in a given row has been updated\n    var u = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // scatter the values of A(:,j) into workspace\n      scatter(a, j, w, x, u, mark, c, cf);\n      // scatter the values of B(:,j) into workspace\n      scatter(b, j, w, x, u, mark, c, cf);\n      // check we need to process values (non pattern matrix)\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k];\n          // check function was invoked on current row (Aij !=0 && Bij != 0)\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i];\n            // check for zero value\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v);\n              // increment pointer\n              k++;\n            }\n            else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n          else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      }\n      else {\n        // initialize first index in j\n        var p = cptr[j];\n        // loop index in j\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p];\n          // check function was invoked on current row (Aij !=0 && Bij != 0)\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          }\n          else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n  \n  return algorithm06;\n}\n\nexports.name = 'algorithm06';\nexports.factory = factory;\n\n},{\"../../../error/DimensionError\":11,\"../../../function/relational/equalScalar\":384,\"./../../../utils/collection/scatter\":526}],491:[function(require,module,exports){\n'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij). \n   * Callback function invoked MxN times.\n   *\n   * C(i,j) = f(Aij, Bij)\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  var algorithm07 = function (a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // vars\n    var i, j;\n    \n    // result arrays\n    var cdata = [];\n    // initialize c\n    for (i = 0; i < rows; i++)\n      cdata[i] = [];\n\n    // matrix\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspaces\n    var xa = [];\n    var xb = [];\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // scatter the values of A(:,j) into workspace\n      _scatter(a, j, wa, xa, mark);\n      // scatter the values of B(:,j) into workspace\n      _scatter(b, j, wb, xb, mark);\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero;\n        // invoke callback\n        cdata[i][j] = cf(va, vb);\n      }          \n    }\n\n    // return sparse matrix\n    return c;\n  };\n  \n  var _scatter = function (m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // loop values in column j\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k];\n      // update workspace\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  };\n  \n  return algorithm07;\n}\n\nexports.name = 'algorithm07';\nexports.factory = factory;\n\n},{\"../../../error/DimensionError\":11}],492:[function(require,module,exports){\n'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  var algorithm08 = function (a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues || !bvalues)\n      throw new Error('Cannot perform operation on Pattern Sparse Matrices');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // matrix\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // vars\n    var k, k0, k1, i;\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop values in a\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // mark workspace\n        w[i] = mark;\n        // set value\n        x[i] = avalues[k];\n        // add index\n        cindex.push(i);\n      }\n      // loop values in b\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check value exists in workspace\n        if (w[i] === mark) {\n          // evaluate callback\n          x[i] = cf(x[i], bvalues[k]);\n        }\n      }\n      // initialize first index in j\n      k = cptr[j];\n      // loop index in j\n      while (k < cindex.length) {\n        // row\n        i = cindex[k];\n        // value @ i\n        var v = x[i];\n        // check for zero value\n        if (!eq(v, zero)) {\n          // push value\n          cvalues.push(v);\n          // increment pointer\n          k++;\n        }\n        else {\n          // remove value @ i, do not increment pointer\n          cindex.splice(k, 1);\n        }\n      }      \n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n\n  return algorithm08;\n}\n\nexports.name = 'algorithm08';\nexports.factory = factory;\n\n},{\"../../../error/DimensionError\":11,\"../../../function/relational/equalScalar\":384}],493:[function(require,module,exports){\n'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij). \n   * Callback function invoked NZA times, number of nonzero elements in A.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\n   * C(i,j) = ┤  \n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  var algorithm09 = function (a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // matrix\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspaces\n    var x = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // vars\n    var i, j, k, k0, k1;\n    \n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // column mark\n      var mark = j + 1;\n      // check we need to process values\n      if (x) {\n        // loop B(:,j)\n        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n          // row\n          i = bindex[k];\n          // update workspace\n          w[i] = mark;\n          x[i] = bvalues[k];\n        }\n      }\n      // loop A(:,j)\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // check we need to process values\n        if (x) {\n          // b value @ i,j\n          var vb = w[i] === mark ? x[i] : zero;\n          // invoke f\n          var vc = cf(avalues[k], vb);\n          // check zero value\n          if (!eq(vc, zero)) {\n            // push index\n            cindex.push(i);\n            // push value\n            cvalues.push(vc);\n          }\n        }\n        else {\n          // push index\n          cindex.push(i);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n\n  return algorithm09;\n}\n\nexports.name = 'algorithm09';\nexports.factory = factory;\n\n},{\"../../../error/DimensionError\":11,\"../../../function/relational/equalScalar\":384}],494:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤  \n   *          └  b          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  var algorithm10 = function (s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues)\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cdata = [];\n    // matrix\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspaces\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k];\n        // update workspace\n        x[r] = avalues[k];\n        w[r] = mark;\n      }\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        }\n        // check sparse matrix has a value @ i,j\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        }\n        else {\n          // dense matrix value @ i, j\n          cdata[i][j] = b;\n        }\n      }\n    }\n\n    // return sparse matrix\n    return c;\n  };\n\n  return algorithm10;\n}\n\nexports.name = 'algorithm10';\nexports.factory = factory;\n\n},{}],495:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤  \n   *          └  0          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  var algorithm11 = function (s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues)\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // matrix\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k];\n        // invoke callback\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);\n        // check value is zero\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    }\n    // update ptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n\n  return algorithm11;\n}\n\nexports.name = 'algorithm11';\nexports.factory = factory;\n\n},{\"../../../function/relational/equalScalar\":384}],496:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n   * Callback function invoked MxN times.\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤  \n   *          └  f(0, b)    ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  var algorithm12 = function (s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues)\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n    \n    // result arrays\n    var cdata = [];\n    // matrix\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspaces\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k];\n        // update workspace\n        x[r] = avalues[k];\n        w[r] = mark;\n      }\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        }\n        // check sparse matrix has a value @ i,j\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        }\n        else {\n          // dense matrix value @ i, j\n          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);\n        }\n      }\n    }\n\n    // return sparse matrix\n    return c;\n  };\n  \n  return algorithm12;\n}\n\nexports.name = 'algorithm12';\nexports.factory = factory;\n\n},{}],497:[function(require,module,exports){\n'use strict';\n\nvar util = require('../../../utils/index');\nvar DimensionError = require('../../../error/DimensionError');\n\nvar string = util.string,\n    isString = string.isString;\n\nfunction factory (type, config, load, typed) {\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z). \n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, Bij..z)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Matrix}   b                 The DenseMatrix instance (B)\n   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658\n   */\n  var algorithm13 = function (a, b, callback) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b arrays\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // c arrays\n    var csize = [];\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // validate each one of the dimension sizes\n    for (var s = 0; s < asize.length; s++) {\n      // must match\n      if (asize[s] !== bsize[s])\n        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n      // update dimension in c\n      csize[s] = asize[s];\n    }\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // populate cdata, iterate through dimensions\n    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];\n    \n    // c matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: csize,\n      datatype: dt\n    });\n  };\n  \n  // recursive function\n  var _iterate = function (f, level, s, n, av, bv) {\n    // initialize array for this level\n    var cv = [];\n    // check we reach the last level\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = f(av[i], bv[i]);\n      }\n    }\n    else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);\n      }\n    }\n    return cv;\n  };\n  \n  return algorithm13;\n}\n\nexports.name = 'algorithm13';\nexports.factory = factory;\n\n},{\"../../../error/DimensionError\":11,\"../../../utils/index\":530}],498:[function(require,module,exports){\n'use strict';\n\nvar clone = require('../../../utils/object').clone;\n\nfunction factory (type, config, load, typed) {\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b). \n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, b)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042\n   */\n  var algorithm14 = function (a, b, callback, inverse) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    \n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n    \n    // populate cdata, iterate through dimensions\n    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];\n\n    // c matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: clone(asize),\n      datatype: dt\n    });\n  };\n  \n  // recursive function\n  var _iterate = function (f, level, s, n, av, bv, inverse) {\n    // initialize array for this level\n    var cv = [];\n    // check we reach the last level\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);\n      }\n    }\n    else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);\n      }\n    }\n    return cv;\n  };\n\n  return algorithm14;\n}\n\nexports.name = 'algorithm14';\nexports.factory = factory;\n\n},{\"../../../utils/object\":533}],499:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('./../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2);                         // returns number 2\n   *    math.number('7.2');                     // returns number 7.2\n   *    math.number(true);                      // returns number 1\n   *    math.number([true, false, true, true]); // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm');    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function () {\n      return 0;\n    },\n\n    'number': function (x) {\n      return x;\n    },\n\n    'string': function (x) {\n      var num = Number(x);\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n      return num;\n    },\n\n    'BigNumber': function (x) {\n      return x.toNumber();\n    },\n\n    'Fraction': function (x) {\n      return x.valueOf();\n    },\n\n    'Unit': function (x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n\n    'Unit, string | Unit': function (unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, number);\n    }\n  });\n\n  number.toTex = {\n    0: '0',\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)'\n  };\n\n  return number;\n}\n\nexports.name = 'number';\nexports.factory = factory;\n\n},{\"./../utils/collection/deepMap\":523}],500:[function(require,module,exports){\n'use strict';\n\nfunction factory (type, config, load, typed) {\n  /**\n   * A ResultSet contains a list or results\n   * @class ResultSet\n   * @param {Array} entries\n   * @constructor ResultSet\n   */\n  function ResultSet(entries) {\n    if (!(this instanceof ResultSet)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.entries = entries || [];\n  }\n\n  /**\n   * Attach type information\n   */\n  ResultSet.prototype.type = 'ResultSet';\n  ResultSet.prototype.isResultSet = true;\n\n  /**\n   * Returns the array with results hold by this ResultSet\n   * @memberof ResultSet\n   * @returns {Array} entries\n   */\n  ResultSet.prototype.valueOf = function () {\n    return this.entries;\n  };\n\n  /**\n   * Returns the stringified results of the ResultSet\n   * @memberof ResultSet\n   * @returns {string} string\n   */\n  ResultSet.prototype.toString = function () {\n    return '[' + this.entries.join(', ') + ']';\n  };\n\n  /**\n   * Get a JSON representation of the ResultSet\n   * @memberof ResultSet\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   */\n  ResultSet.prototype.toJSON = function () {\n    return {\n      mathjs: 'ResultSet',\n      entries: this.entries\n    };\n  };\n\n  /**\n   * Instantiate a ResultSet from a JSON object\n   * @memberof ResultSet\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   * @return {ResultSet}\n   */\n  ResultSet.fromJSON = function (json) {\n    return new ResultSet(json.entries);\n  };\n\n  return ResultSet;\n}\n\nexports.name = 'ResultSet';\nexports.path = 'type';\nexports.factory = factory;\n\n},{}],501:[function(require,module,exports){\nmodule.exports = [\n  // type\n  require('./ResultSet')\n];\n\n},{\"./ResultSet\":500}],502:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('./../utils/collection/deepMap');\nvar number = require('../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a string or convert any object into a string.\n   * Elements of Arrays and Matrices are processed element wise.\n   *\n   * Syntax:\n   *\n   *    math.string(value)\n   *\n   * Examples:\n   *\n   *    math.string(4.2);               // returns string '4.2'\n   *    math.string(math.complex(3, 2); // returns string '3 + 2i'\n   *\n   *    var u = math.unit(5, 'km');\n   *    math.string(u.to('m'));         // returns string '5000 m'\n   *\n   *    math.string([true, false]);     // returns ['true', 'false']\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, unit\n   *\n   * @param {* | Array | Matrix | null} [value]  A value to convert to a string\n   * @return {string | Array | Matrix} The created string\n   */\n  var string = typed('string', {\n    '': function () {\n      return '';\n    },\n\n    'number': number.format,\n\n    'null': function (x) {\n      return 'null';\n    },\n\n    'boolean': function (x) {\n      return x + '';\n    },\n\n    'string': function (x) {\n      return x;\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, string);\n    },\n\n    'any': function (x) {\n      return String(x);\n    }\n  });\n\n  string.toTex = {\n    0: '\\\\mathtt{\"\"}',\n    1: '\\\\mathrm{string}\\\\left(${args[0]}\\\\right)'\n  };\n\n  return string;\n}\n\nexports.name = 'string';\nexports.factory = factory;\n\n},{\"../utils/number\":532,\"./../utils/collection/deepMap\":523}],503:[function(require,module,exports){\n'use strict';\n\nvar endsWith = require('../../utils/string').endsWith;\nvar clone = require('../../utils/object').clone;\nvar constants = require('../../utils/bignumber/constants');\n\nfunction factory (type, config, load, typed, math) {\n  var add       = load(require('../../function/arithmetic/addScalar'));\n  var subtract  = load(require('../../function/arithmetic/subtract'));\n  var multiply  = load(require('../../function/arithmetic/multiplyScalar'));\n  var divide    = load(require('../../function/arithmetic/divideScalar'));\n  var pow       = load(require('../../function/arithmetic/pow'));\n  var abs       = load(require('../../function/arithmetic/abs'));\n  var fix       = load(require('../../function/arithmetic/fix'));\n  var round     = load(require('../../function/arithmetic/round'));\n  var equal     = load(require('../../function/relational/equal'));\n  var isNumeric = load(require('../../function/utils/isNumeric'));\n  var format    = load(require('../../function/string/format'));\n  var getTypeOf = load(require('../../function/utils/typeof'));\n  var toNumber  = load(require('../../type/number'));\n  var Complex   = load(require('../../type/complex/Complex'));\n\n  /**\n   * A unit can be constructed in the following ways:\n   *     var a = new Unit(value, name);\n   *     var b = new Unit(null, name);\n   *     var c = Unit.parse(str);\n   *\n   * Example usage:\n   *     var a = new Unit(5, 'cm');               // 50 mm\n   *     var b = Unit.parse('23 kg');             // 23 kg\n   *     var c = math.in(a, new Unit(null, 'm');  // 0.05 m\n   *     var d = new Unit(9.81, \"m/s^2\");         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.\n   */\n  function Unit(value, name) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n\n    if (!(value == undefined || isNumeric(value) || value.isComplex)) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n    if (name != undefined && (typeof name !== 'string' || name == '')) {\n      throw new TypeError('Second parameter in Unit constructor must be a string');\n    }\n\n    if (name != undefined) {\n      var u = Unit.parse(name);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    }\n    else {\n      this.units = [\n        {\n          unit: UNIT_NONE,\n          prefix: PREFIXES.NONE,  // link to a list with supported prefixes\n          power: 0\n        }\n      ];\n      this.dimensions = []; \n      for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n        this.dimensions[i] = 0;\n      }\n    }\n\n    this.value = (value != undefined) ? this._normalize(value) : null;\n\n    this.fixPrefix = false; // if true, function format will not search for the\n                            // best prefix but leave it as initially provided.\n                            // fixPrefix is set true by the method Unit.to\n\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as he supplied.\n    this.isUnitListSimplified = true;\n\n  }\n\n  /**\n   * Attach type information\n   */\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true;\n\n  // private variables and functions for the Unit parser\n  var text, index, c;\n\n  function skipWhitespace() {\n    while (c == ' ' || c == '\\t') {\n      next();\n    }\n  }\n\n  function isDigitDot(c) {\n    return ((c >= '0' && c <= '9') || c == '.');\n  }\n\n  function isDigit(c) {\n    return ((c >= '0' && c <= '9'));\n  }\n\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n\n  function parseNumber() {\n    var number = '';\n    var oldIndex;\n    oldIndex = index;\n\n    if (c == '+') {\n      next();\n    }\n    else if (c == '-') {\n      number += c;\n      next();\n    }\n\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    }\n\n    // get number, can have a single dot\n    if (c == '.') {\n      number += c;\n      next();\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    }\n    else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n      if (c == '.') {\n        number += c;\n        next();\n      }\n    }\n    while (isDigit(c)) {\n      number += c;\n      next();\n    }\n\n    // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n    if (c == 'E' || c == 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n\n      tentativeNumber += c;\n      next();\n\n      if (c == '+' || c == '-') {\n        tentativeNumber += c;\n        next();\n      }\n\n      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      }\n      \n      // We can now safely say that this is scientific notation.\n      number = number + tentativeNumber;\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n\n    return number;\n  }\n\n  function parseUnit() {\n    var unitName = '';\n\n    // Alphanumeric characters only; matches [a-zA-Z0-9]\n    var code = text.charCodeAt(index);\n    while ( (code >= 48 && code <= 57) ||\n            (code >= 65 && code <= 90) ||\n            (code >= 97 && code <= 122)) {\n      unitName += c;\n      next();\n      code = text.charCodeAt(index);\n    }\n\n    // Must begin with [a-zA-Z]\n    code = unitName.charCodeAt(0);\n    if ((code >= 65 && code <= 90) ||\n        (code >= 97 && code <= 122)) {\n        return unitName || null;\n    } \n    else {\n      return null;\n    }\n  }\n\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    }\n    else {\n      return null;\n    }\n  }\n\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n\n    var unit = new Unit();\n    unit.units = [];\n\n    // A unit should follow this pattern:\n    // [number]unit[^number] [unit[^number]]...[/unit[^number] [unit[^number]]]\n\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace();\n    // Optional number at the start of the string\n    var valueStr = parseNumber();\n    var value = null;\n    if(valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new type.BigNumber(valueStr);\n      }\n      else if (config.number === 'Fraction') {\n        value = new type.Fraction(valueStr);\n      }\n      else { // number\n        value = parseFloat(valueStr);\n      }\n    }\n    skipWhitespace();    // Whitespace is not required here\n\n    // Next, we read any number of unit[^number]\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false;\n\n    // Stack to keep track of powerMultipliers applied to each parentheses group\n    var powerMultiplierStack = [];\n\n    // Running product of all elements in powerMultiplierStack\n    var powerMultiplierStackProduct = 1;\n\n    while (true) {\n      skipWhitespace();\n\n      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      }\n\n      // Is there something here?\n      if(c) {\n        var oldC = c;\n        var uStr = parseUnit();\n        if(uStr == null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      }\n      else {\n        // End of input.\n        break;\n      }\n\n      // Verify the unit exists and get the prefix (if any)\n      var res = _findUnit(uStr);\n      if(res == null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct;\n      // Is there a \"^ number\"?\n      skipWhitespace();\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n        if(p == null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n        power *= p;\n      }\n\n      // Add the unit to the list\n      unit.units.push( {\n        unit: res.unit,\n        prefix: res.prefix,\n        power: power\n      });\n      for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      }\n\n      // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n      skipWhitespace();\n      while (c === ')') {\n        if(powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      }\n\n      // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n      expectingUnit = false;\n\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      }\n      else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n      else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      }\n\n      // Replace the unit into the auto unit system\n      if(res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    }\n    \n    // Has the string been entirely consumed?\n    skipWhitespace();\n    if(c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    }\n\n    // Is there a trailing slash?\n    if(expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    }\n\n    // Is the parentheses stack empty?\n    if(powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    }\n\n    // Are there any units at all?\n    if(unit.units.length == 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n\n    unit.value = (value != undefined) ? unit._normalize(value) : null;\n    return unit;\n  };\n\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n\n    unit.fixPrefix = this.fixPrefix;\n    unit.isUnitListSimplified = this.isUnitListSimplified;\n\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n    for(var i = 0; i < this.units.length; i++) {\n      unit.units[i] = { };\n      for (var p in this.units[i]) {\n        if (this.units[i].hasOwnProperty(p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n\n    return unit;\n  };\n\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n  Unit.prototype._isDerived = function() {\n    if(this.units.length === 0) {\n      return false;\n    }\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n  Unit.prototype._normalize = function (value) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value == null || this.units.length === 0) {\n      return value;\n    }\n    else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      var res = value;\n      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for(var i=0; i < this.units.length; i++) {\n        unitValue       = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower       = convert(this.units[i].power);\n        res = multiply(res, pow(multiply(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    }\n    else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue       = convert(this.units[0].unit.value);\n      unitOffset      = convert(this.units[0].unit.offset);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n\n      return multiply(add(value, unitOffset), multiply(unitValue, unitPrefixValue));\n    }\n  };\n\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value == null || this.units.length === 0) {\n      return value;\n    }\n    else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.\n      var res = value;\n      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue       = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower       = convert(this.units[i].power);\n        res = divide(res, pow(multiply(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    }\n    else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue       = convert(this.units[0].unit.value);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      unitOffset      = convert(this.units[0].unit.offset);\n\n      if (prefixValue == undefined) {\n        return subtract(divide(divide(value, unitValue), unitPrefixValue), unitOffset);\n      }\n      else {\n        return subtract(divide(divide(value, unitValue), prefixValue), unitOffset);\n      }\n    }\n  };\n\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n  function _findUnit(str) {\n  \n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if(UNITS.hasOwnProperty(str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit: unit,\n        prefix: prefix\n      }\n    }\n\n    for (var name in UNITS) {\n      if (UNITS.hasOwnProperty(name)) {\n        if (endsWith(str, name)) {\n          var unit = UNITS[name];\n          var prefixLen = (str.length - name.length);\n          var prefixName = str.substring(0, prefixLen);\n          var prefix = unit.prefixes.hasOwnProperty(prefixName)\n              ? unit.prefixes[prefixName]\n              : undefined;\n          if (prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: unit,\n              prefix: prefix\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n  Unit.isValuelessUnit = function (name) {\n    return (_findUnit(name) != null);\n  };\n\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n  Unit.prototype.hasBase = function (base) {\n\n    if(typeof(base) === \"string\") {\n      base = BASE_UNITS[base];\n    }\n\n    if(!base)\n      return false;\n\n\n    // All dimensions must be the same\n    for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n\n  };\n\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n  Unit.prototype.equals = function (other) {\n    return (this.equalBase(other) && equal(this.value, other.value));\n  };\n\n  /**\n   * Multiply this unit with another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n  Unit.prototype.multiply = function (other) {\n    var res = this.clone();\n    \n    for(var i = 0; i<BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    }\n\n    // Append other's units list onto res (simplify later in Unit.prototype.format)\n    for(var i=0; i<other.units.length; i++) {\n      // Make a deep copy\n      var inverted = {};\n      for(var key in other.units[i]) {\n        inverted[key] = other.units[i][key];\n      }\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, then the result should also have a value\n    if(this.value != null || other.value != null) {\n      var valThis = this.value == null ? this._normalize(1) : this.value;\n      var valOther = other.value == null ? other._normalize(1) : other.value;\n      res.value = multiply(valThis, valOther);\n    }\n    else {\n      res.value = null;\n    }\n\n    // Trigger simplification of the unit list at some future time\n    res.isUnitListSimplified = false;\n\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n  Unit.prototype.divide = function (other) {\n    var res = this.clone();\n    \n    for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    }\n\n    // Invert and append other's units list onto res (simplify later in Unit.prototype.format)\n    for(var i=0; i<other.units.length; i++) {\n      // Make a deep copy\n      var inverted = {};\n      for(var key in other.units[i]) {\n        inverted[key] = other.units[i][key];\n      }\n      inverted.power = -inverted.power;\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, the result should have a value\n    if (this.value != null || other.value != null) {\n      var valThis = this.value == null ? this._normalize(1) : this.value;\n      var valOther = other.value == null ? other._normalize(1) : other.value;\n      res.value = divide(valThis, valOther);\n    }\n    else {\n      res.value = null;\n    }\n\n    // Trigger simplification of the unit list at some future time\n    res.isUnitListSimplified = false;\n\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n    \n    for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    }\n\n    // Adjust the power of each unit in the list\n    for(var i=0; i<res.units.length; i++) {\n      res.units[i].power *= p;\n    }\n\n    if(res.value != null) {\n      res.value = pow(res.value, p);\n\n      // only allow numeric output, we don't want to return a Complex number\n      //if (!isNumeric(res.value)) {\n      //  res.value = NaN;\n      //}\n      // Update: Complex supported now\n    }\n    else {\n      res.value = null;\n    }\n\n    // Trigger lazy evaluation of the unit list\n    res.isUnitListSimplified = false;\n\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n  var getNumericIfUnitless = function(unit) {\n    if(unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    }\n    else {\n      return unit;\n    }\n  }\n    \n\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n  Unit.prototype.abs = function () {\n    // This gives correct, but unexpected, results for units with an offset.\n    // For example, abs(-283.15 degC) = -263.15 degC !!!\n    var ret = this.clone();\n    ret.value = abs(ret.value);\n\n    for(var i in ret.units) {\n      if(ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS[\"W\"];\n      }\n    }\n\n    return ret;\n  };\n\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n  Unit.prototype.to = function (valuelessUnit) {\n    var other;\n    var value = this.value == null ? this._normalize(1) : this.value;\n    if (typeof valuelessUnit === 'string') {\n      //other = new Unit(null, valuelessUnit);\n      other = Unit.parse(valuelessUnit);\n      if (!this.equalBase(other)) {\n        throw new Error('Units do not match');\n      }\n      if (other.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.isUnitListSimplified = true;\n      return other;\n    }\n    else if (valuelessUnit && valuelessUnit.isUnit) {\n      if (!this.equalBase(valuelessUnit)) {\n        throw new Error('Units do not match');\n      }\n      if (valuelessUnit.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n      other = valuelessUnit.clone();\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.isUnitListSimplified = true;\n      return other;\n    }\n    else {\n      throw new Error('String or Unit expected as parameter');\n    }\n  };\n\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other = this;\n    if(valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    }\n\n    if(other._isDerived()) {\n      return other._denormalize(other.value);\n    }\n    else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.valueOf = Unit.prototype.toString;\n\n  /**\n   * Attempt to simplify the list of units for this unit according to the dimensions array and the current unit system. After the call, this Unit will contain a list of the \"best\" units for formatting.\n   * Intended to be evaluated lazily. You must set isUnitListSimplified = false before the call! After the call, isUnitListSimplified will be set to true.\n   */\n  Unit.prototype.simplifyUnitListLazy = function() {\n\n    if (this.isUnitListSimplified || this.value == null) {\n      return;\n    }\n\n    var proposedUnitList = [];\n\n    // Search for a matching base\n    var matchingBase;\n    for(var key in currentUnitSystem) {\n      if(this.hasBase(BASE_UNITS[key])) {\n        matchingBase = key;\n        break;\n      }\n    }\n\n    if(matchingBase === 'NONE')\n    {\n      this.units = [];\n    }\n    else {\n      var matchingUnit;\n      if(matchingBase) {\n        // Does the unit system have a matching unit?\n        if(currentUnitSystem.hasOwnProperty(matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n      var value;\n      var str;\n      if(matchingUnit) {\n        this.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      }\n      else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n        for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n          if(Math.abs(this.dimensions[i] || 0) > 1e-12) {\n            if(currentUnitSystem.hasOwnProperty(baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: this.dimensions[i] || 0\n              });\n            }\n            else {\n              missingBaseDim = true;\n            }\n          }\n        }\n\n        // Is the proposed unit list \"simpler\" than the existing one?\n        if(proposedUnitList.length < this.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          this.units = proposedUnitList;\n        }\n      }\n    }\n\n    this.isUnitListSimplified = true;\n  };\n\n  Unit.prototype.toSI = function() {\n\n    var ret = this.clone();\n\n    var proposedUnitList = [];\n\n    // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n    var missingBaseDim = false;\n    for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n      if(Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if(UNIT_SYSTEMS[\"si\"].hasOwnProperty(baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS[\"si\"][baseDim].unit,\n            prefix: UNIT_SYSTEMS[\"si\"][baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        }\n        else {\n          throw new Error(\"Cannot express custom unit \" + baseDim + \" in SI units\");\n        }\n      }\n    }\n\n    // Replace this unit list with the proposed list\n    ret.units = proposedUnitList;\n\n    ret.isUnitListSimplified = true;\n\n    return ret;\n  }\n\n  /**\n   * Get a string representation of the units of this Unit, without the value.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.formatUnits = function () {\n\n    // Lazy evaluation of the unit list\n    this.simplifyUnitListLazy();\n\n    var strNum = \"\";\n    var strDen = \"\";\n    var nNum = 0;\n    var nDen = 0;\n\n    for(var i=0; i<this.units.length; i++) {\n      if(this.units[i].power > 0) {\n        nNum++;\n        strNum += \" \" + this.units[i].prefix.name + this.units[i].unit.name;\n        if(Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += \"^\" + this.units[i].power;\n        }\n      }\n      else if(this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n\n    if(nDen > 0) {\n      for(var i=0; i<this.units.length; i++) {\n        if(this.units[i].power < 0) {\n          if(nNum > 0) {\n            strDen += \" \" + this.units[i].prefix.name + this.units[i].unit.name;\n            if(Math.abs(this.units[i].power + 1.0) > 1e-15) {\n              strDen += \"^\" + (-this.units[i].power);\n            }\n          }\n          else {\n            strDen += \" \" + this.units[i].prefix.name + this.units[i].unit.name;\n            strDen += \"^\" + (this.units[i].power);\n          }\n        }\n      }\n    }\n    // Remove leading \" \"\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1);\n\n    // Add parans for better copy/paste back into the eval, for example, or for better pretty print formatting\n    if(nNum > 1 && nDen > 0) {\n      strNum = \"(\" + strNum + \")\";\n    }\n    if(nDen > 1 && nNum > 0) {\n      strDen = \"(\" + strDen + \")\";\n    }\n\n    var str = strNum;\n    if(nNum > 0 && nDen > 0) {\n      str += \" / \";\n    }\n    str += strDen;\n\n    return str;\n  };\n\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n  Unit.prototype.format = function (options) {\n\n    // Simplfy the unit list, if necessary\n    this.simplifyUnitListLazy();\n\n    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n    var isImaginary = false;\n    var isReal = true;\n    if(typeof(this.value) !== 'undefined' && this.value !== null && this.value.isComplex) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(this.value.re) < 1e-14;\n      isReal = Math.abs(this.value.im) < 1e-14;\n    }\n    \n    for(var i in this.units) {\n      if(this.units[i].unit) {\n        if(this.units[i].unit.name === 'VA' && isImaginary) {\n          this.units[i].unit = UNITS[\"VAR\"];\n        }\n        else if(this.units[i].unit.name === 'VAR' && !isImaginary) {\n          this.units[i].unit = UNITS[\"VA\"];\n        }\n      }\n    }\n\n\n    // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n    if (this.units.length === 1 && !this.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        this.units[0].prefix = this._bestPrefix();\n      }\n    }\n\n\n    var value = this._denormalize(this.value);\n    var str = (this.value !== null) ? format(value, options || {}) : '';\n    var unitStr = this.formatUnits();\n    if(this.value && this.value.isComplex) {\n      str = \"(\" + str + \")\";    // Surround complex values with ( ) to enable better parsing \n    }\n    if(unitStr.length > 0 && str.length > 0) {\n      str += \" \";\n    }\n    str += unitStr;\n\n    return str;\n  };\n\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error(\"Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!\");\n    }\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error(\"Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!\");\n    }\n\n    // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n    var absValue = abs(this.value);\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if(bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix;    // Allow the original prefix\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n    for (var p in prefixes) {\n      if (prefixes.hasOwnProperty(p)) {\n        var prefix = prefixes[p];\n        if (prefix.scientific) {\n\n          var diff = Math.abs(\n              Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n\n          if (diff < bestDiff\n              || (diff === bestDiff && prefix.name.length < bestPrefix.name.length)) {\n                // choose the prefix with the smallest diff, or if equal, choose the one\n                // with the shortest name (can happen with SHORTLONG for example)\n                bestPrefix = prefix;\n                bestDiff = diff;\n          }\n        }\n      }\n    }\n\n    return bestPrefix;\n  };\n\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units. \n   *\n   *   Example:\n   *\n   *   var u = new Unit(1, 'm');\n   *   u.splitUnit(['feet', 'inch']);\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n  Unit.prototype.splitUnit = function(parts) {\n\n    var x = this.clone();\n    var ret = [];\n    for(var i=0; i<parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if(i==parts.length-1) break;\n\n      // Get the numeric value of this unit\n      var xNumeric = x.toNumeric();\n\n      // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n      var xRounded = round(xNumeric);\n      var xFixed;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      }\n      else {\n        xFixed = fix(x.toNumeric());\n      }\n\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    }\n\n    // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n    var testSum = 0;\n    for(var i=0; i<ret.length; i++) {\n      testSum = add(testSum, ret[i].value);\n    }\n    if(equal(testSum, this.value)) {\n      x.value = 0;\n    }\n\n    ret.push(x);\n\n    return ret;\n  };\n\n  var PREFIXES = {\n    NONE: {\n      '': {name: '', value: 1, scientific: true}\n    },\n    SHORT: {\n      '': {name: '', value: 1, scientific: true},\n\n      'da': {name: 'da', value: 1e1, scientific: false},\n      'h': {name: 'h', value: 1e2, scientific: false},\n      'k': {name: 'k', value: 1e3, scientific: true},\n      'M': {name: 'M', value: 1e6, scientific: true},\n      'G': {name: 'G', value: 1e9, scientific: true},\n      'T': {name: 'T', value: 1e12, scientific: true},\n      'P': {name: 'P', value: 1e15, scientific: true},\n      'E': {name: 'E', value: 1e18, scientific: true},\n      'Z': {name: 'Z', value: 1e21, scientific: true},\n      'Y': {name: 'Y', value: 1e24, scientific: true},\n\n      'd': {name: 'd', value: 1e-1, scientific: false},\n      'c': {name: 'c', value: 1e-2, scientific: false},\n      'm': {name: 'm', value: 1e-3, scientific: true},\n      'u': {name: 'u', value: 1e-6, scientific: true},\n      'n': {name: 'n', value: 1e-9, scientific: true},\n      'p': {name: 'p', value: 1e-12, scientific: true},\n      'f': {name: 'f', value: 1e-15, scientific: true},\n      'a': {name: 'a', value: 1e-18, scientific: true},\n      'z': {name: 'z', value: 1e-21, scientific: true},\n      'y': {name: 'y', value: 1e-24, scientific: true}\n    },\n    LONG: {\n      '': {name: '', value: 1, scientific: true},\n\n      'deca': {name: 'deca', value: 1e1, scientific: false},\n      'hecto': {name: 'hecto', value: 1e2, scientific: false},\n      'kilo': {name: 'kilo', value: 1e3, scientific: true},\n      'mega': {name: 'mega', value: 1e6, scientific: true},\n      'giga': {name: 'giga', value: 1e9, scientific: true},\n      'tera': {name: 'tera', value: 1e12, scientific: true},\n      'peta': {name: 'peta', value: 1e15, scientific: true},\n      'exa': {name: 'exa', value: 1e18, scientific: true},\n      'zetta': {name: 'zetta', value: 1e21, scientific: true},\n      'yotta': {name: 'yotta', value: 1e24, scientific: true},\n\n      'deci': {name: 'deci', value: 1e-1, scientific: false},\n      'centi': {name: 'centi', value: 1e-2, scientific: false},\n      'milli': {name: 'milli', value: 1e-3, scientific: true},\n      'micro': {name: 'micro', value: 1e-6, scientific: true},\n      'nano': {name: 'nano', value: 1e-9, scientific: true},\n      'pico': {name: 'pico', value: 1e-12, scientific: true},\n      'femto': {name: 'femto', value: 1e-15, scientific: true},\n      'atto': {name: 'atto', value: 1e-18, scientific: true},\n      'zepto': {name: 'zepto', value: 1e-21, scientific: true},\n      'yocto': {name: 'yocto', value: 1e-24, scientific: true}\n    },\n    SQUARED: {\n      '': {name: '', value: 1, scientific: true},\n\n      'da': {name: 'da', value: 1e2, scientific: false},\n      'h': {name: 'h', value: 1e4, scientific: false},\n      'k': {name: 'k', value: 1e6, scientific: true},\n      'M': {name: 'M', value: 1e12, scientific: true},\n      'G': {name: 'G', value: 1e18, scientific: true},\n      'T': {name: 'T', value: 1e24, scientific: true},\n      'P': {name: 'P', value: 1e30, scientific: true},\n      'E': {name: 'E', value: 1e36, scientific: true},\n      'Z': {name: 'Z', value: 1e42, scientific: true},\n      'Y': {name: 'Y', value: 1e48, scientific: true},\n\n      'd': {name: 'd', value: 1e-2, scientific: false},\n      'c': {name: 'c', value: 1e-4, scientific: false},\n      'm': {name: 'm', value: 1e-6, scientific: true},\n      'u': {name: 'u', value: 1e-12, scientific: true},\n      'n': {name: 'n', value: 1e-18, scientific: true},\n      'p': {name: 'p', value: 1e-24, scientific: true},\n      'f': {name: 'f', value: 1e-30, scientific: true},\n      'a': {name: 'a', value: 1e-36, scientific: true},\n      'z': {name: 'z', value: 1e-42, scientific: true},\n      'y': {name: 'y', value: 1e-48, scientific: true}\n    },\n    CUBIC: {\n      '': {name: '', value: 1, scientific: true},\n\n      'da': {name: 'da', value: 1e3, scientific: false},\n      'h': {name: 'h', value: 1e6, scientific: false},\n      'k': {name: 'k', value: 1e9, scientific: true},\n      'M': {name: 'M', value: 1e18, scientific: true},\n      'G': {name: 'G', value: 1e27, scientific: true},\n      'T': {name: 'T', value: 1e36, scientific: true},\n      'P': {name: 'P', value: 1e45, scientific: true},\n      'E': {name: 'E', value: 1e54, scientific: true},\n      'Z': {name: 'Z', value: 1e63, scientific: true},\n      'Y': {name: 'Y', value: 1e72, scientific: true},\n\n      'd': {name: 'd', value: 1e-3, scientific: false},\n      'c': {name: 'c', value: 1e-6, scientific: false},\n      'm': {name: 'm', value: 1e-9, scientific: true},\n      'u': {name: 'u', value: 1e-18, scientific: true},\n      'n': {name: 'n', value: 1e-27, scientific: true},\n      'p': {name: 'p', value: 1e-36, scientific: true},\n      'f': {name: 'f', value: 1e-45, scientific: true},\n      'a': {name: 'a', value: 1e-54, scientific: true},\n      'z': {name: 'z', value: 1e-63, scientific: true},\n      'y': {name: 'y', value: 1e-72, scientific: true}\n    },\n    BINARY_SHORT: {\n      '': {name: '', value: 1, scientific: true},\n      'k': {name: 'k', value: 1e3, scientific: true},\n      'M': {name: 'M', value: 1e6, scientific: true},\n      'G': {name: 'G', value: 1e9, scientific: true},\n      'T': {name: 'T', value: 1e12, scientific: true},\n      'P': {name: 'P', value: 1e15, scientific: true},\n      'E': {name: 'E', value: 1e18, scientific: true},\n      'Z': {name: 'Z', value: 1e21, scientific: true},\n      'Y': {name: 'Y', value: 1e24, scientific: true},\n\n      'Ki': {name: 'Ki', value: 1024, scientific: true},\n      'Mi': {name: 'Mi', value: Math.pow(1024, 2), scientific: true},\n      'Gi': {name: 'Gi', value: Math.pow(1024, 3), scientific: true},\n      'Ti': {name: 'Ti', value: Math.pow(1024, 4), scientific: true},\n      'Pi': {name: 'Pi', value: Math.pow(1024, 5), scientific: true},\n      'Ei': {name: 'Ei', value: Math.pow(1024, 6), scientific: true},\n      'Zi': {name: 'Zi', value: Math.pow(1024, 7), scientific: true},\n      'Yi': {name: 'Yi', value: Math.pow(1024, 8), scientific: true}\n    },\n    BINARY_LONG: {\n      '': {name: '', value: 1, scientific: true},\n      'kilo': {name: 'kilo', value: 1e3, scientific: true},\n      'mega': {name: 'mega', value: 1e6, scientific: true},\n      'giga': {name: 'giga', value: 1e9, scientific: true},\n      'tera': {name: 'tera', value: 1e12, scientific: true},\n      'peta': {name: 'peta', value: 1e15, scientific: true},\n      'exa': {name: 'exa', value: 1e18, scientific: true},\n      'zetta': {name: 'zetta', value: 1e21, scientific: true},\n      'yotta': {name: 'yotta', value: 1e24, scientific: true},\n\n      'kibi': {name: 'kibi', value: 1024, scientific: true},\n      'mebi': {name: 'mebi', value: Math.pow(1024, 2), scientific: true},\n      'gibi': {name: 'gibi', value: Math.pow(1024, 3), scientific: true},\n      'tebi': {name: 'tebi', value: Math.pow(1024, 4), scientific: true},\n      'pebi': {name: 'pebi', value: Math.pow(1024, 5), scientific: true},\n      'exi': {name: 'exi', value: Math.pow(1024, 6), scientific: true},\n      'zebi': {name: 'zebi', value: Math.pow(1024, 7), scientific: true},\n      'yobi': {name: 'yobi', value: Math.pow(1024, 8), scientific: true}\n    },\n    BTU: {\n      '':   {name: '',   value: 1,   scientific: true},\n      'MM': {name: 'MM', value: 1e6, scientific: true}\n    }\n  };\n\n  // Add a prefix list for both short and long prefixes (for ohm in particular, since Mohm and megaohm are both acceptable):\n  PREFIXES.SHORTLONG = {};\n  for (var key in PREFIXES.SHORT) {\n    if(PREFIXES.SHORT.hasOwnProperty(key)) {\n      PREFIXES.SHORTLONG[key] = PREFIXES.SHORT[key];\n    }\n  }\n  for (var key in PREFIXES.LONG) {\n    if(PREFIXES.LONG.hasOwnProperty(key)) {\n      PREFIXES.SHORTLONG[key] = PREFIXES.LONG[key];\n    }\n  }\n\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = [\"MASS\", \"LENGTH\", \"TIME\", \"CURRENT\", \"TEMPERATURE\", \"LUMINOUS_INTENSITY\", \"AMOUNT_OF_SUBSTANCE\", \"ANGLE\", \"BIT\"];\n\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n\n  for(var key in BASE_UNITS) {\n    BASE_UNITS[key].key = key;\n  }\n\n  var BASE_UNIT_NONE = {};\n\n  var UNIT_NONE = {name: '', base: BASE_UNIT_NONE, value: 1, offset: 0, dimensions: [0,0,0,0,0,0,0,0,0]};\n\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    'in': {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    }, // 1/1000 inch\n\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    }, // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    }, // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    }, // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    }, // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    }, // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    }, // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    }, // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    }, // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    }, // 10000 m2\n\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    }, // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    }, // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    }, // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    }, // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    }, // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    }, // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    }, // 15 mL\n    //{name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },  // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },  // 0.05 mL = 5e-8 m3\n\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    }, // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },  // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    }, // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    }, // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    }, // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    }, // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    }, // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    }, // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    }, // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    }, // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    }, // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    }, // 238.4810 L\n\n    //{name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },  // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    }, // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    }, // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    }, // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    }, // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    }, // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    }, // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    }, // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    }, // 158.9873 L\n    //{name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7*86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800, //1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600, //Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000, //Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000, //Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000, //Julian millennium\n      offset: 0\n    },\n\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null, // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null, // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null, // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null, // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null, // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    \n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) / 1.8\n    // K(R) = °R / 1.8\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    //{name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    //{name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n\t\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.NONE,\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n\n\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    \n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,    // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  };\n\n  // aliases (formerly plurals)\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n\t\n    kips: 'kip',\n\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n\n    hertz: 'hertz',\n\n    radians: 'rad',\n    degree: 'deg',\n    degrees: 'deg',\n    gradian: 'grad',\n    gradians: 'grad',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n\n    amperes: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole'\n\n  };\n\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n  function calculateAngleValues (config) {\n    if (config.number === 'BigNumber') {\n      var pi = constants.pi(type.BigNumber);\n      UNITS.rad.value = new type.BigNumber(1);\n      UNITS.deg.value = pi.div(180);        // 2 * pi / 360;\n      UNITS.grad.value = pi.div(200);       // 2 * pi / 400;\n      UNITS.cycle.value = pi.times(2);      // 2 * pi\n      UNITS.arcsec.value = pi.div(648000);  // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = pi.div(10800);   // 2 * pi / 360 / 60\n    }\n    else { // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180;        // 2 * pi / 360;\n      UNITS.grad.value = Math.PI / 200;       // 2 * pi / 400;\n      UNITS.cycle.value = Math.PI * 2;        // 2 * pi\n      UNITS.arcsec.value = Math.PI / 648000;  // 2 * pi / 360 / 3600;\n      UNITS.arcmin.value = Math.PI / 10800;   // 2 * pi / 360 / 60;\n    }\n  }\n\n  // apply the angle values now\n  calculateAngleValues(config);\n\n  // recalculate the values on change of configuration\n  math.on('config', function (curr, prev) {\n    if (curr.number !== prev.number) {\n      calculateAngleValues(curr);\n    }\n  });\n\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE:                  {unit: UNIT_NONE, prefix: PREFIXES.NONE['']},\n      LENGTH:                {unit: UNITS.m,   prefix: PREFIXES.SHORT['']},\n      MASS:                  {unit: UNITS.g,   prefix: PREFIXES.SHORT['k']}, \n      TIME:                  {unit: UNITS.s,   prefix: PREFIXES.SHORT['']}, \n      CURRENT:               {unit: UNITS.A,   prefix: PREFIXES.SHORT['']}, \n      TEMPERATURE:           {unit: UNITS.K,   prefix: PREFIXES.SHORT['']}, \n      LUMINOUS_INTENSITY:    {unit: UNITS.cd,  prefix: PREFIXES.SHORT['']}, \n      AMOUNT_OF_SUBSTANCE:   {unit: UNITS.mol, prefix: PREFIXES.SHORT['']}, \n      ANGLE:                 {unit: UNITS.rad, prefix: PREFIXES.SHORT['']}, \n      BIT:                   {unit: UNITS.bit, prefix: PREFIXES.SHORT['']}, \n\n      // Derived units\n      FORCE:                 {unit: UNITS.N,   prefix: PREFIXES.SHORT['']}, \n      ENERGY:                {unit: UNITS.J,   prefix: PREFIXES.SHORT['']},\n      POWER:                 {unit: UNITS.W,   prefix: PREFIXES.SHORT['']},\n      PRESSURE:              {unit: UNITS.Pa,  prefix: PREFIXES.SHORT['']},\n      ELECTRIC_CHARGE:       {unit: UNITS.C,   prefix: PREFIXES.SHORT['']},\n      ELECTRIC_CAPACITANCE:  {unit: UNITS.F,   prefix: PREFIXES.SHORT['']},\n      ELECTRIC_POTENTIAL:    {unit: UNITS.V,   prefix: PREFIXES.SHORT['']},\n      ELECTRIC_RESISTANCE:   {unit: UNITS.ohm, prefix: PREFIXES.SHORT['']},\n      ELECTRIC_INDUCTANCE:   {unit: UNITS.H,   prefix: PREFIXES.SHORT['']},\n      ELECTRIC_CONDUCTANCE:  {unit: UNITS.S,   prefix: PREFIXES.SHORT['']},\n      MAGNETIC_FLUX:         {unit: UNITS.Wb,  prefix: PREFIXES.SHORT['']},\n      MAGNETIC_FLUX_DENSITY: {unit: UNITS.T,   prefix: PREFIXES.SHORT['']},\n      FREQUENCY:             {unit: UNITS.Hz,  prefix: PREFIXES.SHORT['']}\n    }\n  };\n\n  // Clone to create the other unit systems\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {unit: UNITS.m,   prefix: PREFIXES.SHORT['c']};\n  UNIT_SYSTEMS.cgs.MASS =   {unit: UNITS.g,   prefix: PREFIXES.SHORT['']};\n  UNIT_SYSTEMS.cgs.FORCE =  {unit: UNITS.dyn, prefix: PREFIXES.SHORT['']};\n  UNIT_SYSTEMS.cgs.ENERGY = {unit: UNITS.erg, prefix: PREFIXES.NONE['']};\n  // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n  \n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH =      {unit: UNITS.ft,   prefix: PREFIXES.NONE['']};\n  UNIT_SYSTEMS.us.MASS =        {unit: UNITS.lbm,  prefix: PREFIXES.NONE['']};\n  UNIT_SYSTEMS.us.TEMPERATURE = {unit: UNITS.degF, prefix: PREFIXES.NONE['']};\n  UNIT_SYSTEMS.us.FORCE =       {unit: UNITS.lbf,  prefix: PREFIXES.NONE['']};\n  UNIT_SYSTEMS.us.ENERGY =      {unit: UNITS.BTU,  prefix: PREFIXES.BTU['']};\n  UNIT_SYSTEMS.us.POWER =       {unit: UNITS.hp,   prefix: PREFIXES.NONE['']};\n  UNIT_SYSTEMS.us.PRESSURE =    {unit: UNITS.psi,  prefix: PREFIXES.NONE['']};\n\n  // Add additional unit systems here.\n\n\n\n  // Choose a unit system to seed the auto unit system.\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n\n  // Set the current unit system\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n  Unit.setUnitSystem = function(name) {\n    if(UNIT_SYSTEMS.hasOwnProperty(name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    }\n    else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n  Unit.getUnitSystem = function() {\n    for(var key in UNIT_SYSTEMS) {\n      if(UNIT_SYSTEMS[key] === currentUnitSystem) {\n        return key;\n      }\n    }\n  };\n\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n  Unit.typeConverters = {\n    BigNumber: function (x) {\n      return new type.BigNumber(x + ''); // stringify to prevent constructor error\n    },\n\n    Fraction: function (x) {\n      return new type.Fraction(x);\n    },\n\n    Complex: function (x) {\n      return x;\n    },\n\n    number: function (x) {\n      return x;\n    }\n  };\n\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n\n    return Unit.typeConverters[type];\n  };\n\n  // Add dimensions to each built-in unit\n  for (var key in UNITS) {\n    var unit = UNITS[key];\n    unit.dimensions = unit.base.dimensions;\n  }    \n\n  // Create aliases\n  for (var name in ALIASES) {\n    if(ALIASES.hasOwnProperty(name)) {\n      var unit = UNITS[ALIASES[name]];\n      var alias = {};\n      for(var key in unit) {\n        if(unit.hasOwnProperty(key)) {\n          alias[key] = unit[key];\n        }\n      }\n      alias.name = name;\n      UNITS[name] = alias;\n    }\n  }\n\n  function assertUnitNameIsValid(name) {\n    for(var i=0; i<name.length; i++) {\n      var c = name.charAt(i);\n       \n      var isValidAlpha = function (p) {\n        return /^[a-zA-Z]$/.test(p);\n      };\n\n      var isDigit = function (c) {\n        return (c >= '0' && c <= '9');\n      }\n\n      if(i === 0 && !isValidAlpha(c))\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n\n      if(i > 0 && !( isValidAlpha(c)\n                  || isDigit(c)))\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n\n    }\n  }\n\n  /**\n   * Wrapper around createUnitSingle.\n   * Example: \n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  }, \n   *  {\n   *    override: true;\n   *  });\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n  Unit.createUnit = function(obj, options) {\n    \n    if(typeof(obj) !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    }\n\n    // Remove all units and aliases we are overriding\n    if(options && options.override) {\n      for(var key in obj) {\n        if(obj.hasOwnProperty(key)) {\n          Unit.deleteUnit(key);\n        }\n        if(obj[key].aliases) {\n          for(var i=0; i<obj[key].aliases.length; i++) {\n            Unit.deleteUnit(obj[key].aliases[i]);\n          }\n        }\n      }\n    }\n\n    // TODO: traverse multiple times until all units have been added\n    var lastUnit;\n    for(var key in obj) {\n      if(obj.hasOwnProperty(key)) {\n        lastUnit = Unit.createUnitSingle(key, obj[key]);\n      }\n    }\n    return lastUnit;\n  };\n\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example: \n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\n   * @param {Object} options   (optional) An object containing any of the following properties:\n   *     prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15 and the offset for farhenheit is 459.67. Default is 0.\n   *\n   * @return {Unit} \n   */\n  Unit.createUnitSingle = function(name, obj, options) {\n\n    if(typeof(obj) === 'undefined' || obj === null) {\n      obj = {};\n    }\n    \n    if(typeof(name) !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    }\n   \n    // Check collisions with existing units\n    if(UNITS.hasOwnProperty(name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    }\n\n    // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n    assertUnitNameIsValid(name);\n\n    var defUnit = null;   // The Unit from which the new unit will be created.\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    if(obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    }\n    else if(typeof(obj) === 'string') {\n      if(obj !== '') {\n        definition = obj;\n      }\n    }\n    else if(typeof(obj) === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes; \n      offset = obj.offset;\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    }\n    else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n\n    if(aliases) {\n      for (var i=0; i<aliases.length; i++) {\n        if(UNITS.hasOwnProperty(aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n\n    if(definition && typeof(definition) === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {allowNoUnits: true});\n      }\n      catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw(ex);\n      }\n    }\n    else if(definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n\n    aliases = aliases || [];\n    offset = offset || 0;\n    if(prefixes && prefixes.toUpperCase) \n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    else\n      prefixes = PREFIXES.NONE;\n\n\n    // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n    var newUnit = {};\n    if(!defUnit) {\n      // Add a new base dimension\n      var baseName = name + \"_STUFF\";   // foo --> foo_STUFF, or the essence of foo\n      if(BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n      BASE_DIMENSIONS.push(baseName);\n\n      // Push 0 onto existing base units\n      for(var b in BASE_UNITS) {\n        if(BASE_UNITS.hasOwnProperty(b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length-1] = 0;\n        }\n      }\n\n      // Add the new base unit\n      var newBaseUnit = { dimensions: [] };\n      for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n        newBaseUnit.dimensions[i] = 0;\n      }\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length-1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n       \n      newUnit = {\n        name: name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset,\n        base: baseName\n      };\n\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n\n    }\n    else {\n\n      newUnit = {\n        name: name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset,\n      };\n      \n      // Create a new base if no matching base exists\n      var anyMatch = false;\n      for(var i in BASE_UNITS) {\n        if(BASE_UNITS.hasOwnProperty(i)) {\n          var match = true;\n          for(var j=0; j<BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[i].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n          if(match) {\n            anyMatch = true;\n            break;\n          }\n        }\n      }\n      if(!anyMatch) {\n        var baseName = name + \"_STUFF\";   // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n        var newBaseUnit = { dimensions: defUnit.dimensions.slice(0) };\n        newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = newBaseUnit;\n\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n\n        newUnit.base = baseName;\n      }\n    }\n\n    Unit.UNITS[name] = newUnit;\n\n    for (var i=0; i<aliases.length; i++) {\n      var aliasName = aliases[i];\n      var alias = {};\n      for(var key in newUnit) {\n        if(newUnit.hasOwnProperty(key)) {\n          alias[key] = newUnit[key];\n        }\n      }\n      alias.name = aliasName;\n      Unit.UNITS[aliasName] = alias;\n    }\n\n    return new Unit(null, name);\n  };\n\n  Unit.deleteUnit = function(name) {\n    delete Unit.UNITS[name];\n  };\n\n  // expose arrays with prefixes, dimensions, units, systems\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n\n  return Unit;\n}\n\nexports.name = 'Unit';\nexports.path = 'type';\nexports.factory = factory;\nexports.math = true; // request access to the math namespace\n\n},{\"../../function/arithmetic/abs\":282,\"../../function/arithmetic/addScalar\":284,\"../../function/arithmetic/divideScalar\":289,\"../../function/arithmetic/fix\":294,\"../../function/arithmetic/multiplyScalar\":304,\"../../function/arithmetic/pow\":307,\"../../function/arithmetic/round\":308,\"../../function/arithmetic/subtract\":312,\"../../function/relational/equal\":383,\"../../function/string/format\":416,\"../../function/utils/isNumeric\":452,\"../../function/utils/typeof\":456,\"../../type/complex/Complex\":466,\"../../type/number\":499,\"../../utils/bignumber/constants\":515,\"../../utils/object\":533,\"../../utils/string\":534}],504:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   *\n   * Syntax:\n   *\n   *     math.createUnit({\n   *       baseUnit1: {\n   *         aliases: [string, ...]\n   *         prefixes: object\n   *       },\n   *       unit2: {\n   *         definition: string,\n   *         aliases: [string, ...]\n   *         prefixes: object,\n   *         offset: number\n   *       },\n   *       unit3: string    // Shortcut\n   *     })\n   *\n   *     // Another shortcut:\n   *     math.createUnit(string, unit : string, [object])\n   *\n   * Examples: \n   *\n   *     math.createUnit('foo');\n   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']});\n   *     math.createUnit('mph', '1 mile/hour');\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\n   * @param {Object} options   (optional) An object containing any of the following properties:\n   *     prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @return {Unit} The new unit\n   */\n  var createUnit = typed('createUnit', {\n\n    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.\n    'Object, Object': function(obj, options) {\n      return type.Unit.createUnit(obj, options);\n    },\n\n    // Same as above but without the options.\n    'Object': function(obj) {\n      return type.Unit.createUnit(obj, {});\n    },\n\n    // Shortcut method for creating one unit.\n    'string, Unit | string | Object, Object': function (name, def, options) {\n      var obj = {};\n      obj[name] = def;\n      return type.Unit.createUnit(obj, options);\n    },\n\n    // Same as above but without the options.\n    'string, Unit | string | Object': function (name, def) {\n      var obj = {};\n      obj[name] = def;\n      return type.Unit.createUnit(obj, {});\n    },\n\n    // Without a definition, creates a base unit.\n    'string': function (name) {\n      var obj = {};\n      obj[name] = {};\n      return type.Unit.createUnit(obj, {});\n    },\n  });\n\n  return createUnit;\n}\n\nexports.name = 'createUnit';\nexports.factory = factory;\n\n},{\"../../../utils/collection/deepMap\":523}],505:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Split a unit in an array of units whose sum is equal to the original unit.\n   *\n   * Syntax:\n   *\n   *     splitUnit(unit: Unit, parts: Array.<Unit>)\n   *\n   * Example:\n   *\n   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch']);\n   *     // [ 3 feet, 3.3700787401575 inch ]\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @param {Array} [parts] An array of strings or valueless units.\n   * @return {Array} An array of units.\n   */\n  var splitUnit = typed('splitUnit', {\n    'Unit, Array': function(unit, parts) {\n      return unit.splitUnit(parts);\n    }\n  });\n\n  return splitUnit;\n\n}\n\nexports.name = 'splitUnit';\nexports.factory = factory;\n\n},{\"../../../utils/collection/deepMap\":523}],506:[function(require,module,exports){\n'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a unit. Depending on the passed arguments, the function\n   * will create and return a new math.type.Unit object.\n   * When a matrix is provided, all elements will be converted to units.\n   *\n   * Syntax:\n   *\n   *     math.unit(unit : string)\n   *     math.unit(value : number, unit : string)\n   *\n   * Examples:\n   *\n   *    var a = math.unit(5, 'cm');    // returns Unit 50 mm\n   *    var b = math.unit('23 kg');    // returns Unit 23 kg\n   *    a.to('m');                     // returns Unit 0.05 m\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n   *\n   * @param {* | Array | Matrix} args   A number and unit.\n   * @return {Unit | Array | Matrix}    The created unit\n   */\n\n  var unit = typed('unit', {\n    'Unit': function (x) {\n      return x.clone();\n    },\n\n    'string': function (x) {\n      if (type.Unit.isValuelessUnit(x)) {\n        return new type.Unit(null, x); // a pure unit\n      }\n\n      return type.Unit.parse(x); // a unit with value, like '5cm'\n    },\n\n    'number | BigNumber | Fraction | Complex, string': function (value, unit) {\n      return new type.Unit(value, unit);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, unit);\n    }\n  });\n\n  unit.toTex = {\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)'\n  };\n\n  return unit;\n}\n\nexports.name = 'unit';\nexports.factory = factory;\n\n},{\"../../../utils/collection/deepMap\":523}],507:[function(require,module,exports){\nmodule.exports = [\n  // type\n  require('./Unit'),\n\n  // construction function\n  require('./function/unit'),\n\n  // create new units\n  require('./function/createUnit'),\n\n  // split units\n  require('./function/splitUnit'),\n\n  // physical constants\n  require('./physicalConstants')\n];\n\n},{\"./Unit\":503,\"./function/createUnit\":504,\"./function/splitUnit\":505,\"./function/unit\":506,\"./physicalConstants\":508}],508:[function(require,module,exports){\nvar lazy = require('../../utils/object').lazy;\n\n\nfunction factory (type, config, load, typed, math) {\n\n  // helper function to create a unit with a fixed prefix\n  function fixedUnit(str) {\n    var unit = type.Unit.parse(str);\n    unit.fixPrefix = true;\n    return unit;\n  }\n\n  // Source: http://www.wikiwand.com/en/Physical_constant\n\n  // Universal constants\n  setLazyConstant(math, 'speedOfLight',         function () {return fixedUnit('299792458 m s^-1')});\n  setLazyConstant(math, 'gravitationConstant',  function () {return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2')});\n  setLazyConstant(math, 'planckConstant',       function () {return fixedUnit('6.626069311e-34 J s')});\n  setLazyConstant(math, 'reducedPlanckConstant',function () {return fixedUnit('1.05457172647e-34 J s')});\n\n  // Electromagnetic constants\n  setLazyConstant(math, 'magneticConstant',          function () {return fixedUnit('1.2566370614e-6 N A^-2')});\n  setLazyConstant(math, 'electricConstant',          function () {return fixedUnit('8.854187817e-12 F m^-1')});\n  setLazyConstant(math, 'vacuumImpedance',           function () {return fixedUnit('376.730313461 ohm')});\n  setLazyConstant(math, 'coulomb',                   function () {return fixedUnit('8.9875517873681764e9 N m^2 C^-2')});\n  setLazyConstant(math, 'elementaryCharge',          function () {return fixedUnit('1.60217656535e-19 C')});\n  setLazyConstant(math, 'bohrMagneton',              function () {return fixedUnit('9.2740096820e-24 J T^-1')});\n  setLazyConstant(math, 'conductanceQuantum',        function () {return fixedUnit('7.748091734625e-5 S')});\n  setLazyConstant(math, 'inverseConductanceQuantum', function () {return fixedUnit('12906.403721742 ohm')});\n  setLazyConstant(math, 'magneticFluxQuantum',       function () {return fixedUnit('2.06783375846e-15 Wb')});\n  setLazyConstant(math, 'nuclearMagneton',           function () {return fixedUnit('5.0507835311e-27 J T^-1')});\n  setLazyConstant(math, 'klitzing',                  function () {return fixedUnit('25812.807443484 ohm')});\n  //setLazyConstant(math, 'josephson',                 function () {return fixedUnit('4.8359787011e-14 Hz V^-1')});  // TODO: support for Hz needed\n\n  // Atomic and nuclear constants\n  setLazyConstant(math, 'bohrRadius',              function () {return fixedUnit('5.291772109217e-11 m')});\n  setLazyConstant(math, 'classicalElectronRadius', function () {return fixedUnit('2.817940326727e-15 m')});\n  setLazyConstant(math, 'electronMass',            function () {return fixedUnit('9.1093829140e-31 kg')});\n  setLazyConstant(math, 'fermiCoupling',           function () {return fixedUnit('1.1663645e-5 GeV^-2')});\n  setLazyConstant(math, 'fineStructure',           function () {return 7.297352569824e-3});\n  setLazyConstant(math, 'hartreeEnergy',           function () {return fixedUnit('4.3597443419e-18 J')});\n  setLazyConstant(math, 'protonMass',              function () {return fixedUnit('1.67262177774e-27 kg')});\n  setLazyConstant(math, 'deuteronMass',            function () {return fixedUnit('3.3435830926e-27 kg')});\n  setLazyConstant(math, 'neutronMass',             function () {return fixedUnit('1.6749271613e-27 kg')});\n  setLazyConstant(math, 'quantumOfCirculation',    function () {return fixedUnit('3.636947552024e-4 m^2 s^-1')});\n  setLazyConstant(math, 'rydberg',                 function () {return fixedUnit('10973731.56853955 m^-1')});\n  setLazyConstant(math, 'thomsonCrossSection',     function () {return fixedUnit('6.65245873413e-29 m^2')});\n  setLazyConstant(math, 'weakMixingAngle',         function () {return 0.222321});\n  setLazyConstant(math, 'efimovFactor',            function () {return 22.7});\n\n  // Physico-chemical constants\n  setLazyConstant(math, 'atomicMass',          function () {return fixedUnit('1.66053892173e-27 kg')});\n  setLazyConstant(math, 'avogadro',            function () {return fixedUnit('6.0221412927e23 mol^-1')});\n  setLazyConstant(math, 'boltzmann',           function () {return fixedUnit('1.380648813e-23 J K^-1')});\n  setLazyConstant(math, 'faraday',             function () {return fixedUnit('96485.336521 C mol^-1')});\n  setLazyConstant(math, 'firstRadiation',      function () {return fixedUnit('3.7417715317e-16 W m^2')});\n  // setLazyConstant(math, 'spectralRadiance',   function () {return fixedUnit('1.19104286953e-16 W m^2 sr^-1')}); // TODO spectralRadiance\n  setLazyConstant(math, 'loschmidt',           function () {return fixedUnit('2.686780524e25 m^-3')});\n  setLazyConstant(math, 'gasConstant',         function () {return fixedUnit('8.314462175 J K^-1 mol^-1')});\n  setLazyConstant(math, 'molarPlanckConstant', function () {return fixedUnit('3.990312717628e-10 J s mol^-1')});\n  setLazyConstant(math, 'molarVolume',         function () {return fixedUnit('2.241396820e-10 m^3 mol^-1')});\n  setLazyConstant(math, 'sackurTetrode',       function () {return -1.164870823});\n  setLazyConstant(math, 'secondRadiation',     function () {return fixedUnit('1.438777013e-2 m K')});\n  setLazyConstant(math, 'stefanBoltzmann',     function () {return fixedUnit('5.67037321e-8 W m^-2 K^-4')});\n  setLazyConstant(math, 'wienDisplacement',    function () {return fixedUnit('2.897772126e-3 m K')});\n\n  // Adopted values\n  setLazyConstant(math, 'molarMass',         function () {return fixedUnit('1e-3 kg mol^-1')});\n  setLazyConstant(math, 'molarMassC12',      function () {return fixedUnit('1.2e-2 kg mol^-1')});\n  setLazyConstant(math, 'gravity',           function () {return fixedUnit('9.80665 m s^-2')});\n  // atm is defined in Unit.js\n\n  // Natural units\n  setLazyConstant(math, 'planckLength',      function () {return fixedUnit('1.61619997e-35 m')});\n  setLazyConstant(math, 'planckMass',        function () {return fixedUnit('2.1765113e-8 kg')});\n  setLazyConstant(math, 'planckTime',        function () {return fixedUnit('5.3910632e-44 s')});\n  setLazyConstant(math, 'planckCharge',      function () {return fixedUnit('1.87554595641e-18 C')});\n  setLazyConstant(math, 'planckTemperature', function () {return fixedUnit('1.41683385e+32 K')});\n\n}\n\n// create a lazy constant in both math and mathWithTransform\nfunction setLazyConstant (math, name, resolver) {\n  lazy(math, name,  resolver);\n  lazy(math.expression.mathWithTransform, name,  resolver);\n}\n\nexports.factory = factory;\nexports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed\nexports.math = true;   // request access to the math namespace\n\n},{\"../../utils/object\":533}],509:[function(require,module,exports){\n'use strict';\n\nvar number = require('./number');\nvar string = require('./string');\nvar object = require('./object');\nvar types = require('./types');\n\nvar DimensionError = require('../error/DimensionError');\nvar IndexError = require('../error/IndexError');\n\n/**\n * Calculate the size of a multi dimensional array.\n * This function checks the size of the first entry, it does not validate\n * whether all dimensions match. (use function `validate` for that)\n * @param {Array} x\n * @Return {Number[]} size\n */\nexports.size = function (x) {\n  var s = [];\n\n  while (Array.isArray(x)) {\n    s.push(x.length);\n    x = x[0];\n  }\n\n  return s;\n};\n\n/**\n * Recursively validate whether each element in a multi dimensional array\n * has a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @param {number} dim   Current dimension\n * @throws DimensionError\n * @private\n */\nfunction _validate(array, size, dim) {\n  var i;\n  var len = array.length;\n\n  if (len != size[dim]) {\n    throw new DimensionError(len, size[dim]);\n  }\n\n  if (dim < size.length - 1) {\n    // recursively validate each child array\n    var dimNext = dim + 1;\n    for (i = 0; i < len; i++) {\n      var child = array[i];\n      if (!Array.isArray(child)) {\n        throw new DimensionError(size.length - 1, size.length, '<');\n      }\n      _validate(array[i], size, dimNext);\n    }\n  }\n  else {\n    // last dimension. none of the childs may be an array\n    for (i = 0; i < len; i++) {\n      if (Array.isArray(array[i])) {\n        throw new DimensionError(size.length + 1, size.length, '>');\n      }\n    }\n  }\n}\n\n/**\n * Validate whether each element in a multi dimensional array has\n * a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @throws DimensionError\n */\nexports.validate = function(array, size) {\n  var isScalar = (size.length == 0);\n  if (isScalar) {\n    // scalar\n    if (Array.isArray(array)) {\n      throw new DimensionError(array.length, 0);\n    }\n  }\n  else {\n    // array\n    _validate(array, size, 0);\n  }\n};\n\n/**\n * Test whether index is an integer number with index >= 0 and index < length\n * when length is provided\n * @param {number} index    Zero-based index\n * @param {number} [length] Length of the array\n */\nexports.validateIndex = function(index, length) {\n  if (!number.isNumber(index) || !number.isInteger(index)) {\n    throw new TypeError('Index must be an integer (value: ' + index + ')');\n  }\n  if (index < 0 || (typeof length === 'number' && index >= length)) {\n    throw new IndexError(index, length);\n  }\n};\n\n// a constant used to specify an undefined defaultValue\nexports.UNINITIALIZED = {};\n\n/**\n * Resize a multi dimensional array. The resized array is returned.\n * @param {Array} array         Array to be resized\n * @param {Array.<number>} size Array with the size of each dimension\n * @param {*} [defaultValue=0]  Value to be filled in in new entries,\n *                              zero by default. To leave new entries undefined,\n *                              specify array.UNINITIALIZED as defaultValue\n * @return {Array} array         The resized array\n */\nexports.resize = function(array, size, defaultValue) {\n  // TODO: add support for scalars, having size=[] ?\n\n  // check the type of the arguments\n  if (!Array.isArray(array) || !Array.isArray(size)) {\n    throw new TypeError('Array expected');\n  }\n  if (size.length === 0) {\n    throw new Error('Resizing to scalar is not supported');\n  }\n\n  // check whether size contains positive integers\n  size.forEach(function (value) {\n    if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {\n      throw new TypeError('Invalid size, must contain positive integers ' +\n          '(size: ' + string.format(size) + ')');\n    }\n  });\n\n  // recursively resize the array\n  var _defaultValue = (defaultValue !== undefined) ? defaultValue : 0;\n  _resize(array, size, 0, _defaultValue);\n\n  return array;\n};\n\n/**\n * Recursively resize a multi dimensional array\n * @param {Array} array         Array to be resized\n * @param {number[]} size       Array with the size of each dimension\n * @param {number} dim          Current dimension\n * @param {*} [defaultValue]    Value to be filled in in new entries,\n *                              undefined by default.\n * @private\n */\nfunction _resize (array, size, dim, defaultValue) {\n  var i;\n  var elem;\n  var oldLen = array.length;\n  var newLen = size[dim];\n  var minLen = Math.min(oldLen, newLen);\n\n  // apply new length\n  array.length = newLen;\n\n  if (dim < size.length - 1) {\n    // non-last dimension\n    var dimNext = dim + 1;\n\n    // resize existing child arrays\n    for (i = 0; i < minLen; i++) {\n      // resize child array\n      elem = array[i];\n      if (!Array.isArray(elem)) {\n        elem = [elem]; // add a dimension\n        array[i] = elem;\n      }\n      _resize(elem, size, dimNext, defaultValue);\n    }\n\n    // create new child arrays\n    for (i = minLen; i < newLen; i++) {\n      // get child array\n      elem = [];\n      array[i] = elem;\n\n      // resize new child array\n      _resize(elem, size, dimNext, defaultValue);\n    }\n  }\n  else {\n    // last dimension\n\n    // remove dimensions of existing values\n    for (i = 0; i < minLen; i++) {\n      while (Array.isArray(array[i])) {\n        array[i] = array[i][0];\n      }\n    }\n\n    if(defaultValue !== exports.UNINITIALIZED) {\n      // fill new elements with the default value\n      for (i = minLen; i < newLen; i++) {\n        array[i] = defaultValue;\n      }\n    }\n  }\n}\n\n/**\n * Re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n *\n * @throws {DimensionError}       If the product of the new dimension sizes does\n *                                not equal that of the old ones\n */\nexports.reshape = function(array, sizes) {\n  var flatArray = exports.flatten(array);\n  var newArray;\n\n  var product = function (arr) {\n    return arr.reduce(function (prev, curr) {\n      return prev * curr;\n    });\n  };\n\n  if (!Array.isArray(array) || !Array.isArray(sizes)) {\n    throw new TypeError('Array expected');\n  }\n\n  if (sizes.length === 0) {\n    throw new DimensionError(0, product(exports.size(array)), '!=');\n  }\n\n  try {\n    newArray  = _reshape(flatArray, sizes);\n  } catch (e) {\n    if (e instanceof DimensionError) {\n      throw new DimensionError(\n        product(sizes),\n        product(exports.size(array)),\n        '!='\n      );\n    }\n    throw e;\n  }\n\n  if (flatArray.length > 0) {\n    throw new DimensionError(\n      product(sizes),\n      product(exports.size(array)),\n      '!='\n    );\n  }\n\n  return newArray;\n};\n\n/**\n * Recursively re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n *\n * @throws {DimensionError}       If the product of the new dimension sizes does\n *                                not equal that of the old ones\n */\nfunction _reshape(array, sizes) {\n  var accumulator = [];\n  var i;\n\n  if (sizes.length === 0) {\n    if (array.length === 0) {\n      throw new DimensionError(null, null, '!=');\n    }\n    return array.shift();\n  }\n  for (i = 0; i < sizes[0]; i += 1) {\n    accumulator.push(_reshape(array, sizes.slice(1)));\n  }\n  return accumulator;\n}\n\n\n/**\n * Squeeze a multi dimensional array\n * @param {Array} array\n * @param {Array} [size]\n * @returns {Array} returns the array itself\n */\nexports.squeeze = function(array, size) {\n  var s = size || exports.size(array);\n\n  // squeeze outer dimensions\n  while (Array.isArray(array) && array.length === 1) {\n    array = array[0];\n    s.shift();\n  }\n\n  // find the first dimension to be squeezed\n  var dims = s.length;\n  while (s[dims - 1] === 1) {\n    dims--;\n  }\n\n  // squeeze inner dimensions\n  if (dims < s.length) {\n    array = _squeeze(array, dims, 0);\n    s.length = dims;\n  }\n\n  return array;\n};\n\n/**\n * Recursively squeeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\nfunction _squeeze (array, dims, dim) {\n  var i, ii;\n\n  if (dim < dims) {\n    var next = dim + 1;\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _squeeze(array[i], dims, next);\n    }\n  }\n  else {\n    while (Array.isArray(array)) {\n      array = array[0];\n    }\n  }\n\n  return array;\n}\n\n/**\n * Unsqueeze a multi dimensional array: add dimensions when missing\n * \n * Paramter `size` will be mutated to match the new, unqueezed matrix size.\n * \n * @param {Array} array\n * @param {number} dims     Desired number of dimensions of the array\n * @param {number} [outer]  Number of outer dimensions to be added\n * @param {Array} [size]    Current size of array.\n * @returns {Array} returns the array itself\n * @private\n */\nexports.unsqueeze = function(array, dims, outer, size) {\n  var s = size || exports.size(array);\n\n  // unsqueeze outer dimensions\n  if (outer) {\n    for (var i = 0; i < outer; i++) {\n      array = [array];\n      s.unshift(1);\n    }\n  }\n\n  // unsqueeze inner dimensions\n  array = _unsqueeze(array, dims, 0);\n  while (s.length < dims) {\n    s.push(1);\n  }\n\n  return array;\n};\n\n/**\n * Recursively unsqueeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\nfunction _unsqueeze (array, dims, dim) {\n  var i, ii;\n\n  if (Array.isArray(array)) {\n    var next = dim + 1;\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _unsqueeze(array[i], dims, next);\n    }\n  }\n  else {\n    for (var d = dim; d < dims; d++) {\n      array = [array];\n    }\n  }\n\n  return array;\n}\n/**\n * Flatten a multi dimensional array, put all elements in a one dimensional\n * array\n * @param {Array} array   A multi dimensional array\n * @return {Array}        The flattened array (1 dimensional)\n */\nexports.flatten = function(array) {\n  if (!Array.isArray(array)) {\n    //if not an array, return as is\n    return array;\n  }\n  var flat = [];\n\n  array.forEach(function callback(value) {\n    if (Array.isArray(value)) {\n      value.forEach(callback);  //traverse through sub-arrays recursively\n    }\n    else {\n      flat.push(value);\n    }\n  });\n\n  return flat;\n};\n\n/**\n * A safe map\n * @param {Array} array\n * @param {function} callback\n */\nexports.map = function (array, callback) {\n  return Array.prototype.map.call(array, callback);\n}\n\n/**\n * A safe forEach\n * @param {Array} array\n * @param {function} callback\n */\nexports.forEach = function (array, callback) {\n  Array.prototype.forEach.call(array, callback);\n}\n\n/**\n * A safe join\n * @param {Array} array\n * @param {string} separator\n */\nexports.join = function (array, separator) {\n  return Array.prototype.join.call(array, separator);\n}\n\n/**\n * Assign a numeric identifier to every element of a sorted array\n * @param {Array}\ta  An array\n * @return {Array}\tAn array of objects containing the original value and its identifier\n */\nexports.identify = function(a) {\n  if (!Array.isArray(a)) {\n\tthrow new TypeError('Array input expected');\n  }\n\t\n  if (a.length === 0) {\n\treturn a;\n  }\n\t\n  var b = [];\n  var count = 0;\n  b[0] = {value: a[0], identifier: 0};\n  for (var i=1; i<a.length; i++) {\n    if (a[i] === a[i-1]) {\n  \tcount++;\n    }\n    else {\n      count = 0;\n    }\n    b.push({value: a[i], identifier: count});\n  }\n  return b;\n}\n\n/**\n * Remove the numeric identifier from the elements\n * @param\ta  An array\n * @return\tAn array of values without identifiers\n */\nexports.generalize = function(a) {\n  if (!Array.isArray(a)) {\n\tthrow new TypeError('Array input expected');\n  }\n\t\n  if (a.length === 0) {\n\treturn a;\n  }\n\t\n  var b = [];\n  for (var i=0; i<a.length; i++) {\n    b.push(a[i].value);\n  }\n  return b;\n}\n\n/**\n * Test whether an object is an array\n * @param {*} value\n * @return {boolean} isArray\n */\nexports.isArray = Array.isArray;\n\n},{\"../error/DimensionError\":11,\"../error/IndexError\":12,\"./number\":532,\"./object\":533,\"./string\":534,\"./types\":535}],510:[function(require,module,exports){\nvar bitwise = require('./bitwise');\n\n/**\n * Bitwise and for Bignumbers\n *\n * Special Cases:\n *   N &  n =  N\n *   n &  0 =  0\n *   n & -1 =  n\n *   n &  n =  n\n *   I &  I =  I\n *  -I & -I = -I\n *   I & -I =  0\n *   I &  n =  n\n *   I & -n =  I\n *  -I &  n =  0\n *  -I & -n = -I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` & `y`, is fully precise\n * @private\n */\nmodule.exports = function bitAnd(x, y) {\n  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.eq(-1) || x.eq(y)) {\n    return x;\n  }\n  if (y.isZero() || x.eq(-1)) {\n    return y;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      if (x.isNegative() == y.isNegative()) {\n        return x;\n      }\n      return new BigNumber(0);\n    }\n    if (!x.isFinite()) {\n      if (y.isNegative()) {\n        return x;\n      }\n      if (x.isNegative()) {\n        return new BigNumber(0);\n      }\n      return y;\n    }\n    if (!y.isFinite()) {\n      if (x.isNegative()) {\n        return y;\n      }\n      if (y.isNegative()) {\n        return new BigNumber(0);\n      }\n      return x;\n    }\n  }\n  return bitwise(x, y, function (a, b) { return a & b });\n};\n\n},{\"./bitwise\":514}],511:[function(require,module,exports){\n/**\n * Bitwise not\n * @param {BigNumber} value\n * @return {BigNumber} Result of ~`x`, fully precise\n *\n */\nmodule.exports = function bitNot (x) {\n  if (x.isFinite() && !x.isInteger()) {\n    throw new Error('Integer expected in function bitNot');\n  }\n\n  var BigNumber = x.constructor;\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({precision: 1E9});\n\n  var x = x.plus(new BigNumber(1));\n  x.s = -x.s || null;\n\n  BigNumber.config({precision: prevPrec});\n  return x;\n};\n\n},{}],512:[function(require,module,exports){\nvar bitwise = require('./bitwise');\n\n/**\n * Bitwise OR for BigNumbers\n *\n * Special Cases:\n *   N |  n =  N\n *   n |  0 =  n\n *   n | -1 = -1\n *   n |  n =  n\n *   I |  I =  I\n *  -I | -I = -I\n *   I | -n = -1\n *   I | -I = -1\n *   I |  n =  I\n *  -I |  n = -I\n *  -I | -n = -n\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` | `y`, fully precise\n */\nmodule.exports = function bitOr (x, y) {\n  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {\n    throw new Error('Integers expected in function bitOr');\n  }\n\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  var negOne = new BigNumber(-1);\n  if (x.isZero() || y.eq(negOne) || x.eq(y)) {\n    return y;\n  }\n  if (y.isZero() || x.eq(negOne)) {\n    return x;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if ((!x.isFinite() && !x.isNegative() && y.isNegative()) ||\n        (x.isNegative() && !y.isNegative() && !y.isFinite())) {\n      return negOne;\n    }\n    if (x.isNegative() && y.isNegative()) {\n      return x.isFinite() ? x : y;\n    }\n    return x.isFinite() ? y : x;\n  }\n\n  return bitwise(x, y, function (a, b) { return a | b });\n};\n\n},{\"./bitwise\":514}],513:[function(require,module,exports){\nvar bitwise = require('./bitwise');\nvar bitNot = require('./bitNot');\n\n/**\n * Bitwise XOR for BigNumbers\n *\n * Special Cases:\n *   N ^  n =  N\n *   n ^  0 =  n\n *   n ^  n =  0\n *   n ^ -1 = ~n\n *   I ^  n =  I\n *   I ^ -n = -I\n *   I ^ -I = -1\n *  -I ^  n = -I\n *  -I ^ -n =  I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` ^ `y`, fully precise\n *\n */\nmodule.exports = function bitXor(x, y) {\n  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {\n    throw new Error('Integers expected in function bitXor');\n  }\n\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero()) {\n    return y;\n  }\n  if (y.isZero()) {\n    return x;\n  }\n\n  if (x.eq(y)) {\n    return new BigNumber(0);\n  }\n\n  var negOne = new BigNumber(-1);\n  if (x.eq(negOne)) {\n    return bitNot(y);\n  }\n  if (y.eq(negOne)) {\n    return bitNot(x);\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      return negOne;\n    }\n    return new BigNumber(x.isNegative() == y.isNegative()\n        ?  Infinity\n        : -Infinity);\n  }\n  return bitwise(x, y, function (a, b) { return a ^ b });\n};\n\n},{\"./bitNot\":511,\"./bitwise\":514}],514:[function(require,module,exports){\nvar bitNot = require('./bitNot');\n\n/**\n * Applies bitwise function to numbers\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @param {function (a, b)} func\n * @return {BigNumber}\n */\nmodule.exports = function bitwise(x, y, func) {\n  var BigNumber = x.constructor;\n\n  var xBits, yBits;\n  var xSign = +(x.s < 0);\n  var ySign = +(y.s < 0);\n  if (xSign) {\n    xBits = decCoefficientToBinaryString(bitNot(x));\n    for (var i = 0; i < xBits.length; ++i) {\n      xBits[i] ^= 1;\n    }\n  } else {\n    xBits = decCoefficientToBinaryString(x);\n  }\n  if (ySign) {\n    yBits = decCoefficientToBinaryString(bitNot(y));\n    for (var i = 0; i < yBits.length; ++i) {\n      yBits[i] ^= 1;\n    }\n  } else {\n    yBits = decCoefficientToBinaryString(y);\n  }\n\n  var minBits, maxBits, minSign;\n  if (xBits.length <= yBits.length) {\n    minBits = xBits;\n    maxBits = yBits;\n    minSign = xSign;\n  } else {\n    minBits = yBits;\n    maxBits = xBits;\n    minSign = ySign;\n  }\n\n  var shortLen = minBits.length;\n  var longLen = maxBits.length;\n  var expFuncVal = func(xSign, ySign) ^ 1;\n  var outVal = new BigNumber(expFuncVal ^ 1);\n  var twoPower = new BigNumber(1);\n  var two = new BigNumber(2);\n\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({precision: 1E9});\n\n  while (shortLen > 0) {\n    if (func(minBits[--shortLen], maxBits[--longLen]) == expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n    twoPower = twoPower.times(two);\n  }\n  while (longLen > 0) {\n    if (func(minSign, maxBits[--longLen]) == expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n    twoPower = twoPower.times(two);\n  }\n\n  BigNumber.config({precision: prevPrec});\n\n  if (expFuncVal == 0) {\n    outVal.s = -outVal.s;\n  }\n  return outVal;\n};\n\n/* Extracted from decimal.js, and edited to specialize. */\nfunction decCoefficientToBinaryString (x) {\n  // Convert to string\n  var a = x.d; // array with digits\n  var r = a[0] + '';\n\n  for (var i = 1; i < a.length; ++i) {\n    var s = a[i] + '';\n    for (var z = 7 - s.length; z--; ) {\n      s = '0' + s;\n    }\n\n    r += s;\n  }\n\n  var j;\n  for (j = r.length - 1; r.charAt(j) == '0'; --j);\n\n  var xe = x.e;\n  var str = r.slice(0, j + 1 || 1);\n  var strL = str.length;\n  if (xe > 0) {\n    if (++xe > strL) {\n      // Append zeros.\n      for (xe -= strL; xe--; str += '0');\n    } else if (xe < strL) {\n      str = str.slice(0, xe) + '.' + str.slice(xe);\n    }\n  }\n\n  // Convert from base 10 (decimal) to base 2\n  var arr = [0];\n  for (var i = 0; i < str.length; ) {\n    for (var arrL = arr.length; arrL--; arr[arrL] *= 10);\n\n    arr[0] += str.charAt(i++) << 0;  // convert to int\n    for (var j = 0; j < arr.length; ++j) {\n      if (arr[j] > 1) {\n        if (arr[j + 1] == null) {\n          arr[j + 1] = 0;\n        }\n\n        arr[j + 1] += arr[j] >> 1;\n        arr[j] &= 1;\n      }\n    }\n  }\n\n  return arr.reverse();\n}\n\n},{\"./bitNot\":511}],515:[function(require,module,exports){\nvar memoize = require('../function').memoize;\n\n/**\n * Calculate BigNumber e\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns e\n */\nexports.e = memoize(function (BigNumber) {\n  return new BigNumber(1).exp();\n}, hasher);\n\n/**\n * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns phi\n */\nexports.phi = memoize(function (BigNumber) {\n  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);\n}, hasher);\n\n/**\n * Calculate BigNumber pi.\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns pi\n */\nexports.pi = memoize(function (BigNumber) {\n  return BigNumber.acos(-1);\n}, hasher);\n\n/**\n * Calculate BigNumber tau, tau = 2 * pi\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns tau\n */\nexports.tau = memoize(function (BigNumber) {\n  return exports.pi(BigNumber).times(2);\n}, hasher);\n\n/**\n * Create a hash for a BigNumber constructor function. The created has is\n * the configured precision\n * @param {Array} args         Supposed to contain a single entry with\n *                             a BigNumber constructor\n * @return {number} precision\n * @private\n */\nfunction hasher (args) {\n  return args[0].precision;\n}\n\n},{\"../function\":529}],516:[function(require,module,exports){\n/**\n * Convert a BigNumber to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lower` and `upper` bounds, and uses\n *                                          exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential' and\n *                                          'auto', `precision` defines the total\n *                                          number of significant digits returned\n *                                          and is undefined by default.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point, and is 0 by default.\n *                     {Object} exponential An object containing two parameters,\n *                                          {number} lower and {number} upper,\n *                                          used by notation 'auto' to determine\n *                                          when to return exponential notation.\n *                                          Default values are `lower=1e-3` and\n *                                          `upper=1e5`.\n *                                          Only applicable for notation `auto`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4);                                        // '6.4'\n *    format(1240000);                                    // '1.24e6'\n *    format(1/3);                                        // '0.3333333333333333'\n *    format(1/3, 3);                                     // '0.333'\n *    format(21385, 2);                                   // '21000'\n *    format(12.071, {notation: 'fixed'});                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'\n *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'\n *\n * @param {BigNumber} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\nexports.format = function (value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  }\n\n  // handle special cases\n  if (!value.isFinite()) {\n    return value.isNaN() ? 'NaN' : (value.gt(0) ? 'Infinity' : '-Infinity');\n  }\n\n  // default values for options\n  var notation = 'auto';\n  var precision = undefined;\n\n  if (options !== undefined) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    }\n\n    // determine precision from options\n    if (typeof options === 'number') {\n      precision = options;\n    }\n    else if (options.precision) {\n      precision = options.precision;\n    }\n  }\n\n  // handle the various notations\n  switch (notation) {\n    case 'fixed':\n      return exports.toFixed(value, precision);\n\n    case 'exponential':\n      return exports.toExponential(value, precision);\n\n    case 'auto':\n      // determine lower and upper bound for exponential notation.\n      // TODO: implement support for upper and lower to be BigNumbers themselves\n      var lower = 1e-3;\n      var upper = 1e5;\n      if (options && options.exponential) {\n        if (options.exponential.lower !== undefined) {\n          lower = options.exponential.lower;\n        }\n        if (options.exponential.upper !== undefined) {\n          upper = options.exponential.upper;\n        }\n      }\n\n      // adjust the configuration of the BigNumber constructor (yeah, this is quite tricky...)\n      var oldConfig = {\n        toExpNeg: value.constructor.toExpNeg,\n        toExpPos: value.constructor.toExpPos\n      };\n\n      value.constructor.config({\n        toExpNeg: Math.round(Math.log(lower) / Math.LN10),\n        toExpPos: Math.round(Math.log(upper) / Math.LN10)\n      });\n\n      // handle special case zero\n      if (value.isZero()) return '0';\n\n      // determine whether or not to output exponential notation\n      var str;\n      var abs = value.abs();\n      if (abs.gte(lower) && abs.lt(upper)) {\n        // normal number notation\n        str = value.toSignificantDigits(precision).toFixed();\n      }\n      else {\n        // exponential notation\n        str = exports.toExponential(value, precision);\n      }\n\n      // remove trailing zeros after the decimal point\n      return str.replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return (digits !== '.') ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' +\n          'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n};\n\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {BigNumber} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n * @returns {string} str\n */\nexports.toExponential = function (value, precision) {\n  if (precision !== undefined) {\n    return value.toExponential(precision - 1); // Note the offset of one\n  }\n  else {\n    return value.toExponential();\n  }\n};\n\n/**\n * Format a number with fixed notation.\n * @param {BigNumber} value\n * @param {number} [precision=0]        Optional number of decimals after the\n *                                      decimal point. Zero by default.\n */\nexports.toFixed = function (value, precision) {\n  return value.toFixed(precision || 0);\n  // Note: the (precision || 0) is needed as the toFixed of BigNumber has an\n  // undefined default precision instead of 0.\n};\n\n},{}],517:[function(require,module,exports){\n\n/**\n * Bitwise left shift\n *\n * Special Cases:\n *  n << -n = N\n *  n <<  N = N\n *  N <<  n = N\n *  n <<  0 = n\n *  0 <<  n = 0\n *  I <<  I = N\n *  I <<  n = I\n *  n <<  I = I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` << `y`\n *\n */\nmodule.exports = function leftShift (x, y) {\n  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {\n    throw new Error('Integers expected in function leftShift');\n  }\n\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n  if (!x.isFinite() && !y.isFinite()) {\n    return new BigNumber(NaN);\n  }\n\n  // Math.pow(2, y) is fully precise for y < 55, and fast\n  if (y.lt(55)) {\n    return x.times(Math.pow(2, y.toNumber()) + '');\n  }\n  return x.times(new BigNumber(2).pow(y));\n};\n\n},{}],518:[function(require,module,exports){\n'use strict';\n\n/**\n * Compares two BigNumbers.\n * @param {BigNumber} x       First value to compare\n * @param {BigNumber} y       Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n */\nmodule.exports = function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon == null) {\n    return x.eq(y);\n  }\n\n\n  // use \"==\" operator, handles infinities\n  if (x.eq(y)) {\n    return true;\n  }\n\n  // NaN\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  }\n\n  // at this point x and y should be finite\n  if(x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n    if (diff.isZero()) {\n      return true;\n    }\n    else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  }\n\n  // Infinite and Number or negative Infinite and positive Infinite cases\n  return false;\n};\n\n},{}],519:[function(require,module,exports){\n/*\n * Special Cases:\n *   n >> -n =  N\n *   n >>  N =  N\n *   N >>  n =  N\n *   I >>  I =  N\n *   n >>  0 =  n\n *   I >>  n =  I\n *  -I >>  n = -I\n *  -I >>  I = -I\n *   n >>  I =  I\n *  -n >>  I = -1\n *   0 >>  n =  0\n *\n * @param {BigNumber} value\n * @param {BigNumber} value\n * @return {BigNumber} Result of `x` >> `y`\n *\n */\nmodule.exports = function rightArithShift (x, y) {\n  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n  if (!y.isFinite()) {\n    if (x.isNegative()) {\n      return new BigNumber(-1);\n    }\n    if (!x.isFinite()) {\n      return new BigNumber(NaN);\n    }\n    return new BigNumber(0);\n  }\n\n  // Math.pow(2, y) is fully precise for y < 55, and fast\n  if (y.lt(55)) {\n    return x.div(Math.pow(2, y.toNumber()) + '').floor();\n  }\n  return x.div(new BigNumber(2).pow(y)).floor();\n};\n\n},{}],520:[function(require,module,exports){\n'use strict';\n\n/**\n * Test whether value is a boolean\n * @param {*} value\n * @return {boolean} isBoolean\n */\nexports.isBoolean = function(value) {\n  return typeof value == 'boolean';\n};\n\n},{}],521:[function(require,module,exports){\n'use strict';\n\nvar isCollection = require('./isCollection');\n\n/**\n * Test whether an array contains collections\n * @param {Array} array\n * @returns {boolean} Returns true when the array contains one or multiple\n *                    collections (Arrays or Matrices). Returns false otherwise.\n */\nmodule.exports = function containsCollections (array) {\n  for (var i = 0; i < array.length; i++) {\n    if (isCollection(array[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n},{\"./isCollection\":524}],522:[function(require,module,exports){\n'use strict';\n\n/**\n * Recursively loop over all elements in a given multi dimensional array\n * and invoke the callback on each of the elements.\n * @param {Array | Matrix} array\n * @param {Function} callback     The callback method is invoked with one\n *                                parameter: the current element in the array\n */\nmodule.exports = function deepForEach (array, callback) {\n  if (array && array.isMatrix === true) {\n    array = array.valueOf();\n  }\n\n  for (var i = 0, ii = array.length; i < ii; i++) {\n    var value = array[i];\n\n    if (Array.isArray(value)) {\n      deepForEach(value, callback);\n    }\n    else {\n      callback(value);\n    }\n  }\n};\n\n},{}],523:[function(require,module,exports){\n'use strict';\n\n/**\n * Execute the callback function element wise for each element in array and any\n * nested array\n * Returns an array with the results\n * @param {Array | Matrix} array\n * @param {Function} callback   The callback is called with two parameters:\n *                              value1 and value2, which contain the current\n *                              element of both arrays.\n * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n *\n * @return {Array | Matrix} res\n */\nmodule.exports = function deepMap(array, callback, skipZeros) {\n  if (array && (typeof array.map === 'function')) {\n    // TODO: replace array.map with a for loop to improve performance\n    return array.map(function (x) {\n      return deepMap(x, callback, skipZeros);\n    });\n  }\n  else {\n    return callback(array);\n  }\n};\n\n},{}],524:[function(require,module,exports){\n'use strict';\n\n/**\n * Test whether a value is a collection: an Array or Matrix\n * @param {*} x\n * @returns {boolean} isCollection\n */\nmodule.exports = function isCollection (x) {\n  return (Array.isArray(x) || (x && x.isMatrix === true));\n};\n\n},{}],525:[function(require,module,exports){\n'use strict';\n\nvar arraySize = require('../array').size;\nvar IndexError = require('../../error/IndexError');\n\n/**\n * Reduce a given matrix or array to a new matrix or\n * array with one less dimension, applying the given\n * callback in the selected dimension.\n * @param {Array | Matrix} mat\n * @param {number} dim\n * @param {Function} callback\n * @return {Array | Matrix} res\n */\nmodule.exports = function(mat, dim, callback) {\n  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();\n  if (dim < 0 || (dim >= size.length)) {\n    // TODO: would be more clear when throwing a DimensionError here\n    throw new IndexError(dim, size.length);\n  }\n\n  if (mat && mat.isMatrix === true) {\n    return mat.create(_reduce(mat.valueOf(), dim, callback));\n  }else {\n    return _reduce(mat, dim, callback);\n  }\n};\n\n/**\n * Recursively reduce a matrix\n * @param {Array} mat\n * @param {number} dim\n * @param {Function} callback\n * @returns {Array} ret\n * @private\n */\nfunction _reduce(mat, dim, callback){\n  var i, ret, val, tran;\n\n  if(dim<=0){\n    if( !Array.isArray(mat[0]) ){\n      val = mat[0];\n      for(i=1; i<mat.length; i++){\n        val = callback(val, mat[i]);\n      }\n      return val;\n    }else{\n      tran = _switch(mat);\n      ret = [];\n      for(i=0; i<tran.length; i++){\n        ret[i] = _reduce(tran[i], dim-1, callback);\n      }\n      return ret;\n    }\n  }else{\n    ret = [];\n    for(i=0; i<mat.length; i++){\n      ret[i] = _reduce(mat[i], dim-1, callback);\n    }\n    return ret;\n  }\n}\n\n/**\n * Transpose a matrix\n * @param {Array} mat\n * @returns {Array} ret\n * @private\n */\nfunction _switch(mat){\n  var I = mat.length;\n  var J = mat[0].length;\n  var i, j;\n  var ret = [];\n  for( j=0; j<J; j++) {\n    var tmp = [];\n    for( i=0; i<I; i++) {\n      tmp.push(mat[i][j]);\n    }\n    ret.push(tmp);\n  }\n  return ret;\n}\n\n},{\"../../error/IndexError\":12,\"../array\":509}],526:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr;\n  // c arrays\n  var cindex = c._index;\n\n  // vars\n  var k, k0, k1, i;\n\n  // check we need to process values (pattern matrix)\n  if (x) {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k];\n      // check value exists in current j\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark;\n        // add i to pattern of C\n        cindex.push(i);\n        // x(i) = A, check we need to call function this time\n        if (update) {\n          // copy value to workspace calling callback function\n          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);\n          // function was called on current row\n          u[i] = mark;\n        }\n        else {\n          // copy value to workspace\n          x[i] = avalues[k];\n        }\n      }\n      else {\n        // i exists in C already\n        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);\n        // function was called on current row\n        u[i] = mark;\n      }\n    }\n  }\n  else {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k];\n      // check value exists in current j\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark;\n        // add i to pattern of C\n        cindex.push(i);\n      }\n      else {\n        // indicate function was called on current row\n        u[i] = mark;\n      }\n    }\n  }\n};\n\n},{}],527:[function(require,module,exports){\n'use strict';\n\nvar hasOwnProperty = require('./object').hasOwnProperty;\n\n/**\n * Get a property of a plain object\n * Throws an error in case the object is not a plain object or the\n * property is not defined on the object itself\n * @param {Object} object\n * @param {string} prop\n * @return {*} Returns the property value when safe\n */\nfunction getSafeProperty (object, prop) {\n  // only allow getting properties of a plain object\n  if (isPlainObject(object)) {\n    // only allow getting properties defined on the object itself,\n    // not inherited from it's prototype.\n    if (hasOwnProperty(object, prop)) {\n      return object[prop];\n    }\n\n    if (!(prop in object)) {\n      // this is a not existing property on a plain object\n      return undefined;\n    }\n  }\n\n  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {\n    throw new Error('Cannot access method \"' + prop + '\" as a property');\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n\n/**\n * Set a property on a plain object.\n * Throws an error in case the object is not a plain object or the\n * property would override an inherited property like .constructor or .toString\n * @param {Object} object\n * @param {string} prop\n * @param {*} value\n * @return {*} Returns the value\n */\n// TODO: merge this function into access.js?\nfunction setSafeProperty (object, prop, value) {\n  // only allow setting properties of a plain object\n  if (isPlainObject(object)) {\n    // only allow setting properties defined on the object itself,\n    // not inherited from it's prototype.\n    if (prop in object) {\n      // property already exists\n      // override when the property is defined on the object itself.\n      // don't allow overriding inherited properties like .constructor or .toString\n      if (hasOwnProperty(object, prop)) {\n        return object[prop] = value;\n      }\n    }\n    else {\n      // this is a new property, that's just ok\n      return object[prop] = value;\n    }\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n\n/**\n * Test whether a property is safe to use for an object.\n * For example .toString and .constructor are not safe\n * @param {string} prop\n * @return {boolean} Returns true when safe\n */\nfunction isSafeProperty (prop) {\n  return !(prop in {});\n}\n\n/**\n * Validate whether a method is safe.\n * Throws an error when that's not the case.\n * @param {Object} object\n * @param {string} method\n */\n// TODO: merge this function into assign.js?\nfunction validateSafeMethod (object, method) {\n  if (!isSafeMethod(object, method)) {\n    throw new Error('No access to method \"' + method + '\"');\n  }\n}\n\n/**\n * Check whether a method is safe.\n * Throws an error when that's not the case (for example for `constructor`).\n * @param {Object} object\n * @param {string} method\n * @return {boolean} Returns true when safe, false otherwise\n */\nfunction isSafeMethod (object, method) {\n  // test for plain functions defined on the object (instead of a method)\n  if (hasOwnProperty(object, method)) {\n    return isPlainObject(object);\n  }\n  else {\n    // only allow methods:\n    // - defined on the prototype of this object\n    // - not defined on the prototype of native Object\n    //   i.e. constructor, __defineGetter__, hasOwnProperty, etc. are not allowed\n    // - calling methods on a function (like bind) is not allowed\n    // - A few safe native methods are allowed: toString, valueOf, toLocaleString\n    return (object && typeof object !== 'function' &&\n        (hasOwnProperty(object.constructor.prototype, method) ||\n            hasOwnProperty(object.__proto__, method)) &&\n        (!hasOwnProperty(Object.prototype, method) || hasOwnProperty(safeNativeMethods, method)));\n  }\n}\n\nfunction isPlainObject (object) {\n  return typeof object === 'object' && object && object.constructor === Object;\n}\n\nvar safeNativeMethods = {\n  toString: true,\n  valueOf: true,\n  toLocaleString: true\n};\n\nexports.getSafeProperty = getSafeProperty;\nexports.setSafeProperty = setSafeProperty;\nexports.isSafeProperty = isSafeProperty;\nexports.validateSafeMethod = validateSafeMethod;\nexports.isSafeMethod = isSafeMethod;\nexports.isPlainObject = isPlainObject;\n\n},{\"./object\":533}],528:[function(require,module,exports){\nvar Emitter = require('tiny-emitter');\n\n/**\n * Extend given object with emitter functions `on`, `off`, `once`, `emit`\n * @param {Object} obj\n * @return {Object} obj\n */\nexports.mixin = function (obj) {\n  // create event emitter\n  var emitter = new Emitter();\n\n  // bind methods to obj (we don't want to expose the emitter.e Array...)\n  obj.on   = emitter.on.bind(emitter);\n  obj.off  = emitter.off.bind(emitter);\n  obj.once = emitter.once.bind(emitter);\n  obj.emit = emitter.emit.bind(emitter);\n\n  return obj;\n};\n\n},{\"tiny-emitter\":537}],529:[function(require,module,exports){\n// function utils\n\n/*\n * Memoize a given function by caching the computed result.\n * The cache of a memoized function can be cleared by deleting the `cache`\n * property of the function.\n *\n * @param {function} fn                     The function to be memoized.\n *                                          Must be a pure function.\n * @param {function(args: Array)} [hasher]  A custom hash builder.\n *                                          Is JSON.stringify by default.\n * @return {function}                       Returns the memoized function\n */\nexports.memoize = function(fn, hasher) {\n  return function memoize() {\n    if (typeof memoize.cache !== 'object') {\n      memoize.cache = {};\n    }\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    var hash = hasher ? hasher(args) : JSON.stringify(args);\n    if (!(hash in memoize.cache)) {\n      return memoize.cache[hash] = fn.apply(fn, args);\n    }\n    return memoize.cache[hash];\n  };\n};\n\n/**\n * Find the maximum number of arguments expected by a typed function.\n * @param {function} fn   A typed function\n * @return {number} Returns the maximum number of expected arguments.\n *                  Returns -1 when no signatures where found on the function.\n */\nexports.maxArgumentCount = function (fn) {\n  return Object.keys(fn.signatures || {})\n      .reduce(function (args, signature) {\n        var count = (signature.match(/,/g) || []).length + 1;\n        return Math.max(args, count);\n      }, -1);\n};\n\n},{}],530:[function(require,module,exports){\n'use strict';\n\nexports.array = require('./array');\nexports['boolean'] = require('./boolean');\nexports['function'] = require('./function');\nexports.number = require('./number');\nexports.object = require('./object');\nexports.string = require('./string');\nexports.types = require('./types');\nexports.emitter = require('./emitter');\n\n},{\"./array\":509,\"./boolean\":520,\"./emitter\":528,\"./function\":529,\"./number\":532,\"./object\":533,\"./string\":534,\"./types\":535}],531:[function(require,module,exports){\n'use strict';\n\nexports.symbols = {\n  // GREEK LETTERS\n  Alpha: 'A',     alpha: '\\\\alpha',\n  Beta: 'B',      beta: '\\\\beta',\n  Gamma: '\\\\Gamma',    gamma: '\\\\gamma',\n  Delta: '\\\\Delta',    delta: '\\\\delta',\n  Epsilon: 'E',   epsilon: '\\\\epsilon',  varepsilon: '\\\\varepsilon',\n  Zeta: 'Z',      zeta: '\\\\zeta',\n  Eta: 'H',       eta: '\\\\eta',\n  Theta: '\\\\Theta',    theta: '\\\\theta',    vartheta: '\\\\vartheta',\n  Iota: 'I',      iota: '\\\\iota',\n  Kappa: 'K',     kappa: '\\\\kappa',    varkappa: '\\\\varkappa',\n  Lambda: '\\\\Lambda',   lambda: '\\\\lambda',\n  Mu: 'M',        mu: '\\\\mu',\n  Nu: 'N',        nu: '\\\\nu',\n  Xi: '\\\\Xi',       xi: '\\\\xi',\n  Omicron: 'O',   omicron: 'o',\n  Pi: '\\\\Pi',       pi: '\\\\pi',       varpi: '\\\\varpi',\n  Rho: 'P',       rho: '\\\\rho',      varrho: '\\\\varrho',\n  Sigma: '\\\\Sigma',    sigma: '\\\\sigma',    varsigma: '\\\\varsigma',\n  Tau: 'T',       tau: '\\\\tau',\n  Upsilon: '\\\\Upsilon',  upsilon: '\\\\upsilon',\n  Phi: '\\\\Phi',      phi: '\\\\phi',      varphi: '\\\\varphi',\n  Chi: 'X',       chi: '\\\\chi',\n  Psi: '\\\\Psi',      psi: '\\\\psi',\n  Omega: '\\\\Omega',    omega: '\\\\omega',\n  //logic\n  'true': '\\\\mathrm{True}',\n  'false': '\\\\mathrm{False}',\n  //other\n  i: 'i', //TODO use \\i ??\n  inf: '\\\\infty',\n  Inf: '\\\\infty',\n  infinity: '\\\\infty',\n  Infinity: '\\\\infty',\n  oo: '\\\\infty',\n  lim: '\\\\lim',\n  'undefined': '\\\\mathbf{?}'\n};\n\nexports.operators = {\n  'transpose': '^\\\\top',\n  'factorial': '!',\n  'pow': '^',\n  'dotPow': '.^\\\\wedge', //TODO find ideal solution\n  'unaryPlus': '+',\n  'unaryMinus': '-',\n  'bitNot': '~', //TODO find ideal solution\n  'not': '\\\\neg',\n  'multiply': '\\\\cdot',\n  'divide': '\\\\frac', //TODO how to handle that properly?\n  'dotMultiply': '.\\\\cdot', //TODO find ideal solution\n  'dotDivide': '.:', //TODO find ideal solution\n  'mod': '\\\\mod',\n  'add': '+',\n  'subtract': '-',\n  'to': '\\\\rightarrow',\n  'leftShift': '<<',\n  'rightArithShift': '>>',\n  'rightLogShift': '>>>',\n  'equal': '=',\n  'unequal': '\\\\neq',\n  'smaller': '<',\n  'larger': '>',\n  'smallerEq': '\\\\leq',\n  'largerEq': '\\\\geq',\n  'bitAnd': '\\\\&',\n  'bitXor': '\\\\underline{|}',\n  'bitOr': '|',\n  'and': '\\\\wedge',\n  'xor': '\\\\veebar',\n  'or': '\\\\vee'\n};\n\nexports.defaultTemplate = '\\\\mathrm{${name}}\\\\left(${args}\\\\right)';\n\nvar units = {\n  deg: '^\\\\circ'\n};\n\n//@param {string} name\n//@param {boolean} isUnit\nexports.toSymbol = function (name, isUnit) {\n  isUnit = typeof isUnit === 'undefined' ? false : isUnit;\n  if (isUnit) {\n    if (units.hasOwnProperty(name)) {\n      return units[name];\n    }\n    return '\\\\mathrm{' + name + '}';\n  }\n\n  if (exports.symbols.hasOwnProperty(name)) {\n    return exports.symbols[name];\n  }\n  else if (name.indexOf('_') !== -1) {\n    //symbol with index (eg. alpha_1)\n    var index = name.indexOf('_');\n    return exports.toSymbol(name.substring(0, index)) + '_{'\n      + exports.toSymbol(name.substring(index + 1)) + '}';\n  }\n  return name;\n};\n\n},{}],532:[function(require,module,exports){\n'use strict';\n\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Test whether value is a number\n * @param {*} value\n * @return {boolean} isNumber\n */\nexports.isNumber = function(value) {\n  return typeof value === 'number';\n};\n\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\nexports.isInteger = function(value) {\n  return isFinite(value)\n      ? (value == Math.round(value))\n      : false;\n  // Note: we use ==, not ===, as we can have Booleans as well\n};\n\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {*}\n */\nexports.sign = Math.sign || function(x) {\n  if (x > 0) {\n    return 1;\n  }\n  else if (x < 0) {\n    return -1;\n  }\n  else {\n    return 0;\n  }\n};\n\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lower` and `upper` bounds, and uses\n *                                          exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential' and\n *                                          'auto', `precision` defines the total\n *                                          number of significant digits returned\n *                                          and is undefined by default.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point, and is 0 by default.\n *                     {Object} exponential An object containing two parameters,\n *                                          {number} lower and {number} upper,\n *                                          used by notation 'auto' to determine\n *                                          when to return exponential notation.\n *                                          Default values are `lower=1e-3` and\n *                                          `upper=1e5`.\n *                                          Only applicable for notation `auto`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4);                                        // '6.4'\n *    format(1240000);                                    // '1.24e6'\n *    format(1/3);                                        // '0.3333333333333333'\n *    format(1/3, 3);                                     // '0.333'\n *    format(21385, 2);                                   // '21000'\n *    format(12.071, {notation: 'fixed'});                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'\n *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'});        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\nexports.format = function(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  }\n\n  // handle special cases\n  if (value === Infinity) {\n    return 'Infinity';\n  }\n  else if (value === -Infinity) {\n    return '-Infinity';\n  }\n  else if (isNaN(value)) {\n    return 'NaN';\n  }\n\n  // default values for options\n  var notation = 'auto';\n  var precision = undefined;\n\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    }\n\n    // determine precision from options\n    if (exports.isNumber(options)) {\n      precision = options;\n    }\n    else if (options.precision) {\n      precision = options.precision;\n    }\n  }\n\n  // handle the various notations\n  switch (notation) {\n    case 'fixed':\n      return exports.toFixed(value, precision);\n\n    case 'exponential':\n      return exports.toExponential(value, precision);\n\n    case 'engineering':\n      return exports.toEngineering(value, precision);\n\n    case 'auto':\n      return exports\n          .toPrecision(value, precision, options && options.exponential)\n\n          // remove trailing zeros after the decimal point\n          .replace(/((\\.\\d*?)(0+))($|e)/, function () {\n            var digits = arguments[2];\n            var e = arguments[4];\n            return (digits !== '.') ? digits + e : e;\n          });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' +\n          'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n};\n\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\nexports.splitNumber = function (value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^0*?(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n\n  var sign         = match[1];\n  var digits       = match[2];\n  var exponent     = parseFloat(match[4] || '0');\n\n  var dot = digits.indexOf('.');\n  exponent += (dot !== -1) ? (dot - 1) : (digits.length - 1);\n\n  var coefficients = digits\n      .replace('.', '')  // remove the dot (must be removed before removing leading zeros)\n      .replace(/^0*/, function (zeros) {\n        // remove leading zeros, add their count to the exponent\n        exponent -= zeros.length;\n        return '';\n      })\n      .replace(/0*$/, '') // remove trailing zeros\n      .split('')\n      .map(function (d) {\n        return parseInt(d);\n      });\n\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n\n  return {\n    sign: sign,\n    coefficients: coefficients,\n    exponent: exponent\n  };\n};\n\n\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision=0]        Optional number of decimals after the\n *                                      decimal point. Zero by default.\n */\nexports.toEngineering = function (value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n  \n  var rounded = exports.roundDigits(exports.splitNumber(value), precision);\n\n  var e = rounded.exponent;\n  var c = rounded.coefficients;\n\n  // find nearest lower multiple of 3 for exponent\n  var newExp = e % 3 === 0 ? e : (e < 0 ? (e - 3) - (e % 3) : e - (e % 3));\n\n  // concatenate coefficients with necessary zeros\n  var significandsDiff = e >= 0 ? e : Math.abs(newExp);\n\n  // add zeros if necessary (for ex: 1e+8)\n  if (c.length - 1 < significandsDiff) c = c.concat(zeros(significandsDiff - (c.length - 1)));\n\n  // find difference in exponents\n  var expDiff = Math.abs(e - newExp);\n\n  var decimalIdx = 1;\n\n  // push decimal index over by expDiff times\n  while (--expDiff >= 0) decimalIdx++;\n\n  // if all coefficient values are zero after the decimal point, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = decimals.match(/[1-9]/) ? ('.' + decimals) : '';\n\n  var str = c.slice(0, decimalIdx).join('') +\n      decimalVal +\n      'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n};\n\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=0]        Optional number of decimals after the\n *                                      decimal point. Zero by default.\n */\nexports.toFixed = function (value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var splitValue = exports.splitNumber(value)\n  var rounded = exports.roundDigits(splitValue, splitValue.exponent + 1 + (precision || 0));\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n\n  // append zeros if needed\n  var pp = p + (precision || 0);\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  }\n\n  // prepend zeros if needed\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  }\n\n  // insert a dot if needed\n  if (precision) {\n    c.splice(p, 0, (p === 0) ? '0.' : '.');\n  }\n\n  return rounded.sign + c.join('');\n};\n\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\nexports.toExponential = function (value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  // round if needed, else create a clone\n  var split = exports.splitNumber(value)\n  var rounded = precision ? exports.roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent;\n\n  // append zeros if needed\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  }\n\n  // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? ('.' + c.join('')) : '') +\n      'e' + (e >= 0 ? '+' : '') + e;\n}\n\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lower: number | undefined, upper: number | undefined}} [options]\n *                                       By default:\n *                                         lower = 1e-3 (excl)\n *                                         upper = 1e+5 (incl)\n * @return {string}\n */\nexports.toPrecision = function (value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  // determine lower and upper bound for exponential notation.\n  var lower = (options && options.lower !== undefined) ? options.lower : 1e-3;\n  var upper = (options && options.upper !== undefined) ? options.upper : 1e+5;\n\n  var split = exports.splitNumber(value)\n  var abs = Math.abs(Math.pow(10, split.exponent));\n  if (abs < lower || abs >= upper) {\n    // exponential notation\n    return exports.toExponential(value, precision);\n  }\n  else {\n    var rounded = precision ? exports.roundDigits(split, precision) : split;\n    var c = rounded.coefficients;\n    var e = rounded.exponent;\n\n    // append trailing zeros\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    }\n\n    // append trailing zeros\n    // TODO: simplify the next statement\n    c = c.concat(zeros(e - c.length + 1 +\n        (c.length < precision ? precision - c.length : 0)));\n\n    // prepend zeros\n    c = zeros(-e).concat(c);\n\n    var dot = e > 0 ? e : 0;\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n\n    return rounded.sign + c.join('');\n  }\n}\n\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\nexports.roundDigits = function (split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  }\n  var c = rounded.coefficients;\n\n  // prepend zeros if needed\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n      while (c[i] === 10) {\n        c.pop();\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n        i--;\n        c[i]++;\n      }\n    }\n  }\n\n  return rounded;\n};\n\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\nfunction zeros(length) {\n  var arr = [];\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n  return arr;\n}\n\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\nexports.digits = function(value) {\n  return value\n      .toExponential()\n      .replace(/e.*$/, '')          // remove exponential notation\n      .replace( /^0\\.?0*|\\./, '')   // remove decimal point and leading zeros\n      .length\n};\n\n/**\n * Minimum number added to one that makes the result different than one\n */\nexports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\nexports.nearlyEqual = function(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon == null) {\n    return x == y;\n  }\n\n  // use \"==\" operator, handles infinities\n  if (x == y) {\n    return true;\n  }\n\n  // NaN\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  }\n\n  // at this point x and y should be finite\n  if(isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n    if (diff < exports.DBL_EPSILON) {\n      return true;\n    }\n    else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  }\n\n  // Infinite and Number or negative Infinite and positive Infinite cases\n  return false;\n};\n\n},{}],533:[function(require,module,exports){\n'use strict';\n\n/**\n * Clone an object\n *\n *     clone(x)\n *\n * Can clone any primitive type, array, and object.\n * If x has a function clone, this function will be invoked to clone the object.\n *\n * @param {*} x\n * @return {*} clone\n */\nexports.clone = function clone(x) {\n  var type = typeof x;\n\n  // immutable primitive types\n  if (type === 'number' || type === 'string' || type === 'boolean' ||\n      x === null || x === undefined) {\n    return x;\n  }\n\n  // use clone function of the object when available\n  if (typeof x.clone === 'function') {\n    return x.clone();\n  }\n\n  // array\n  if (Array.isArray(x)) {\n    return x.map(function (value) {\n      return clone(value);\n    });\n  }\n\n  if (x instanceof Number)    return new Number(x.valueOf());\n  if (x instanceof String)    return new String(x.valueOf());\n  if (x instanceof Boolean)   return new Boolean(x.valueOf());\n  if (x instanceof Date)      return new Date(x.valueOf());\n  if (x && x.isBigNumber === true) return x; // bignumbers are immutable\n  if (x instanceof RegExp)  throw new TypeError('Cannot clone ' + x);  // TODO: clone a RegExp\n\n  // object\n  return exports.map(x, clone);\n};\n\n/**\n * Apply map to all properties of an object\n * @param {Object} object\n * @param {function} callback\n * @return {Object} Returns a copy of the object with mapped properties\n */\nexports.map = function(object, callback) {\n  var clone = {};\n\n  for (var key in object) {\n    if (exports.hasOwnProperty(object, key)) {\n      clone[key] = callback(object[key]);\n    }\n  }\n\n  return clone;\n}\n\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\nexports.extend = function(a, b) {\n  for (var prop in b) {\n    if (exports.hasOwnProperty(b, prop)) {\n      a[prop] = b[prop];\n    }\n  }\n  return a;\n};\n\n/**\n * Deep extend an object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @returns {Object}\n */\nexports.deepExtend = function deepExtend (a, b) {\n  // TODO: add support for Arrays to deepExtend\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend');\n  }\n\n  for (var prop in b) {\n    if (exports.hasOwnProperty(b, prop)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {};\n        }\n        if (a[prop].constructor === Object) {\n          deepExtend(a[prop], b[prop]);\n        }\n        else {\n          a[prop] = b[prop];\n        }\n      } else if (Array.isArray(b[prop])) {\n        throw new TypeError('Arrays are not supported by deepExtend');\n      } else {\n        a[prop] = b[prop];\n      }\n    }\n  }\n  return a;\n};\n\n/**\n * Deep test equality of all fields in two pairs of arrays or objects.\n * @param {Array | Object} a\n * @param {Array | Object} b\n * @returns {boolean}\n */\nexports.deepEqual = function deepEqual (a, b) {\n  var prop, i, len;\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n\n    if (a.length != b.length) {\n      return false;\n    }\n\n    for (i = 0, len = a.length; i < len; i++) {\n      if (!exports.deepEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  else if (a instanceof Object) {\n    if (Array.isArray(b) || !(b instanceof Object)) {\n      return false;\n    }\n\n    for (prop in a) {\n      //noinspection JSUnfilteredForInLoop\n      if (!exports.deepEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n    for (prop in b) {\n      //noinspection JSUnfilteredForInLoop\n      if (!exports.deepEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  else {\n    return (typeof a === typeof b) && (a == b);\n  }\n};\n\n/**\n * Test whether the current JavaScript engine supports Object.defineProperty\n * @returns {boolean} returns true if supported\n */\nexports.canDefineProperty = function () {\n  // test needed for broken IE8 implementation\n  try {\n    if (Object.defineProperty) {\n      Object.defineProperty({}, 'x', { get: function () {} });\n      return true;\n    }\n  } catch (e) {}\n\n  return false;\n};\n\n/**\n * Attach a lazy loading property to a constant.\n * The given function `fn` is called once when the property is first requested.\n * On older browsers (<IE8), the function will fall back to direct evaluation\n * of the properties value.\n * @param {Object} object   Object where to add the property\n * @param {string} prop     Property name\n * @param {Function} fn     Function returning the property value. Called\n *                          without arguments.\n */\nexports.lazy = function (object, prop, fn) {\n  if (exports.canDefineProperty()) {\n    var _uninitialized = true;\n    var _value;\n    Object.defineProperty(object, prop, {\n      get: function () {\n        if (_uninitialized) {\n          _value = fn();\n          _uninitialized = false;\n        }\n        return _value;\n      },\n\n      set: function (value) {\n        _value = value;\n        _uninitialized = false;\n      },\n\n      configurable: true,\n      enumerable: true\n    });\n  }\n  else {\n    // fall back to immediate evaluation\n    object[prop] = fn();\n  }\n};\n\n/**\n * Traverse a path into an object.\n * When a namespace is missing, it will be created\n * @param {Object} object\n * @param {string} path   A dot separated string like 'name.space'\n * @return {Object} Returns the object at the end of the path\n */\nexports.traverse = function(object, path) {\n  var obj = object;\n\n  if (path) {\n    var names = path.split('.');\n    for (var i = 0; i < names.length; i++) {\n      var name = names[i];\n      if (!(name in obj)) {\n        obj[name] = {};\n      }\n      obj = obj[name];\n    }\n  }\n\n  return obj;\n};\n\n/**\n * A safe hasOwnProperty\n * @param {Object} object\n * @param {string} property\n */\nexports.hasOwnProperty = function (object, property) {\n  return object && Object.hasOwnProperty.call(object, property);\n}\n\n/**\n * Test whether an object is a factory. a factory has fields:\n *\n * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n * - name: string (optional)\n * - path: string    A dot separated path (optional)\n * - math: boolean   If true (false by default), the math namespace is passed\n *                   as fifth argument of the factory function\n *\n * @param {*} object\n * @returns {boolean}\n */\nexports.isFactory = function (object) {\n  return object && typeof object.factory === 'function';\n};\n\n},{}],534:[function(require,module,exports){\n'use strict';\n\nvar formatNumber = require('./number').format;\nvar formatBigNumber = require('./bignumber/formatter').format;\n\n/**\n * Test whether value is a string\n * @param {*} value\n * @return {boolean} isString\n */\nexports.isString = function(value) {\n  return typeof value === 'string';\n};\n\n/**\n * Check if a text ends with a certain string.\n * @param {string} text\n * @param {string} search\n */\nexports.endsWith = function(text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return (text.substring(start, end) === search);\n};\n\n/**\n * Format a value of any type into a string.\n *\n * Usage:\n *     math.format(value)\n *     math.format(value, precision)\n *\n * When value is a function:\n *\n * - When the function has a property `syntax`, it returns this\n *   syntax description.\n * - In other cases, a string `'function'` is returned.\n *\n * When `value` is an Object:\n *\n * - When the object contains a property `format` being a function, this\n *   function is invoked as `value.format(options)` and the result is returned.\n * - When the object has its own `toString` method, this method is invoked\n *   and the result is returned.\n * - In other cases the function will loop over all object properties and\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n *\n * Example usage:\n *     math.format(2/7);                // '0.2857142857142857'\n *     math.format(math.pi, 3);         // '3.14'\n *     math.format(new Complex(2, 3));  // '2 + 3i'\n *     math.format('hello');            // '\"hello\"'\n *\n * @param {*} value             Value to be stringified\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @return {string} str\n */\nexports.format = function(value, options) {\n  if (typeof value === 'number') {\n    return formatNumber(value, options);\n  }\n\n  if (value && value.isBigNumber === true) {\n    return formatBigNumber(value, options);\n  }\n\n  if (value && value.isFraction === true) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return (value.s * value.n) + '/' + value.d;\n    }\n    else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n\n  if (exports.isString(value)) {\n    return '\"' + value + '\"';\n  }\n\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n\n  if (value && typeof value === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    }\n    else if (value && value.toString() !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString();\n    }\n    else {\n      var entries = [];\n\n      for (var key in value) {\n        if (value.hasOwnProperty(key)) {\n          entries.push('\"' + key + '\": ' + exports.format(value[key], options));\n        }\n      }\n\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n\n  return String(value);\n};\n\n/**\n * Stringify a value into a string enclosed in double quotes.\n * Unescaped double quotes and backslashes inside the value are escaped.\n * @param {*} value\n * @return {string}\n */\nexports.stringify = function (value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n  while (i < text.length) {\n    var c = text.charAt(i);\n\n    if (c === '\\\\') {\n      escaped += c;\n      i++;\n\n      c = text.charAt(i);\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\n        escaped += '\\\\';  // no valid escape character -> escape it\n      }\n      escaped += c;\n    }\n    else if (c === '\"') {\n      escaped += '\\\\\"';\n    }\n    else {\n      escaped += c;\n    }\n    i++;\n  }\n\n  return '\"' + escaped + '\"';\n}\n\n/**\n * Escape special HTML characters\n * @param {*} value\n * @return {string}\n */\nexports.escape = function (value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;')\n\t\t\t .replace(/\"/g, '&quot;')\n\t\t\t .replace(/'/g, '&#39;')\n\t\t\t .replace(/</g, '&lt;')\n\t\t\t .replace(/>/g, '&gt;');\n  \n  return text;\n}\n\n/**\n * Recursively format an n-dimensional matrix\n * Example output: \"[[1, 2], [3, 4]]\"\n * @param {Array} array\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @returns {string} str\n */\nfunction formatArray (array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n    for (var i = 0; i < len; i++) {\n      if (i != 0) {\n        str += ', ';\n      }\n      str += formatArray(array[i], options);\n    }\n    str += ']';\n    return str;\n  }\n  else {\n    return exports.format(array, options);\n  }\n}\n},{\"./bignumber/formatter\":516,\"./number\":532}],535:[function(require,module,exports){\n'use strict';\n\n/**\n * Determine the type of a variable\n *\n *     type(x)\n *\n * The following types are recognized:\n *\n *     'undefined'\n *     'null'\n *     'boolean'\n *     'number'\n *     'string'\n *     'Array'\n *     'Function'\n *     'Date'\n *     'RegExp'\n *     'Object'\n *\n * @param {*} x\n * @return {string} Returns the name of the type. Primitive types are lower case,\n *                  non-primitive types are upper-camel-case.\n *                  For example 'number', 'string', 'Array', 'Date'.\n */\nexports.type = function(x) {\n  var type = typeof x;\n\n  if (type === 'object') {\n    if (x === null)           return 'null';\n    if (Array.isArray(x))     return 'Array';\n    if (x instanceof Date)    return 'Date';\n    if (x instanceof RegExp)  return 'RegExp';\n    if (x instanceof Boolean) return 'boolean';\n    if (x instanceof Number)  return 'number';\n    if (x instanceof String)  return 'string';\n\n    return 'Object';\n  }\n\n  if (type === 'function')    return 'Function';\n\n  return type;\n};\n\n},{}],536:[function(require,module,exports){\n(function (global){\n'use strict';\r\n\r\nvar width = 256;// each RC4 output is 0 <= x < 256\r\nvar chunks = 6;// at least six RC4 outputs for each double\r\nvar digits = 52;// there are 52 significant digits in a double\r\nvar pool = [];// pool: entropy pool starts empty\r\nvar GLOBAL = typeof global === 'undefined' ? window : global;\r\n\r\n//\r\n// The following constants are related to IEEE 754 limits.\r\n//\r\nvar startdenom = Math.pow(width, chunks),\r\n    significance = Math.pow(2, digits),\r\n    overflow = significance * 2,\r\n    mask = width - 1;\r\n\r\n\r\nvar oldRandom = Math.random;\r\n\r\n//\r\n// seedrandom()\r\n// This is the seedrandom function described above.\r\n//\r\nmodule.exports = function(seed, options) {\r\n  if (options && options.global === true) {\r\n    options.global = false;\r\n    Math.random = module.exports(seed, options);\r\n    options.global = true;\r\n    return Math.random;\r\n  }\r\n  var use_entropy = (options && options.entropy) || false;\r\n  var key = [];\r\n\r\n  // Flatten the seed string or build one from local entropy if needed.\r\n  var shortseed = mixkey(flatten(\r\n    use_entropy ? [seed, tostring(pool)] :\r\n    0 in arguments ? seed : autoseed(), 3), key);\r\n\r\n  // Use the seed to initialize an ARC4 generator.\r\n  var arc4 = new ARC4(key);\r\n\r\n  // Mix the randomness into accumulated entropy.\r\n  mixkey(tostring(arc4.S), pool);\r\n\r\n  // Override Math.random\r\n\r\n  // This function returns a random double in [0, 1) that contains\r\n  // randomness in every bit of the mantissa of the IEEE 754 value.\r\n\r\n  return function() {         // Closure to return a random double:\r\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\r\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\r\n        x = 0;                          //   and no 'extra last byte'.\r\n    while (n < significance) {          // Fill up all significant digits by\r\n      n = (n + x) * width;              //   shifting numerator and\r\n      d *= width;                       //   denominator and generating a\r\n      x = arc4.g(1);                    //   new least-significant-byte.\r\n    }\r\n    while (n >= overflow) {             // To avoid rounding up, before adding\r\n      n /= 2;                           //   last byte, shift everything\r\n      d /= 2;                           //   right using integer Math until\r\n      x >>>= 1;                         //   we have exactly the desired bits.\r\n    }\r\n    return (n + x) / d;                 // Form the number within [0, 1).\r\n  };\r\n};\r\n\r\nmodule.exports.resetGlobal = function () {\r\n  Math.random = oldRandom;\r\n};\r\n\r\n//\r\n// ARC4\r\n//\r\n// An ARC4 implementation.  The constructor takes a key in the form of\r\n// an array of at most (width) integers that should be 0 <= x < (width).\r\n//\r\n// The g(count) method returns a pseudorandom integer that concatenates\r\n// the next (count) outputs from ARC4.  Its return value is a number x\r\n// that is in the range 0 <= x < (width ^ count).\r\n//\r\n/** @constructor */\r\nfunction ARC4(key) {\r\n  var t, keylen = key.length,\r\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\r\n\r\n  // The empty key [] is treated as [0].\r\n  if (!keylen) { key = [keylen++]; }\r\n\r\n  // Set up S using the standard key scheduling algorithm.\r\n  while (i < width) {\r\n    s[i] = i++;\r\n  }\r\n  for (i = 0; i < width; i++) {\r\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\r\n    s[j] = t;\r\n  }\r\n\r\n  // The \"g\" method returns the next (count) outputs as one number.\r\n  (me.g = function(count) {\r\n    // Using instance members instead of closure state nearly doubles speed.\r\n    var t, r = 0,\r\n        i = me.i, j = me.j, s = me.S;\r\n    while (count--) {\r\n      t = s[i = mask & (i + 1)];\r\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\r\n    }\r\n    me.i = i; me.j = j;\r\n    return r;\r\n    // For robust unpredictability discard an initial batch of values.\r\n    // See http://www.rsa.com/rsalabs/node.asp?id=2009\r\n  })(width);\r\n}\r\n\r\n//\r\n// flatten()\r\n// Converts an object tree to nested arrays of strings.\r\n//\r\nfunction flatten(obj, depth) {\r\n  var result = [], typ = (typeof obj)[0], prop;\r\n  if (depth && typ == 'o') {\r\n    for (prop in obj) {\r\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\r\n    }\r\n  }\r\n  return (result.length ? result : typ == 's' ? obj : obj + '\\0');\r\n}\r\n\r\n//\r\n// mixkey()\r\n// Mixes a string seed into a key that is an array of integers, and\r\n// returns a shortened string seed that is equivalent to the result key.\r\n//\r\nfunction mixkey(seed, key) {\r\n  var stringseed = seed + '', smear, j = 0;\r\n  while (j < stringseed.length) {\r\n    key[mask & j] =\r\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\r\n  }\r\n  return tostring(key);\r\n}\r\n\r\n//\r\n// autoseed()\r\n// Returns an object for autoseeding, using window.crypto if available.\r\n//\r\n/** @param {Uint8Array=} seed */\r\nfunction autoseed(seed) {\r\n  try {\r\n    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));\r\n    return tostring(seed);\r\n  } catch (e) {\r\n    return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,\r\n            GLOBAL.screen, tostring(pool)];\r\n  }\r\n}\r\n\r\n//\r\n// tostring()\r\n// Converts an array of charcodes to a string\r\n//\r\nfunction tostring(a) {\r\n  return String.fromCharCode.apply(0, a);\r\n}\r\n\r\n//\r\n// When seedrandom.js is loaded, we immediately mix a few bits\r\n// from the built-in RNG into the entropy pool.  Because we do\r\n// not want to intefere with determinstic PRNG state later,\r\n// seedrandom will not call Math.random on its own again after\r\n// initialization.\r\n//\r\nmixkey(Math.random(), pool);\r\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],537:[function(require,module,exports){\nfunction E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\n\n},{}],538:[function(require,module,exports){\n/**\n * typed-function\n *\n * Type checking for JavaScript functions\n *\n * https://github.com/josdejong/typed-function\n */\n'use strict';\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    // OldNode. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like OldNode.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.typed = factory();\n  }\n}(this, function () {\n  // factory function to create a new instance of typed-function\n  // TODO: allow passing configuration, types, tests via the factory function\n  function create() {\n    /**\n     * Get a type test function for a specific data type\n     * @param {string} name                   Name of a data type like 'number' or 'string'\n     * @returns {Function(obj: *) : boolean}  Returns a type testing function.\n     *                                        Throws an error for an unknown type.\n     */\n    function getTypeTest(name) {\n      var test;\n      for (var i = 0; i < typed.types.length; i++) {\n        var entry = typed.types[i];\n        if (entry.name === name) {\n          test = entry.test;\n          break;\n        }\n      }\n\n      if (!test) {\n        var hint;\n        for (i = 0; i < typed.types.length; i++) {\n          entry = typed.types[i];\n          if (entry.name.toLowerCase() == name.toLowerCase()) {\n            hint = entry.name;\n            break;\n          }\n        }\n\n        throw new Error('Unknown type \"' + name + '\"' +\n            (hint ? ('. Did you mean \"' + hint + '\"?') : ''));\n      }\n      return test;\n    }\n\n    /**\n     * Retrieve the function name from a set of functions, and check\n     * whether the name of all functions match (if given)\n     * @param {Array.<function>} fns\n     */\n    function getName (fns) {\n      var name = '';\n\n      for (var i = 0; i < fns.length; i++) {\n        var fn = fns[i];\n\n        // merge function name when this is a typed function\n        if (fn.signatures && fn.name != '') {\n          if (name == '') {\n            name = fn.name;\n          }\n          else if (name != fn.name) {\n            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');\n            err.data = {\n              actual: fn.name,\n              expected: name\n            };\n            throw err;\n          }\n        }\n      }\n\n      return name;\n    }\n\n    /**\n     * Create an ArgumentsError. Creates messages like:\n     *\n     *   Unexpected type of argument (expected: ..., actual: ..., index: ...)\n     *   Too few arguments (expected: ..., index: ...)\n     *   Too many arguments (expected: ..., actual: ...)\n     *\n     * @param {String} fn         Function name\n     * @param {number} argCount   Number of arguments\n     * @param {Number} index      Current argument index\n     * @param {*} actual          Current argument\n     * @param {string} [expected] An optional, comma separated string with\n     *                            expected types on given index\n     * @extends Error\n     */\n    function createError(fn, argCount, index, actual, expected) {\n      var actualType = getTypeOf(actual);\n      var _expected = expected ? expected.split(',') : null;\n      var _fn = (fn || 'unnamed');\n      var anyType = _expected && contains(_expected, 'any');\n      var message;\n      var data = {\n        fn: fn,\n        index: index,\n        actual: actual,\n        expected: _expected\n      };\n\n      if (_expected) {\n        if (argCount > index && !anyType) {\n          // unexpected type\n          message = 'Unexpected type of argument in function ' + _fn +\n              ' (expected: ' + _expected.join(' or ') + ', actual: ' + actualType + ', index: ' + index + ')';\n        }\n        else {\n          // too few arguments\n          message = 'Too few arguments in function ' + _fn +\n              ' (expected: ' + _expected.join(' or ') + ', index: ' + index + ')';\n        }\n      }\n      else {\n        // too many arguments\n        message = 'Too many arguments in function ' + _fn +\n            ' (expected: ' + index + ', actual: ' + argCount + ')'\n      }\n\n      var err = new TypeError(message);\n      err.data = data;\n      return err;\n    }\n\n    /**\n     * Collection with function references (local shortcuts to functions)\n     * @constructor\n     * @param {string} [name='refs']  Optional name for the refs, used to generate\n     *                                JavaScript code\n     */\n    function Refs(name) {\n      this.name = name || 'refs';\n      this.categories = {};\n    }\n\n    /**\n     * Add a function reference.\n     * @param {Function} fn\n     * @param {string} [category='fn']    A function category, like 'fn' or 'signature'\n     * @returns {string} Returns the function name, for example 'fn0' or 'signature2'\n     */\n    Refs.prototype.add = function (fn, category) {\n      var cat = category || 'fn';\n      if (!this.categories[cat]) this.categories[cat] = [];\n\n      var index = this.categories[cat].indexOf(fn);\n      if (index == -1) {\n        index = this.categories[cat].length;\n        this.categories[cat].push(fn);\n      }\n\n      return cat + index;\n    };\n\n    /**\n     * Create code lines for all function references\n     * @returns {string} Returns the code containing all function references\n     */\n    Refs.prototype.toCode = function () {\n      var code = [];\n      var path = this.name + '.categories';\n      var categories = this.categories;\n\n      for (var cat in categories) {\n        if (categories.hasOwnProperty(cat)) {\n          var category = categories[cat];\n\n          for (var i = 0; i < category.length; i++) {\n            code.push('var ' + cat + i + ' = ' + path + '[\\'' + cat + '\\'][' + i + '];');\n          }\n        }\n      }\n\n      return code.join('\\n');\n    };\n\n    /**\n     * A function parameter\n     * @param {string | string[] | Param} types    A parameter type like 'string',\n     *                                             'number | boolean'\n     * @param {boolean} [varArgs=false]            Variable arguments if true\n     * @constructor\n     */\n    function Param(types, varArgs) {\n      // parse the types, can be a string with types separated by pipe characters |\n      if (typeof types === 'string') {\n        // parse variable arguments operator (ellipses '...number')\n        var _types = types.trim();\n        var _varArgs = _types.substr(0, 3) === '...';\n        if (_varArgs) {\n          _types = _types.substr(3);\n        }\n        if (_types === '') {\n          this.types = ['any'];\n        }\n        else {\n          this.types = _types.split('|');\n          for (var i = 0; i < this.types.length; i++) {\n            this.types[i] = this.types[i].trim();\n          }\n        }\n      }\n      else if (Array.isArray(types)) {\n        this.types = types;\n      }\n      else if (types instanceof Param) {\n        return types.clone();\n      }\n      else {\n        throw new Error('String or Array expected');\n      }\n\n      // can hold a type to which to convert when handling this parameter\n      this.conversions = [];\n      // TODO: implement better API for conversions, be able to add conversions via constructor (support a new type Object?)\n\n      // variable arguments\n      this.varArgs = _varArgs || varArgs || false;\n\n      // check for any type arguments\n      this.anyType = this.types.indexOf('any') !== -1;\n    }\n\n    /**\n     * Order Params\n     * any type ('any') will be ordered last, and object as second last (as other\n     * types may be an object as well, like Array).\n     *\n     * @param {Param} a\n     * @param {Param} b\n     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.\n     */\n    Param.compare = function (a, b) {\n      // TODO: simplify parameter comparison, it's a mess\n      if (a.anyType) return 1;\n      if (b.anyType) return -1;\n\n      if (contains(a.types, 'Object')) return 1;\n      if (contains(b.types, 'Object')) return -1;\n\n      if (a.hasConversions()) {\n        if (b.hasConversions()) {\n          var i, ac, bc;\n\n          for (i = 0; i < a.conversions.length; i++) {\n            if (a.conversions[i] !== undefined) {\n              ac = a.conversions[i];\n              break;\n            }\n          }\n\n          for (i = 0; i < b.conversions.length; i++) {\n            if (b.conversions[i] !== undefined) {\n              bc = b.conversions[i];\n              break;\n            }\n          }\n\n          return typed.conversions.indexOf(ac) - typed.conversions.indexOf(bc);\n        }\n        else {\n          return 1;\n        }\n      }\n      else {\n        if (b.hasConversions()) {\n          return -1;\n        }\n        else {\n          // both params have no conversions\n          var ai, bi;\n\n          for (i = 0; i < typed.types.length; i++) {\n            if (typed.types[i].name === a.types[0]) {\n              ai = i;\n              break;\n            }\n          }\n\n          for (i = 0; i < typed.types.length; i++) {\n            if (typed.types[i].name === b.types[0]) {\n              bi = i;\n              break;\n            }\n          }\n\n          return ai - bi;\n        }\n      }\n    };\n\n    /**\n     * Test whether this parameters types overlap an other parameters types.\n     * Will not match ['any'] with ['number']\n     * @param {Param} other\n     * @return {boolean} Returns true when there are overlapping types\n     */\n    Param.prototype.overlapping = function (other) {\n      for (var i = 0; i < this.types.length; i++) {\n        if (contains(other.types, this.types[i])) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    /**\n     * Test whether this parameters types matches an other parameters types.\n     * When any of the two parameters contains `any`, true is returned\n     * @param {Param} other\n     * @return {boolean} Returns true when there are matching types\n     */\n    Param.prototype.matches = function (other) {\n      return this.anyType || other.anyType || this.overlapping(other);\n    };\n\n    /**\n     * Create a clone of this param\n     * @returns {Param} Returns a cloned version of this param\n     */\n    Param.prototype.clone = function () {\n      var param = new Param(this.types.slice(), this.varArgs);\n      param.conversions = this.conversions.slice();\n      return param;\n    };\n\n    /**\n     * Test whether this parameter contains conversions\n     * @returns {boolean} Returns true if the parameter contains one or\n     *                    multiple conversions.\n     */\n    Param.prototype.hasConversions = function () {\n      return this.conversions.length > 0;\n    };\n\n    /**\n     * Tests whether this parameters contains any of the provided types\n     * @param {Object} types  A Map with types, like {'number': true}\n     * @returns {boolean}     Returns true when the parameter contains any\n     *                        of the provided types\n     */\n    Param.prototype.contains = function (types) {\n      for (var i = 0; i < this.types.length; i++) {\n        if (types[this.types[i]]) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    /**\n     * Return a string representation of this params types, like 'string' or\n     * 'number | boolean' or '...number'\n     * @param {boolean} [toConversion]   If true, the returned types string\n     *                                   contains the types where the parameter\n     *                                   will convert to. If false (default)\n     *                                   the \"from\" types are returned\n     * @returns {string}\n     */\n    Param.prototype.toString = function (toConversion) {\n      var types = [];\n      var keys = {};\n\n      for (var i = 0; i < this.types.length; i++) {\n        var conversion = this.conversions[i];\n        var type = toConversion && conversion ? conversion.to : this.types[i];\n        if (!(type in keys)) {\n          keys[type] = true;\n          types.push(type);\n        }\n      }\n\n      return (this.varArgs ? '...' : '') + types.join('|');\n    };\n\n    /**\n     * A function signature\n     * @param {string | string[] | Param[]} params\n     *                         Array with the type(s) of each parameter,\n     *                         or a comma separated string with types\n     * @param {Function} fn    The actual function\n     * @constructor\n     */\n    function Signature(params, fn) {\n      var _params;\n      if (typeof params === 'string') {\n        _params = (params !== '') ? params.split(',') : [];\n      }\n      else if (Array.isArray(params)) {\n        _params = params;\n      }\n      else {\n        throw new Error('string or Array expected');\n      }\n\n      this.params = new Array(_params.length);\n      this.anyType = false;\n      this.varArgs = false;\n      for (var i = 0; i < _params.length; i++) {\n        var param = new Param(_params[i]);\n        this.params[i] = param;\n        if (param.anyType) {\n          this.anyType = true;\n        }\n        if (i === _params.length - 1) {\n          // the last argument\n          this.varArgs = param.varArgs;\n        }\n        else {\n          // non-last argument\n          if (param.varArgs) {\n            throw new SyntaxError('Unexpected variable arguments operator \"...\"');\n          }\n        }\n      }\n\n      this.fn = fn;\n    }\n\n    /**\n     * Create a clone of this signature\n     * @returns {Signature} Returns a cloned version of this signature\n     */\n    Signature.prototype.clone = function () {\n      return new Signature(this.params.slice(), this.fn);\n    };\n\n    /**\n     * Expand a signature: split params with union types in separate signatures\n     * For example split a Signature \"string | number\" into two signatures.\n     * @return {Signature[]} Returns an array with signatures (at least one)\n     */\n    Signature.prototype.expand = function () {\n      var signatures = [];\n\n      function recurse(signature, path) {\n        if (path.length < signature.params.length) {\n          var i, newParam, conversion;\n\n          var param = signature.params[path.length];\n          if (param.varArgs) {\n            // a variable argument. do not split the types in the parameter\n            newParam = param.clone();\n\n            // add conversions to the parameter\n            // recurse for all conversions\n            for (i = 0; i < typed.conversions.length; i++) {\n              conversion = typed.conversions[i];\n              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {\n                var j = newParam.types.length;\n                newParam.types[j] = conversion.from;\n                newParam.conversions[j] = conversion;\n              }\n            }\n\n            recurse(signature, path.concat(newParam));\n          }\n          else {\n            // split each type in the parameter\n            for (i = 0; i < param.types.length; i++) {\n              recurse(signature, path.concat(new Param(param.types[i])));\n            }\n\n            // recurse for all conversions\n            for (i = 0; i < typed.conversions.length; i++) {\n              conversion = typed.conversions[i];\n              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {\n                newParam = new Param(conversion.from);\n                newParam.conversions[0] = conversion;\n                recurse(signature, path.concat(newParam));\n              }\n            }\n          }\n        }\n        else {\n          signatures.push(new Signature(path, signature.fn));\n        }\n      }\n\n      recurse(this, []);\n\n      return signatures;\n    };\n\n    /**\n     * Compare two signatures.\n     *\n     * When two params are equal and contain conversions, they will be sorted\n     * by lowest index of the first conversions.\n     *\n     * @param {Signature} a\n     * @param {Signature} b\n     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.\n     */\n    Signature.compare = function (a, b) {\n      if (a.params.length > b.params.length) return 1;\n      if (a.params.length < b.params.length) return -1;\n\n      // count the number of conversions\n      var i;\n      var len = a.params.length; // a and b have equal amount of params\n      var ac = 0;\n      var bc = 0;\n      for (i = 0; i < len; i++) {\n        if (a.params[i].hasConversions()) ac++;\n        if (b.params[i].hasConversions()) bc++;\n      }\n\n      if (ac > bc) return 1;\n      if (ac < bc) return -1;\n\n      // compare the order per parameter\n      for (i = 0; i < a.params.length; i++) {\n        var cmp = Param.compare(a.params[i], b.params[i]);\n        if (cmp !== 0) {\n          return cmp;\n        }\n      }\n\n      return 0;\n    };\n\n    /**\n     * Test whether any of the signatures parameters has conversions\n     * @return {boolean} Returns true when any of the parameters contains\n     *                   conversions.\n     */\n    Signature.prototype.hasConversions = function () {\n      for (var i = 0; i < this.params.length; i++) {\n        if (this.params[i].hasConversions()) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    /**\n     * Test whether this signature should be ignored.\n     * Checks whether any of the parameters contains a type listed in\n     * typed.ignore\n     * @return {boolean} Returns true when the signature should be ignored\n     */\n    Signature.prototype.ignore = function () {\n      // create a map with ignored types\n      var types = {};\n      for (var i = 0; i < typed.ignore.length; i++) {\n        types[typed.ignore[i]] = true;\n      }\n\n      // test whether any of the parameters contains this type\n      for (i = 0; i < this.params.length; i++) {\n        if (this.params[i].contains(types)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    /**\n     * Test whether the path of this signature matches a given path.\n     * @param {Param[]} params\n     */\n    Signature.prototype.paramsStartWith = function (params) {\n      if (params.length === 0) {\n        return true;\n      }\n\n      var aLast = last(this.params);\n      var bLast = last(params);\n\n      for (var i = 0; i < params.length; i++) {\n        var a = this.params[i] || (aLast.varArgs ? aLast: null);\n        var b = params[i]      || (bLast.varArgs ? bLast: null);\n\n        if (!a ||  !b || !a.matches(b)) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    /**\n     * Generate the code to invoke this signature\n     * @param {Refs} refs\n     * @param {string} prefix\n     * @returns {string} Returns code\n     */\n    Signature.prototype.toCode = function (refs, prefix) {\n      var code = [];\n\n      var args = new Array(this.params.length);\n      for (var i = 0; i < this.params.length; i++) {\n        var param = this.params[i];\n        var conversion = param.conversions[0];\n        if (param.varArgs) {\n          args[i] = 'varArgs';\n        }\n        else if (conversion) {\n          args[i] = refs.add(conversion.convert, 'convert') + '(arg' + i + ')';\n        }\n        else {\n          args[i] = 'arg' + i;\n        }\n      }\n\n      var ref = this.fn ? refs.add(this.fn, 'signature') : undefined;\n      if (ref) {\n        return prefix + 'return ' + ref + '(' + args.join(', ') + '); // signature: ' + this.params.join(', ');\n      }\n\n      return code.join('\\n');\n    };\n\n    /**\n     * Return a string representation of the signature\n     * @returns {string}\n     */\n    Signature.prototype.toString = function () {\n      return this.params.join(', ');\n    };\n\n    /**\n     * A group of signatures with the same parameter on given index\n     * @param {Param[]} path\n     * @param {Signature} [signature]\n     * @param {Node[]} childs\n     * @param {boolean} [fallThrough=false]\n     * @constructor\n     */\n    function Node(path, signature, childs, fallThrough) {\n      this.path = path || [];\n      this.param = path[path.length - 1] || null;\n      this.signature = signature || null;\n      this.childs = childs || [];\n      this.fallThrough = fallThrough || false;\n    }\n\n    /**\n     * Generate code for this group of signatures\n     * @param {Refs} refs\n     * @param {string} prefix\n     * @returns {string} Returns the code as string\n     */\n    Node.prototype.toCode = function (refs, prefix) {\n      // TODO: split this function in multiple functions, it's too large\n      var code = [];\n\n      if (this.param) {\n        var index = this.path.length - 1;\n        var conversion = this.param.conversions[0];\n        var comment = '// type: ' + (conversion ?\n                (conversion.from + ' (convert to ' + conversion.to + ')') :\n                this.param);\n\n        // non-root node (path is non-empty)\n        if (this.param.varArgs) {\n          if (this.param.anyType) {\n            // variable arguments with any type\n            code.push(prefix + 'if (arguments.length > ' + index + ') {');\n            code.push(prefix + '  var varArgs = [];');\n            code.push(prefix + '  for (var i = ' + index + '; i < arguments.length; i++) {');\n            code.push(prefix + '    varArgs.push(arguments[i]);');\n            code.push(prefix + '  }');\n            code.push(this.signature.toCode(refs, prefix + '  '));\n            code.push(prefix + '}');\n          }\n          else {\n            // variable arguments with a fixed type\n            var getTests = function (types, arg) {\n              var tests = [];\n              for (var i = 0; i < types.length; i++) {\n                tests[i] = refs.add(getTypeTest(types[i]), 'test') + '(' + arg + ')';\n              }\n              return tests.join(' || ');\n            }.bind(this);\n\n            var allTypes = this.param.types;\n            var exactTypes = [];\n            for (var i = 0; i < allTypes.length; i++) {\n              if (this.param.conversions[i] === undefined) {\n                exactTypes.push(allTypes[i]);\n              }\n            }\n\n            code.push(prefix + 'if (' + getTests(allTypes, 'arg' + index) + ') { ' + comment);\n            code.push(prefix + '  var varArgs = [arg' + index + '];');\n            code.push(prefix + '  for (var i = ' + (index + 1) + '; i < arguments.length; i++) {');\n            code.push(prefix + '    if (' + getTests(exactTypes, 'arguments[i]') + ') {');\n            code.push(prefix + '      varArgs.push(arguments[i]);');\n\n            for (var i = 0; i < allTypes.length; i++) {\n              var conversion_i = this.param.conversions[i];\n              if (conversion_i) {\n                var test = refs.add(getTypeTest(allTypes[i]), 'test');\n                var convert = refs.add(conversion_i.convert, 'convert');\n                code.push(prefix + '    }');\n                code.push(prefix + '    else if (' + test + '(arguments[i])) {');\n                code.push(prefix + '      varArgs.push(' + convert + '(arguments[i]));');\n              }\n            }\n            code.push(prefix + '    } else {');\n            code.push(prefix + '      throw createError(name, arguments.length, i, arguments[i], \\'' + exactTypes.join(',') + '\\');');\n            code.push(prefix + '    }');\n            code.push(prefix + '  }');\n            code.push(this.signature.toCode(refs, prefix + '  '));\n            code.push(prefix + '}');\n          }\n        }\n        else {\n          if (this.param.anyType) {\n            // any type\n            code.push(prefix + '// type: any');\n            code.push(this._innerCode(refs, prefix));\n          }\n          else {\n            // regular type\n            var type = this.param.types[0];\n            var test = type !== 'any' ? refs.add(getTypeTest(type), 'test') : null;\n\n            code.push(prefix + 'if (' + test + '(arg' + index + ')) { ' + comment);\n            code.push(this._innerCode(refs, prefix + '  '));\n            code.push(prefix + '}');\n          }\n        }\n      }\n      else {\n        // root node (path is empty)\n        code.push(this._innerCode(refs, prefix));\n      }\n\n      return code.join('\\n');\n    };\n\n    /**\n     * Generate inner code for this group of signatures.\n     * This is a helper function of Node.prototype.toCode\n     * @param {Refs} refs\n     * @param {string} prefix\n     * @returns {string} Returns the inner code as string\n     * @private\n     */\n    Node.prototype._innerCode = function (refs, prefix) {\n      var code = [];\n      var i;\n\n      if (this.signature) {\n        code.push(prefix + 'if (arguments.length === ' + this.path.length + ') {');\n        code.push(this.signature.toCode(refs, prefix + '  '));\n        code.push(prefix + '}');\n      }\n\n      for (i = 0; i < this.childs.length; i++) {\n        code.push(this.childs[i].toCode(refs, prefix));\n      }\n\n      // TODO: shouldn't the this.param.anyType check be redundant\n      if (!this.fallThrough || (this.param && this.param.anyType)) {\n        var exceptions = this._exceptions(refs, prefix);\n        if (exceptions) {\n          code.push(exceptions);\n        }\n      }\n\n      return code.join('\\n');\n    };\n\n\n    /**\n     * Generate code to throw exceptions\n     * @param {Refs} refs\n     * @param {string} prefix\n     * @returns {string} Returns the inner code as string\n     * @private\n     */\n    Node.prototype._exceptions = function (refs, prefix) {\n      var index = this.path.length;\n\n      if (this.childs.length === 0) {\n        // TODO: can this condition be simplified? (we have a fall-through here)\n        return [\n          prefix + 'if (arguments.length > ' + index + ') {',\n          prefix + '  throw createError(name, arguments.length, ' + index + ', arguments[' + index + ']);',\n          prefix + '}'\n        ].join('\\n');\n      }\n      else {\n        var keys = {};\n        var types = [];\n\n        for (var i = 0; i < this.childs.length; i++) {\n          var node = this.childs[i];\n          if (node.param) {\n            for (var j = 0; j < node.param.types.length; j++) {\n              var type = node.param.types[j];\n              if (!(type in keys) && !node.param.conversions[j]) {\n                keys[type] = true;\n                types.push(type);\n              }\n            }\n          }\n        }\n\n        return prefix + 'throw createError(name, arguments.length, ' + index + ', arguments[' + index + '], \\'' + types.join(',') + '\\');';\n      }\n    };\n\n    /**\n     * Split all raw signatures into an array with expanded Signatures\n     * @param {Object.<string, Function>} rawSignatures\n     * @return {Signature[]} Returns an array with expanded signatures\n     */\n    function parseSignatures(rawSignatures) {\n      // FIXME: need to have deterministic ordering of signatures, do not create via object\n      var signature;\n      var keys = {};\n      var signatures = [];\n      var i;\n\n      for (var types in rawSignatures) {\n        if (rawSignatures.hasOwnProperty(types)) {\n          var fn = rawSignatures[types];\n          signature = new Signature(types, fn);\n\n          if (signature.ignore()) {\n            continue;\n          }\n\n          var expanded = signature.expand();\n\n          for (i = 0; i < expanded.length; i++) {\n            var signature_i = expanded[i];\n            var key = signature_i.toString();\n            var existing = keys[key];\n            if (!existing) {\n              keys[key] = signature_i;\n            }\n            else {\n              var cmp = Signature.compare(signature_i, existing);\n              if (cmp < 0) {\n                // override if sorted first\n                keys[key] = signature_i;\n              }\n              else if (cmp === 0) {\n                throw new Error('Signature \"' + key + '\" is defined twice');\n              }\n              // else: just ignore\n            }\n          }\n        }\n      }\n\n      // convert from map to array\n      for (key in keys) {\n        if (keys.hasOwnProperty(key)) {\n          signatures.push(keys[key]);\n        }\n      }\n\n      // order the signatures\n      signatures.sort(function (a, b) {\n        return Signature.compare(a, b);\n      });\n\n      // filter redundant conversions from signatures with varArgs\n      // TODO: simplify this loop or move it to a separate function\n      for (i = 0; i < signatures.length; i++) {\n        signature = signatures[i];\n\n        if (signature.varArgs) {\n          var index = signature.params.length - 1;\n          var param = signature.params[index];\n\n          var t = 0;\n          while (t < param.types.length) {\n            if (param.conversions[t]) {\n              var type = param.types[t];\n\n              for (var j = 0; j < signatures.length; j++) {\n                var other = signatures[j];\n                var p = other.params[index];\n\n                if (other !== signature &&\n                    p &&\n                    contains(p.types, type) && !p.conversions[index]) {\n                  // this (conversion) type already exists, remove it\n                  param.types.splice(t, 1);\n                  param.conversions.splice(t, 1);\n                  t--;\n                  break;\n                }\n              }\n            }\n            t++;\n          }\n        }\n      }\n\n      return signatures;\n    }\n\n    /**\n     * Filter all any type signatures\n     * @param {Signature[]} signatures\n     * @return {Signature[]} Returns only any type signatures\n     */\n    function filterAnyTypeSignatures (signatures) {\n      var filtered = [];\n\n      for (var i = 0; i < signatures.length; i++) {\n        if (signatures[i].anyType) {\n          filtered.push(signatures[i]);\n        }\n      }\n\n      return filtered;\n    }\n\n    /**\n     * create a map with normalized signatures as key and the function as value\n     * @param {Signature[]} signatures   An array with split signatures\n     * @return {Object.<string, Function>} Returns a map with normalized\n     *                                     signatures as key, and the function\n     *                                     as value.\n     */\n    function mapSignatures(signatures) {\n      var normalized = {};\n\n      for (var i = 0; i < signatures.length; i++) {\n        var signature = signatures[i];\n        if (signature.fn && !signature.hasConversions()) {\n          var params = signature.params.join(',');\n          normalized[params] = signature.fn;\n        }\n      }\n\n      return normalized;\n    }\n\n    /**\n     * Parse signatures recursively in a node tree.\n     * @param {Signature[]} signatures  Array with expanded signatures\n     * @param {Param[]} path            Traversed path of parameter types\n     * @param {Signature[]} anys\n     * @return {Node}                   Returns a node tree\n     */\n    function parseTree(signatures, path, anys) {\n      var i, signature;\n      var index = path.length;\n      var nodeSignature;\n\n      var filtered = [];\n      for (i = 0; i < signatures.length; i++) {\n        signature = signatures[i];\n\n        // filter the first signature with the correct number of params\n        if (signature.params.length === index && !nodeSignature) {\n          nodeSignature = signature;\n        }\n\n        if (signature.params[index] != undefined) {\n          filtered.push(signature);\n        }\n      }\n\n      // sort the filtered signatures by param\n      filtered.sort(function (a, b) {\n        return Param.compare(a.params[index], b.params[index]);\n      });\n\n      // recurse over the signatures\n      var entries = [];\n      for (i = 0; i < filtered.length; i++) {\n        signature = filtered[i];\n        // group signatures with the same param at current index\n        var param = signature.params[index];\n\n        // TODO: replace the next filter loop\n        var existing = entries.filter(function (entry) {\n          return entry.param.overlapping(param);\n        })[0];\n\n        //var existing;\n        //for (var j = 0; j < entries.length; j++) {\n        //  if (entries[j].param.overlapping(param)) {\n        //    existing = entries[j];\n        //    break;\n        //  }\n        //}\n\n        if (existing) {\n          if (existing.param.varArgs) {\n            throw new Error('Conflicting types \"' + existing.param + '\" and \"' + param + '\"');\n          }\n          existing.signatures.push(signature);\n        }\n        else {\n          entries.push({\n            param: param,\n            signatures: [signature]\n          });\n        }\n      }\n\n      // find all any type signature that can still match our current path\n      var matchingAnys = [];\n      for (i = 0; i < anys.length; i++) {\n        if (anys[i].paramsStartWith(path)) {\n          matchingAnys.push(anys[i]);\n        }\n      }\n\n      // see if there are any type signatures that don't match any of the\n      // signatures that we have in our tree, i.e. we have alternative\n      // matching signature(s) outside of our current tree and we should\n      // fall through to them instead of throwing an exception\n      var fallThrough = false;\n      for (i = 0; i < matchingAnys.length; i++) {\n        if (!contains(signatures, matchingAnys[i])) {\n          fallThrough = true;\n          break;\n        }\n      }\n\n      // parse the childs\n      var childs = new Array(entries.length);\n      for (i = 0; i < entries.length; i++) {\n        var entry = entries[i];\n        childs[i] = parseTree(entry.signatures, path.concat(entry.param), matchingAnys)\n      }\n\n      return new Node(path, nodeSignature, childs, fallThrough);\n    }\n\n    /**\n     * Generate an array like ['arg0', 'arg1', 'arg2']\n     * @param {number} count Number of arguments to generate\n     * @returns {Array} Returns an array with argument names\n     */\n    function getArgs(count) {\n      // create an array with all argument names\n      var args = [];\n      for (var i = 0; i < count; i++) {\n        args[i] = 'arg' + i;\n      }\n\n      return args;\n    }\n\n    /**\n     * Compose a function from sub-functions each handling a single type signature.\n     * Signatures:\n     *   typed(signature: string, fn: function)\n     *   typed(name: string, signature: string, fn: function)\n     *   typed(signatures: Object.<string, function>)\n     *   typed(name: string, signatures: Object.<string, function>)\n     *\n     * @param {string | null} name\n     * @param {Object.<string, Function>} signatures\n     * @return {Function} Returns the typed function\n     * @private\n     */\n    function _typed(name, signatures) {\n      var refs = new Refs();\n\n      // parse signatures, expand them\n      var _signatures = parseSignatures(signatures);\n      if (_signatures.length == 0) {\n        throw new Error('No signatures provided');\n      }\n\n      // filter all any type signatures\n      var anys = filterAnyTypeSignatures(_signatures);\n\n      // parse signatures into a node tree\n      var node = parseTree(_signatures, [], anys);\n\n      //var util = require('util');\n      //console.log('ROOT');\n      //console.log(util.inspect(node, { depth: null }));\n\n      // generate code for the typed function\n      var code = [];\n      var _name = name || '';\n      var _args = getArgs(maxParams(_signatures));\n      code.push('function ' + _name + '(' + _args.join(', ') + ') {');\n      code.push('  \"use strict\";');\n      code.push('  var name = \\'' + _name + '\\';');\n      code.push(node.toCode(refs, '  ', false));\n      code.push('}');\n\n      // generate body for the factory function\n      var body = [\n        refs.toCode(),\n        'return ' + code.join('\\n')\n      ].join('\\n');\n\n      // evaluate the JavaScript code and attach function references\n      var factory = (new Function(refs.name, 'createError', body));\n      var fn = factory(refs, createError);\n\n      //console.log('FN\\n' + fn.toString()); // TODO: cleanup\n\n      // attach the signatures with sub-functions to the constructed function\n      fn.signatures = mapSignatures(_signatures);\n\n      return fn;\n    }\n\n    /**\n     * Calculate the maximum number of parameters in givens signatures\n     * @param {Signature[]} signatures\n     * @returns {number} The maximum number of parameters\n     */\n    function maxParams(signatures) {\n      var max = 0;\n\n      for (var i = 0; i < signatures.length; i++) {\n        var len = signatures[i].params.length;\n        if (len > max) {\n          max = len;\n        }\n      }\n\n      return max;\n    }\n\n    /**\n     * Get the type of a value\n     * @param {*} x\n     * @returns {string} Returns a string with the type of value\n     */\n    function getTypeOf(x) {\n      var obj;\n\n      for (var i = 0; i < typed.types.length; i++) {\n        var entry = typed.types[i];\n\n        if (entry.name === 'Object') {\n          // Array and Date are also Object, so test for Object afterwards\n          obj = entry;\n        }\n        else {\n          if (entry.test(x)) return entry.name;\n        }\n      }\n\n      // at last, test whether an object\n      if (obj && obj.test(x)) return obj.name;\n\n      return 'unknown';\n    }\n\n    /**\n     * Test whether an array contains some item\n     * @param {Array} array\n     * @param {*} item\n     * @return {boolean} Returns true if array contains item, false if not.\n     */\n    function contains(array, item) {\n      return array.indexOf(item) !== -1;\n    }\n\n    /**\n     * Returns the last item in the array\n     * @param {Array} array\n     * @return {*} item\n     */\n    function last (array) {\n      return array[array.length - 1];\n    }\n\n    // data type tests\n    var types = [\n      { name: 'number',    test: function (x) { return typeof x === 'number' } },\n      { name: 'string',    test: function (x) { return typeof x === 'string' } },\n      { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },\n      { name: 'Function',  test: function (x) { return typeof x === 'function'} },\n      { name: 'Array',     test: Array.isArray },\n      { name: 'Date',      test: function (x) { return x instanceof Date } },\n      { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },\n      { name: 'Object',    test: function (x) { return typeof x === 'object' } },\n      { name: 'null',      test: function (x) { return x === null } },\n      { name: 'undefined', test: function (x) { return x === undefined } }\n    ];\n\n    // configuration\n    var config = {};\n\n    // type conversions. Order is important\n    var conversions = [];\n\n    // types to be ignored\n    var ignore = [];\n\n    // temporary object for holding types and conversions, for constructing\n    // the `typed` function itself\n    // TODO: find a more elegant solution for this\n    var typed = {\n      config: config,\n      types: types,\n      conversions: conversions,\n      ignore: ignore\n    };\n\n    /**\n     * Construct the typed function itself with various signatures\n     *\n     * Signatures:\n     *\n     *   typed(signatures: Object.<string, function>)\n     *   typed(name: string, signatures: Object.<string, function>)\n     */\n    typed = _typed('typed', {\n      'Object': function (signatures) {\n        var fns = [];\n        for (var signature in signatures) {\n          if (signatures.hasOwnProperty(signature)) {\n            fns.push(signatures[signature]);\n          }\n        }\n        var name = getName(fns);\n\n        return _typed(name, signatures);\n      },\n      'string, Object': _typed,\n      // TODO: add a signature 'Array.<function>'\n      '...Function': function (fns) {\n        var err;\n        var name = getName(fns);\n        var signatures = {};\n\n        for (var i = 0; i < fns.length; i++) {\n          var fn = fns[i];\n\n          // test whether this is a typed-function\n          if (!(typeof fn.signatures === 'object')) {\n            err = new TypeError('Function is no typed-function (index: ' + i + ')');\n            err.data = {index: i};\n            throw err;\n          }\n\n          // merge the signatures\n          for (var signature in fn.signatures) {\n            if (fn.signatures.hasOwnProperty(signature)) {\n              if (signatures.hasOwnProperty(signature)) {\n                if (fn.signatures[signature] !== signatures[signature]) {\n                  err = new Error('Signature \"' + signature + '\" is defined twice');\n                  err.data = {signature: signature};\n                  throw err;\n                }\n                // else: both signatures point to the same function, that's fine\n              }\n              else {\n                signatures[signature] = fn.signatures[signature];\n              }\n            }\n          }\n        }\n\n        return _typed(name, signatures);\n      }\n    });\n\n    /**\n     * Find a specific signature from a (composed) typed function, for\n     * example:\n     *\n     *   typed.find(fn, ['number', 'string'])\n     *   typed.find(fn, 'number, string')\n     *\n     * Function find only only works for exact matches.\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature   Signature to be found, can be\n     *                                        an array or a comma separated string.\n     * @return {Function}                     Returns the matching signature, or\n     *                                        throws an errror when no signature\n     *                                        is found.\n     */\n    function find (fn, signature) {\n      if (!fn.signatures) {\n        throw new TypeError('Function is no typed-function');\n      }\n\n      // normalize input\n      var arr;\n      if (typeof signature === 'string') {\n        arr = signature.split(',');\n        for (var i = 0; i < arr.length; i++) {\n          arr[i] = arr[i].trim();\n        }\n      }\n      else if (Array.isArray(signature)) {\n        arr = signature;\n      }\n      else {\n        throw new TypeError('String array or a comma separated string expected');\n      }\n\n      var str = arr.join(',');\n\n      // find an exact match\n      var match = fn.signatures[str];\n      if (match) {\n        return match;\n      }\n\n      // TODO: extend find to match non-exact signatures\n\n      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');\n    }\n\n    /**\n     * Convert a given value to another data type.\n     * @param {*} value\n     * @param {string} type\n     */\n    function convert (value, type) {\n      var from = getTypeOf(value);\n\n      // check conversion is needed\n      if (type === from) {\n        return value;\n      }\n\n      for (var i = 0; i < typed.conversions.length; i++) {\n        var conversion = typed.conversions[i];\n        if (conversion.from === from && conversion.to === type) {\n          return conversion.convert(value);\n        }\n      }\n\n      throw new Error('Cannot convert from ' + from + ' to ' + type);\n    }\n\n    // attach types and conversions to the final `typed` function\n    typed.config = config;\n    typed.types = types;\n    typed.conversions = conversions;\n    typed.ignore = ignore;\n    typed.create = create;\n    typed.find = find;\n    typed.convert = convert;\n\n    // add a type\n    typed.addType = function (type) {\n      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {\n        throw new TypeError('Object with properties {name: string, test: function} expected');\n      }\n\n      typed.types.push(type);\n    };\n\n    // add a conversion\n    typed.addConversion = function (conversion) {\n      if (!conversion\n          || typeof conversion.from !== 'string'\n          || typeof conversion.to !== 'string'\n          || typeof conversion.convert !== 'function') {\n        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n      }\n\n      typed.conversions.push(conversion);\n    };\n\n    return typed;\n  }\n\n  return create();\n}));\n\n},{}],539:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ExpressionEngine = undefined;\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nvar _sdUtils = require(\"sd-utils\");\n\nvar _mathjs = require(\"./mathjs\");\n\nvar math = _interopRequireWildcard(_mathjs);\n\nvar _sdRandom = require(\"sd-random\");\n\nvar sdRandom = _interopRequireWildcard(_sdRandom);\n\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {};if (obj != null) {\n            for (var key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n        }newObj.default = obj;return newObj;\n    }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\n//Import random functions from sd-random to math.js\nsdRandom.functionNameList.forEach(function (fnName) {\n    var importFn = {};\n    importFn[fnName] = sdRandom[fnName];\n    try {\n        math.import(importFn);\n    } catch (e) {\n        _sdUtils.log.error(e);\n    }\n});\n\nvar ExpressionEngine = exports.ExpressionEngine = function () {\n    function ExpressionEngine() {\n        _classCallCheck(this, ExpressionEngine);\n\n        this.parser = math.parser();\n    }\n\n    _createClass(ExpressionEngine, [{\n        key: \"setScope\",\n        value: function setScope(scope) {\n            this.parser.scope = scope;\n        }\n    }, {\n        key: \"eval\",\n        value: function _eval(expr) {\n            var asNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n            var scope = arguments[2];\n\n            return ExpressionEngine.doEval(expr, asNumber, scope, this.parser);\n        }\n    }, {\n        key: \"validate\",\n        value: function validate(expr, scope) {\n            var compileOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            if (!scope) {\n                scope = this.parser.scope;\n            }\n            return ExpressionEngine.validate(expr, scope, compileOnly);\n        }\n    }, {\n        key: \"serialize\",\n        value: function serialize(v) {\n            return ExpressionEngine.toNumber(v).toFraction(true);\n        }\n    }, {\n        key: \"getJsonReviver\",\n        value: function getJsonReviver() {\n            return math.json.reviver;\n        }\n    }, {\n        key: \"getJsonReplacer\",\n        value: function getJsonReplacer() {\n            var self = this;\n            return function (k, v) {\n                if (v !== null && v !== undefined && ExpressionEngine.isExpressionObject(v)) {\n                    try {\n                        return self.serialize(v);\n                    } catch (e) {\n                        return v;\n                    }\n                }\n                return v;\n            };\n        }\n    }], [{\n        key: \"eval\",\n        value: function _eval(expr) {\n            var asNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n            var scope = arguments[2];\n\n            return ExpressionEngine.doEval(expr, asNumber, scope, ExpressionEngine.staticParser);\n        }\n    }, {\n        key: \"doEval\",\n        value: function doEval(expr, asNumber, scope, parser) {\n            _sdUtils.log.trace('eval: ' + expr);\n            expr += \"\";\n            expr = expr.trim();\n            if (asNumber) {\n                try {\n                    return ExpressionEngine.toNumber(expr);\n                } catch (e) {\n                    //   Left empty intentionally\n                }\n            }\n\n            var prevScope = parser.scope;\n\n            parser.scope = scope || {};\n\n            var ev = parser.eval(expr + \"\");\n            parser.scope = prevScope;\n            if (!asNumber) {\n                return ev;\n            }\n            return ExpressionEngine.toNumber(ev);\n        }\n    }, {\n        key: \"isHash\",\n        value: function isHash(expr) {\n            return expr && _sdUtils.Utils.isString(expr) && expr.trim() === '#';\n        }\n    }, {\n        key: \"hasAssignmentExpression\",\n        value: function hasAssignmentExpression(expr) {\n            return _sdUtils.Utils.isString(expr) && expr.indexOf('=') !== -1;\n        }\n    }, {\n        key: \"add\",\n        value: function add(a, b) {\n            return math.add(ExpressionEngine.toNumber(a), ExpressionEngine.toNumber(b));\n        }\n    }, {\n        key: \"subtract\",\n        value: function subtract(a, b) {\n            return math.subtract(ExpressionEngine.toNumber(a), ExpressionEngine.toNumber(b));\n        }\n    }, {\n        key: \"divide\",\n        value: function divide(a, b) {\n            return math.divide(ExpressionEngine.toNumber(a), ExpressionEngine.toNumber(b));\n        }\n    }, {\n        key: \"multiply\",\n        value: function multiply(a, b) {\n            return math.multiply(ExpressionEngine.toNumber(a), ExpressionEngine.toNumber(b));\n        }\n    }, {\n        key: \"round\",\n        value: function round(a, places) {\n            return ExpressionEngine.toNumber(a).round(places);\n        }\n    }, {\n        key: \"toNumber\",\n        value: function toNumber(a) {\n            var parsed = parseFloat(a);\n            if (parsed === Infinity || parsed === -Infinity) {\n                return parsed;\n            }\n\n            return math.fraction(a);\n        }\n    }, {\n        key: \"max\",\n        value: function max() {\n            return math.max.apply(math, arguments);\n        }\n    }, {\n        key: \"min\",\n        value: function min() {\n            return math.min.apply(math, arguments);\n        }\n    }, {\n        key: \"mad\",\n        value: function mad() {\n            return math.mad.apply(math, arguments);\n        }\n    }, {\n        key: \"mean\",\n        value: function mean() {\n            return math.mean.apply(math, arguments);\n        }\n    }, {\n        key: \"median\",\n        value: function median() {\n            return math.median.apply(math, arguments);\n        }\n    }, {\n        key: \"std\",\n        value: function std() {\n            return math.std.apply(math, arguments);\n        }\n    }, {\n        key: \"compare\",\n        value: function compare(a, b) {\n            a = ExpressionEngine.toNumber(a);\n            b = ExpressionEngine.toNumber(b);\n            if (a != b) {\n                if (a == -Infinity) {\n                    return -1;\n                }\n                if (a == Infinity) {\n                    return 1;\n                }\n                if (b == -Infinity) {\n                    return 1;\n                }\n                if (b == Infinity) {\n                    return -1;\n                }\n            } else {\n                return 0;\n            }\n\n            return math.compare(a, b);\n        }\n    }, {\n        key: \"validate\",\n        value: function validate(expr, scope) {\n            var compileOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            if (expr === null || expr === undefined) {\n                return false;\n            }\n\n            try {\n                expr += \"\";\n                expr = expr.trim();\n                var c = math.compile(expr);\n\n                if (compileOnly) {\n                    return true;\n                }\n\n                var e = c.eval(scope);\n                return _sdUtils.Utils.isNumeric(e);\n            } catch (e) {\n                return false;\n            }\n        }\n    }, {\n        key: \"isExpressionObject\",\n        value: function isExpressionObject(v) {\n            return v && !!v.mathjs;\n        }\n    }, {\n        key: \"toFloat\",\n        value: function toFloat(number) {\n            return math.number(number);\n        }\n    }, {\n        key: \"format\",\n        value: function format(val) {\n            return math.format(val);\n        }\n    }]);\n\n    return ExpressionEngine;\n}();\n\nExpressionEngine.staticParser = math.parser();\nExpressionEngine.randomMenuList = sdRandom.menuList.slice();\n\n},{\"./mathjs\":541,\"sd-random\":\"sd-random\",\"sd-utils\":\"sd-utils\"}],540:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _expressionEngine = require('./expression-engine');\n\nObject.keys(_expressionEngine).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _expressionEngine[key];\n    }\n  });\n});\n\n},{\"./expression-engine\":539}],541:[function(require,module,exports){\n'use strict';\n\nvar core = require('mathjs/core');\n\n// Create a new, empty math.js instance\n// It will only contain methods `import` and `config`\nvar math = core.create();\nmath.config({\n    number: 'number'\n});\n// load the data types you need.\n// To load all data types:\n//\nmath.import(require('mathjs/lib/type'));\n//\n// math.import(require('mathjs/lib/type/fraction'));\n\n// Load the functions you need.\n//\n// To load all functions:\n//\n//     math.import(require('mathjs/lib/function'));\n//\n// To load all functions of a specific category:\n//\n// math.import(require('mathjs/lib/function/arithmetic'));\n// math.import(require('mathjs/lib/function/relational'));\n// math.import(require('mathjs/lib/function/probability'));\nmath.import(require('mathjs/lib/function'));\n//\n// math.import(require('mathjs/lib/function/arithmetic/add'));\n// math.import(require('mathjs/lib/function/arithmetic/subtract'));\n// math.import(require('mathjs/lib/function/arithmetic/multiply'));\n// math.import(require('mathjs/lib/function/arithmetic/divide'));\n// math.import(require('mathjs/lib/function/utils/format'));\n\n// Expressions:\nmath.import(require('mathjs/lib/expression'));\nmath.import(require('mathjs/lib/json'));\n// math.import(require('mathjs/lib/utils/string'));\n\nmodule.exports = math;\n\n},{\"mathjs/core\":5,\"mathjs/lib/expression\":215,\"mathjs/lib/function\":337,\"mathjs/lib/json\":457,\"mathjs/lib/type\":472}],\"sd-expression-engine\":[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _src = require('./src');\n\nObject.keys(_src).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _src[key];\n    }\n  });\n});\n\n},{\"./src\":540}]},{},[])\n\n","/*! decimal.js v7.2.3 https://github.com/MikeMcl/decimal.js/LICENCE */\r\n;(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js v7.2.3\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    Decimal = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = {};\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or ±Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * Math.pow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = Math.pow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = Math.pow(4, -k).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(Math.pow(5, -k));\r\n\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var halfPi,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.asin();\r\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return halfPi.minus(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is ±Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with different signs.\r\n      // Return NaN if both are ±Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is ±Infinity or x is ±0.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with the same sign.\r\n      // Return NaN if both are ±Infinity with different signs.\r\n      // Return y if x is finite and y is ±Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '1e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, ±Infinity or ±0...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n        ? NaN\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        // Return ±0 if either is ±0.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of the magnitude of `y` to the value\r\n   * of this Decimal.\r\n   *\r\n   * If the value of this Decimal is equidistant from two multiples of `y`, the rounding mode `rm`,\r\n   * or `Decimal.rounding` if `rm` is omitted, determines the direction of the nearest multiple.\r\n   *\r\n   * In the context of this method, rounding mode 4 (ROUND_HALF_UP) is the same as rounding mode 0\r\n   * (ROUND_UP), and so on.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm !== void 0) checkInt32(rm, 0, 8);\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      if (rm < 4) rm = [4, 5, 7, 8][rm];\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either ±Infinity, NaN or ±0?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n  // Add aliases to match BigDecimal method names.\r\n  // P.add = P.plus;\r\n  P.subtract = P.minus;\r\n  P.multiply = P.times;\r\n  P.divide = P.div;\r\n  P.remainder = P.mod;\r\n  P.compareTo = P.cmp;\r\n  P.negate = P.neg;\r\n   */\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, y,\r\n      len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = Math.pow(4, -k).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\r\n  function maxOrMin(Ctor, args, ltgt) {\r\n    var y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      } else if (x[ltgt](y)) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // ±Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) return taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    // Max k before Math.pow precision loss is 22\r\n    x = x.times(Math.pow(5, -k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both ±Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is ±Infinity or y is ±0\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is ±Infinity or x is ±0\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if ((v = obj[p = ps[i]]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if ((v = obj[p = 'crypto']) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (v instanceof Decimal) {\r\n        x.s = v.s;\r\n        x.e = v.e;\r\n        x.d = (v = v.d) ? v.slice() : v;\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n          x.e = e;\r\n          x.d = [v];\r\n          return;\r\n\r\n        // Infinity, NaN.\r\n        } else if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n\r\n      } else if (t !== 'string') {\r\n        throw Error(invalidArgument + v);\r\n      }\r\n\r\n      // Minus sign?\r\n      if (v.charCodeAt(0) === 45) {\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, 'lt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 'gt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(Decimal);\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self\r\n        ? self : Function('return this')();\r\n    }\r\n\r\n    noConflict = globalScope.Decimal;\r\n    Decimal.noConflict = function () {\r\n      globalScope.Decimal = noConflict;\r\n      return Decimal;\r\n    };\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n","/**\n * @license Fraction.js v4.0.2 09/09/2015\n * http://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function (root) {\n\n  \"use strict\";\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  var MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function createError(name) {\n    var errorConstructor = function () {\n      var temp = Error.apply(this, arguments);\n      temp.name = this.name = name;\n      this.stack = temp.stack;\n      this.message = temp.message;\n    };\n\n    var IntermediateInheritor = function () {};\n    IntermediateInheritor.prototype = Error.prototype;\n    errorConstructor.prototype = new IntermediateInheritor();\n\n    return errorConstructor;\n  }\n\n  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');\n  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');\n\n  function assign(n, s) {\n\n    if (isNaN(n = parseInt(n, 10))) {\n      throwInvalidParam();\n    }\n    return n * s;\n  }\n\n  function throwInvalidParam() {\n    throw new InvalidParameter();\n  }\n\n  var parse = function (p1, p2) {\n\n    var n = 0, d = 1, s = 1;\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n    var A = 0, B = 1;\n    var C = 1, D = 1;\n\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n    } else\n      switch (typeof p1) {\n\n        case \"object\":\n        {\n          if (\"d\" in p1 && \"n\" in p1) {\n            n = p1[\"n\"];\n            d = p1[\"d\"];\n            if (\"s\" in p1)\n              n*= p1[\"s\"];\n          } else if (0 in p1) {\n            n = p1[0];\n            if (1 in p1)\n              d = p1[1];\n          } else {\n            throwInvalidParam();\n          }\n          s = n * d;\n          break;\n        }\n        case \"number\":\n        {\n          if (p1 < 0) {\n            s = p1;\n            p1 = -p1;\n          }\n\n          if (p1 % 1 === 0) {\n            n = p1;\n          } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n            if (p1 >= 1) {\n              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n              p1/= z;\n            }\n\n            // Using Farey Sequences\n            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n            while (B <= N && D <= N) {\n              M = (A + C) / (B + D);\n\n              if (p1 === M) {\n                if (B + D <= N) {\n                  n = A + C;\n                  d = B + D;\n                } else if (D > B) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n                break;\n\n              } else {\n\n                if (p1 > M) {\n                  A+= C;\n                  B+= D;\n                } else {\n                  C+= A;\n                  D+= B;\n                }\n\n                if (B > N) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n              }\n            }\n            n*= z;\n          } else if (isNaN(p1) || isNaN(p2)) {\n            d = n = NaN;\n          }\n          break;\n        }\n        case \"string\":\n        {\n          B = p1.match(/\\d+|./g);\n\n          if (B[A] === '-') {// Check for minus sign at the beginning\n            s = -1;\n            A++;\n          } else if (B[A] === '+') {// Check for plus sign at the beginning\n            A++;\n          }\n\n          if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n            w = assign(B[A++], s);\n          } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n            if (B[A] !== '.') { // Handle 0.5 and .5\n              v = assign(B[A++], s);\n            }\n            A++;\n\n            // Check for decimal places\n            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n              w = assign(B[A], s);\n              y = Math.pow(10, B[A].length);\n              A++;\n            }\n\n            // Check for repeating places\n            if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n              x = assign(B[A + 1], s);\n              z = Math.pow(10, B[A + 1].length) - 1;\n              A+= 3;\n            }\n\n          } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n            w = assign(B[A], s);\n            y = assign(B[A + 2], 1);\n            A+= 3;\n          } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n            v = assign(B[A], s);\n            w = assign(B[A + 2], s);\n            y = assign(B[A + 4], 1);\n            A+= 5;\n          }\n\n          if (B.length <= A) { // Check for more tokens on the stack\n            d = y * z;\n            s = /* void */\n                    n = x + d * v + z * w;\n            break;\n          }\n\n          /* Fall through on error */\n        }\n        default:\n          throwInvalidParam();\n      }\n\n    if (d === 0) {\n      throw new DivisionByZero();\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  var modpow = function (b, e, m) {\n\n    for (var r = 1; e > 0; b = (b * b) % m, e >>= 1) {\n\n      if (e & 1) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  };\n\n  var cycleLen = function (n, d) {\n\n    for (; d % 2 === 0;\n            d/= 2) {}\n\n    for (; d % 5 === 0;\n            d/= 5) {}\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n\n    for (var t = 1; rem !== 1; t++) {\n      rem = rem * 10 % d;\n\n      if (t > MAX_CYCLE_LEN)\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return t;\n  };\n\n  var cycleStart = function (n, d, len) {\n\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2)\n        return t;\n\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n    return 0;\n  };\n\n  var gcd = function (a, b) {\n\n    if (!a) return b;\n    if (!b) return a;\n\n    while (1) {\n      a%= b;\n      if (!a) return b;\n      b%= a;\n      if (!b) return a;\n    }\n  };\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n\n    if (!(this instanceof Fraction)) {\n      return new Fraction(a, b);\n    }\n\n    parse(a, b);\n\n    if (Fraction['REDUCE']) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\n    } else {\n      a = 1;\n    }\n\n    this[\"s\"] = P[\"s\"];\n    this[\"n\"] = P[\"n\"] / a;\n    this[\"d\"] = P[\"d\"] / a;\n  }\n\n  /**\n   * Boolean global variable to be able to disable automatic reduction of the fraction\n   *\n   */\n  Fraction['REDUCE'] = 1;\n\n  Fraction.prototype = {\n\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function () {\n\n      return new Fraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function () {\n\n      return new Fraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function (a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n              this[\"d\"] * P[\"d\"]\n              );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function (a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n              this[\"d\"] * P[\"d\"]\n              );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function (a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n              this[\"d\"] * P[\"d\"]\n              );\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function (a, b) {\n\n      parse(a, b);\n      return new Fraction(\n              this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n              this[\"d\"] * P[\"n\"]\n              );\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function () {\n      return new Fraction(this);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function (a, b) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return new Fraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        Fraction(0, 0); // Throw DivisionByZero\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return new Fraction(\n              (this[\"s\"] * P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n              P[\"d\"] * this[\"d\"]\n              );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function (a, b) {\n\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return new Fraction(gcd(P[\"n\"], this[\"n\"]), P[\"d\"] * this[\"d\"] / gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function (a, b) {\n\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return new Fraction;\n      }\n      return new Fraction(P[\"n\"] * this[\"n\"] / gcd(P[\"n\"], this[\"n\"]), gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function (places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function (places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function (places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denumerator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function () {\n\n      return new Fraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some integer exponent\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function (m) {\n\n      if (m < 0) {\n        return new Fraction(Math.pow(this['s'] * this[\"d\"], -m), Math.pow(this[\"n\"], -m));\n      } else {\n        return new Fraction(Math.pow(this['s'] * this[\"n\"], m), Math.pow(this[\"d\"], m));\n      }\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function (a, b) {\n\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function (a, b) {\n\n      parse(a, b);\n      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n      return (0 < t) - (t < 0);\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function (a, b) {\n\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function () {\n\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n     **/\n    'toFraction': function (excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str+= '-';\n      }\n\n      if (d === 1) {\n        str+= n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str+= whole;\n          str+= \" \";\n          n%= d;\n        }\n\n        str+= n;\n        str+= '/';\n        str+= d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function (excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str+= '-';\n      }\n\n      if (d === 1) {\n        str+= n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str+= whole;\n          n%= d;\n        }\n\n        str+= \"\\\\frac{\";\n        str+= n;\n        str+= '}{';\n        str+= d;\n        str+= '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function () {\n\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function () {\n\n      var g;\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      if (!Fraction['REDUCE']) {\n        g = gcd(N, D);\n        N/= g;\n        D/= g;\n      }\n\n      var dec = 15; // 15 = decimal places when no repitation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] === -1 ? \"-\" : \"\";\n\n      str+= N / D | 0;\n\n      N%= D;\n      N*= 10;\n\n      if (N)\n        str+= \".\";\n\n      if (cycLen) {\n\n        for (var i = cycOff; i--; ) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n        str+= \"(\";\n        for (var i = cycLen; i--; ) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n        str+= \")\";\n      } else {\n        for (var i = dec; N && i--; ) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n      }\n      return str;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function () {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    module[\"exports\"] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n\n})(this);\n","/*\r\n * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license\r\n * Author: Jim Palmer (based on chunking idea from Dave Koelle)\r\n */\r\n/*jshint unused:false */\r\nmodule.exports = function naturalSort (a, b) {\r\n\t\"use strict\";\r\n\tvar re = /(^([+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?$|^0x[0-9a-f]+$|\\d+)/gi,\r\n\t\tsre = /(^[ ]*|[ ]*$)/g,\r\n\t\tdre = /(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,\r\n\t\thre = /^0x[0-9a-f]+$/i,\r\n\t\tore = /^0/,\r\n\t\ti = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },\r\n\t\t// convert all to strings strip whitespace\r\n\t\tx = i(a).replace(sre, '') || '',\r\n\t\ty = i(b).replace(sre, '') || '',\r\n\t\t// chunk/tokenize\r\n\t\txN = x.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\tyN = y.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\t// numeric, hex or date detection\r\n\t\txD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),\r\n\t\tyD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,\r\n\t\toFxNcL, oFyNcL;\r\n\t// first try and sort Hex codes or Dates\r\n\tif (yD) {\r\n\t\tif ( xD < yD ) { return -1; }\r\n\t\telse if ( xD > yD ) { return 1; }\r\n\t}\r\n\t// natural sorting through split numeric strings and default strings\r\n\tfor(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\r\n\t\t// find floats not starting with '0', string or 0 if not defined (Clint Priest)\r\n\t\toFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;\r\n\t\toFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;\r\n\t\t// handle numeric vs string comparison - number < string - (Kyle Adams)\r\n\t\tif (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }\r\n\t\t// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\r\n\t\telse if (typeof oFxNcL !== typeof oFyNcL) {\r\n\t\t\toFxNcL += '';\r\n\t\t\toFyNcL += '';\r\n\t\t}\r\n\t\tif (oFxNcL < oFyNcL) { return -1; }\r\n\t\tif (oFxNcL > oFyNcL) { return 1; }\r\n\t}\r\n\treturn 0;\r\n};\r\n","module.exports = require('./lib/core/core');","var isFactory = require('./../utils/object').isFactory;\nvar typedFactory = require('./typed');\nvar emitter = require('./../utils/emitter');\n\nvar importFactory = require('./function/import');\nvar configFactory = require('./function/config');\n\n/**\n * Math.js core. Creates a new, empty math.js instance\n * @param {Object} [options] Available options:\n *                            {number} epsilon\n *                              Minimum relative difference between two\n *                              compared values, used by all comparison functions.\n *                            {string} matrix\n *                              A string 'Matrix' (default) or 'Array'.\n *                            {string} number\n *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n *                            {number} precision\n *                              The number of significant digits for BigNumbers.\n *                              Not applicable for Numbers.\n *                            {boolean} predictable\n *                              Predictable output type of functions. When true,\n *                              output type depends only on the input types. When\n *                              false (default), output type can vary depending\n *                              on input values. For example `math.sqrt(-4)`\n *                              returns `complex('2i')` when predictable is false, and\n *                              returns `NaN` when true.\n *                            {string} randomSeed\n *                              Random seed for seeded pseudo random number generator.\n *                              Set to null to randomly seed.\n * @returns {Object} Returns a bare-bone math.js instance containing\n *                   functions:\n *                   - `import` to add new functions\n *                   - `config` to change configuration\n *                   - `on`, `off`, `once`, `emit` for events\n */\nexports.create = function create (options) {\n  // simple test for ES5 support\n  if (typeof Object.create !== 'function') {\n    throw new Error('ES5 not supported by this JavaScript engine. ' +\n    'Please load the es5-shim and es5-sham library for compatibility.');\n  }\n\n  // cached factories and instances\n  var factories = [];\n  var instances = [];\n\n  // create a namespace for the mathjs instance, and attach emitter functions\n  var math = emitter.mixin({});\n  math.type = {};\n  math.expression = {\n    transform: {},\n    mathWithTransform: {}\n  };\n\n  // create a new typed instance\n  math.typed = typedFactory.create(math.type);\n\n  // create configuration options. These are private\n  var _config = {\n    // minimum relative difference between two compared values,\n    // used by all comparison functions\n    epsilon: 1e-12,\n\n    // type of default matrix output. Choose 'matrix' (default) or 'array'\n    matrix: 'Matrix',\n\n    // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction\n    number: 'number',\n\n    // number of significant digits in BigNumbers\n    precision: 64,\n\n    // predictable output type of functions. When true, output type depends only\n    // on the input types. When false (default), output type can vary depending\n    // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when\n    // predictable is false, and returns `NaN` when true.\n    predictable: false,\n\n    // random seed for seeded pseudo random number generation\n    // null = randomly seed\n    randomSeed: null\n  };\n\n  /**\n   * Load a function or data type from a factory.\n   * If the function or data type already exists, the existing instance is\n   * returned.\n   * @param {{type: string, name: string, factory: Function}} factory\n   * @returns {*}\n   */\n  function load (factory) {\n    if (!isFactory(factory)) {\n      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');\n    }\n\n    var index = factories.indexOf(factory);\n    var instance;\n    if (index === -1) {\n      // doesn't yet exist\n      if (factory.math === true) {\n        // pass with math namespace\n        instance = factory.factory(math.type, _config, load, math.typed, math);\n      }\n      else {\n        instance = factory.factory(math.type, _config, load, math.typed);\n      }\n\n      // append to the cache\n      factories.push(factory);\n      instances.push(instance);\n    }\n    else {\n      // already existing function, return the cached instance\n      instance = instances[index];\n    }\n\n    return instance;\n  }\n\n  // load the import and config functions\n  math['import'] = load(importFactory);\n  math['config'] = load(configFactory);\n  math.expression.mathWithTransform['config'] = math['config']\n\n  // apply options\n  if (options) {\n    math.config(options);\n  }\n\n  return math;\n};\n","'use strict';\n\nvar object = require('../../utils/object');\n\nfunction factory (type, config, load, typed, math) {\n  var MATRIX = ['Matrix', 'Array'];                   // valid values for option matrix\n  var NUMBER = ['number', 'BigNumber', 'Fraction'];   // valid values for option number\n\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *     math.config().number;                // outputs 'number'\n   *     math.eval('0.4');                    // outputs number 0.4\n   *     math.config({number: 'Fraction'});\n   *     math.eval('0.4');                    // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} epsilon\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n  function _config(options) {\n    if (options) {\n      var prev = object.map(config, object.clone);\n\n      // validate some of the options\n      validateOption(options, 'matrix', MATRIX);\n      validateOption(options, 'number', NUMBER);\n\n      // merge options\n      object.deepExtend(config, options);\n\n      var curr = object.map(config, object.clone);\n\n      var changes = object.map(options, object.clone);\n\n      // emit 'config' event\n      math.emit('config', curr, prev, changes);\n\n      return curr;\n    }\n    else {\n      return object.map(config, object.clone);\n    }\n  }\n\n  // attach the valid options to the function so they can be extended\n  _config.MATRIX = MATRIX;\n  _config.NUMBER = NUMBER;\n\n  return _config;\n}\n\n/**\n * Test whether an Array contains a specific item.\n * @param {Array.<string>} array\n * @param {string} item\n * @return {boolean}\n */\nfunction contains (array, item) {\n  return array.indexOf(item) !== -1;\n}\n\n/**\n * Find a string in an array. Case insensitive search\n * @param {Array.<string>} array\n * @param {string} item\n * @return {number} Returns the index when found. Returns -1 when not found\n */\nfunction findIndex (array, item) {\n  return array\n      .map(function (i) {\n        return i.toLowerCase();\n      })\n      .indexOf(item.toLowerCase());\n}\n\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    var index = findIndex(values, options[name]);\n    if (index !== -1) {\n      // right value, wrong casing\n      // TODO: lower case values are deprecated since v3, remove this warning some day.\n      console.warn('Warning: Wrong casing for configuration option \"' + name + '\", should be \"' + values[index] + '\" instead of \"' + options[name] + '\".');\n\n      options[name] = values[index]; // change the option to the right casing\n    }\n    else {\n      // unknown value\n      console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". Available options: ' + values.map(JSON.stringify).join(', ') + '.');\n    }\n  }\n}\n\nexports.name = 'config';\nexports.math = true; // request the math namespace as fifth argument\nexports.factory = factory;\n","'use strict';\n\nvar lazy = require('../../utils/object').lazy;\nvar isFactory = require('../../utils/object').isFactory;\nvar traverse = require('../../utils/object').traverse;\nvar ArgumentsError = require('../../error/ArgumentsError');\n\nfunction factory (type, config, load, typed, math) {\n  /**\n   * Import functions from an object or a module\n   *\n   * Syntax:\n   *\n   *    math.import(object)\n   *    math.import(object, options)\n   *\n   * Where:\n   *\n   * - `object: Object`\n   *   An object with functions to be imported.\n   * - `options: Object` An object with import options. Available options:\n   *   - `override: boolean`\n   *     If true, existing functions will be overwritten. False by default.\n   *   - `silent: boolean`\n   *     If true, the function will not throw errors on duplicates or invalid\n   *     types. False by default.\n   *   - `wrap: boolean`\n   *     If true, the functions will be wrapped in a wrapper function\n   *     which converts data types like Matrix to primitive data types like Array.\n   *     The wrapper is needed when extending math.js with libraries which do not\n   *     support these data type. False by default.\n   *\n   * Examples:\n   *\n   *    // define new functions and variables\n   *    math.import({\n   *      myvalue: 42,\n   *      hello: function (name) {\n   *        return 'hello, ' + name + '!';\n   *      }\n   *    });\n   *\n   *    // use the imported function and variable\n   *    math.myvalue * 2;               // 84\n   *    math.hello('user');             // 'hello, user!'\n   *\n   *    // import the npm module 'numbers'\n   *    // (must be installed first with `npm install numbers`)\n   *    math.import(require('numbers'), {wrap: true});\n   *\n   *    math.fibonacci(7); // returns 13\n   *\n   * @param {Object | Array} object   Object with functions to be imported.\n   * @param {Object} [options]        Import options.\n   */\n  function math_import(object, options) {\n    var num = arguments.length;\n    if (num !== 1 && num !== 2) {\n      throw new ArgumentsError('import', num, 1, 2);\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (isFactory(object)) {\n      _importFactory(object, options);\n    }\n    // TODO: allow a typed-function with name too\n    else if (Array.isArray(object)) {\n      object.forEach(function (entry) {\n        math_import(entry, options);\n      });\n    }\n    else if (typeof object === 'object') {\n      // a map with functions\n      for (var name in object) {\n        if (object.hasOwnProperty(name)) {\n          var value = object[name];\n          if (isSupportedType(value)) {\n            _import(name, value, options);\n          }\n          else if (isFactory(object)) {\n            _importFactory(object, options);\n          }\n          else {\n            math_import(value, options);\n          }\n        }\n      }\n    }\n    else {\n      if (!options.silent) {\n        throw new TypeError('Factory, Object, or Array expected');\n      }\n    }\n  }\n\n  /**\n   * Add a property to the math namespace and create a chain proxy for it.\n   * @param {string} name\n   * @param {*} value\n   * @param {Object} options  See import for a description of the options\n   * @private\n   */\n  function _import(name, value, options) {\n    // TODO: refactor this function, it's to complicated and contains duplicate code\n    if (options.wrap && typeof value === 'function') {\n      // create a wrapper around the function\n      value = _wrap(value);\n    }\n\n    if (isTypedFunction(math[name]) && isTypedFunction(value)) {\n      if (options.override) {\n        // give the typed function the right name\n        value = typed(name, value.signatures);\n      }\n      else {\n        // merge the existing and typed function\n        value = typed(math[name], value);\n      }\n\n      math[name] = value;\n      _importTransform(name, value);\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n\n    if (math[name] === undefined || options.override) {\n      math[name] = value;\n      _importTransform(name, value);\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n\n    if (!options.silent) {\n      throw new Error('Cannot import \"' + name + '\": already exists');\n    }\n  }\n\n  function _importTransform (name, value) {\n    if (value && typeof value.transform === 'function') {\n      math.expression.transform[name] = value.transform;\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value.transform\n      }\n    }\n    else {\n      // remove existing transform\n      delete math.expression.transform[name]\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value\n      }\n    }\n  }\n\n  /**\n   * Create a wrapper a round an function which converts the arguments\n   * to their primitive values (like convert a Matrix to Array)\n   * @param {Function} fn\n   * @return {Function} Returns the wrapped function\n   * @private\n   */\n  function _wrap (fn) {\n    var wrapper = function wrapper () {\n      var args = [];\n      for (var i = 0, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        args[i] = arg && arg.valueOf();\n      }\n      return fn.apply(math, args);\n    };\n\n    if (fn.transform) {\n      wrapper.transform = fn.transform;\n    }\n\n    return wrapper;\n  }\n\n  /**\n   * Import an instance of a factory into math.js\n   * @param {{factory: Function, name: string, path: string, math: boolean}} factory\n   * @param {Object} options  See import for a description of the options\n   * @private\n   */\n  function _importFactory(factory, options) {\n    if (typeof factory.name === 'string') {\n      var name = factory.name;\n      var existingTransform = name in math.expression.transform\n      var namespace = factory.path ? traverse(math, factory.path) : math;\n      var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;\n\n      var resolver = function () {\n        var instance = load(factory);\n        if (instance && typeof instance.transform === 'function') {\n          throw new Error('Transforms cannot be attached to factory functions. ' +\n              'Please create a separate function for it with exports.path=\"expression.transform\"');\n        }\n\n        if (isTypedFunction(existing) && isTypedFunction(instance)) {\n          if (options.override) {\n            // replace the existing typed function (nothing to do)\n          }\n          else {\n            // merge the existing and new typed function\n            instance = typed(existing, instance);\n          }\n\n          return instance;\n        }\n\n        if (existing === undefined || options.override) {\n          return instance;\n        }\n\n        if (!options.silent) {\n          throw new Error('Cannot import \"' + name + '\": already exists');\n        }\n      };\n\n      if (factory.lazy !== false) {\n        lazy(namespace, name, resolver);\n\n        if (!existingTransform) {\n          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {\n            lazy(math.expression.mathWithTransform, name, resolver);\n          }\n        }\n      }\n      else {\n        namespace[name] = resolver();\n\n        if (!existingTransform) {\n          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {\n            math.expression.mathWithTransform[name] = resolver();\n          }\n        }\n      }\n\n      math.emit('import', name, resolver, factory.path);\n    }\n    else {\n      // unnamed factory.\n      // no lazy loading\n      load(factory);\n    }\n  }\n\n  /**\n   * Check whether given object is a type which can be imported\n   * @param {Function | number | string | boolean | null | Unit | Complex} object\n   * @return {boolean}\n   * @private\n   */\n  function isSupportedType(object) {\n    return typeof object === 'function'\n        || typeof object === 'number'\n        || typeof object === 'string'\n        || typeof object === 'boolean'\n        || object === null\n        || (object && object.isUnit === true)\n        || (object && object.isComplex === true)\n        || (object && object.isBigNumber === true)\n        || (object && object.isFraction === true)\n        || (object && object.isMatrix === true)\n        || (object && Array.isArray(object) === true)\n  }\n\n  /**\n   * Test whether a given thing is a typed-function\n   * @param {*} fn\n   * @return {boolean} Returns true when `fn` is a typed-function\n   */\n  function isTypedFunction (fn) {\n    return typeof fn === 'function' && typeof fn.signatures === 'object';\n  }\n\n  function allowedInExpressions (name) {\n    return !unsafe.hasOwnProperty(name);\n  }\n\n  function factoryAllowedInExpressions (factory) {\n    return factory.path === undefined && !unsafe.hasOwnProperty(factory.name);\n  }\n\n  // namespaces and functions not available in the parser for safety reasons\n  var unsafe = {\n    'expression': true,\n    'type': true,\n    'docs': true,\n    'error': true,\n    'json': true,\n    'chain': true // chain method not supported. Note that there is a unit chain too.\n  };\n\n  return math_import;\n}\n\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\nexports.name = 'import';\nexports.factory = factory;\nexports.lazy = true;\n","var typedFunction = require('typed-function');\nvar digits = require('./../utils/number').digits;\n\n// returns a new instance of typed-function\nvar createTyped = function () {\n  // initially, return the original instance of typed-function\n  // consecutively, return a new instance from typed.create.\n  createTyped = typedFunction.create;\n  return typedFunction;\n};\n\n/**\n * Factory function for creating a new typed instance\n * @param {Object} type   Object with data types like Complex and BigNumber\n * @returns {Function}\n */\nexports.create = function create(type) {\n  // TODO: typed-function must be able to silently ignore signatures with unknown data types\n\n  // get a new instance of typed-function\n  var typed = createTyped();\n\n  // define all types. The order of the types determines in which order function\n  // arguments are type-checked (so for performance it's important to put the\n  // most used types first).\n  typed.types = [\n    { name: 'number',          test: function (x) { return typeof x === 'number' } },\n    { name: 'Complex',         test: function (x) { return x && x.isComplex } },\n    { name: 'BigNumber',       test: function (x) { return x && x.isBigNumber } },\n    { name: 'Fraction',        test: function (x) { return x && x.isFraction } },\n    { name: 'Unit',            test: function (x) { return x && x.isUnit } },\n    { name: 'string',          test: function (x) { return typeof x === 'string' } },\n    { name: 'Array',           test: Array.isArray },\n    { name: 'Matrix',          test: function (x) { return x && x.isMatrix } },\n    { name: 'DenseMatrix',     test: function (x) { return x && x.isDenseMatrix } },\n    { name: 'SparseMatrix',    test: function (x) { return x && x.isSparseMatrix } },\n    { name: 'Range',           test: function (x) { return x && x.isRange } },\n    { name: 'Index',           test: function (x) { return x && x.isIndex } },\n    { name: 'boolean',         test: function (x) { return typeof x === 'boolean' } },\n    { name: 'ResultSet',       test: function (x) { return x && x.isResultSet } },\n    { name: 'Help',            test: function (x) { return x && x.isHelp } },\n    { name: 'function',        test: function (x) { return typeof x === 'function'} },\n    { name: 'Date',            test: function (x) { return x instanceof Date } },\n    { name: 'RegExp',          test: function (x) { return x instanceof RegExp } },\n    { name: 'Object',          test: function (x) { return typeof x === 'object' } },\n    { name: 'null',            test: function (x) { return x === null } },\n    { name: 'undefined',       test: function (x) { return x === undefined } },\n\n    { name: 'OperatorNode',    test: function (x) { return x && x.isOperatorNode } },\n    { name: 'ConstantNode',    test: function (x) { return x && x.isConstantNode } },\n    { name: 'SymbolNode',      test: function (x) { return x && x.isSymbolNode } },\n    { name: 'ParenthesisNode', test: function (x) { return x && x.isParenthesisNode } },\n    { name: 'FunctionNode',    test: function (x) { return x && x.isFunctionNode } },\n    { name: 'FunctionAssignmentNode',    test: function (x) { return x && x.isFunctionAssignmentNode } },\n    { name: 'ArrayNode',                 test: function (x) { return x && x.isArrayNode } },\n    { name: 'AssignmentNode',            test: function (x) { return x && x.isAssignmentNode } },\n    { name: 'BlockNode',                 test: function (x) { return x && x.isBlockNode } },\n    { name: 'ConditionalNode',           test: function (x) { return x && x.isConditionalNode } },\n    { name: 'IndexNode',                 test: function (x) { return x && x.isIndexNode } },\n    { name: 'RangeNode',                 test: function (x) { return x && x.isRangeNode } },\n    { name: 'UpdateNode',                test: function (x) { return x && x.isUpdateNode } },\n    { name: 'Node',                      test: function (x) { return x && x.isNode } }\n  ];\n\n  // TODO: add conversion from BigNumber to number?\n  typed.conversions = [\n    {\n      from: 'number',\n      to: 'BigNumber',\n      convert: function (x) {\n        // note: conversion from number to BigNumber can fail if x has >15 digits\n        if (digits(x) > 15) {\n          throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' +\n          '(value: ' + x + '). ' +\n          'Use function bignumber(x) to convert to BigNumber.');\n        }\n        return new type.BigNumber(x);\n      }\n    }, {\n      from: 'number',\n      to: 'Complex',\n      convert: function (x) {\n        return new type.Complex(x, 0);\n      }\n    }, {\n      from: 'number',\n      to: 'string',\n      convert: function (x) {\n        return x + '';\n      }\n    }, {\n      from: 'BigNumber',\n      to: 'Complex',\n      convert: function (x) {\n        return new type.Complex(x.toNumber(), 0);\n      }\n    }, {\n      from: 'Fraction',\n      to: 'BigNumber',\n      convert: function (x) {\n        throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' +\n            'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');\n      }\n    }, {\n      from: 'Fraction',\n      to: 'Complex',\n      convert: function (x) {\n        return new type.Complex(x.valueOf(), 0);\n      }\n    }, {\n      from: 'number',\n      to: 'Fraction',\n      convert: function (x) {\n        var f = new type.Fraction(x);\n        if (f.valueOf() !== x) {\n          throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' +\n              '(value: ' + x + '). ' +\n              'Use function fraction(x) to convert to Fraction.');\n        }\n        return new type.Fraction(x);\n      }\n    }, {\n    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`\n    //  from: 'Fraction',\n    //  to: 'number',\n    //  convert: function (x) {\n    //    return x.valueOf();\n    //  }\n    //}, {\n      from: 'string',\n      to: 'number',\n      convert: function (x) {\n        var n = Number(x);\n        if (isNaN(n)) {\n          throw new Error('Cannot convert \"' + x + '\" to a number');\n        }\n        return n;\n      }\n    }, {\n      from: 'string',\n      to: 'BigNumber',\n      convert: function (x) {\n        try {\n          return new type.BigNumber(x);\n        }\n        catch (err) {\n          throw new Error('Cannot convert \"' + x + '\" to BigNumber');\n        }\n      }\n    }, {\n      from: 'string',\n      to: 'Fraction',\n      convert: function (x) {\n        try {\n          return new type.Fraction(x);\n        }\n        catch (err) {\n          throw new Error('Cannot convert \"' + x + '\" to Fraction');\n        }\n      }\n    }, {\n      from: 'string',\n      to: 'Complex',\n      convert: function (x) {\n        try {\n          return new type.Complex(x);\n        }\n        catch (err) {\n          throw new Error('Cannot convert \"' + x + '\" to Complex');\n        }\n      }\n    }, {\n      from: 'boolean',\n      to: 'number',\n      convert: function (x) {\n        return +x;\n      }\n    }, {\n      from: 'boolean',\n      to: 'BigNumber',\n      convert: function (x) {\n        return new type.BigNumber(+x);\n      }\n    }, {\n      from: 'boolean',\n      to: 'Fraction',\n      convert: function (x) {\n        return new type.Fraction(+x);\n      }\n    }, {\n      from: 'boolean',\n      to: 'string',\n      convert: function (x) {\n        return +x;\n      }\n    }, {\n      from: 'null',\n      to: 'number',\n      convert: function () {\n        return 0;\n      }\n    }, {\n      from: 'null',\n      to: 'string',\n      convert: function () {\n        return 'null';\n      }\n    }, {\n      from: 'null',\n      to: 'BigNumber',\n      convert: function () {\n        return new type.BigNumber(0);\n      }\n    }, {\n      from: 'null',\n      to: 'Fraction',\n      convert: function () {\n        return new type.Fraction(0);\n      }\n    }, {\n      from: 'Array',\n      to: 'Matrix',\n      convert: function (array) {\n        // TODO: how to decide on the right type of matrix to create?\n        return new type.DenseMatrix(array);\n      }\n    }, {\n      from: 'Matrix',\n      to: 'Array',\n      convert: function (matrix) {\n        return matrix.valueOf();\n      }\n    }\n  ];\n\n  return typed;\n};\n","'use strict';\n\n/**\n * Create a syntax error with the message:\n *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\n * @param {string} fn     Function name\n * @param {number} count  Actual argument count\n * @param {number} min    Minimum required argument count\n * @param {number} [max]  Maximum required argument count\n * @extends Error\n */\nfunction ArgumentsError(fn, count, min, max) {\n  if (!(this instanceof ArgumentsError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.fn = fn;\n  this.count = count;\n  this.min = min;\n  this.max = max;\n\n  this.message = 'Wrong number of arguments in function ' + fn +\n      ' (' + count + ' provided, ' +\n      min + ((max != undefined) ? ('-' + max) : '') + ' expected)';\n\n  this.stack = (new Error()).stack;\n}\n\nArgumentsError.prototype = new Error();\nArgumentsError.prototype.constructor = Error;\nArgumentsError.prototype.name = 'ArgumentsError';\nArgumentsError.prototype.isArgumentsError = true;\n\nmodule.exports = ArgumentsError;\n","'use strict';\n\n/**\n * Create a range error with the message:\n *     'Dimension mismatch (<actual size> != <expected size>)'\n * @param {number | number[]} actual        The actual size\n * @param {number | number[]} expected      The expected size\n * @param {string} [relation='!=']          Optional relation between actual\n *                                          and expected size: '!=', '<', etc.\n * @extends RangeError\n */\nfunction DimensionError(actual, expected, relation) {\n  if (!(this instanceof DimensionError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.actual   = actual;\n  this.expected = expected;\n  this.relation = relation;\n\n  this.message = 'Dimension mismatch (' +\n      (Array.isArray(actual) ? ('[' + actual.join(', ') + ']') : actual) +\n      ' ' + (this.relation || '!=') + ' ' +\n      (Array.isArray(expected) ? ('[' + expected.join(', ') + ']') : expected) +\n      ')';\n\n  this.stack = (new Error()).stack;\n}\n\nDimensionError.prototype = new RangeError();\nDimensionError.prototype.constructor = RangeError;\nDimensionError.prototype.name = 'DimensionError';\nDimensionError.prototype.isDimensionError = true;\n\nmodule.exports = DimensionError;\n","'use strict';\n\n/**\n * Create a range error with the message:\n *     'Index out of range (index < min)'\n *     'Index out of range (index < max)'\n *\n * @param {number} index     The actual index\n * @param {number} [min=0]   Minimum index (included)\n * @param {number} [max]     Maximum index (excluded)\n * @extends RangeError\n */\nfunction IndexError(index, min, max) {\n  if (!(this instanceof IndexError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.index = index;\n  if (arguments.length < 3) {\n    this.min = 0;\n    this.max = min;\n  }\n  else {\n    this.min = min;\n    this.max = max;\n  }\n\n  if (this.min !== undefined && this.index < this.min) {\n    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';\n  }\n  else if (this.max !== undefined && this.index >= this.max) {\n    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';\n  }\n  else {\n    this.message = 'Index out of range (' + this.index + ')';\n  }\n\n  this.stack = (new Error()).stack;\n}\n\nIndexError.prototype = new RangeError();\nIndexError.prototype.constructor = RangeError;\nIndexError.prototype.name = 'IndexError';\nIndexError.prototype.isIndexError = true;\n\nmodule.exports = IndexError;\n","'use strict';\n\nvar object = require('../utils/object');\nvar string = require('../utils/string');\n\nfunction factory (type, config, load, typed) {\n  var parser = load(require('./function/parser'))();\n\n  /**\n   * Documentation object\n   * @param {Object} doc  Object containing properties:\n   *                      {string} name\n   *                      {string} category\n   *                      {string} description\n   *                      {string[]} syntax\n   *                      {string[]} examples\n   *                      {string[]} seealso\n   * @constructor\n   */\n  function Help(doc) {\n    if (!(this instanceof Help)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!doc)  throw new Error('Argument \"doc\" missing');\n\n    this.doc = doc;\n  }\n\n  /**\n   * Attach type information\n   */\n  Help.prototype.type = 'Help';\n  Help.prototype.isHelp = true;\n\n  /**\n   * Generate a string representation of the Help object\n   * @return {string} Returns a string\n   * @private\n   */\n  Help.prototype.toString = function () {\n    var doc = this.doc || {};\n    var desc = '\\n';\n\n    if (doc.name) {\n      desc += 'Name: ' + doc.name + '\\n\\n';\n    }\n    if (doc.category) {\n      desc += 'Category: ' + doc.category + '\\n\\n';\n    }\n    if (doc.description) {\n      desc += 'Description:\\n    ' + doc.description + '\\n\\n';\n    }\n    if (doc.syntax) {\n      desc += 'Syntax:\\n    ' + doc.syntax.join('\\n    ') + '\\n\\n';\n    }\n    if (doc.examples) {\n      desc += 'Examples:\\n';\n      for (var i = 0; i < doc.examples.length; i++) {\n        var expr = doc.examples[i];\n        desc += '    ' + expr + '\\n';\n\n        var res;\n        try {\n          res = parser.eval(expr);\n        }\n        catch (e) {\n          res = e;\n        }\n        if (res && !res.isHelp) {\n          desc += '        ' + string.format(res, {precision: 14}) + '\\n';\n        }\n      }\n      desc += '\\n';\n    }\n    if (doc.seealso) {\n      desc += 'See also: ' + doc.seealso.join(', ') + '\\n';\n    }\n\n    return desc;\n  };\n\n  /**\n   * Export the help object to JSON\n   */\n  Help.prototype.toJSON = function () {\n    var obj = object.clone(this.doc);\n    obj.mathjs = 'Help';\n    return obj;\n  };\n\n  /**\n   * Instantiate a Help object from a JSON object\n   * @param {Object} json\n   * @returns {Help} Returns a new Help object\n   */\n  Help.fromJSON = function (json) {\n    var doc = {};\n    for (var prop in json) {\n      if (prop !== 'mathjs') { // ignore mathjs field\n        doc[prop] = json[prop];\n      }\n    }\n    return new Help(doc);\n  };\n\n  /**\n   * Returns a string representation of the Help object\n   */\n  Help.prototype.valueOf = Help.prototype.toString;\n\n  return Help;\n}\n\nexports.name = 'Help';\nexports.path = 'type';\nexports.factory = factory;\n","'use strict';\n\nvar extend = require('../utils/object').extend;\nvar customs = require('../utils/customs');\n\nfunction factory (type, config, load, typed, math) {\n  var _parse = load(require('./parse'));\n\n  /**\n   * @constructor Parser\n   * Parser contains methods to evaluate or parse expressions, and has a number\n   * of convenience methods to get, set, and remove variables from memory. Parser\n   * keeps a scope containing variables in memory, which is used for all\n   * evaluations.\n   *\n   * Methods:\n   *    var result = parser.eval(expr);    // evaluate an expression\n   *    var value = parser.get(name);      // retrieve a variable from the parser\n   *    var values = parser.getAll();      // retrieve all defined variables\n   *    parser.set(name, value);           // set a variable in the parser\n   *    parser.remove(name);               // clear a variable from the\n   *                                       // parsers scope\n   *    parser.clear();                    // clear the parsers scope\n   *\n   * Example usage:\n   *    var parser = new Parser();\n   *    // Note: there is a convenience method which can be used instead:\n   *    // var parser = new math.parser();\n   *\n   *    // evaluate expressions\n   *    parser.eval('sqrt(3^2 + 4^2)');         // 5\n   *    parser.eval('sqrt(-4)');                // 2i\n   *    parser.eval('2 inch in cm');            // 5.08 cm\n   *    parser.eval('cos(45 deg)');             // 0.7071067811865476\n   *\n   *    // define variables and functions\n   *    parser.eval('x = 7 / 2');               // 3.5\n   *    parser.eval('x + 3');                   // 6.5\n   *    parser.eval('function f(x, y) = x^y');  // f(x, y)\n   *    parser.eval('f(2, 3)');                 // 8\n   *\n   *    // get and set variables and functions\n   *    var x = parser.get('x');                // 7\n   *    var f = parser.get('f');                // function\n   *    var g = f(3, 2);                        // 9\n   *    parser.set('h', 500);\n   *    var i = parser.eval('h / 2');           // 250\n   *    parser.set('hello', function (name) {\n   *        return 'hello, ' + name + '!';\n   *    });\n   *    parser.eval('hello(\"user\")');           // \"hello, user!\"\n   *\n   *    // clear defined functions and variables\n   *    parser.clear();\n   *\n   */\n  function Parser() {\n    if (!(this instanceof Parser)) {\n      throw new SyntaxError(\n          'Constructor must be called with the new operator');\n    }\n    this.scope = {};\n  }\n\n  /**\n   * Attach type information\n   */\n  Parser.prototype.type = 'Parser';\n  Parser.prototype.isParser = true;\n\n  /**\n   * Parse an expression and return the parsed function node.\n   * The node tree can be compiled via `code = node.compile(math)`,\n   * and the compiled code can be executed as `code.eval([scope])`\n   * @param {string} expr\n   * @return {Node} node\n   * @throws {Error}\n   */\n  Parser.prototype.parse = function (expr) {\n    throw new Error('Parser.parse is deprecated. Use math.parse instead.');\n  };\n\n  /**\n   * Parse and compile an expression, return the compiled javascript code.\n   * The node can be evaluated via code.eval([scope])\n   * @param {string} expr\n   * @return {{eval: function}} code\n   * @throws {Error}\n   */\n  Parser.prototype.compile = function (expr) {\n    throw new Error('Parser.compile is deprecated. Use math.compile instead.');\n  };\n\n  /**\n   * Parse and evaluate the given expression\n   * @param {string} expr   A string containing an expression, for example \"2+3\"\n   * @return {*} result     The result, or undefined when the expression was empty\n   * @throws {Error}\n   */\n  Parser.prototype.eval = function (expr) {\n    // TODO: validate arguments\n    return _parse(expr)\n        .compile()\n        .eval(this.scope);\n  };\n\n  /**\n   * Get a variable (a function or variable) by name from the parsers scope.\n   * Returns undefined when not found\n   * @param {string} name\n   * @return {* | undefined} value\n   */\n  Parser.prototype.get = function (name) {\n    // TODO: validate arguments\n    return name in this.scope\n        ? customs.getSafeProperty(this.scope, name)\n        : undefined;\n  };\n\n  /**\n   * Get a map with all defined variables\n   * @return {Object} values\n   */\n  Parser.prototype.getAll = function () {\n    return extend({}, this.scope);\n  };\n\n  /**\n   * Set a symbol (a function or variable) by name from the parsers scope.\n   * @param {string} name\n   * @param {* | undefined} value\n   */\n  Parser.prototype.set = function (name, value) {\n    // TODO: validate arguments\n    return customs.setSafeProperty(this.scope, name, value);\n  };\n\n  /**\n   * Remove a variable from the parsers scope\n   * @param {string} name\n   */\n  Parser.prototype.remove = function (name) {\n    // TODO: validate arguments\n    delete this.scope[name];\n  };\n\n  /**\n   * Clear the scope with variables and functions\n   */\n  Parser.prototype.clear = function () {\n    for (var name in this.scope) {\n      if (this.scope.hasOwnProperty(name)) {\n        delete this.scope[name];\n      }\n    }\n  };\n\n  return Parser;\n}\n\nexports.name = 'Parser';\nexports.path = 'expression';\nexports.factory = factory;\nexports.math = true; // requires the math namespace as 5th argument\n","module.exports = {\n  'name': 'Infinity',\n  'category': 'Constants',\n  'syntax': [\n    'Infinity'\n  ],\n  'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',\n  'examples': [\n    'Infinity',\n    '1 / 0'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'LN10',\n  'category': 'Constants',\n  'syntax': [\n    'LN10'\n  ],\n  'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',\n  'examples': [\n    'LN10',\n    'log(10)'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'LN2',\n  'category': 'Constants',\n  'syntax': [\n    'LN2'\n  ],\n  'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',\n  'examples': [\n    'LN2',\n    'log(2)'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'LOG10E',\n  'category': 'Constants',\n  'syntax': [\n    'LOG10E'\n  ],\n  'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',\n  'examples': [\n    'LOG10E',\n    'log(e, 10)'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'LOG2E',\n  'category': 'Constants',\n  'syntax': [\n    'LOG2E'\n  ],\n  'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',\n  'examples': [\n    'LOG2E',\n    'log(e, 2)'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'NaN',\n  'category': 'Constants',\n  'syntax': [\n    'NaN'\n  ],\n  'description': 'Not a number',\n  'examples': [\n    'NaN',\n    '0 / 0'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'SQRT1_2',\n  'category': 'Constants',\n  'syntax': [\n    'SQRT1_2'\n  ],\n  'description': 'Returns the square root of 1/2, approximately equal to 0.707',\n  'examples': [\n    'SQRT1_2',\n    'sqrt(1/2)'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'SQRT2',\n  'category': 'Constants',\n  'syntax': [\n    'SQRT2'\n  ],\n  'description': 'Returns the square root of 2, approximately equal to 1.414',\n  'examples': [\n    'SQRT2',\n    'sqrt(2)'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'e',\n  'category': 'Constants',\n  'syntax': [\n    'e'\n  ],\n  'description': 'Euler\\'s number, the base of the natural logarithm. Approximately equal to 2.71828',\n  'examples': [\n    'e',\n    'e ^ 2',\n    'exp(2)',\n    'log(e)'\n  ],\n  'seealso': ['exp']\n};\n","module.exports = {\n  'name': 'false',\n  'category': 'Constants',\n  'syntax': [\n    'false'\n  ],\n  'description': 'Boolean value false',\n  'examples': [\n    'false'\n  ],\n  'seealso': ['true']\n};\n","module.exports = {\n  'name': 'i',\n  'category': 'Constants',\n  'syntax': [\n    'i'\n  ],\n  'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',\n  'examples': [\n    'i',\n    'i * i',\n    'sqrt(-1)'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'null',\n  'category': 'Constants',\n  'syntax': [\n    'null'\n  ],\n  'description': 'Value null',\n  'examples': [\n    'null'\n  ],\n  'seealso': ['true', 'false']\n};\n","module.exports = {\n  'name': 'phi',\n  'category': 'Constants',\n  'syntax': [\n    'phi'\n  ],\n  'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',\n  'examples': [\n    'tau'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'pi',\n  'category': 'Constants',\n  'syntax': [\n    'pi'\n  ],\n  'description': 'The number pi is a mathematical constant that is the ratio of a circle\\'s circumference to its diameter, and is approximately equal to 3.14159',\n  'examples': [\n    'pi',\n    'sin(pi/2)'\n  ],\n  'seealso': ['tau']\n};\n","module.exports = {\n  'name': 'tau',\n  'category': 'Constants',\n  'syntax': [\n    'tau'\n  ],\n  'description': 'Tau is the ratio constant of a circle\\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',\n  'examples': [\n    'tau',\n    '2 * pi'\n  ],\n  'seealso': ['pi']\n};\n","module.exports = {\n  'name': 'true',\n  'category': 'Constants',\n  'syntax': [\n    'true'\n  ],\n  'description': 'Boolean value true',\n  'examples': [\n    'true'\n  ],\n  'seealso': ['false']\n};\n","module.exports = {\n  'name': 'version',\n  'category': 'Constants',\n  'syntax': [\n    'version'\n  ],\n  'description': 'A string with the version number of math.js',\n  'examples': [\n    'version'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'bignumber',\n  'category': 'Construction',\n  'syntax': [\n    'bignumber(x)'\n  ],\n  'description':\n      'Create a big number from a number or string.',\n  'examples': [\n    '0.1 + 0.2',\n    'bignumber(0.1) + bignumber(0.2)',\n    'bignumber(\"7.2\")',\n    'bignumber(\"7.2e500\")',\n    'bignumber([0.1, 0.2, 0.3])'\n  ],\n  'seealso': [\n    'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'\n  ]\n};\n","module.exports = {\n  'name': 'boolean',\n  'category': 'Construction',\n  'syntax': [\n    'x',\n    'boolean(x)'\n  ],\n  'description':\n      'Convert a string or number into a boolean.',\n  'examples': [\n    'boolean(0)',\n    'boolean(1)',\n    'boolean(3)',\n    'boolean(\"true\")',\n    'boolean(\"false\")',\n    'boolean([1, 0, 1, 1])'\n  ],\n  'seealso': [\n    'bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit'\n  ]\n};\n","module.exports = {\n  'name': 'complex',\n  'category': 'Construction',\n  'syntax': [\n    'complex()',\n    'complex(re, im)',\n    'complex(string)'\n  ],\n  'description':\n      'Create a complex number.',\n  'examples': [\n    'complex()',\n    'complex(2, 3)',\n    'complex(\"7 - 2i\")'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit'\n  ]\n};\n","module.exports = {\n  'name': 'createUnit',\n  'category': 'Construction',\n  'syntax': [\n    'createUnit(definitions)',\n    'createUnit(name, definition)'\n  ],\n  'description':\n      'Create a user-defined unit and register it with the Unit type.',\n  'examples': [\n    'createUnit(\"foo\")',\n    'createUnit(\"knot\", {definition: \"0.514444444 m/s\", aliases: [\"knots\", \"kt\", \"kts\"]})',\n    'createUnit(\"mph\", \"1 mile/hour\")'\n  ],\n  'seealso': [\n    'unit', 'splitUnit'\n  ]\n};\n","module.exports = {\n  'name': 'fraction',\n  'category': 'Construction',\n  'syntax': [\n    'fraction(num)',\n    'fraction(num,den)'\n  ],\n  'description':\n    'Create a fraction from a number or from a numerator and denominator.',\n  'examples': [\n    'fraction(0.125)',\n    'fraction(1, 3) + fraction(2, 5)'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit'\n  ]\n};\n","module.exports = {\n  'name': 'index',\n  'category': 'Construction',\n  'syntax': [\n    '[start]',\n    '[start:end]',\n    '[start:step:end]',\n    '[start1, start 2, ...]',\n    '[start1:end1, start2:end2, ...]',\n    '[start1:step1:end1, start2:step2:end2, ...]'\n  ],\n  'description':\n      'Create an index to get or replace a subset of a matrix',\n  'examples': [\n    '[]',\n    '[1, 2, 3]',\n    'A = [1, 2, 3; 4, 5, 6]',\n    'A[1, :]',\n    'A[1, 2] = 50',\n    'A[0:2, 0:2] = ones(2, 2)'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit'\n  ]\n};\n","module.exports = {\n  'name': 'matrix',\n  'category': 'Construction',\n  'syntax': [\n    '[]',\n    '[a1, b1, ...; a2, b2, ...]',\n    'matrix()',\n    'matrix(\"dense\")',\n    'matrix([...])'\n  ],\n  'description':\n      'Create a matrix.',\n  'examples': [\n    '[]',\n    '[1, 2, 3]',\n    '[1, 2, 3; 4, 5, 6]',\n    'matrix()',\n    'matrix([3, 4])',\n    'matrix([3, 4; 5, 6], \"sparse\")',\n    'matrix([3, 4; 5, 6], \"sparse\", \"number\")'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse'\n  ]\n};\n","module.exports = {\n  'name': 'number',\n  'category': 'Construction',\n  'syntax': [\n    'x',\n    'number(x)'\n  ],\n  'description':\n      'Create a number or convert a string or boolean into a number.',\n  'examples': [\n    '2',\n    '2e3',\n    '4.05',\n    'number(2)',\n    'number(\"7.2\")',\n    'number(true)',\n    'number([true, false, true, true])',\n    'number(\"52cm\", \"m\")'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'\n  ]\n};\n","module.exports = {\n  'name': 'sparse',\n  'category': 'Construction',\n  'syntax': [\n    'sparse()',\n    'sparse([a1, b1, ...; a1, b2, ...])',\n    'sparse([a1, b1, ...; a1, b2, ...], \"number\")'\n  ],\n  'description':\n  'Create a sparse matrix.',\n  'examples': [\n    'sparse()',\n    'sparse([3, 4; 5, 6])',\n    'sparse([3, 0; 5, 0], \"number\")'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix'\n  ]\n};\n","module.exports = {\n  'name': 'splitUnit',\n  'category': 'Construction',\n  'syntax': [\n    'splitUnit(unit: Unit, parts: Unit[])'\n  ],\n  'description':\n      'Split a unit in an array of units whose sum is equal to the original unit.',\n  'examples': [\n    'splitUnit(1 m, [\"feet\", \"inch\"])'\n  ],\n  'seealso': [\n    'unit', 'createUnit'\n  ]\n};\n","module.exports = {\n  'name': 'string',\n  'category': 'Construction',\n  'syntax': [\n    '\"text\"',\n    'string(x)'\n  ],\n  'description':\n      'Create a string or convert a value to a string',\n  'examples': [\n    '\"Hello World!\"',\n    'string(4.2)',\n    'string(3 + 2i)'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit'\n  ]\n};\n","module.exports = {\n  'name': 'unit',\n  'category': 'Construction',\n  'syntax': [\n    'value unit',\n    'unit(value, unit)',\n    'unit(string)'\n  ],\n  'description':\n      'Create a unit.',\n  'examples': [\n    '5.5 mm',\n    '3 inch',\n    'unit(7.1, \"kilogram\")',\n    'unit(\"23 deg\")'\n  ],\n  'seealso': [\n    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string'\n  ]\n};\n","module.exports = {\n  'name': 'config',\n  'category': 'Core',\n  'syntax': [\n    'config()',\n    'config(options)'\n  ],\n  'description': 'Get configuration or change configuration.',\n  'examples': [\n    'config()',\n    '1/3 + 1/4',\n    'config({number: \"Fraction\"})',\n    '1/3 + 1/4'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'import',\n  'category': 'Core',\n  'syntax': [\n    'import(functions)',\n    'import(functions, options)'\n  ],\n  'description': 'Import functions or constants from an object.',\n  'examples': [\n    'import({myFn: f(x)=x^2, myConstant: 32 })',\n    'myFn(2)',\n    'myConstant'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'typed',\n  'category': 'Core',\n  'syntax': [\n    'typed(signatures)',\n    'typed(name, signatures)'\n  ],\n  'description': 'Create a typed function.',\n  'examples': [\n    'double = typed({ \"number, number\": f(x)=x+x })',\n    'double(2)',\n    'double(\"hello\")'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'derivative',\n  'category': 'Algebra',\n  'syntax': [\n    'derivative(expr)',\n    'derivative(expr, {simplify: boolean})'\n  ],\n  'description': 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',\n  'examples': [\n    'derivative(\"2x^3\", \"x\")',\n    'derivative(\"2x^3\", \"x\", {simplify: false})',\n    'derivative(\"2x^2 + 3x + 4\", \"x\")',\n    'derivative(\"sin(2x)\", \"x\")',\n    'f = parse(\"x^2 + x\")',\n    'x = parse(\"x\")',\n    'df = derivative(f, x)',\n    'df.eval({x: 3})'\n  ],\n  'seealso': [\n    'simplify', 'parse', 'eval'\n  ]\n};\n","module.exports = {\n  'name': 'lsolve',\n  'category': 'Algebra',\n  'syntax': [\n    'x=lsolve(L, b)'\n  ],\n  'description':\n  'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',\n  'examples': [\n    'a = [-2, 3; 2, 1]',\n    'b = [11, 9]',\n    'x = lsolve(a, b)'\n  ],\n  'seealso': [\n    'lup', 'lusolve', 'usolve', 'matrix', 'sparse'\n  ]\n};\n","module.exports = {\n  'name': 'lup',\n  'category': 'Algebra',\n  'syntax': [\n    'lup(m)'\n  ],\n  'description':\n  'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',\n  'examples': [\n    'lup([[2, 1], [1, 4]])',\n    'lup(matrix([[2, 1], [1, 4]]))',\n    'lup(sparse([[2, 1], [1, 4]]))'\n  ],\n  'seealso': [\n    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr'\n  ]\n};\n","module.exports = {\n  'name': 'lusolve',\n  'category': 'Algebra',\n  'syntax': [\n    'x=lusolve(A, b)',\n    'x=lusolve(lu, b)'\n  ],\n  'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',\n  'examples': [\n    'a = [-2, 3; 2, 1]',\n    'b = [11, 9]',\n    'x = lusolve(a, b)'\n  ],\n  'seealso': [\n    'lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse'\n  ]\n};\n","module.exports = {\n  'name': 'qr',\n  'category': 'Algebra',\n  'syntax': [\n    'qr(A)'\n  ],\n  'description':\n  'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',\n  'examples': [\n    'qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'\n  ],\n  'seealso': [\n    'lup', 'slu', 'matrix'\n  ]\n};\n","module.exports = {\n  'name': 'simplify',\n  'category': 'Algebra',\n  'syntax': [\n    'simplify(expr)',\n    'simplify(expr, rules)'\n  ],\n  'description': 'Simplify an expression tree.',\n  'examples': [\n    'simplify(\"3 + 2 / 4\")',\n    'simplify(\"2x + x\")',\n    'f = parse(\"x * (x + 2 + x)\")',\n    'simplified = simplify(f)',\n    'simplified.eval({x: 2})'\n  ],\n  'seealso': [\n    'derivative', 'parse', 'eval'\n  ]\n};\n","module.exports = {\n  'name': 'slu',\n  'category': 'Algebra',\n  'syntax': [\n    'slu(A, order, threshold)'\n  ],\n  'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',\n  'examples': [\n    'slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'\n  ],\n  'seealso': [\n    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr'\n  ]\n};\n","module.exports = {\n  'name': 'usolve',\n  'category': 'Algebra',\n  'syntax': [\n    'x=usolve(U, b)'\n  ],\n  'description':\n  'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',\n  'examples': [\n    'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'\n  ],\n  'seealso': [\n    'lup', 'lusolve', 'lsolve', 'matrix', 'sparse'\n  ]\n};\n","module.exports = {\n  'name': 'abs',\n  'category': 'Arithmetic',\n  'syntax': [\n    'abs(x)'\n  ],\n  'description': 'Compute the absolute value.',\n  'examples': [\n    'abs(3.5)',\n    'abs(-4.2)'\n  ],\n  'seealso': ['sign']\n};\n","module.exports = {\n  'name': 'add',\n  'category': 'Operators',\n  'syntax': [\n    'x + y',\n    'add(x, y)'\n  ],\n  'description': 'Add two values.',\n  'examples': [\n    'a = 2.1 + 3.6',\n    'a - 3.6',\n    '3 + 2i',\n    '3 cm + 2 inch',\n    '\"2.3\" + \"4\"'\n  ],\n  'seealso': [\n    'subtract'\n  ]\n};\n","module.exports = {\n  'name': 'cbrt',\n  'category': 'Arithmetic',\n  'syntax': [\n    'cbrt(x)',\n    'cbrt(x, allRoots)'\n  ],\n  'description':\n      'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',\n  'examples': [\n    'cbrt(64)',\n    'cube(4)',\n    'cbrt(-8)',\n    'cbrt(2 + 3i)',\n    'cbrt(8i)',\n    'cbrt(8i, true)',\n    'cbrt(27 m^3)'\n  ],\n  'seealso': [\n    'square',\n    'sqrt',\n    'cube',\n    'multiply'\n  ]\n};\n","module.exports = {\n  'name': 'ceil',\n  'category': 'Arithmetic',\n  'syntax': [\n    'ceil(x)'\n  ],\n  'description':\n      'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',\n  'examples': [\n    'ceil(3.2)',\n    'ceil(3.8)',\n    'ceil(-4.2)'\n  ],\n  'seealso': ['floor', 'fix', 'round']\n};\n","module.exports = {\n  'name': 'cube',\n  'category': 'Arithmetic',\n  'syntax': [\n    'cube(x)'\n  ],\n  'description': 'Compute the cube of a value. The cube of x is x * x * x.',\n  'examples': [\n    'cube(2)',\n    '2^3',\n    '2 * 2 * 2'\n  ],\n  'seealso': [\n    'multiply',\n    'square',\n    'pow'\n  ]\n};\n","module.exports = {\n  'name': 'divide',\n  'category': 'Operators',\n  'syntax': [\n    'x / y',\n    'divide(x, y)'\n  ],\n  'description': 'Divide two values.',\n  'examples': [\n    'a = 2 / 3',\n    'a * 3',\n    '4.5 / 2',\n    '3 + 4 / 2',\n    '(3 + 4) / 2',\n    '18 km / 4.5'\n  ],\n  'seealso': [\n    'multiply'\n  ]\n};\n","module.exports = {\n  'name': 'dotDivide',\n  'category': 'Operators',\n  'syntax': [\n    'x ./ y',\n    'dotDivide(x, y)'\n  ],\n  'description': 'Divide two values element wise.',\n  'examples': [\n    'a = [1, 2, 3; 4, 5, 6]',\n    'b = [2, 1, 1; 3, 2, 5]',\n    'a ./ b'\n  ],\n  'seealso': [\n    'multiply',\n    'dotMultiply',\n    'divide'\n  ]\n};\n","module.exports = {\n  'name': 'dotMultiply',\n  'category': 'Operators',\n  'syntax': [\n    'x .* y',\n    'dotMultiply(x, y)'\n  ],\n  'description': 'Multiply two values element wise.',\n  'examples': [\n    'a = [1, 2, 3; 4, 5, 6]',\n    'b = [2, 1, 1; 3, 2, 5]',\n    'a .* b'\n  ],\n  'seealso': [\n    'multiply',\n    'divide',\n    'dotDivide'\n  ]\n};\n","module.exports = {\n  'name': 'dotpow',\n  'category': 'Operators',\n  'syntax': [\n    'x .^ y',\n    'dotpow(x, y)'\n  ],\n  'description':\n      'Calculates the power of x to y element wise.',\n  'examples': [\n    'a = [1, 2, 3; 4, 5, 6]',\n    'a .^ 2'\n  ],\n  'seealso': [\n    'pow'\n  ]\n};\n","module.exports = {\n  'name': 'exp',\n  'category': 'Arithmetic',\n  'syntax': [\n    'exp(x)'\n  ],\n  'description': 'Calculate the exponent of a value.',\n  'examples': [\n    'exp(1.3)',\n    'e ^ 1.3',\n    'log(exp(1.3))',\n    'x = 2.4',\n    '(exp(i*x) == cos(x) + i*sin(x))   # Euler\\'s formula'\n  ],\n  'seealso': [\n    'pow',\n    'log'\n  ]\n};\n","module.exports = {\n  'name': 'fix',\n  'category': 'Arithmetic',\n  'syntax': [\n    'fix(x)'\n  ],\n  'description':\n      'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',\n  'examples': [\n    'fix(3.2)',\n    'fix(3.8)',\n    'fix(-4.2)',\n    'fix(-4.8)'\n  ],\n  'seealso': ['ceil', 'floor', 'round']\n};\n","module.exports = {\n  'name': 'floor',\n  'category': 'Arithmetic',\n  'syntax': [\n    'floor(x)'\n  ],\n  'description':\n      'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',\n  'examples': [\n    'floor(3.2)',\n    'floor(3.8)',\n    'floor(-4.2)'\n  ],\n  'seealso': ['ceil', 'fix', 'round']\n};\n","module.exports = {\n  'name': 'gcd',\n  'category': 'Arithmetic',\n  'syntax': [\n    'gcd(a, b)',\n    'gcd(a, b, c, ...)'\n  ],\n  'description': 'Compute the greatest common divisor.',\n  'examples': [\n    'gcd(8, 12)',\n    'gcd(-4, 6)',\n    'gcd(25, 15, -10)'\n  ],\n  'seealso': [ 'lcm', 'xgcd' ]\n};\n","module.exports = {\n  'name': 'hypot',\n  'category': 'Arithmetic',\n  'syntax': [\n    'hypot(a, b, c, ...)',\n    'hypot([a, b, c, ...])'\n  ],\n  'description': 'Calculate the hypotenusa of a list with values. ',\n  'examples': [\n    'hypot(3, 4)',\n    'sqrt(3^2 + 4^2)',\n    'hypot(-2)',\n    'hypot([3, 4, 5])'\n  ],\n  'seealso': [ 'abs', 'norm' ]\n};\n","module.exports = {\n  'name': 'lcm',\n  'category': 'Arithmetic',\n  'syntax': [\n    'lcm(x, y)'\n  ],\n  'description': 'Compute the least common multiple.',\n  'examples': [\n    'lcm(4, 6)',\n    'lcm(6, 21)',\n    'lcm(6, 21, 5)'\n  ],\n  'seealso': [ 'gcd' ]\n};\n","module.exports = {\n  'name': 'log',\n  'category': 'Arithmetic',\n  'syntax': [\n    'log(x)',\n    'log(x, base)'\n  ],\n  'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',\n  'examples': [\n    'log(3.5)',\n    'a = log(2.4)',\n    'exp(a)',\n    '10 ^ 4',\n    'log(10000, 10)',\n    'log(10000) / log(10)',\n    'b = log(1024, 2)',\n    '2 ^ b'\n  ],\n  'seealso': [\n    'exp',\n    'log10'\n  ]\n};","module.exports = {\n  'name': 'log10',\n  'category': 'Arithmetic',\n  'syntax': [\n    'log10(x)'\n  ],\n  'description': 'Compute the 10-base logarithm of a value.',\n  'examples': [\n    'log10(0.00001)',\n    'log10(10000)',\n    '10 ^ 4',\n    'log(10000) / log(10)',\n    'log(10000, 10)'\n  ],\n  'seealso': [\n    'exp',\n    'log'\n  ]\n};\n","module.exports = {\n  'name': 'mod',\n  'category': 'Operators',\n  'syntax': [\n    'x % y',\n    'x mod y',\n    'mod(x, y)'\n  ],\n  'description':\n      'Calculates the modulus, the remainder of an integer division.',\n  'examples': [\n    '7 % 3',\n    '11 % 2',\n    '10 mod 4',\n    'function isOdd(x) = x % 2',\n    'isOdd(2)',\n    'isOdd(3)'\n  ],\n  'seealso': ['divide']\n};\n","module.exports = {\n  'name': 'multiply',\n  'category': 'Operators',\n  'syntax': [\n    'x * y',\n    'multiply(x, y)'\n  ],\n  'description': 'multiply two values.',\n  'examples': [\n    'a = 2.1 * 3.4',\n    'a / 3.4',\n    '2 * 3 + 4',\n    '2 * (3 + 4)',\n    '3 * 2.1 km'\n  ],\n  'seealso': [\n    'divide'\n  ]\n};\n","module.exports = {\n  'name': 'norm',\n  'category': 'Arithmetic',\n  'syntax': [\n    'norm(x)',\n    'norm(x, p)'\n  ],\n  'description': 'Calculate the norm of a number, vector or matrix.',\n  'examples': [\n    'abs(-3.5)',\n    'norm(-3.5)',\n    'norm(3 - 4i))',\n    'norm([1, 2, -3], Infinity)',\n    'norm([1, 2, -3], -Infinity)',\n    'norm([3, 4], 2)',\n    'norm([[1, 2], [3, 4]], 1)',\n    'norm([[1, 2], [3, 4]], \\'inf\\')',\n    'norm([[1, 2], [3, 4]], \\'fro\\')'\n  ]\n};\n","module.exports = {\n  'name': 'nthRoot',\n  'category': 'Arithmetic',\n  'syntax': [\n    'nthRoot(a)',\n    'nthRoot(a, root)'\n  ],\n  'description': 'Calculate the nth root of a value. ' +\n      'The principal nth root of a positive real number A, ' +\n      'is the positive real solution of the equation \"x^root = A\".',\n  'examples': [\n    '4 ^ 3',\n    'nthRoot(64, 3)',\n    'nthRoot(9, 2)',\n    'sqrt(9)'\n  ],\n  'seealso': [\n    'sqrt',\n    'pow'\n  ]\n};","module.exports = {\n  'name': 'pow',\n  'category': 'Operators',\n  'syntax': [\n    'x ^ y',\n    'pow(x, y)'\n  ],\n  'description':\n      'Calculates the power of x to y, x^y.',\n  'examples': [\n    '2^3 = 8',\n    '2*2*2',\n    '1 + e ^ (pi * i)'\n  ],\n  'seealso': [ 'multiply' ]\n};\n","module.exports = {\n  'name': 'round',\n  'category': 'Arithmetic',\n  'syntax': [\n    'round(x)',\n    'round(x, n)'\n  ],\n  'description':\n      'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',\n  'examples': [\n    'round(3.2)',\n    'round(3.8)',\n    'round(-4.2)',\n    'round(-4.8)',\n    'round(pi, 3)',\n    'round(123.45678, 2)'\n  ],\n  'seealso': ['ceil', 'floor', 'fix']\n};\n","module.exports = {\n  'name': 'sign',\n  'category': 'Arithmetic',\n  'syntax': [\n    'sign(x)'\n  ],\n  'description':\n      'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',\n  'examples': [\n    'sign(3.5)',\n    'sign(-4.2)',\n    'sign(0)'\n  ],\n  'seealso': [\n    'abs'\n  ]\n};\n","module.exports = {\n  'name': 'sqrt',\n  'category': 'Arithmetic',\n  'syntax': [\n    'sqrt(x)'\n  ],\n  'description':\n      'Compute the square root value. If x = y * y, then y is the square root of x.',\n  'examples': [\n    'sqrt(25)',\n    '5 * 5',\n    'sqrt(-1)'\n  ],\n  'seealso': [\n    'square',\n    'multiply'\n  ]\n};\n","module.exports = {\n  'name': 'square',\n  'category': 'Arithmetic',\n  'syntax': [\n    'square(x)'\n  ],\n  'description':\n      'Compute the square of a value. The square of x is x * x.',\n  'examples': [\n    'square(3)',\n    'sqrt(9)',\n    '3^2',\n    '3 * 3'\n  ],\n  'seealso': [\n    'multiply',\n    'pow',\n    'sqrt',\n    'cube'\n  ]\n};\n","module.exports = {\n  'name': 'subtract',\n  'category': 'Operators',\n  'syntax': [\n    'x - y',\n    'subtract(x, y)'\n  ],\n  'description': 'subtract two values.',\n  'examples': [\n    'a = 5.3 - 2',\n    'a + 2',\n    '2/3 - 1/6',\n    '2 * 3 - 3',\n    '2.1 km - 500m'\n  ],\n  'seealso': [\n    'add'\n  ]\n};\n","module.exports = {\n  'name': 'unaryMinus',\n  'category': 'Operators',\n  'syntax': [\n    '-x',\n    'unaryMinus(x)'\n  ],\n  'description':\n      'Inverse the sign of a value. Converts booleans and strings to numbers.',\n  'examples': [\n    '-4.5',\n    '-(-5.6)',\n    '-\"22\"'\n  ],\n  'seealso': [\n    'add', 'subtract', 'unaryPlus'\n  ]\n};\n","module.exports = {\n  'name': 'unaryPlus',\n  'category': 'Operators',\n  'syntax': [\n    '+x',\n    'unaryPlus(x)'\n  ],\n  'description':\n      'Converts booleans and strings to numbers.',\n  'examples': [\n    '+true',\n    '+\"2\"'\n  ],\n  'seealso': [\n    'add', 'subtract', 'unaryMinus'\n  ]\n};\n","module.exports = {\n  'name': 'xgcd',\n  'category': 'Arithmetic',\n  'syntax': [\n    'xgcd(a, b)'\n  ],\n  'description': 'Calculate the extended greatest common divisor for two values',\n  'examples': [\n    'xgcd(8, 12)',\n    'gcd(8, 12)',\n    'xgcd(36163, 21199)'\n  ],\n  'seealso': [ 'gcd', 'lcm' ]\n};\n","module.exports = {\n  'name': 'bitAnd',\n  'category': 'Bitwise',\n  'syntax': [\n    'x & y',\n    'bitAnd(x, y)'\n  ],\n  'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',\n  'examples': [\n    '5 & 3',\n    'bitAnd(53, 131)',\n    '[1, 12, 31] & 42'\n  ],\n  'seealso': [\n    'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n  ]\n};\n","module.exports = {\n  'name': 'bitNot',\n  'category': 'Bitwise',\n  'syntax': [\n    '~x',\n    'bitNot(x)'\n  ],\n  'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',\n  'examples': [\n    '~1',\n    '~2',\n    'bitNot([2, -3, 4])'\n  ],\n  'seealso': [\n    'bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n  ]\n};\n","module.exports = {\n  'name': 'bitOr',\n  'category': 'Bitwise',\n  'syntax': [\n    'x | y',\n    'bitOr(x, y)'\n  ],\n  'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',\n  'examples': [\n    '5 | 3',\n    'bitOr([1, 2, 3], 4)'\n  ],\n  'seealso': [\n    'bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'\n  ]\n};\n","module.exports = {\n  'name': 'bitXor',\n  'category': 'Bitwise',\n  'syntax': [\n    'bitXor(x, y)'\n  ],\n  'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',\n  'examples': [\n    'bitOr(1, 2)',\n    'bitXor([2, 3, 4], 4)'\n  ],\n  'seealso': [\n    'bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift'\n  ]\n};\n","module.exports = {\n  'name': 'leftShift',\n  'category': 'Bitwise',\n  'syntax': [\n    'x << y',\n    'leftShift(x, y)'\n  ],\n  'description': 'Bitwise left logical shift of a value x by y number of bits.',\n  'examples': [\n    '4 << 1',\n    '8 >> 1'\n  ],\n  'seealso': [\n    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift'\n  ]\n};\n","module.exports = {\n  'name': 'rightArithShift',\n  'category': 'Bitwise',\n  'syntax': [\n    'x >> y',\n    'leftShift(x, y)'\n  ],\n  'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',\n  'examples': [\n    '8 >> 1',\n    '4 << 1',\n    '-12 >> 2'\n  ],\n  'seealso': [\n    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift'\n  ]\n};\n","module.exports = {\n  'name': 'rightLogShift',\n  'category': 'Bitwise',\n  'syntax': [\n    'x >> y',\n    'leftShift(x, y)'\n  ],\n  'description': 'Bitwise right logical shift of a value x by y number of bits.',\n  'examples': [\n    '8 >>> 1',\n    '4 << 1',\n    '-12 >>> 2'\n  ],\n  'seealso': [\n    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift'\n  ]\n};\n","module.exports = {\n  'name': 'bellNumbers',\n  'category': 'Combinatorics',\n  'syntax': [\n    'bellNumbers(n)'\n  ],\n  'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',\n  'examples': [\n    'bellNumbers(3)',\n    'bellNumbers(8)'\n  ],\n  'seealso': ['stirlingS2']\n};","module.exports = {\n  'name': 'catalan',\n  'category': 'Combinatorics',\n  'syntax': [\n    'catalan(n)'\n  ],\n  'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',\n  'examples': [\n    'catalan(3)',\n    'catalan(8)'\n  ],\n  'seealso': ['bellNumbers']\n};","module.exports = {\n  'name': 'composition',\n  'category': 'Combinatorics',\n  'syntax': [\n    'composition(n, k)'\n  ],\n  'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',\n  'examples': [\n    'composition(5, 3)'\n  ],\n  'seealso': ['combinations']\n};","module.exports = {\n  'name': 'stirlingS2',\n  'category': 'Combinatorics',\n  'syntax': [\n    'stirlingS2(n, k)'\n  ],\n  'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',\n  'examples': [\n    'stirlingS2(5, 3)'\n  ],\n  'seealso': ['bellNumbers']\n};\n","module.exports = {\n  'name': 'arg',\n  'category': 'Complex',\n  'syntax': [\n    'arg(x)'\n  ],\n  'description':\n      'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',\n  'examples': [\n    'arg(2 + 2i)',\n    'atan2(3, 2)',\n    'arg(2 + 3i)'\n  ],\n  'seealso': [\n    're',\n    'im',\n    'conj',\n    'abs'\n  ]\n};\n","module.exports = {\n  'name': 'conj',\n  'category': 'Complex',\n  'syntax': [\n    'conj(x)'\n  ],\n  'description':\n      'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',\n  'examples': [\n    'conj(2 + 3i)',\n    'conj(2 - 3i)',\n    'conj(-5.2i)'\n  ],\n  'seealso': [\n    're',\n    'im',\n    'abs',\n    'arg'\n  ]\n};\n","module.exports = {\n  'name': 'im',\n  'category': 'Complex',\n  'syntax': [\n    'im(x)'\n  ],\n  'description': 'Get the imaginary part of a complex number.',\n  'examples': [\n    'im(2 + 3i)',\n    're(2 + 3i)',\n    'im(-5.2i)',\n    'im(2.4)'\n  ],\n  'seealso': [\n    're',\n    'conj',\n    'abs',\n    'arg'\n  ]\n};\n","module.exports = {\n  'name': 're',\n  'category': 'Complex',\n  'syntax': [\n    're(x)'\n  ],\n  'description': 'Get the real part of a complex number.',\n  'examples': [\n    're(2 + 3i)',\n    'im(2 + 3i)',\n    're(-5.2i)',\n    're(2.4)'\n  ],\n  'seealso': [\n    'im',\n    'conj',\n    'abs',\n    'arg'\n  ]\n};\n","module.exports = {\n  'name': 'eval',\n  'category': 'Expression',\n  'syntax': [\n    'eval(expression)',\n    'eval([expr1, expr2, expr3, ...])'\n  ],\n  'description': 'Evaluate an expression or an array with expressions.',\n  'examples': [\n    'eval(\"2 + 3\")',\n    'eval(\"sqrt(\" + 4 + \")\")'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'help',\n  'category': 'Expression',\n  'syntax': [\n    'help(object)',\n    'help(string)'\n  ],\n  'description': 'Display documentation on a function or data type.',\n  'examples': [\n    'help(sqrt)',\n    'help(\"complex\")'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'distance',\n  'category': 'Geometry',\n  'syntax': [\n    'distance([x1, y1], [x2, y2])',\n    'distance([[x1, y1], [x2, y2])'\n  ],\n  'description': 'Calculates the Euclidean distance between two points.',\n  'examples': [\n    'distance([0,0], [4,4])',\n    'distance([[0,0], [4,4]])'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'intersect',\n  'category': 'Geometry',\n  'syntax': [\n    'intersect(expr1, expr2, expr3, expr4)',\n    'intersect(expr1, expr2, expr3)'\n  ],\n  'description': 'Computes the intersection point of lines and/or planes.',\n  'examples': [\n    'intersect([0, 0], [10, 10], [10, 0], [0, 10])',\n    'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'and',\n  'category': 'Logical',\n  'syntax': [\n    'x and y',\n    'and(x, y)'\n  ],\n  'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',\n  'examples': [\n    'true and false',\n    'true and true',\n    '2 and 4'\n  ],\n  'seealso': [\n    'not', 'or', 'xor'\n  ]\n};\n","module.exports = {\n  'name': 'not',\n  'category': 'Logical',\n  'syntax': [\n    'not x',\n    'not(x)'\n  ],\n  'description': 'Logical not. Flips the boolean value of given argument.',\n  'examples': [\n    'not true',\n    'not false',\n    'not 2',\n    'not 0'\n  ],\n  'seealso': [\n    'and', 'or', 'xor'\n  ]\n};\n","module.exports = {\n  'name': 'or',\n  'category': 'Logical',\n  'syntax': [\n    'x or y',\n    'or(x, y)'\n  ],\n  'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',\n  'examples': [\n    'true or false',\n    'false or false',\n    '0 or 4'\n  ],\n  'seealso': [\n    'not', 'and', 'xor'\n  ]\n};\n","module.exports = {\n  'name': 'xor',\n  'category': 'Logical',\n  'syntax': [\n    'x or y',\n    'or(x, y)'\n  ],\n  'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',\n  'examples': [\n    'true xor false',\n    'false xor false',\n    'true xor true',\n    '0 or 4'\n  ],\n  'seealso': [\n    'not', 'and', 'or'\n  ]\n};\n","module.exports = {\n  'name': 'concat',\n  'category': 'Matrix',\n  'syntax': [\n    'concat(A, B, C, ...)',\n    'concat(A, B, C, ..., dim)'\n  ],\n  'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',\n  'examples': [\n    'A = [1, 2; 5, 6]',\n    'B = [3, 4; 7, 8]',\n    'concat(A, B)',\n    'concat(A, B, 1)',\n    'concat(A, B, 2)'\n  ],\n  'seealso': [\n    'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n","module.exports = {\n  'name': 'cross',\n  'category': 'Matrix',\n  'syntax': [\n    'cross(A, B)'\n  ],\n  'description': 'Calculate the cross product for two vectors in three dimensional space.',\n  'examples': [\n    'cross([1, 1, 0],  [0, 1, 1])',\n    'cross([3, -3, 1], [4, 9, 2])',\n    'cross([2, 3, 4],  [5, 6, 7])'\n  ],\n  'seealso': [\n    'multiply',\n    'dot'\n  ]\n};\n","module.exports = {\n  'name': 'det',\n  'category': 'Matrix',\n  'syntax': [\n    'det(x)'\n  ],\n  'description': 'Calculate the determinant of a matrix',\n  'examples': [\n    'det([1, 2; 3, 4])',\n    'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'\n  ],\n  'seealso': [\n    'concat', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n","module.exports = {\n  'name': 'diag',\n  'category': 'Matrix',\n  'syntax': [\n    'diag(x)',\n    'diag(x, k)'\n  ],\n  'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',\n  'examples': [\n    'diag(1:3)',\n    'diag(1:3, 1)',\n    'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]',\n    'diag(a)'\n  ],\n  'seealso': [\n    'concat', 'det', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n","module.exports = {\n  'name': 'dot',\n  'category': 'Matrix',\n  'syntax': [\n    'dot(A, B)'\n  ],\n  'description': 'Calculate the dot product of two vectors. ' +\n      'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' +\n      'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',\n  'examples': [\n    'dot([2, 4, 1], [2, 2, 3])',\n    '[2, 4, 1] * [2, 2, 3]'\n  ],\n  'seealso': [\n    'multiply',\n    'cross'\n  ]\n};\n","module.exports = {\n  'name': 'eye',\n  'category': 'Matrix',\n  'syntax': [\n    'eye(n)',\n    'eye(m, n)',\n    'eye([m, n])',\n    'eye'\n  ],\n  'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',\n  'examples': [\n    'eye(3)',\n    'eye(3, 5)',\n    'a = [1, 2, 3; 4, 5, 6]',\n    'eye(size(a))'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n","module.exports = {\n  'name': 'filter',\n  'category': 'Matrix',\n  'syntax': [\n    'filter(x, test)'\n  ],\n  'description': 'Filter items in a matrix.',\n  'examples': [\n    'isPositive(x) = x > 0',\n    'filter([6, -2, -1, 4, 3], isPositive)',\n    'filter([6, -2, 0, 1, 0], x != 0)'\n  ],\n  'seealso': ['sort', 'map', 'forEach']\n};\n","module.exports = {\n  'name': 'flatten',\n  'category': 'Matrix',\n  'syntax': [\n    'flatten(x)'\n  ],\n  'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',\n  'examples': [\n    'a = [1, 2, 3; 4, 5, 6]',\n    'size(a)',\n    'b = flatten(a)',\n    'size(b)'\n  ],\n  'seealso': [\n    'concat', 'resize', 'size', 'squeeze'\n  ]\n};\n","module.exports = {\n  'name': 'forEach',\n  'category': 'Matrix',\n  'syntax': [\n    'forEach(x, callback)'\n  ],\n  'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',\n  'examples': [\n    'forEach([1, 2, 3], function(val) { console.log(val) })'\n  ],\n  'seealso': ['map', 'sort', 'filter']\n};\n","module.exports = {\n  'name': 'inv',\n  'category': 'Matrix',\n  'syntax': [\n    'inv(x)'\n  ],\n  'description': 'Calculate the inverse of a matrix',\n  'examples': [\n    'inv([1, 2; 3, 4])',\n    'inv(4)',\n    '1 / 4'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n","module.exports = {\n  'name': 'kron',\n  'category': 'Matrix',\n  'syntax': [\n    'math.kron(x, y)'\n  ],\n  'description': 'Calculates the kronecker product of 2 matrices or vectors.',\n  'examples': [\n    'kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])',\n    'kron([1,1], [2,3,4])'\n  ],\n  'seealso': [\n    'multiply', 'dot', 'cross'\n  ]\n};\n","module.exports = {\n  'name': 'map',\n  'category': 'Matrix',\n  'syntax': [\n    'map(x, callback)'\n  ],\n  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',\n  'examples': [\n    'map([1, 2, 3], function(val) { return value * value })'\n  ],\n  'seealso': ['filter', 'forEach']\n};\n","module.exports = {\n  'name': 'ones',\n  'category': 'Matrix',\n  'syntax': [\n    'ones(m)',\n    'ones(m, n)',\n    'ones(m, n, p, ...)',\n    'ones([m])',\n    'ones([m, n])',\n    'ones([m, n, p, ...])',\n    'ones'\n  ],\n  'description': 'Create a matrix containing ones.',\n  'examples': [\n    'ones(3)',\n    'ones(3, 5)',\n    'ones([2,3]) * 4.5',\n    'a = [1, 2, 3; 4, 5, 6]',\n    'ones(size(a))'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n","module.exports = {\n  'name': 'partitionSelect',\n  'category': 'Matrix',\n  'syntax': [\n    'partitionSelect(x, k)',\n    'partitionSelect(x, k, compare)'\n  ],\n  'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',\n  'examples': [\n    'partitionSelect([5, 10, 1], 2)',\n    'partitionSelect([\"C\", \"B\", \"A\", \"D\"], 1)'\n  ],\n  'seealso': ['sort']\n};\n","module.exports = {\n  'name': 'range',\n  'category': 'Type',\n  'syntax': [\n    'start:end',\n    'start:step:end',\n    'range(start, end)',\n    'range(start, end, step)',\n    'range(string)'\n  ],\n  'description':\n      'Create a range. Lower bound of the range is included, upper bound is excluded.',\n  'examples': [\n    '1:5',\n    '3:-1:-3',\n    'range(3, 7)',\n    'range(0, 12, 2)',\n    'range(\"4:10\")',\n    'a = [1, 2, 3, 4; 5, 6, 7, 8]',\n    'a[1:2, 1:2]'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n","module.exports = {\n  'name': 'reshape',\n  'category': 'Matrix',\n  'syntax': [\n    'reshape(x, sizes)'\n  ],\n  'description': 'Reshape a multi dimensional array to fit the specified dimensions.',\n  'examples': [\n    'reshape([1, 2, 3, 4, 5, 6], [2, 3])',\n    'reshape([[1, 2], [3, 4]], [1, 4])',\n    'reshape([[1, 2], [3, 4]], [4])'\n  ],\n  'seealso': [\n    'size', 'squeeze', 'resize'\n  ]\n};\n","module.exports = {\n  'name': 'resize',\n  'category': 'Matrix',\n  'syntax': [\n    'resize(x, size)',\n    'resize(x, size, defaultValue)'\n  ],\n  'description': 'Resize a matrix.',\n  'examples': [\n    'resize([1,2,3,4,5], [3])',\n    'resize([1,2,3], [5])',\n    'resize([1,2,3], [5], -1)',\n    'resize(2, [2, 3])',\n    'resize(\"hello\", [8], \"!\")'\n  ],\n  'seealso': [\n    'size', 'subset', 'squeeze', 'reshape'\n  ]\n};\n","module.exports = {\n  'name': 'size',\n  'category': 'Matrix',\n  'syntax': [\n    'size(x)'\n  ],\n  'description': 'Calculate the size of a matrix.',\n  'examples': [\n    'size(2.3)',\n    'size(\"hello world\")',\n    'a = [1, 2; 3, 4; 5, 6]',\n    'size(a)',\n    'size(1:6)'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n","module.exports = {\n  'name': 'sort',\n  'category': 'Matrix',\n  'syntax': [\n    'sort(x)',\n    'sort(x, compare)'\n  ],\n  'description': 'Sort the items in a matrix. Compare can be a string \"asc\", \"desc\", \"natural\", or a custom sort function.',\n  'examples': [\n    'sort([5, 10, 1])',\n    'sort([\"C\", \"B\", \"A\", \"D\"])',\n    'sortByLength(a, b) = size(a)[1] - size(b)[1]',\n    'sort([\"Langdon\", \"Tom\", \"Sara\"], sortByLength)',\n    'sort([\"10\", \"1\", \"2\"], \"natural\")'\n  ],\n  'seealso': ['map', 'filter', 'forEach']\n};\n","module.exports = {\n  'name': 'squeeze',\n  'category': 'Matrix',\n  'syntax': [\n    'squeeze(x)'\n  ],\n  'description': 'Remove inner and outer singleton dimensions from a matrix.',\n  'examples': [\n    'a = zeros(3,2,1)',\n    'size(squeeze(a))',\n    'b = zeros(1,1,3)',\n    'size(squeeze(b))'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros'\n  ]\n};\n","module.exports = {\n  'name': 'subset',\n  'category': 'Matrix',\n  'syntax': [\n    'value(index)',\n    'value(index) = replacement',\n    'subset(value, [index])',\n    'subset(value, [index], replacement)'\n  ],\n  'description': 'Get or set a subset of a matrix or string. ' +\n      'Indexes are one-based. ' +\n      'Both the ranges lower-bound and upper-bound are included.',\n  'examples': [\n    'd = [1, 2; 3, 4]',\n    'e = []',\n    'e[1, 1:2] = [5, 6]',\n    'e[2, :] = [7, 8]',\n    'f = d * e',\n    'f[2, 1]',\n    'f[:, 1]'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros'\n  ]\n};\n","module.exports = {\n  'name': 'trace',\n  'category': 'Matrix',\n  'syntax': [\n    'trace(A)'\n  ],\n  'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',\n  'examples': [\n    'A = [1, 2, 3; -1, 2, 3; 2, 0, 3]',\n    'trace(A)'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros'\n  ]\n};\n","module.exports = {\n  'name': 'transpose',\n  'category': 'Matrix',\n  'syntax': [\n    'x\\'',\n    'transpose(x)'\n  ],\n  'description': 'Transpose a matrix',\n  'examples': [\n    'a = [1, 2, 3; 4, 5, 6]',\n    'a\\'',\n    'transpose(a)'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros'\n  ]\n};\n","module.exports = {\n  'name': 'zeros',\n  'category': 'Matrix',\n  'syntax': [\n    'zeros(m)',\n    'zeros(m, n)',\n    'zeros(m, n, p, ...)',\n    'zeros([m])',\n    'zeros([m, n])',\n    'zeros([m, n, p, ...])',\n    'zeros'\n  ],\n  'description': 'Create a matrix containing zeros.',\n  'examples': [\n    'zeros(3)',\n    'zeros(3, 5)',\n    'a = [1, 2, 3; 4, 5, 6]',\n    'zeros(size(a))'\n  ],\n  'seealso': [\n    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose'\n  ]\n};\n","module.exports = {\n  'name': 'combinations',\n  'category': 'Probability',\n  'syntax': [\n    'combinations(n, k)'\n  ],\n  'description': 'Compute the number of combinations of n items taken k at a time',\n  'examples': [\n    'combinations(7, 5)'\n  ],\n  'seealso': ['permutations', 'factorial']\n};\n","module.exports = {\n  'name': 'factorial',\n  'category': 'Probability',\n  'syntax': [\n    'kldivergence(x, y)'\n  ],\n  'description': 'Compute the factorial of a value',\n  'examples': [\n    '5!',\n    '5 * 4 * 3 * 2 * 1',\n    '3!'\n  ],\n  'seealso': ['combinations', 'permutations', 'gamma']\n};\n","module.exports = {\n  'name': 'gamma',\n  'category': 'Probability',\n  'syntax': [\n    'gamma(n)'\n  ],\n  'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',\n  'examples': [\n    'gamma(4)',\n    '3!',\n    'gamma(1/2)',\n    'sqrt(pi)'\n  ],\n  'seealso': ['factorial']\n};\n","module.exports = {\n  'name': 'kldivergence',\n  'category': 'Probability',\n  'syntax': [\n    'n!',\n    'factorial(n)'\n  ],\n  'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',\n  'examples': [\n    'math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'multinomial',\n  'category': 'Probability',\n  'syntax': [\n    'multinomial(A)'\n  ],\n  'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai <= 0.',\n  'examples': [\n    'multinomial([1, 2, 1])'\n  ],\n  'seealso': ['combinations', 'factorial']\n};","module.exports = {\n  'name': 'permutations',\n  'category': 'Probability',\n  'syntax': [\n    'permutations(n)',\n    'permutations(n, k)'\n  ],\n  'description': 'Compute the number of permutations of n items taken k at a time',\n  'examples': [\n    'permutations(5)',\n    'permutations(5, 3)'\n  ],\n  'seealso': ['combinations', 'factorial']\n};\n","module.exports = {\n  'name': 'pickRandom',\n  'category': 'Probability',\n  'syntax': [\n    'pickRandom(array)',\n    'pickRandom(array, number)',\n    'pickRandom(array, weights)',\n    'pickRandom(array, number, weights)',\n    'pickRandom(array, weights, number)'\n  ],\n  'description':\n      'Pick a random entry from a given array.',\n  'examples': [\n    'pickRandom(0:10)',\n    'pickRandom([1, 3, 1, 6])',\n    'pickRandom([1, 3, 1, 6], 2)',\n    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])',\n    'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])',\n    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'\n  ],\n  'seealso': ['random', 'randomInt']\n};\n","module.exports = {\n  'name': 'random',\n  'category': 'Probability',\n  'syntax': [\n    'random()',\n    'random(max)',\n    'random(min, max)',\n    'random(size)',\n    'random(size, max)',\n    'random(size, min, max)'\n  ],\n  'description':\n      'Return a random number.',\n  'examples': [\n    'random()',\n    'random(10, 20)',\n    'random([2, 3])'\n  ],\n  'seealso': ['pickRandom', 'randomInt']\n};\n","module.exports = {\n  'name': 'randInt',\n  'category': 'Probability',\n  'syntax': [\n    'randInt(max)',\n    'randInt(min, max)',\n    'randInt(size)',\n    'randInt(size, max)',\n    'randInt(size, min, max)'\n  ],\n  'description':\n      'Return a random integer number',\n  'examples': [\n    'randInt(10, 20)',\n    'randInt([2, 3], 10)'\n  ],\n  'seealso': ['pickRandom', 'random']\n};","module.exports = {\n  'name': 'compare',\n  'category': 'Relational',\n  'syntax': [\n    'compare(x, y)'\n  ],\n  'description':\n      'Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.',\n  'examples': [\n    'compare(2, 3)',\n    'compare(3, 2)',\n    'compare(2, 2)',\n    'compare(5cm, 40mm)',\n    'compare(2, [1, 2, 3])'\n  ],\n  'seealso': [\n    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compareNatural'\n  ]\n};\n","module.exports = {\n  'name': 'compareNatural',\n  'category': 'Relational',\n  'syntax': [\n    'compareNatural(x, y)'\n  ],\n  'description': 'Compare two values of any type in a deterministic, natural way.',\n  'examples': [\n    'compare(2, 3)',\n    'compare(3, 2)',\n    'compare(2, 2)',\n    'compare(5cm, 40mm)',\n    'compare(\"2\", \"10\")',\n    'compare(2 + 3i, 2 + 4i)',\n    'compare([1, 2, 4], [1, 2, 3])',\n    'compare([1, 5], [1, 2, 3])',\n    'compare([1, 2], [1, 2])',\n    'compare({a: 2}, {a: 4})'\n  ],\n  'seealso': [\n    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'\n  ]\n};\n","module.exports = {\n  'name': 'deepEqual',\n  'category': 'Relational',\n  'syntax': [\n    'deepEqual(x, y)'\n  ],\n  'description':\n      'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',\n  'examples': [\n    '[1,3,4] == [1,3,4]',\n    '[1,3,4] == [1,3]'\n  ],\n  'seealso': [\n    'equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare'\n  ]\n};\n","module.exports = {\n  'name': 'equal',\n  'category': 'Relational',\n  'syntax': [\n    'x == y',\n    'equal(x, y)'\n  ],\n  'description':\n      'Check equality of two values. Returns true if the values are equal, and false if not.',\n  'examples': [\n    '2+2 == 3',\n    '2+2 == 4',\n    'a = 3.2',\n    'b = 6-2.8',\n    'a == b',\n    '50cm == 0.5m'\n  ],\n  'seealso': [\n    'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'\n  ]\n};\n","module.exports = {\n  'name': 'larger',\n  'category': 'Relational',\n  'syntax': [\n    'x > y',\n    'larger(x, y)'\n  ],\n  'description':\n      'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',\n  'examples': [\n    '2 > 3',\n    '5 > 2*2',\n    'a = 3.3',\n    'b = 6-2.8',\n    '(a > b)',\n    '(b < a)',\n    '5 cm > 2 inch'\n  ],\n  'seealso': [\n    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'\n  ]\n};\n","module.exports = {\n  'name': 'largerEq',\n  'category': 'Relational',\n  'syntax': [\n    'x >= y',\n    'largerEq(x, y)'\n  ],\n  'description':\n      'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',\n  'examples': [\n    '2 > 1+1',\n    '2 >= 1+1',\n    'a = 3.2',\n    'b = 6-2.8',\n    '(a > b)'\n  ],\n  'seealso': [\n    'equal', 'unequal', 'smallerEq', 'smaller', 'largerEq', 'compare'\n  ]\n};\n","module.exports = {\n  'name': 'smaller',\n  'category': 'Relational',\n  'syntax': [\n    'x < y',\n    'smaller(x, y)'\n  ],\n  'description':\n      'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',\n  'examples': [\n    '2 < 3',\n    '5 < 2*2',\n    'a = 3.3',\n    'b = 6-2.8',\n    '(a < b)',\n    '5 cm < 2 inch'\n  ],\n  'seealso': [\n    'equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare'\n  ]\n};\n","module.exports = {\n  'name': 'smallerEq',\n  'category': 'Relational',\n  'syntax': [\n    'x <= y',\n    'smallerEq(x, y)'\n  ],\n  'description':\n      'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',\n  'examples': [\n    '2 < 1+1',\n    '2 <= 1+1',\n    'a = 3.2',\n    'b = 6-2.8',\n    '(a < b)'\n  ],\n  'seealso': [\n    'equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare'\n  ]\n};\n","module.exports = {\n  'name': 'unequal',\n  'category': 'Relational',\n  'syntax': [\n    'x != y',\n    'unequal(x, y)'\n  ],\n  'description':\n      'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',\n  'examples': [\n    '2+2 != 3',\n    '2+2 != 4',\n    'a = 3.2',\n    'b = 6-2.8',\n    'a != b',\n    '50cm != 0.5m',\n    '5 cm != 2 inch'\n  ],\n  'seealso': [\n    'equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'\n  ]\n};\n","module.exports = {\n  'name': 'setCartesian',\n  'category': 'Set',\n  'syntax': [\n    'setCartesian(set1, set2)'\n  ],\n  'description':\n      'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  'examples': [\n    'setCartesian([1, 2], [3, 4])'\n  ],\n  'seealso': [\n    'setUnion', 'setIntersect', 'setDifference', 'setPowerset'\n  ]\n};\n","module.exports = {\n  'name': 'setDifference',\n  'category': 'Set',\n  'syntax': [\n    'setDifference(set1, set2)'\n  ],\n  'description':\n      'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  'examples': [\n    'setDifference([1, 2, 3, 4], [3, 4, 5, 6])',\n    'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'\n  ],\n  'seealso': [\n    'setUnion', 'setIntersect', 'setSymDifference'\n  ]\n};\n","module.exports = {\n  'name': 'setDistinct',\n  'category': 'Set',\n  'syntax': [\n    'setDistinct(set)'\n  ],\n  'description':\n      'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',\n  'examples': [\n    'setDistinct([1, 1, 1, 2, 2, 3])'\n  ],\n  'seealso': [\n    'setMultiplicity'\n  ]\n};\n","module.exports = {\n  'name': 'setIntersect',\n  'category': 'Set',\n  'syntax': [\n    'setIntersect(set1, set2)'\n  ],\n  'description':\n      'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  'examples': [\n    'setIntersect([1, 2, 3, 4], [3, 4, 5, 6])',\n    'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'\n  ],\n  'seealso': [\n    'setUnion', 'setDifference'\n  ]\n};\n","module.exports = {\n  'name': 'setIsSubset',\n  'category': 'Set',\n  'syntax': [\n    'setIsSubset(set1, set2)'\n  ],\n  'description':\n      'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  'examples': [\n    'setIsSubset([1, 2], [3, 4, 5, 6])',\n    'setIsSubset([3, 4], [3, 4, 5, 6])'\n  ],\n  'seealso': [\n    'setUnion', 'setIntersect', 'setDifference'\n  ]\n};\n","module.exports = {\n  'name': 'setMultiplicity',\n  'category': 'Set',\n  'syntax': [\n    'setMultiplicity(element, set)'\n  ],\n  'description':\n      'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',\n  'examples': [\n    'setMultiplicity(1, [1, 2, 2, 4])',\n    'setMultiplicity(2, [1, 2, 2, 4])'\n  ],\n  'seealso': [\n    'setDistinct', 'setSize'\n  ]\n};\n","module.exports = {\n  'name': 'setPowerset',\n  'category': 'Set',\n  'syntax': [\n    'setPowerset(set)'\n  ],\n  'description':\n      'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',\n  'examples': [\n    'setPowerset([1, 2, 3])'\n  ],\n  'seealso': [\n    'setCartesian'\n  ]\n};\n","module.exports = {\n  'name': 'setSize',\n  'category': 'Set',\n  'syntax': [\n    'setSize(set)',\n    'setSize(set, unique)'\n  ],\n  'description':\n      'Count the number of elements of a (multi)set. When the second parameter \"unique\" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',\n  'examples': [\n    'setSize([1, 2, 2, 4])',\n    'setSize([1, 2, 2, 4], true)'\n  ],\n  'seealso': [\n    'setUnion', 'setIntersect', 'setDifference'\n  ]\n};\n","module.exports = {\n  'name': 'setSymDifference',\n  'category': 'Set',\n  'syntax': [\n    'setSymDifference(set1, set2)'\n  ],\n  'description':\n      'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  'examples': [\n    'setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])',\n    'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'\n  ],\n  'seealso': [\n    'setUnion', 'setIntersect', 'setDifference'\n  ]\n};\n","module.exports = {\n  'name': 'setUnion',\n  'category': 'Set',\n  'syntax': [\n    'setUnion(set1, set2)'\n  ],\n  'description':\n      'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',\n  'examples': [\n    'setUnion([1, 2, 3, 4], [3, 4, 5, 6])',\n    'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'\n  ],\n  'seealso': [\n    'setIntersect', 'setDifference'\n  ]\n};\n","module.exports = {\n  'name': 'erf',\n  'category': 'Special',\n  'syntax': [\n    'erf(x)'\n  ],\n  'description': 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',\n  'examples': [\n    'erf(0.2)',\n    'erf(-0.5)',\n    'erf(4)'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'mad',\n  'category': 'Statistics',\n  'syntax': [\n    'mad(a, b, c, ...)',\n    'mad(A)'\n  ],\n  'description': 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',\n  'examples': [\n    'mad(10, 20, 30)',\n    'mad([1, 2, 3])',\n    'mad(10, 20, 30)'\n  ],\n  'seealso': [\n    'mean',\n    'median',\n    'std',\n    'abs'\n  ]\n};\n","module.exports = {\n  'name': 'max',\n  'category': 'Statistics',\n  'syntax': [\n    'max(a, b, c, ...)',\n    'max(A)',\n    'max(A, dim)'\n  ],\n  'description': 'Compute the maximum value of a list of values.',\n  'examples': [\n    'max(2, 3, 4, 1)',\n    'max([2, 3, 4, 1])',\n    'max([2, 5; 4, 3])',\n    'max([2, 5; 4, 3], 1)',\n    'max([2, 5; 4, 3], 2)',\n    'max(2.7, 7.1, -4.5, 2.0, 4.1)',\n    'min(2.7, 7.1, -4.5, 2.0, 4.1)'\n  ],\n  'seealso': [\n    'mean',\n    'median',\n    'min',\n    'prod',\n    'std',\n    'sum',\n    'var'\n  ]\n};\n","module.exports = {\n  'name': 'mean',\n  'category': 'Statistics',\n  'syntax': [\n    'mean(a, b, c, ...)',\n    'mean(A)',\n    'mean(A, dim)'\n  ],\n  'description': 'Compute the arithmetic mean of a list of values.',\n  'examples': [\n    'mean(2, 3, 4, 1)',\n    'mean([2, 3, 4, 1])',\n    'mean([2, 5; 4, 3])',\n    'mean([2, 5; 4, 3], 1)',\n    'mean([2, 5; 4, 3], 2)',\n    'mean([1.0, 2.7, 3.2, 4.0])'\n  ],\n  'seealso': [\n    'max',\n    'median',\n    'min',\n    'prod',\n    'std',\n    'sum',\n    'var'\n  ]\n};\n","module.exports = {\n  'name': 'median',\n  'category': 'Statistics',\n  'syntax': [\n    'median(a, b, c, ...)',\n    'median(A)'\n  ],\n  'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',\n  'examples': [\n    'median(5, 2, 7)',\n    'median([3, -1, 5, 7])'\n  ],\n  'seealso': [\n    'max',\n    'mean',\n    'min',\n    'prod',\n    'std',\n    'sum',\n    'var',\n    'quantileSeq'\n  ]\n};\n","module.exports = {\n  'name': 'min',\n  'category': 'Statistics',\n  'syntax': [\n    'min(a, b, c, ...)',\n    'min(A)',\n    'min(A, dim)'\n  ],\n  'description': 'Compute the minimum value of a list of values.',\n  'examples': [\n    'min(2, 3, 4, 1)',\n    'min([2, 3, 4, 1])',\n    'min([2, 5; 4, 3])',\n    'min([2, 5; 4, 3], 1)',\n    'min([2, 5; 4, 3], 2)',\n    'min(2.7, 7.1, -4.5, 2.0, 4.1)',\n    'max(2.7, 7.1, -4.5, 2.0, 4.1)'\n  ],\n  'seealso': [\n    'max',\n    'mean',\n    'median',\n    'prod',\n    'std',\n    'sum',\n    'var'\n  ]\n};\n","module.exports = {\n  'name': 'mode',\n  'category': 'Statistics',\n  'syntax': [\n    'mode(a, b, c, ...)',\n    'mode(A)',\n    'mode(A, a, b, B, c, ...)'\n  ],\n  'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',\n  'examples': [\n    'mode(5, 2, 7)',\n    'mode([3, -1, 5, 7])'\n  ],\n  'seealso': [\n    'max',\n    'mean',\n    'min',\n    'median',\n    'prod',\n    'std',\n    'sum',\n    'var'\n  ]\n};\n","module.exports = {\n  'name': 'prod',\n  'category': 'Statistics',\n  'syntax': [\n    'prod(a, b, c, ...)',\n    'prod(A)'\n  ],\n  'description': 'Compute the product of all values.',\n  'examples': [\n    'prod(2, 3, 4)',\n    'prod([2, 3, 4])',\n    'prod([2, 5; 4, 3])'\n  ],\n  'seealso': [\n    'max',\n    'mean',\n    'min',\n    'median',\n    'min',\n    'std',\n    'sum',\n    'var'\n  ]\n};\n","module.exports = {\n  'name': 'quantileSeq',\n  'category': 'Statistics',\n  'syntax': [\n    'quantileSeq(A, prob[, sorted])',\n    'quantileSeq(A, [prob1, prob2, ...][, sorted])',\n    'quantileSeq(A, N[, sorted])'\n  ],\n  'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \\n\\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',\n  'examples': [\n    'quantileSeq([3, -1, 5, 7], 0.5)',\n    'quantileSeq([3, -1, 5, 7], [1/3, 2/3])',\n    'quantileSeq([3, -1, 5, 7], 2)',\n    'quantileSeq([-1, 3, 5, 7], 0.5, true)'\n  ],\n  'seealso': [\n    'mean',\n    'median',\n    'min',\n    'max',\n    'prod',\n    'std',\n    'sum',\n    'var'\n  ]\n};","module.exports = {\n  'name': 'std',\n  'category': 'Statistics',\n  'syntax': [\n    'std(a, b, c, ...)',\n    'std(A)',\n    'std(A, normalization)'\n  ],\n  'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n  'examples': [\n    'std(2, 4, 6)',\n    'std([2, 4, 6, 8])',\n    'std([2, 4, 6, 8], \"uncorrected\")',\n    'std([2, 4, 6, 8], \"biased\")',\n    'std([1, 2, 3; 4, 5, 6])'\n  ],\n  'seealso': [\n    'max',\n    'mean',\n    'min',\n    'median',\n    'min',\n    'prod',\n    'sum',\n    'var'\n  ]\n};\n","module.exports = {\n  'name': 'sum',\n  'category': 'Statistics',\n  'syntax': [\n    'sum(a, b, c, ...)',\n    'sum(A)'\n  ],\n  'description': 'Compute the sum of all values.',\n  'examples': [\n    'sum(2, 3, 4, 1)',\n    'sum([2, 3, 4, 1])',\n    'sum([2, 5; 4, 3])'\n  ],\n  'seealso': [\n    'max',\n    'mean',\n    'median',\n    'min',\n    'prod',\n    'std',\n    'sum',\n    'var'\n  ]\n};\n","module.exports = {\n  'name': 'var',\n  'category': 'Statistics',\n  'syntax': [\n    'var(a, b, c, ...)',\n    'var(A)',\n    'var(A, normalization)'\n  ],\n  'description': 'Compute the variance of all values. Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n  'examples': [\n    'var(2, 4, 6)',\n    'var([2, 4, 6, 8])',\n    'var([2, 4, 6, 8], \"uncorrected\")',\n    'var([2, 4, 6, 8], \"biased\")',\n    'var([1, 2, 3; 4, 5, 6])'\n  ],\n  'seealso': [\n    'max',\n    'mean',\n    'min',\n    'median',\n    'min',\n    'prod',\n    'std',\n    'sum'\n  ]\n};\n","module.exports = {\n  'name': 'acos',\n  'category': 'Trigonometry',\n  'syntax': [\n    'acos(x)'\n  ],\n  'description': 'Compute the inverse cosine of a value in radians.',\n  'examples': [\n    'acos(0.5)',\n    'acos(cos(2.3))'\n  ],\n  'seealso': [\n    'cos',\n    'atan',\n    'asin'\n  ]\n};\n","module.exports = {\n  'name': 'acosh',\n  'category': 'Trigonometry',\n  'syntax': [\n    'acosh(x)'\n  ],\n  'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',\n  'examples': [\n    'acosh(1.5)'\n  ],\n  'seealso': [\n    'cosh',\n    'asinh',\n    'atanh'\n  ]\n};","module.exports = {\n  'name': 'acot',\n  'category': 'Trigonometry',\n  'syntax': [\n    'acot(x)'\n  ],\n  'description': 'Calculate the inverse cotangent of a value.',\n  'examples': [\n    'acot(0.5)',\n    'acot(cot(0.5))',\n    'acot(2)'\n  ],\n  'seealso': [\n    'cot',\n    'atan'\n  ]\n};\n","module.exports = {\n  'name': 'acoth',\n  'category': 'Trigonometry',\n  'syntax': [\n    'acoth(x)'\n  ],\n  'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',\n  'examples': [\n    'acoth(0.5)'\n  ],\n  'seealso': [\n    'acsch',\n    'asech'\n  ]\n};","module.exports = {\n  'name': 'acsc',\n  'category': 'Trigonometry',\n  'syntax': [\n    'acsc(x)'\n  ],\n  'description': 'Calculate the inverse cotangent of a value.',\n  'examples': [\n    'acsc(0.5)',\n    'acsc(csc(0.5))',\n    'acsc(2)'\n  ],\n  'seealso': [\n    'csc',\n    'asin',\n    'asec'\n  ]\n};\n","module.exports = {\n  'name': 'acsch',\n  'category': 'Trigonometry',\n  'syntax': [\n    'acsch(x)'\n  ],\n  'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',\n  'examples': [\n    'acsch(0.5)'\n  ],\n  'seealso': [\n    'asech',\n    'acoth'\n  ]\n};\n","module.exports = {\n  'name': 'asec',\n  'category': 'Trigonometry',\n  'syntax': [\n    'asec(x)'\n  ],\n  'description': 'Calculate the inverse secant of a value.',\n  'examples': [\n    'asec(0.5)',\n    'asec(sec(0.5))',\n    'asec(2)'\n  ],\n  'seealso': [\n    'acos',\n    'acot',\n    'acsc'\n  ]\n};\n","module.exports = {\n  'name': 'asech',\n  'category': 'Trigonometry',\n  'syntax': [\n    'asech(x)'\n  ],\n  'description': 'Calculate the inverse secant of a value.',\n  'examples': [\n    'asech(0.5)'\n  ],\n  'seealso': [\n    'acsch',\n    'acoth'\n  ]\n};\n","module.exports = {\n  'name': 'asin',\n  'category': 'Trigonometry',\n  'syntax': [\n    'asin(x)'\n  ],\n  'description': 'Compute the inverse sine of a value in radians.',\n  'examples': [\n    'asin(0.5)',\n    'asin(sin(2.3))'\n  ],\n  'seealso': [\n    'sin',\n    'acos',\n    'atan'\n  ]\n};\n","module.exports = {\n  'name': 'asinh',\n  'category': 'Trigonometry',\n  'syntax': [\n    'asinh(x)'\n  ],\n  'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',\n  'examples': [\n    'asinh(0.5)'\n  ],\n  'seealso': [\n    'acosh',\n    'atanh'\n  ]\n};\n","module.exports = {\n  'name': 'atan',\n  'category': 'Trigonometry',\n  'syntax': [\n    'atan(x)'\n  ],\n  'description': 'Compute the inverse tangent of a value in radians.',\n  'examples': [\n    'atan(0.5)',\n    'atan(tan(2.3))'\n  ],\n  'seealso': [\n    'tan',\n    'acos',\n    'asin'\n  ]\n};\n","module.exports = {\n  'name': 'atan2',\n  'category': 'Trigonometry',\n  'syntax': [\n    'atan2(y, x)'\n  ],\n  'description':\n      'Computes the principal value of the arc tangent of y/x in radians.',\n  'examples': [\n    'atan2(2, 2) / pi',\n    'angle = 60 deg in rad',\n    'x = cos(angle)',\n    'y = sin(angle)',\n    'atan2(y, x)'\n  ],\n  'seealso': [\n    'sin',\n    'cos',\n    'tan'\n  ]\n};\n","module.exports = {\n  'name': 'atanh',\n  'category': 'Trigonometry',\n  'syntax': [\n    'atanh(x)'\n  ],\n  'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',\n  'examples': [\n    'atanh(0.5)'\n  ],\n  'seealso': [\n    'acosh',\n    'asinh'\n  ]\n};\n","module.exports = {\n  'name': 'cos',\n  'category': 'Trigonometry',\n  'syntax': [\n    'cos(x)'\n  ],\n  'description': 'Compute the cosine of x in radians.',\n  'examples': [\n    'cos(2)',\n    'cos(pi / 4) ^ 2',\n    'cos(180 deg)',\n    'cos(60 deg)',\n    'sin(0.2)^2 + cos(0.2)^2'\n  ],\n  'seealso': [\n    'acos',\n    'sin',\n    'tan'\n  ]\n};\n","module.exports = {\r\n  'name': 'cosh',\r\n  'category': 'Trigonometry',\r\n  'syntax': [\r\n    'cosh(x)'\r\n  ],\r\n  'description': 'Compute the hyperbolic cosine of x in radians.',\r\n  'examples': [\r\n    'cosh(0.5)'\r\n  ],\r\n  'seealso': [\r\n    'sinh',\r\n    'tanh',\r\n    'coth'\r\n  ]\r\n};\r\n","module.exports = {\n  'name': 'cot',\n  'category': 'Trigonometry',\n  'syntax': [\n    'cot(x)'\n  ],\n  'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',\n  'examples': [\n    'cot(2)',\n    '1 / tan(2)'\n  ],\n  'seealso': [\n    'sec',\n    'csc',\n    'tan'\n  ]\n};\n","module.exports = {\r\n  'name': 'coth',\r\n  'category': 'Trigonometry',\r\n  'syntax': [\r\n    'coth(x)'\r\n  ],\r\n  'description': 'Compute the hyperbolic cotangent of x in radians.',\r\n  'examples': [\r\n    'coth(2)',\r\n    '1 / tanh(2)'\r\n  ],\r\n  'seealso': [\r\n    'sech',\r\n    'csch',\r\n    'tanh'\r\n  ]\r\n};\r\n","module.exports = {\n  'name': 'csc',\n  'category': 'Trigonometry',\n  'syntax': [\n    'csc(x)'\n  ],\n  'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',\n  'examples': [\n    'csc(2)',\n    '1 / sin(2)'\n  ],\n  'seealso': [\n    'sec',\n    'cot',\n    'sin'\n  ]\n};\n","module.exports = {\r\n  'name': 'csch',\r\n  'category': 'Trigonometry',\r\n  'syntax': [\r\n    'csch(x)'\r\n  ],\r\n  'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',\r\n  'examples': [\r\n    'csch(2)',\r\n    '1 / sinh(2)'\r\n  ],\r\n  'seealso': [\r\n    'sech',\r\n    'coth',\r\n    'sinh'\r\n  ]\r\n};\r\n","module.exports = {\n  'name': 'sec',\n  'category': 'Trigonometry',\n  'syntax': [\n    'sec(x)'\n  ],\n  'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',\n  'examples': [\n    'sec(2)',\n    '1 / cos(2)'\n  ],\n  'seealso': [\n    'cot',\n    'csc',\n    'cos'\n  ]\n};\n","module.exports = {\r\n  'name': 'sech',\r\n  'category': 'Trigonometry',\r\n  'syntax': [\r\n    'sech(x)'\r\n  ],\r\n  'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',\r\n  'examples': [\r\n    'sech(2)',\r\n    '1 / cosh(2)'\r\n  ],\r\n  'seealso': [\r\n    'coth',\r\n    'csch',\r\n    'cosh'\r\n  ]\r\n};\r\n","module.exports = {\n  'name': 'sin',\n  'category': 'Trigonometry',\n  'syntax': [\n    'sin(x)'\n  ],\n  'description': 'Compute the sine of x in radians.',\n  'examples': [\n    'sin(2)',\n    'sin(pi / 4) ^ 2',\n    'sin(90 deg)',\n    'sin(30 deg)',\n    'sin(0.2)^2 + cos(0.2)^2'\n  ],\n  'seealso': [\n    'asin',\n    'cos',\n    'tan'\n  ]\n};\n","module.exports = {\r\n  'name': 'sinh',\r\n  'category': 'Trigonometry',\r\n  'syntax': [\r\n    'sinh(x)'\r\n  ],\r\n  'description': 'Compute the hyperbolic sine of x in radians.',\r\n  'examples': [\r\n    'sinh(0.5)'\r\n  ],\r\n  'seealso': [\r\n    'cosh',\r\n    'tanh'\r\n  ]\r\n};\r\n","module.exports = {\n  'name': 'tan',\n  'category': 'Trigonometry',\n  'syntax': [\n    'tan(x)'\n  ],\n  'description': 'Compute the tangent of x in radians.',\n  'examples': [\n    'tan(0.5)',\n    'sin(0.5) / cos(0.5)',\n    'tan(pi / 4)',\n    'tan(45 deg)'\n  ],\n  'seealso': [\n    'atan',\n    'sin',\n    'cos'\n  ]\n};\n","module.exports = {\r\n  'name': 'tanh',\r\n  'category': 'Trigonometry',\r\n  'syntax': [\r\n    'tanh(x)'\r\n  ],\r\n  'description': 'Compute the hyperbolic tangent of x in radians.',\r\n  'examples': [\r\n    'tanh(0.5)',\r\n    'sinh(0.5) / cosh(0.5)'\r\n  ],\r\n  'seealso': [\r\n    'sinh',\r\n    'cosh'\r\n  ]\r\n};\r\n","module.exports = {\n  'name': 'to',\n  'category': 'Units',\n  'syntax': [\n    'x to unit',\n    'to(x, unit)'\n  ],\n  'description': 'Change the unit of a value.',\n  'examples': [\n    '5 inch to cm',\n    '3.2kg to g',\n    '16 bytes in bits'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'clone',\n  'category': 'Utils',\n  'syntax': [\n    'clone(x)'\n  ],\n  'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',\n  'examples': [\n    'clone(3.5)',\n    'clone(2 - 4i)',\n    'clone(45 deg)',\n    'clone([1, 2; 3, 4])',\n    'clone(\"hello world\")'\n  ],\n  'seealso': []\n};\n","module.exports = {\n  'name': 'format',\n  'category': 'Utils',\n  'syntax': [\n    'format(value)',\n    'format(value, precision)'\n  ],\n  'description': 'Format a value of any type as string.',\n  'examples': [\n    'format(2.3)',\n    'format(3 - 4i)',\n    'format([])',\n    'format(pi, 3)'\n  ],\n  'seealso': ['print']\n};\n","module.exports = {\n  'name': 'isInteger',\n  'category': 'Utils',\n  'syntax': [\n    'isInteger(x)'\n  ],\n  'description': 'Test whether a value is an integer number.',\n  'examples': [\n    'isInteger(2)',\n    'isInteger(3.5)',\n    'isInteger([3, 0.5, -2])'\n  ],\n  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n};\n","module.exports = {\n  'name': 'isNaN',\n  'category': 'Utils',\n  'syntax': [\n    'isNaN(x)'\n  ],\n  'description': 'Test whether a value is NaN (not a number)',\n  'examples': [\n    'isNaN(2)',\n    'isNaN(0 / 0)',\n    'isNaN(NaN)',\n    'isNaN(Infinity)'\n  ],\n  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n};\n","module.exports = {\n  'name': 'isNegative',\n  'category': 'Utils',\n  'syntax': [\n    'isNegative(x)'\n  ],\n  'description': 'Test whether a value is negative: smaller than zero.',\n  'examples': [\n    'isNegative(2)',\n    'isNegative(0)',\n    'isNegative(-4)',\n    'isNegative([3, 0.5, -2])'\n  ],\n  'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']\n};\n","module.exports = {\n  'name': 'isNumeric',\n  'category': 'Utils',\n  'syntax': [\n    'isNumeric(x)'\n  ],\n  'description': 'Test whether a value is a numeric value. ' +\n    'Returns true when the input is a number, BigNumber, Fraction, or boolean.',\n  'examples': [\n    'isNumeric(2)',\n    'isNumeric(0)',\n    'isNumeric(bignumber(500))',\n    'isNumeric(fraction(0.125))',\n    'isNumeric(\"3\")',\n    'isNumeric(2 + 3i)',\n    'isNumeric([2.3, \"foo\", false])'\n  ],\n  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN']\n};\n","module.exports = {\n  'name': 'isPositive',\n  'category': 'Utils',\n  'syntax': [\n    'isPositive(x)'\n  ],\n  'description': 'Test whether a value is positive: larger than zero.',\n  'examples': [\n    'isPositive(2)',\n    'isPositive(0)',\n    'isPositive(-4)',\n    'isPositive([3, 0.5, -2])'\n  ],\n  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n};\n","module.exports = {\n  'name': 'isPrime',\n  'category': 'Utils',\n  'syntax': [\n    'isPrime(x)'\n  ],\n  'description': 'Test whether a value is prime: has no divisors other than itself and one.',\n  'examples': [\n    'isPrime(3)',\n    'isPrime(-2)',\n    'isPrime([2, 17, 100])'\n  ],\n  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n};","module.exports = {\n  'name': 'isZero',\n  'category': 'Utils',\n  'syntax': [\n    'isZero(x)'\n  ],\n  'description': 'Test whether a value is zero.',\n  'examples': [\n    'isZero(2)',\n    'isZero(0)',\n    'isZero(-4)',\n    'isZero([3, 0, -2, 0])'\n  ],\n  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']\n};\n","module.exports = {\n  'name': 'typeof',\n  'category': 'Utils',\n  'syntax': [\n    'typeof(x)'\n  ],\n  'description': 'Get the type of a variable.',\n  'examples': [\n    'typeof(3.5)',\n    'typeof(2 - 4i)',\n    'typeof(45 deg)',\n    'typeof(\"hello world\")'\n  ],\n  'seealso': []\n};\n","function factory (construction, config, load, typed) {\n  var docs = {};\n\n\n  // construction functions\n  docs.bignumber = require('./construction/bignumber');\n  docs['boolean'] = require('./construction/boolean');\n  docs.complex = require('./construction/complex');\n  docs.createUnit = require('./construction/createUnit');\n  docs.fraction = require('./construction/fraction');\n  docs.index = require('./construction/index');\n  docs.matrix = require('./construction/matrix');\n  docs.number = require('./construction/number');\n  docs.sparse = require('./construction/sparse');\n  docs.splitUnit = require('./construction/splitUnit');\n  docs.string = require('./construction/string');\n  docs.unit = require('./construction/unit');\n\n  // constants\n  docs.e = require('./constants/e');\n  docs.E = require('./constants/e');\n  docs['false'] = require('./constants/false');\n  docs.i = require('./constants/i');\n  docs['Infinity'] = require('./constants/Infinity');\n  docs.LN2 = require('./constants/LN2');\n  docs.LN10 = require('./constants/LN10');\n  docs.LOG2E = require('./constants/LOG2E');\n  docs.LOG10E = require('./constants/LOG10E');\n  docs.NaN = require('./constants/NaN');\n  docs['null'] = require('./constants/null');\n  docs.pi = require('./constants/pi');\n  docs.PI = require('./constants/pi');\n  docs.phi = require('./constants/phi');\n  docs.SQRT1_2 = require('./constants/SQRT1_2');\n  docs.SQRT2 = require('./constants/SQRT2');\n  docs.tau = require('./constants/tau');\n  docs['true'] = require('./constants/true');\n  docs.version = require('./constants/version');\n\n  // physical constants\n  // TODO: more detailed docs for physical constants\n  docs.speedOfLight = {description: 'Speed of light in vacuum', examples: ['speedOfLight']};\n  docs.gravitationConstant = {description: 'Newtonian constant of gravitation', examples: ['gravitationConstant']};\n  docs.planckConstant = {description: 'Planck constant', examples: ['planckConstant']};\n  docs.reducedPlanckConstant = {description: 'Reduced Planck constant', examples: ['reducedPlanckConstant']};\n\n  docs.magneticConstant = {description: 'Magnetic constant (vacuum permeability)', examples: ['magneticConstant']};\n  docs.electricConstant = {description: 'Electric constant (vacuum permeability)', examples: ['electricConstant']};\n  docs.vacuumImpedance = {description: 'Characteristic impedance of vacuum', examples: ['vacuumImpedance']};\n  docs.coulomb = {description: 'Coulomb\\'s constant', examples: ['coulomb']};\n  docs.elementaryCharge = {description: 'Elementary charge', examples: ['elementaryCharge']};\n  docs.bohrMagneton = {description: 'Borh magneton', examples: ['bohrMagneton']};\n  docs.conductanceQuantum = {description: 'Conductance quantum', examples: ['conductanceQuantum']};\n  docs.inverseConductanceQuantum = {description: 'Inverse conductance quantum', examples: ['inverseConductanceQuantum']};\n  //docs.josephson = {description: 'Josephson constant', examples: ['josephson']};\n  docs.magneticFluxQuantum = {description: 'Magnetic flux quantum', examples: ['magneticFluxQuantum']};\n  docs.nuclearMagneton = {description: 'Nuclear magneton', examples: ['nuclearMagneton']};\n  docs.klitzing = {description: 'Von Klitzing constant', examples: ['klitzing']};\n\n  docs.bohrRadius = {description: 'Borh radius', examples: ['bohrRadius']};\n  docs.classicalElectronRadius = {description: 'Classical electron radius', examples: ['classicalElectronRadius']};\n  docs.electronMass = {description: 'Electron mass', examples: ['electronMass']};\n  docs.fermiCoupling = {description: 'Fermi coupling constant', examples: ['fermiCoupling']};\n  docs.fineStructure = {description: 'Fine-structure constant', examples: ['fineStructure']};\n  docs.hartreeEnergy = {description: 'Hartree energy', examples: ['hartreeEnergy']};\n  docs.protonMass = {description: 'Proton mass', examples: ['protonMass']};\n  docs.deuteronMass = {description: 'Deuteron Mass', examples: ['deuteronMass']};\n  docs.neutronMass = {description: 'Neutron mass', examples: ['neutronMass']};\n  docs.quantumOfCirculation = {description: 'Quantum of circulation', examples: ['quantumOfCirculation']};\n  docs.rydberg = {description: 'Rydberg constant', examples: ['rydberg']};\n  docs.thomsonCrossSection = {description: 'Thomson cross section', examples: ['thomsonCrossSection']};\n  docs.weakMixingAngle = {description: 'Weak mixing angle', examples: ['weakMixingAngle']};\n  docs.efimovFactor = {description: 'Efimov factor', examples: ['efimovFactor']};\n\n  docs.atomicMass = {description: 'Atomic mass constant', examples: ['atomicMass']};\n  docs.avogadro = {description: 'Avogadro\\'s number', examples: ['avogadro']};\n  docs.boltzmann = {description: 'Boltzmann constant', examples: ['boltzmann']};\n  docs.faraday = {description: 'Faraday constant', examples: ['faraday']};\n  docs.firstRadiation = {description: 'First radiation constant', examples: ['firstRadiation']};\n  docs.loschmidt = {description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa', examples: ['loschmidt']};\n  docs.gasConstant = {description: 'Gas constant', examples: ['gasConstant']};\n  docs.molarPlanckConstant = {description: 'Molar Planck constant', examples: ['molarPlanckConstant']};\n  docs.molarVolume = {description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa', examples: ['molarVolume']};\n  docs.sackurTetrode = {description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa', examples: ['sackurTetrode']};\n  docs.secondRadiation = {description: 'Second radiation constant', examples: ['secondRadiation']};\n  docs.stefanBoltzmann = {description: 'Stefan-Boltzmann constant', examples: ['stefanBoltzmann']};\n  docs.wienDisplacement = {description: 'Wien displacement law constant', examples: ['wienDisplacement']};\n  //docs.spectralRadiance = {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']};\n\n  docs.molarMass = {description: 'Molar mass constant', examples: ['molarMass']};\n  docs.molarMassC12 = {description: 'Molar mass constant of carbon-12', examples: ['molarMassC12']};\n  docs.gravity = {description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)', examples: ['gravity']};\n\n  docs.planckLength = {description: 'Planck length', examples: ['planckLength']};\n  docs.planckMass = {description: 'Planck mass', examples: ['planckMass']};\n  docs.planckTime = {description: 'Planck time', examples: ['planckTime']};\n  docs.planckCharge = {description: 'Planck charge', examples: ['planckCharge']};\n  docs.planckTemperature = {description: 'Planck temperature', examples: ['planckTemperature']};\n\n  // functions - algebra\n  docs.derivative = require('./function/algebra/derivative');\n  docs.lsolve = require('./function/algebra/lsolve');\n  docs.lup = require('./function/algebra/lup');\n  docs.lusolve = require('./function/algebra/lusolve');\n  docs.simplify = require('./function/algebra/simplify');\n  docs.slu = require('./function/algebra/slu');\n  docs.usolve = require('./function/algebra/usolve');\n  docs.qr = require('./function/algebra/qr');\n\n  // functions - arithmetic\n  docs.abs = require('./function/arithmetic/abs');\n  docs.add = require('./function/arithmetic/add');\n  docs.cbrt = require('./function/arithmetic/cbrt');\n  docs.ceil = require('./function/arithmetic/ceil');\n  docs.cube = require('./function/arithmetic/cube');\n  docs.divide = require('./function/arithmetic/divide');\n  docs.dotDivide = require('./function/arithmetic/dotDivide');\n  docs.dotMultiply = require('./function/arithmetic/dotMultiply');\n  docs.dotPow = require('./function/arithmetic/dotPow');\n  docs.exp = require('./function/arithmetic/exp');\n  docs.fix = require('./function/arithmetic/fix');\n  docs.floor = require('./function/arithmetic/floor');\n  docs.gcd = require('./function/arithmetic/gcd');\n  docs.hypot = require('./function/arithmetic/hypot');\n  docs.lcm = require('./function/arithmetic/lcm');\n  docs.log = require('./function/arithmetic/log');\n  docs.log10 = require('./function/arithmetic/log10');\n  docs.mod = require('./function/arithmetic/mod');\n  docs.multiply = require('./function/arithmetic/multiply');\n  docs.norm = require('./function/arithmetic/norm');\n  docs.nthRoot = require('./function/arithmetic/nthRoot');\n  docs.pow = require('./function/arithmetic/pow');\n  docs.round = require('./function/arithmetic/round');\n  docs.sign = require('./function/arithmetic/sign');\n  docs.sqrt = require('./function/arithmetic/sqrt');\n  docs.square = require('./function/arithmetic/square');\n  docs.subtract = require('./function/arithmetic/subtract');\n  docs.unaryMinus = require('./function/arithmetic/unaryMinus');\n  docs.unaryPlus = require('./function/arithmetic/unaryPlus');\n  docs.xgcd = require('./function/arithmetic/xgcd');\n\n  // functions - bitwise\n  docs.bitAnd = require('./function/bitwise/bitAnd');\n  docs.bitNot = require('./function/bitwise/bitNot');\n  docs.bitOr = require('./function/bitwise/bitOr');\n  docs.bitXor = require('./function/bitwise/bitXor');\n  docs.leftShift = require('./function/bitwise/leftShift');\n  docs.rightArithShift = require('./function/bitwise/rightArithShift');\n  docs.rightLogShift = require('./function/bitwise/rightLogShift');\n\n  // functions - combinatorics\n  docs.bellNumbers = require('./function/combinatorics/bellNumbers');\n  docs.catalan = require('./function/combinatorics/catalan');\n  docs.composition = require('./function/combinatorics/composition');\n  docs.stirlingS2 = require('./function/combinatorics/stirlingS2');\n\n  // functions - core\n  docs['config'] =  require('./core/config');\n  docs['import'] =  require('./core/import');\n  docs['typed'] =  require('./core/typed');\n\n  // functions - complex\n  docs.arg = require('./function/complex/arg');\n  docs.conj = require('./function/complex/conj');\n  docs.re = require('./function/complex/re');\n  docs.im = require('./function/complex/im');\n\n  // functions - expression\n  docs['eval'] =  require('./function/expression/eval');\n  docs.help =  require('./function/expression/help');\n\n  // functions - geometry\n  docs.distance = require('./function/geometry/distance');\n  docs.intersect = require('./function/geometry/intersect');\n\n  // functions - logical\n  docs['and'] = require('./function/logical/and');\n  docs['not'] = require('./function/logical/not');\n  docs['or'] = require('./function/logical/or');\n  docs['xor'] = require('./function/logical/xor');\n\n  // functions - matrix\n  docs['concat'] = require('./function/matrix/concat');\n  docs.cross = require('./function/matrix/cross');\n  docs.det = require('./function/matrix/det');\n  docs.diag = require('./function/matrix/diag');\n  docs.dot = require('./function/matrix/dot');\n  docs.eye = require('./function/matrix/eye');\n  docs.filter =  require('./function/matrix/filter');\n  docs.flatten = require('./function/matrix/flatten');\n  docs.forEach =  require('./function/matrix/forEach');\n  docs.inv = require('./function/matrix/inv');\n  docs.kron = require('./function/matrix/kron');\n  docs.map =  require('./function/matrix/map');\n  docs.ones = require('./function/matrix/ones');\n  docs.partitionSelect =  require('./function/matrix/partitionSelect');\n  docs.range = require('./function/matrix/range');\n  docs.resize = require('./function/matrix/resize');\n  docs.reshape = require('./function/matrix/reshape');\n  docs.size = require('./function/matrix/size');\n  docs.sort =  require('./function/matrix/sort');\n  docs.squeeze = require('./function/matrix/squeeze');\n  docs.subset = require('./function/matrix/subset');\n  docs.trace = require('./function/matrix/trace');\n  docs.transpose = require('./function/matrix/transpose');\n  docs.zeros = require('./function/matrix/zeros');\n\n  // functions - probability\n  docs.combinations = require('./function/probability/combinations');\n  //docs.distribution = require('./function/probability/distribution');\n  docs.factorial = require('./function/probability/factorial');\n  docs.gamma = require('./function/probability/gamma');\n  docs.kldivergence = require('./function/probability/kldivergence');\n  docs.multinomial = require('./function/probability/multinomial');\n  docs.permutations = require('./function/probability/permutations');\n  docs.pickRandom = require('./function/probability/pickRandom');\n  docs.random = require('./function/probability/random');\n  docs.randomInt = require('./function/probability/randomInt');\n\n  // functions - relational\n  docs.compare = require('./function/relational/compare');\n  docs.compareNatural = require('./function/relational/compareNatural');\n  docs.deepEqual = require('./function/relational/deepEqual');\n  docs['equal'] = require('./function/relational/equal');\n  docs.larger = require('./function/relational/larger');\n  docs.largerEq = require('./function/relational/largerEq');\n  docs.smaller = require('./function/relational/smaller');\n  docs.smallerEq = require('./function/relational/smallerEq');\n  docs.unequal = require('./function/relational/unequal');\n\n  // functions - set\n  docs.setCartesian = require('./function/set/setCartesian');\n  docs.setDifference = require('./function/set/setDifference');\n  docs.setDistinct = require('./function/set/setDistinct');\n  docs.setIntersect = require('./function/set/setIntersect');\n  docs.setIsSubset = require('./function/set/setIsSubset');\n  docs.setMultiplicity = require('./function/set/setMultiplicity');\n  docs.setPowerset = require('./function/set/setPowerset');\n  docs.setSize = require('./function/set/setSize');\n  docs.setSymDifference = require('./function/set/setSymDifference');\n  docs.setUnion = require('./function/set/setUnion');\n\n  // functions - special\n  docs.erf = require('./function/special/erf');\n\n  // functions - statistics\n  docs.mad = require('./function/statistics/mad');\n  docs.max = require('./function/statistics/max');\n  docs.mean = require('./function/statistics/mean');\n  docs.median = require('./function/statistics/median');\n  docs.min = require('./function/statistics/min');\n  docs.mode = require('./function/statistics/mode');\n  docs.prod = require('./function/statistics/prod');\n  docs.quantileSeq = require('./function/statistics/quantileSeq');\n  docs.std = require('./function/statistics/std');\n  docs.sum = require('./function/statistics/sum');\n  docs['var'] = require('./function/statistics/var');\n\n  // functions - trigonometry\n  docs.acos = require('./function/trigonometry/acos');\n  docs.acosh = require('./function/trigonometry/acosh');\n  docs.acot = require('./function/trigonometry/acot');\n  docs.acoth = require('./function/trigonometry/acoth');\n  docs.acsc = require('./function/trigonometry/acsc');\n  docs.acsch = require('./function/trigonometry/acsch');\n  docs.asec = require('./function/trigonometry/asec');\n  docs.asech = require('./function/trigonometry/asech');\n  docs.asin = require('./function/trigonometry/asin');\n  docs.asinh = require('./function/trigonometry/asinh');\n  docs.atan = require('./function/trigonometry/atan');\n  docs.atanh = require('./function/trigonometry/atanh');\n  docs.atan2 = require('./function/trigonometry/atan2');\n  docs.cos = require('./function/trigonometry/cos');\n  docs.cosh = require('./function/trigonometry/cosh');\n  docs.cot = require('./function/trigonometry/cot');\n  docs.coth = require('./function/trigonometry/coth');\n  docs.csc = require('./function/trigonometry/csc');\n  docs.csch = require('./function/trigonometry/csch');\n  docs.sec = require('./function/trigonometry/sec');\n  docs.sech = require('./function/trigonometry/sech');\n  docs.sin = require('./function/trigonometry/sin');\n  docs.sinh = require('./function/trigonometry/sinh');\n  docs.tan = require('./function/trigonometry/tan');\n  docs.tanh = require('./function/trigonometry/tanh');\n\n  // functions - units\n  docs.to = require('./function/units/to');\n\n  // functions - utils\n  docs.clone = require('./function/utils/clone');\n  docs.format = require('./function/utils/format');\n  docs.isNaN = require('./function/utils/isNaN');\n  docs.isInteger = require('./function/utils/isInteger');\n  docs.isNegative = require('./function/utils/isNegative');\n  docs.isNumeric = require('./function/utils/isNumeric');\n  docs.isPositive = require('./function/utils/isPositive');\n  docs.isPrime = require('./function/utils/isPrime');\n  docs.isZero = require('./function/utils/isZero');\n  // docs.print = require('./function/utils/print'); // TODO: add documentation for print as soon as the parser supports objects.\n  docs['typeof'] =  require('./function/utils/typeof');\n\n  return docs;\n}\n\nexports.name = 'docs';\nexports.path = 'expression';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var parse = load(require('../parse'));\n\n  /**\n   * Parse and compile an expression.\n   * Returns a an object with a function `eval([scope])` to evaluate the\n   * compiled expression.\n   *\n   * Syntax:\n   *\n   *     math.compile(expr)                       // returns one node\n   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes\n   *\n   * Examples:\n   *\n   *     var code = math.compile('sqrt(3^2 + 4^2)');\n   *     code.eval(); // 5\n   *\n   *     var scope = {a: 3, b: 4}\n   *     var code = math.compile('a * b'); // 12\n   *     code.eval(scope); // 12\n   *     scope.a = 5;\n   *     code.eval(scope); // 20\n   *\n   *     var nodes = math.compile(['a = 3', 'b = 4', 'a * b']);\n   *     nodes[2].eval(); // 12\n   *\n   * See also:\n   *\n   *    parse, eval\n   *\n   * @param {string | string[] | Array | Matrix} expr\n   *            The expression to be compiled\n   * @return {{eval: Function} | Array.<{eval: Function}>} code\n   *            An object with the compiled expression\n   * @throws {Error}\n   */\n  return typed('compile', {\n    'string': function (expr) {\n      return parse(expr).compile();\n    },\n\n    'Array | Matrix': function (expr) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile();\n      });\n    }\n  });\n}\n\nexports.name = 'compile';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var parse = load(require('../parse'));\n\n  /**\n   * Evaluate an expression.\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.eval(expr)\n   *     math.eval(expr, scope)\n   *     math.eval([expr1, expr2, expr3, ...])\n   *     math.eval([expr1, expr2, expr3, ...], scope)\n   *\n   * Example:\n   *\n   *     math.eval('(2+3)/4');                // 1.25\n   *     math.eval('sqrt(3^2 + 4^2)');        // 5\n   *     math.eval('sqrt(-4)');               // 2i\n   *     math.eval(['a=3', 'b=4', 'a*b']);,   // [3, 4, 12]\n   *\n   *     var scope = {a:3, b:4};\n   *     math.eval('a * b', scope);           // 12\n   *\n   * See also:\n   *\n   *    parse, compile\n   *\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n   * @param {Object} [scope]                    Scope to read/write variables\n   * @return {*} The result of the expression\n   * @throws {Error}\n   */\n  return typed('compile', {\n    'string': function (expr) {\n      var scope = {};\n      return parse(expr).compile().eval(scope);\n    },\n\n    'string, Object': function (expr, scope) {\n      return parse(expr).compile().eval(scope);\n    },\n\n    'Array | Matrix': function (expr) {\n      var scope = {};\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().eval(scope);\n      });\n    },\n\n    'Array | Matrix, Object': function (expr, scope) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().eval(scope);\n      });\n    }\n  });\n}\n\nexports.name = 'eval';\nexports.factory = factory;","'use strict';\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nfunction factory (type, config, load, typed, math) {\n  var docs = load(require('../docs'));\n\n  /**\n   * Retrieve help on a function or data type.\n   * Help files are retrieved from the documentation in math.expression.docs.\n   *\n   * Syntax:\n   *\n   *    math.help(search)\n   *\n   * Examples:\n   *\n   *    console.log(math.help('sin').toString());\n   *    console.log(math.help(math.add).toString());\n   *    console.log(math.help(math.add).toJSON());\n   *\n   * @param {Function | string | Object} search   A function or function name\n   *                                              for which to get help\n   * @return {Help} A help object\n   */\n  return typed('help', {\n    'any': function (search) {\n      var prop;\n      var name = search;\n\n      if (typeof search !== 'string') {\n        for (prop in math) {\n          // search in functions and constants\n          if (math.hasOwnProperty(prop) && (search === math[prop])) {\n            name = prop;\n            break;\n          }\n        }\n\n        /* TODO: implement help for data types\n         if (!text) {\n         // search data type\n         for (prop in math.type) {\n         if (math.type.hasOwnProperty(prop)) {\n         if (search === math.type[prop]) {\n         text = prop;\n         break;\n         }\n         }\n         }\n         }\n         */\n      }\n\n      var doc = getSafeProperty(docs, name);\n      if (!doc) {\n        throw new Error('No documentation found on \"' + name + '\"');\n      }\n      return new type.Help(doc);\n    }\n  });\n}\n\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\nexports.name = 'help';\nexports.factory = factory;\n","module.exports = [\n  require('./compile'),\n  require('./eval'),\n  require('./help'),\n  require('./parse'),\n  require('./parser')\n];\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var parse = load(require('../parse'));\n\n  /**\n   * Parse an expression. Returns a node tree, which can be evaluated by\n   * invoking node.eval();\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.parse(expr)\n   *     math.parse(expr, options)\n   *     math.parse([expr1, expr2, expr3, ...])\n   *     math.parse([expr1, expr2, expr3, ...], options)\n   *\n   * Example:\n   *\n   *     var node = math.parse('sqrt(3^2 + 4^2)');\n   *     node.compile().eval(); // 5\n   *\n   *     var scope = {a:3, b:4}\n   *     var node = math.parse('a * b'); // 12\n   *     var code = node.compile();\n   *     code.eval(scope); // 12\n   *     scope.a = 5;\n   *     code.eval(scope); // 20\n   *\n   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);\n   *     nodes[2].compile().eval(); // 12\n   *\n   * See also:\n   *\n   *     eval, compile\n   *\n   * @param {string | string[] | Matrix} expr          Expression to be parsed\n   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n   *                                                   - `nodes` a set of custom nodes\n   * @return {Node | Node[]} node\n   * @throws {Error}\n   */\n  return typed('parse', {\n    'string | Array | Matrix': parse,\n    'string | Array | Matrix, Object': parse\n  });\n}\n\nexports.name = 'parse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed, math) {\n  var Parser = load(require('../Parser'));\n\n  /**\n   * Create a parser. The function creates a new `math.expression.Parser` object.\n   *\n   * Syntax:\n   *\n   *    math.parser()\n   *\n   * Examples:\n   *\n   *     var parser = new math.parser();\n   *\n   *     // evaluate expressions\n   *     var a = parser.eval('sqrt(3^2 + 4^2)'); // 5\n   *     var b = parser.eval('sqrt(-4)');        // 2i\n   *     var c = parser.eval('2 inch in cm');    // 5.08 cm\n   *     var d = parser.eval('cos(45 deg)');     // 0.7071067811865476\n   *\n   *     // define variables and functions\n   *     parser.eval('x = 7 / 2');               // 3.5\n   *     parser.eval('x + 3');                   // 6.5\n   *     parser.eval('function f(x, y) = x^y');  // f(x, y)\n   *     parser.eval('f(2, 3)');                 // 8\n   *\n   *     // get and set variables and functions\n   *     var x = parser.get('x');                // 7\n   *     var f = parser.get('f');                // function\n   *     var g = f(3, 2);                        // 9\n   *     parser.set('h', 500);\n   *     var i = parser.eval('h / 2');           // 250\n   *     parser.set('hello', function (name) {\n   *       return 'hello, ' + name + '!';\n   *     });\n   *     parser.eval('hello(\"user\")');           // \"hello, user!\"\n   *\n   *     // clear defined functions and variables\n   *     parser.clear();\n   *\n   * See also:\n   *\n   *    eval, compile, parse\n   *\n   * @return {Parser} Parser\n   */\n  return typed('parser', {\n    '': function () {\n      return new Parser(math);\n    }\n  });\n}\n\nexports.name = 'parser';\nexports.factory = factory;\nexports.math = true; // requires the math namespace as 5th argument\n","module.exports = [\n  require('./docs'),\n  require('./function'),\n  require('./node'),\n  require('./transform'),\n\n  require('./Help'),\n  require('./parse'),\n  require('./Parser')\n];\n","'use strict';\n\n// Reserved keywords not allowed to use in the parser\nmodule.exports = {\n  end: true\n};\n","'use strict';\n\nvar stringify = require('../../utils/string').stringify;\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n  var IndexNode = load(require('./IndexNode'));\n  var access = load(require('./utils/access'));\n\n  /**\n   * @constructor AccessorNode\n   * @extends {Node}\n   * Access an object property or get a matrix subset\n   *\n   * @param {Node} object                 The object from which to retrieve\n   *                                      a property or subset.\n   * @param {IndexNode} index             IndexNode containing ranges\n   */\n  function AccessorNode(object, index) {\n    if (!(this instanceof AccessorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!(object && object.isNode)) {\n      throw new TypeError('Node expected for parameter \"object\"');\n    }\n    if (!(index && index.isIndexNode)) {\n      throw new TypeError('IndexNode expected for parameter \"index\"');\n    }\n\n    this.object = object || null;\n    this.index = index;\n\n    // readonly property name\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return (this.index.isObjectProperty())\n              ? this.index.getObjectProperty()\n              : '';\n        }\n        else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function () {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AccessorNode.prototype = new Node();\n\n  AccessorNode.prototype.type = 'AccessorNode';\n\n  AccessorNode.prototype.isAccessorNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {AccessorNode} node  Node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileAccessorNode(node, defs, args) {\n    if (!(node instanceof AccessorNode)) {\n      throw new TypeError('No valid AccessorNode')\n    }\n\n    defs.access = access;\n    defs.getSafeProperty = getSafeProperty;\n\n    var object = compile(node.object, defs, args);\n    var index = compile(node.index, defs, args);\n\n    if (node.index.isObjectProperty()) {\n      var jsProp = stringify(node.index.getObjectProperty());\n      return 'getSafeProperty(' + object + ', ' + jsProp + ')';\n    }\n    else if (node.index.needsSize()) {\n      // if some parameters use the 'end' parameter, we need to calculate the size\n      return '(function () {' +\n          '  var object = ' + object + ';' +\n          '  var size = math.size(object).valueOf();' +\n          '  return access(object, ' + index + ');' +\n          '})()';\n    }\n    else {\n      return 'access(' + object + ', ' + index + ')';\n    }\n  }\n\n  // register the compile function\n  register(AccessorNode.prototype.type, compileAccessorNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  AccessorNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    callback(this.index, 'index', this);\n  };\n\n  /**\n   * Create a new AccessorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AccessorNode} Returns a transformed copy of the node\n   */\n  AccessorNode.prototype.map = function (callback) {\n    return new AccessorNode(\n        this._ifNode(callback(this.object, 'object', this)),\n        this._ifNode(callback(this.index, 'index', this))\n    );\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AccessorNode}\n   */\n  AccessorNode.prototype.clone = function () {\n    return new AccessorNode(this.object, this.index);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n  AccessorNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    if (needParenthesis(this.object)) {\n      object = '(' + object + ')';\n    }\n\n    return object + this.index.toString(options);\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n  AccessorNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    if (needParenthesis(this.object)) {\n      object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + this.index.toHTML(options);\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n  AccessorNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    if (needParenthesis(this.object)) {\n      object = '\\\\left(' + object + '\\\\right)';\n    }\n\n    return object + this.index.toTex(options);\n  };\n\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(node.isAccessorNode || node.isArrayNode || node.isConstantNode\n        || node.isFunctionNode || node.isObjectNode || node.isParenthesisNode\n        || node.isSymbolNode);\n  }\n\n  return AccessorNode;\n}\n\nexports.name = 'AccessorNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n","'use strict';\n\nvar map = require('../../utils/array').map;\nvar join = require('../../utils/array').join;\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * @constructor ArrayNode\n   * @extends {Node}\n   * Holds an 1-dimensional array with items\n   * @param {Node[]} [items]   1 dimensional array with items\n   */\n  function ArrayNode(items) {\n    if (!(this instanceof ArrayNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.items = items || [];\n\n    // validate input\n    if (!Array.isArray(this.items)\n        || !this.items.every(function (item) {return item && item.isNode;})) {\n      throw new TypeError('Array containing Nodes expected');\n    }\n\n    // TODO: deprecated since v3, remove some day\n    var deprecated = function () {\n      throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');\n    };\n    Object.defineProperty(this, 'nodes', { get: deprecated, set: deprecated });\n  }\n\n  ArrayNode.prototype = new Node();\n\n  ArrayNode.prototype.type = 'ArrayNode';\n\n  ArrayNode.prototype.isArrayNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {ArrayNode} node  Node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @private\n   */\n  function compileArrayNode(node, defs, args) {\n    if (!(node instanceof ArrayNode)) {\n      throw new TypeError('No valid ArrayNode')\n    }\n\n    var asMatrix = (defs.math.config().matrix !== 'Array');\n\n    var items = map(node.items, function (item) {\n      return compile(item, defs, args);\n    });\n\n    return (asMatrix ? 'math.matrix([' : '[') +\n        join(items, ',') +\n        (asMatrix ? '])' : ']');\n  }\n\n  // register the compile function\n  register(ArrayNode.prototype.type, compileArrayNode);\n\n      /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  ArrayNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.items.length; i++) {\n      var node = this.items[i];\n      callback(node, 'items[' + i + ']', this);\n    }\n  };\n\n  /**\n   * Create a new ArrayNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ArrayNode} Returns a transformed copy of the node\n   */\n  ArrayNode.prototype.map = function (callback) {\n    var items = [];\n    for (var i = 0; i < this.items.length; i++) {\n      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n    }\n    return new ArrayNode(items);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ArrayNode}\n   */\n  ArrayNode.prototype.clone = function() {\n    return new ArrayNode(this.items.slice(0));\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  ArrayNode.prototype._toString = function(options) {\n    var items = this.items.map(function (node) {\n      return node.toString(options);\n    });\n    return '[' + items.join(', ') + ']';\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  ArrayNode.prototype.toHTML = function(options) {\n    var items = this.items.map(function (node) {\n      return node.toHTML(options);\n    });\n    return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ArrayNode.prototype._toTex = function(options) {\n    var s = '\\\\begin{bmatrix}';\n\n    this.items.forEach(function(node) {\n      if (node.items) {\n        s += node.items.map(function(childNode) {\n          return childNode.toTex(options);\n        }).join('&');\n      }\n      else {\n        s += node.toTex(options);\n      }\n\n      // new line\n      s += '\\\\\\\\';\n    });\n    s += '\\\\end{bmatrix}';\n    return s;\n  };\n\n  return ArrayNode;\n}\n\nexports.name = 'ArrayNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n","'use strict';\n\nvar latex = require('../../utils/latex');\nvar stringify = require('../../utils/string').stringify;\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n  var ArrayNode = load(require('./ArrayNode'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var assign = load(require('./utils/assign'));\n  var access = load(require('./utils/access'));\n\n  var keywords = require('../keywords');\n  var operators = require('../operators');\n\n  /**\n   * @constructor AssignmentNode\n   * @extends {Node}\n   *\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n   * replace a subset of a matrix like `A[2,2]=42`.\n   *\n   * Syntax:\n   *\n   *     new AssignmentNode(symbol, value)\n   *     new AssignmentNode(object, index, value)\n   *\n   * Usage:\n   *\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2));                      // a=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n   *\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n   * @param {IndexNode} [index=null]            Index, property name or matrix\n   *                                            index. Optional. If not provided\n   *                                            and `object` is a SymbolNode,\n   *                                            the property is assigned to the\n   *                                            global scope.\n   * @param {Node} value                        The value to be assigned\n   */\n  function AssignmentNode(object, index, value) {\n    if (!(this instanceof AssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.object = object;\n    this.index = value ? index : null;\n    this.value = value ? value : index;\n\n    // validate input\n    if (!object || !(object.isSymbolNode || object.isAccessorNode)) {\n      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n    }\n    if (object && object.isSymbolNode && object.name === 'end') {\n      throw new Error('Cannot assign to symbol \"end\"');\n    }\n    if (this.index && !this.index.isIndexNode) {\n      throw new TypeError('IndexNode expected as \"index\"');\n    }\n    if (!this.value || !this.value.isNode) {\n      throw new TypeError('Node expected as \"value\"');\n    }\n\n    // readonly property name\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return (this.index.isObjectProperty())\n              ? this.index.getObjectProperty()\n              : '';\n        }\n        else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function () {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AssignmentNode.prototype = new Node();\n\n  AssignmentNode.prototype.type = 'AssignmentNode';\n\n  AssignmentNode.prototype.isAssignmentNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {AssignmentNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @private\n   */\n  function compileAssignmentNode (node, defs, args) {\n    if (!(node instanceof AssignmentNode)) {\n      throw new TypeError('No valid AssignmentNode')\n    }\n\n    defs.assign = assign;\n    defs.access = access;\n    defs.getSafeProperty = getSafeProperty;\n    defs.setSafeProperty = setSafeProperty;\n\n    var size;\n    var object = compile(node.object, defs, args);\n    var index = node.index ? compile(node.index, defs, args) : null;\n    var value = compile(node.value, defs, args);\n    var jsName = stringify(node.object.name);\n\n    if (!node.index) {\n      // apply a variable to the scope, for example `a=2`\n      if (!node.object.isSymbolNode) {\n        throw new TypeError('SymbolNode expected as object');\n      }\n\n      return 'setSafeProperty(scope, ' + jsName + ', ' + value + ')';\n    }\n    else if (node.index.isObjectProperty()) {\n      // apply an object property for example `a.b=2`\n      var jsProp = stringify(node.index.getObjectProperty());\n      return 'setSafeProperty(' + object + ', ' + jsProp + ', ' + value + ')';\n    }\n    else if (node.object.isSymbolNode) {\n      // update a matrix subset, for example `a[2]=3`\n      size = node.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';\n\n      // apply updated object to scope\n      return '(function () {' +\n          '  var object = ' + object + ';' +\n          '  var value = ' + value + ';' +\n          '  ' + size +\n          '  setSafeProperty(scope, ' + jsName + ', assign(object, ' + index + ', value));' +\n          '  return value;' +\n          '})()';\n    }\n    else { // node.object.isAccessorNode === true\n      // update a matrix subset, for example `a.b[2]=3`\n      size = node.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';\n\n      // we will not use the compile function of the AccessorNode, but compile it\n      // ourselves here as we need the parent object of the AccessorNode:\n      // wee need to apply the updated object to parent object\n      var parentObject = compile(node.object.object, defs, args);\n\n      if (node.object.index.isObjectProperty()) {\n        var jsParentProperty = stringify(node.object.index.getObjectProperty());\n        return '(function () {' +\n            '  var parent = ' + parentObject + ';' +\n            '  var object = getSafeProperty(parent, ' + jsParentProperty + ');' + // parentIndex is a property\n            '  var value = ' + value + ';' +\n            size +\n            '  setSafeProperty(parent, ' + jsParentProperty + ', assign(object, ' + index + ', value));' +\n            '  return value;' +\n            '})()';\n      }\n      else {\n        // if some parameters use the 'end' parameter, we need to calculate the size\n        var parentSize = node.object.index.needsSize() ? 'var size = math.size(parent).valueOf();' : '';\n        var parentIndex = compile(node.object.index, defs, args);\n\n        return '(function () {' +\n            '  var parent = ' + parentObject + ';' +\n            '  ' + parentSize +\n            '  var parentIndex = ' + parentIndex + ';' +\n            '  var object = access(parent, parentIndex);' +\n            '  var value = ' + value + ';' +\n            '  ' + size +\n            '  assign(parent, parentIndex, assign(object, ' + index + ', value));' +\n            '  return value;' +\n            '})()';\n      }\n    }\n  }\n\n  // register the compile function\n  register(AssignmentNode.prototype.type, compileAssignmentNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  AssignmentNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    if (this.index) {\n      callback(this.index, 'index', this);\n    }\n    callback(this.value, 'value', this);\n  };\n\n  /**\n   * Create a new AssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AssignmentNode} Returns a transformed copy of the node\n   */\n  AssignmentNode.prototype.map = function (callback) {\n    var object = this._ifNode(callback(this.object, 'object', this));\n    var index = this.index\n        ? this._ifNode(callback(this.index, 'index', this))\n        : null;\n    var value = this._ifNode(callback(this.value, 'value', this));\n\n    return new AssignmentNode(object, index, value);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AssignmentNode}\n   */\n  AssignmentNode.prototype.clone = function() {\n    return new AssignmentNode(this.object, this.index, this.value);\n  };\n\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @private\n   */\n  function needParenthesis(node, parenthesis) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n\n    var precedence = operators.getPrecedence(node, parenthesis);\n    var exprPrecedence = operators.getPrecedence(node.value, parenthesis);\n    return (parenthesis === 'all')\n      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));\n  }\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n  AssignmentNode.prototype._toString = function(options) {\n    var object = this.object.toString(options);\n    var index = this.index ? this.index.toString(options) : '';\n    var value = this.value.toString(options);\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '(' + value + ')';\n    }\n\n    return object + index + ' = ' + value;\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n  AssignmentNode.prototype.toHTML = function(options) {\n    var object = this.object.toHTML(options);\n    var index = this.index ? this.index.toHTML(options) : '';\n    var value = this.value.toHTML(options);\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + index + '<span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n  AssignmentNode.prototype._toTex = function(options) {\n    var object = this.object.toTex(options);\n    var index = this.index ? this.index.toTex(options) : '';\n    var value = this.value.toTex(options);\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '\\\\left(' + value + '\\\\right)';\n    }\n\n    return object + index + ':=' + value;\n  };\n\n  return AssignmentNode;\n}\n\nexports.name = 'AssignmentNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n","'use strict';\n\nvar map = require('../../utils/array').map;\nvar join = require('../../utils/array').join;\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n  var ResultSet = load(require('../../type/resultset/ResultSet'));\n\n  /**\n   * @constructor BlockNode\n   * @extends {Node}\n   * Holds a set with blocks\n   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n   *            An array with blocks, where a block is constructed as an Object\n   *            with properties block, which is a Node, and visible, which is\n   *            a boolean. The property visible is optional and is true by default\n   */\n  function BlockNode(blocks) {\n    if (!(this instanceof BlockNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // validate input, copy blocks\n    if (!Array.isArray(blocks)) throw new Error('Array expected');\n    this.blocks = blocks.map(function (block) {\n      var node = block && block.node;\n      var visible = block && block.visible !== undefined ? block.visible : true;\n\n      if (!(node && node.isNode))      throw new TypeError('Property \"node\" must be a Node');\n      if (typeof visible !== 'boolean') throw new TypeError('Property \"visible\" must be a boolean');\n\n      return {\n        node: node,\n        visible: visible\n      }\n    });\n  }\n\n  BlockNode.prototype = new Node();\n\n  BlockNode.prototype.type = 'BlockNode';\n\n  BlockNode.prototype.isBlockNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {BlockNode} node  The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileBlockNode (node, defs, args) {\n    if (!(node instanceof BlockNode)) {\n      throw new TypeError('No valid BlockNode')\n    }\n\n    defs.ResultSet = ResultSet;\n    var blocks = map(node.blocks, function (param) {\n      var js = compile(param.node, defs, args);\n      if (param.visible) {\n        return 'results.push(' + js + ');';\n      }\n      else {\n        return js + ';';\n      }\n    });\n\n    return '(function () {' +\n        'var results = [];' +\n        join(blocks, '') +\n        'return new ResultSet(results);' +\n        '})()';\n  }\n\n  // register the compile function\n  register(BlockNode.prototype.type, compileBlockNode);\n\n  /**\n   * Execute a callback for each of the child blocks of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  BlockNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.blocks.length; i++) {\n      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n    }\n  };\n\n  /**\n   * Create a new BlockNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {BlockNode} Returns a transformed copy of the node\n   */\n  BlockNode.prototype.map = function (callback) {\n    var blocks = [];\n    for (var i = 0; i < this.blocks.length; i++) {\n      var block = this.blocks[i];\n      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n      blocks[i] = {\n        node: node,\n        visible: block.visible\n      };\n    }\n    return new BlockNode(blocks);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {BlockNode}\n   */\n  BlockNode.prototype.clone = function () {\n    var blocks = this.blocks.map(function (block) {\n      return {\n        node: block.node,\n        visible: block.visible\n      };\n    });\n\n    return new BlockNode(blocks);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  BlockNode.prototype._toString = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toString(options) + (param.visible ? '' : ';');\n    }).join('\\n');\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  BlockNode.prototype.toHTML = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n    }).join('<span class=\"math-separator\"><br /></span>');\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  BlockNode.prototype._toTex = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toTex(options) + (param.visible ? '' : ';');\n    }).join('\\\\;\\\\;\\n');\n  };\n\n  return BlockNode;\n}\n\nexports.name = 'BlockNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n","'use strict';\n\nvar latex = require('../../utils/latex');\nvar operators = require('../operators');\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'\n   *\n   * @param {Node} condition   Condition, must result in a boolean\n   * @param {Node} trueExpr    Expression evaluated when condition is true\n   * @param {Node} falseExpr   Expression evaluated when condition is true\n   *\n   * @constructor ConditionalNode\n   * @extends {Node}\n   */\n  function ConditionalNode(condition, trueExpr, falseExpr) {\n    if (!(this instanceof ConditionalNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (!(condition && condition.isNode)) throw new TypeError('Parameter condition must be a Node');\n    if (!(trueExpr && trueExpr.isNode))  throw new TypeError('Parameter trueExpr must be a Node');\n    if (!(falseExpr && falseExpr.isNode)) throw new TypeError('Parameter falseExpr must be a Node');\n\n    this.condition = condition;\n    this.trueExpr = trueExpr;\n    this.falseExpr = falseExpr;\n  }\n\n  ConditionalNode.prototype = new Node();\n\n  ConditionalNode.prototype.type = 'ConditionalNode';\n\n  ConditionalNode.prototype.isConditionalNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {ConditionalNode} node  The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileConditionalNode(node, defs, args) {\n    if (!(node instanceof ConditionalNode)) {\n      throw new TypeError('No valid ConditionalNode')\n    }\n\n    /**\n     * Test whether a condition is met\n     * @param {*} condition\n     * @returns {boolean} true if condition is true or non-zero, else false\n     */\n    defs.testCondition = function (condition) {\n      if (typeof condition === 'number'\n          || typeof condition === 'boolean'\n          || typeof condition === 'string') {\n        return condition ? true : false;\n      }\n\n      if (condition) {\n        if (condition.isBigNumber === true) {\n          return condition.isZero() ? false : true;\n        }\n\n        if (condition.isComplex === true) {\n          return (condition.re || condition.im) ? true : false;\n        }\n\n        if (condition.isUnit === true) {\n          return condition.value ? true : false;\n        }\n      }\n\n      if (condition === null || condition === undefined) {\n        return false;\n      }\n\n      throw new TypeError('Unsupported type of condition \"' + defs.math['typeof'](condition) + '\"');\n    };\n\n    return (\n      'testCondition(' + compile(node.condition, defs, args) + ') ? ' +\n      '( ' + compile(node.trueExpr, defs, args) + ') : ' +\n      '( ' + compile(node.falseExpr, defs, args) + ')'\n    );\n  }\n\n  // register the compile function\n  register(ConditionalNode.prototype.type, compileConditionalNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  ConditionalNode.prototype.forEach = function (callback) {\n    callback(this.condition, 'condition', this);\n    callback(this.trueExpr, 'trueExpr', this);\n    callback(this.falseExpr, 'falseExpr', this);\n  };\n\n  /**\n   * Create a new ConditionalNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ConditionalNode} Returns a transformed copy of the node\n   */\n  ConditionalNode.prototype.map = function (callback) {\n    return new ConditionalNode(\n        this._ifNode(callback(this.condition, 'condition', this)),\n        this._ifNode(callback(this.trueExpr, 'trueExpr', this)),\n        this._ifNode(callback(this.falseExpr, 'falseExpr', this))\n    );\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConditionalNode}\n   */\n  ConditionalNode.prototype.clone = function () {\n    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ConditionalNode.prototype._toString = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis);\n\n    //Enclose Arguments in parentheses if they are an OperatorNode\n    //or have lower or equal precedence\n    //NOTE: enclosing all OperatorNodes in parentheses is a decision\n    //purely based on aesthetics and readability\n    var condition = this.condition.toString(options);\n    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);\n    if ((parenthesis === 'all')\n        || (this.condition.type === 'OperatorNode')\n        || ((conditionPrecedence !== null) && (conditionPrecedence <= precedence))) {\n      condition = '(' + condition + ')';\n    }\n\n    var trueExpr = this.trueExpr.toString(options);\n    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);\n    if ((parenthesis === 'all')\n        || (this.trueExpr.type === 'OperatorNode')\n        || ((truePrecedence !== null) && (truePrecedence <= precedence))) {\n      trueExpr = '(' + trueExpr + ')';\n    }\n\n    var falseExpr = this.falseExpr.toString(options);\n    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);\n    if ((parenthesis === 'all')\n        || (this.falseExpr.type === 'OperatorNode')\n        || ((falsePrecedence !== null) && (falsePrecedence <= precedence))) {\n      falseExpr = '(' + falseExpr + ')';\n    }\n    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ConditionalNode.prototype.toHTML = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis);\n\n    //Enclose Arguments in parentheses if they are an OperatorNode\n    //or have lower or equal precedence\n    //NOTE: enclosing all OperatorNodes in parentheses is a decision\n    //purely based on aesthetics and readability\n    var condition = this.condition.toHTML(options);\n    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);\n    if ((parenthesis === 'all')\n        || (this.condition.type === 'OperatorNode')\n        || ((conditionPrecedence !== null) && (conditionPrecedence <= precedence))) {\n      condition = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + condition + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    var trueExpr = this.trueExpr.toHTML(options);\n    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);\n    if ((parenthesis === 'all')\n        || (this.trueExpr.type === 'OperatorNode')\n        || ((truePrecedence !== null) && (truePrecedence <= precedence))) {\n      trueExpr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + trueExpr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    var falseExpr = this.falseExpr.toHTML(options);\n    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);\n    if ((parenthesis === 'all')\n        || (this.falseExpr.type === 'OperatorNode')\n        || ((falsePrecedence !== null) && (falsePrecedence <= precedence))) {\n      falseExpr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + falseExpr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n    return condition + '<span class=\"math-operator math-conditional-operator\">?</span>' + trueExpr + '<span class=\"math-operator math-conditional-operator\">:</span>' + falseExpr;\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ConditionalNode.prototype._toTex = function (options) {\n    return '\\\\begin{cases} {'\n        + this.trueExpr.toTex(options) + '}, &\\\\quad{\\\\text{if }\\\\;'\n        + this.condition.toTex(options)\n        + '}\\\\\\\\{' + this.falseExpr.toTex(options)\n        + '}, &\\\\quad{\\\\text{otherwise}}\\\\end{cases}';\n  };\n\n  return ConditionalNode;\n}\n\nexports.name = 'ConditionalNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n","'use strict';\n\nvar getType = require('../../utils/types').type;\nvar stringify = require('../../utils/string').stringify;\nvar escape = require('../../utils/string').escape;\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * A ConstantNode holds a constant value like a number or string. A ConstantNode\n   * stores a stringified version of the value and uses this to compile to\n   * JavaScript.\n   *\n   * In case of a stringified number as input, this may be compiled to a BigNumber\n   * when the math instance is configured for BigNumbers.\n   *\n   * Usage:\n   *\n   *     // stringified values with type\n   *     new ConstantNode('2.3', 'number');\n   *     new ConstantNode('true', 'boolean');\n   *     new ConstantNode('hello', 'string');\n   *\n   *     // non-stringified values, type will be automatically detected\n   *     new ConstantNode(2.3);\n   *     new ConstantNode('hello');\n   *\n   * @param {string | number | boolean | null | undefined} value\n   *                            When valueType is provided, value must contain\n   *                            an uninterpreted string representing the value.\n   *                            When valueType is undefined, value can be a\n   *                            number, string, boolean, null, or undefined, and\n   *                            the type will be determined automatically.\n   * @param {string} [valueType]  The type of value. Choose from 'number', 'string',\n   *                              'boolean', 'undefined', 'null'\n   * @constructor ConstantNode\n   * @extends {Node}\n   */\n  function ConstantNode(value, valueType) {\n    if (!(this instanceof ConstantNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (valueType) {\n      if (typeof valueType !== 'string') {\n        throw new TypeError('String expected for parameter \"valueType\"');\n      }\n      if (typeof value !== 'string') {\n        throw new TypeError('String expected for parameter \"value\"');\n      }\n\n      this.value = value;\n      this.valueType = valueType;\n    }\n    else {\n      // stringify the value and determine the type\n      this.value = value + '';\n      this.valueType = getType(value);\n    }\n\n    if (!SUPPORTED_TYPES[this.valueType]) {\n      throw new TypeError('Unsupported type of value \"' + this.valueType + '\"');\n    }\n  }\n\n  var SUPPORTED_TYPES = {\n    'number': true,\n    'string': true,\n    'boolean': true,\n    'undefined': true,\n    'null': true\n  };\n\n  ConstantNode.prototype = new Node();\n\n  ConstantNode.prototype.type = 'ConstantNode';\n\n  ConstantNode.prototype.isConstantNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {ConstantNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileConstantNode(node, defs, args) {\n    if (!(node instanceof ConstantNode)) {\n      throw new TypeError('No valid ConstantNode')\n    }\n\n    switch (node.valueType) {\n      case 'number':\n        if (config.number === 'BigNumber') {\n          return 'math.bignumber(' + stringify(node.value) + ')';\n        }\n        else if (config.number === 'Fraction') {\n          return 'math.fraction(' + stringify(node.value) + ')';\n        }\n        else {\n          // remove leading zeros like '003.2' which are not allowed by JavaScript\n          validateNumericValue(node.value);\n          return node.value.replace(/^(0*)[0-9]/, function (match, zeros) {\n            return match.substring(zeros.length);\n          });\n        }\n\n      case 'string':\n        // Important to escape unescaped double quotes in the string\n        return stringify(node.value);\n\n      case 'boolean':\n        // prevent invalid values\n        return String(node.value) === 'true' ? 'true' : 'false';\n\n      case 'undefined':\n        return 'undefined';\n\n      case 'null':\n        return 'null';\n\n      default:\n        // TODO: move this error to the constructor?\n        throw new TypeError('Unsupported type of constant \"' + node.valueType + '\"');\n    }\n  }\n\n  /**\n   * Test whether value is a string containing a numeric value\n   * @param {String} value\n   * @return {boolean} Returns true when ok\n   */\n  function validateNumericValue (value) {\n    // The following regexp is relatively permissive\n    if (typeof value !== 'string' ||\n        !/^[\\-+]?((\\d+\\.?\\d*)|(\\d*\\.?\\d+))([eE][+\\-]?\\d+)?$/.test(value)) {\n      throw new Error('Invalid numeric value \"' + value + '\"');\n    }\n  }\n\n  // register the compile function\n  register(ConstantNode.prototype.type, compileConstantNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  ConstantNode.prototype.forEach = function (callback) {\n    // nothing to do, we don't have childs\n  };\n\n\n  /**\n   * Create a new ConstantNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ConstantNode} Returns a clone of the node\n   */\n  ConstantNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConstantNode}\n   */\n  ConstantNode.prototype.clone = function () {\n    return new ConstantNode(this.value, this.valueType);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ConstantNode.prototype._toString = function (options) {\n    switch (this.valueType) {\n      case 'string':\n        return stringify(this.value);\n\n      default:\n        return this.value;\n    }\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ConstantNode.prototype.toHTML = function (options) {\n\tvar value = escape(this.value);\n    switch (this.valueType) {\n\t  case 'number':\n\t    return '<span class=\"math-number\">' + value + '</span>';\n      case 'string':\n\t    return '<span class=\"math-string\">' + value + '</span>';\n      case 'boolean':\n\t    return '<span class=\"math-boolean\">' + value + '</span>';\n      case 'null':\n\t    return '<span class=\"math-null-symbol\">' + value + '</span>';\n      case 'undefined':\n\t    return '<span class=\"math-undefined\">' + value + '</span>';\n\n      default:\n        return '<span class=\"math-symbol\">' + value + '</span>';\n    }\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ConstantNode.prototype._toTex = function (options) {\n    var value = this.value,\n        index;\n    switch (this.valueType) {\n      case 'string':\n        return '\\\\mathtt{' + stringify(value) + '}';\n\n      case 'number':\n        index = value.toLowerCase().indexOf('e');\n        if (index !== -1) {\n          return value.substring(0, index) + '\\\\cdot10^{' +\n              value.substring(index + 1) + '}';\n        }\n        return value;\n\n      default:\n        return value;\n    }\n  };\n\n  return ConstantNode;\n}\n\nexports.name = 'ConstantNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n","'use strict';\n\nvar keywords = require('../keywords');\nvar stringify = require('../../utils/string').stringify;\nvar escape = require('../../utils/string').escape;\nvar map = require('../../utils/array').map;\nvar join = require('../../utils/array').join;\nvar latex = require('../../utils/latex');\nvar operators = require('../operators');\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\nvar getUniqueArgumentName = require('./utils/getUniqueArgumentName');\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * @constructor FunctionAssignmentNode\n   * @extends {Node}\n   * Function assignment\n   *\n   * @param {string} name           Function name\n   * @param {string[] | Array.<{name: string, type: string}>} params\n   *                                Array with function parameter names, or an\n   *                                array with objects containing the name\n   *                                and type of the parameter\n   * @param {Node} expr             The function expression\n   */\n  function FunctionAssignmentNode(name, params, expr) {\n    if (!(this instanceof FunctionAssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // validate input\n    if (typeof name !== 'string') throw new TypeError('String expected for parameter \"name\"');\n    if (!Array.isArray(params))  throw new TypeError('Array containing strings or objects expected for parameter \"params\"');\n    if (!(expr && expr.isNode)) throw new TypeError('Node expected for parameter \"expr\"');\n    if (name in keywords) throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\n\n    this.name = name;\n    this.params = params.map(function (param) {\n      return param && param.name || param;\n    });\n    this.types = params.map(function (param) {\n      return param && param.type || 'any'\n    });\n    this.expr = expr;\n  }\n\n  FunctionAssignmentNode.prototype = new Node();\n\n  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';\n\n  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {FunctionAssignmentNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileFunctionAssignmentNode(node, defs, args) {\n    if (!(node instanceof FunctionAssignmentNode)) {\n      throw new TypeError('No valid FunctionAssignmentNode')\n    }\n\n    defs.typed = typed;\n    defs.setSafeProperty = setSafeProperty;\n\n    // validate params\n    // FIXME: rename parameters to safe, internal names\n\n    // we extend the original args and add the args to the child object\n    // and create a mapping from the unsafe param name to a safe, internal one\n    var childArgs = Object.create(args);\n    var jsParams = map(node.params, function (param) {\n      childArgs[param] = getUniqueArgumentName(childArgs);\n      return childArgs[param];\n    });\n\n    // compile the function expression with the child args\n    var jsExpr = compile(node.expr, defs, childArgs);\n    var jsName = stringify(node.name);\n\n    return 'setSafeProperty(scope, ' + jsName + ', ' +\n        '  (function () {' +\n        '    var fn = typed(' + jsName + ', {' +\n        '      ' + stringify(join(node.types, ',')) + ': function (' + join(jsParams, ',') + ') {' +\n        '        return ' + jsExpr + '' +\n        '      }' +\n        '    });' +\n        '    fn.syntax = ' + stringify(node.name + '(' + join(node.params, ', ') + ')') + ';' +\n        '    return fn;' +\n        '  })())';\n  }\n\n  // register the compile function\n  register(FunctionAssignmentNode.prototype.type, compileFunctionAssignmentNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  FunctionAssignmentNode.prototype.forEach = function (callback) {\n    callback(this.expr, 'expr', this);\n  };\n\n  /**\n   * Create a new FunctionAssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\n   */\n  FunctionAssignmentNode.prototype.map = function (callback) {\n    var expr = this._ifNode(callback(this.expr, 'expr', this));\n\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionAssignmentNode}\n   */\n  FunctionAssignmentNode.prototype.clone = function () {\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\n  };\n\n  /**\n   * Is parenthesis needed?\n   * @param {Node} node\n   * @param {Object} parenthesis\n   * @private\n   */\n  function needParenthesis(node, parenthesis) {\n    var precedence = operators.getPrecedence(node, parenthesis);\n    var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);\n\n    return (parenthesis === 'all')\n      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));\n  }\n\n  /**\n   * get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  FunctionAssignmentNode.prototype._toString = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var expr = this.expr.toString(options);\n    if (needParenthesis(this, parenthesis)) {\n      expr = '(' + expr + ')';\n    }\n    return this.name + '(' + this.params.join(', ') + ') = ' + expr;\n  };\n\n  /**\n   * get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n   FunctionAssignmentNode.prototype.toHTML = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n\tvar params = [];\n\tfor (var i=0; i<this.params.length; i++)\t{\n\t  params.push('<span class=\"math-symbol math-parameter\">' + escape(this.params[i]) + '</span>');\n\t}\n    var expr = this.expr.toHTML(options);\n    if (needParenthesis(this, parenthesis)) {\n      expr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + expr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n    return '<span class=\"math-function\">' + escape(this.name) + '</span>' + '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + params.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-round-parenthesis\">)</span><span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + expr;\n  };\n\n  /**\n   * get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  FunctionAssignmentNode.prototype._toTex = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var expr = this.expr.toTex(options);\n    if (needParenthesis(this, parenthesis)) {\n      expr = '\\\\left(' + expr + '\\\\right)';\n    }\n\n    return '\\\\mathrm{' + this.name\n        + '}\\\\left(' + this.params.map(latex.toSymbol).join(',') + '\\\\right):=' + expr;\n  };\n\n  return FunctionAssignmentNode;\n}\nexports.name = 'FunctionAssignmentNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n","'use strict';\n\nvar latex = require('../../utils/latex');\nvar stringify = require('../../utils/string').stringify;\nvar escape = require('../../utils/string').escape;\nvar extend = require('../../utils/object').extend;\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\nvar map = require('../../utils/array').map;\nvar join = require('../../utils/array').join;\nvar validateSafeMethod = require('../../utils/customs').validateSafeMethod;\nvar getUniqueArgumentName = require('./utils/getUniqueArgumentName');\n\nfunction factory (type, config, load, typed, math) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n  var SymbolNode = load(require('./SymbolNode'));\n\n  /**\n   * @constructor FunctionNode\n   * @extends {./Node}\n   * invoke a list with arguments on a node\n   * @param {./Node | string} fn Node resolving with a function on which to invoke\n   *                             the arguments, typically a SymboNode or AccessorNode\n   * @param {./Node[]} args\n   */\n  function FunctionNode(fn, args) {\n    if (!(this instanceof FunctionNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (typeof fn === 'string') {\n      fn = new SymbolNode(fn);\n    }\n\n    // validate input\n    if (!fn || !fn.isNode) throw new TypeError('Node expected as parameter \"fn\"');\n    if (!Array.isArray(args)\n        || !args.every(function (arg) {return arg && arg.isNode;})) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n\n    this.fn = fn;\n    this.args = args || [];\n\n    // readonly property name\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        return this.fn.name || '';\n      }.bind(this),\n      set: function () {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n\n    // TODO: deprecated since v3, remove some day\n    var deprecated = function () {\n      throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');\n    };\n    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });\n  }\n\n  FunctionNode.prototype = new Node();\n\n  FunctionNode.prototype.type = 'FunctionNode';\n\n  FunctionNode.prototype.isFunctionNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {FunctionNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileFunctionNode(node, defs, args) {\n    if (!(node instanceof FunctionNode)) {\n      throw new TypeError('No valid FunctionNode')\n    }\n\n    // compile fn and arguments\n    var jsFn = compile(node.fn, defs, args);\n    var jsArgs = map(node.args, function (arg) {\n      return compile(arg, defs, args);\n    });\n    var jsScope = compileScope(defs, args);\n    var argsName;\n\n    if (node.fn.isSymbolNode) {\n      // we can statically determine whether the function has an rawArgs property\n      var name = node.fn.name;\n      var fn = hasOwnProperty(defs.math, name) ? defs.math[name] : undefined;\n      var isRaw = (typeof fn === 'function') && (fn.rawArgs == true);\n\n      if (isRaw) {\n        // pass unevaluated parameters (nodes) to the function\n        argsName = getUniqueArgumentName(defs);\n        defs[argsName] = node.args;\n\n        return jsFn + '(' + argsName + ', math, ' + jsScope + ')'; // \"raw\" evaluation\n      }\n      else {\n        return jsFn + '(' + join(jsArgs, ', ') + ')';              // \"regular\" evaluation\n      }\n    }\n    else if (node.fn.isAccessorNode && node.fn.index.isObjectProperty()) {\n      // execute the function with the right context: the object of the AccessorNode\n      argsName = getUniqueArgumentName(defs);\n      defs[argsName] = node.args;\n      defs.validateSafeMethod = validateSafeMethod\n\n      var jsObject = compile(node.fn.object, defs, args);\n      var jsProp = stringify(node.fn.index.getObjectProperty());\n\n      return '(function () {' +\n          'var object = ' + jsObject + ';' +\n          'validateSafeMethod(object, ' + jsProp + ');' +\n          'return (object[' + jsProp + '] && object[' + jsProp + '].rawArgs) ' +\n          ' ? object[' + jsProp + '](' + argsName + ', math, ' + jsScope + ')' + // \"raw\" evaluation\n          ' : object[' + jsProp + '](' + join(jsArgs, ', ') + ')' +              // \"regular\" evaluation\n          '})()';\n    }\n    else { // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n      // we have to dynamically determine whether the function has a rawArgs property\n      argsName = getUniqueArgumentName(defs);\n      defs[argsName] = node.args;\n\n      return '(function () {' +\n          'var fn = ' + jsFn + ';' +\n          'return (fn && fn.rawArgs) ' +\n          ' ? fn(' + argsName + ', math, ' + jsScope + ')' +  // \"raw\" evaluation\n          ' : fn(' + join(jsArgs, ', ') + ')' +               // \"regular\" evaluation\n          '})()';\n    }\n  }\n\n  // register the compile function\n  register(FunctionNode.prototype.type, compileFunctionNode);\n\n  /**\n   * Merge function arguments into scope before passing to the actual function.\n   * This is needed when the function has `rawArgs=true`. In that case we have\n   * to pass the `scope` as third argument, including any variables of\n   * enclosing functions.\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileScope (defs, args) {\n    var names = Object.keys(args)\n        // .map(function (arg) {\n        //   return args[arg];\n        // });\n    if (names.length === 0) {\n      return 'scope';\n    }\n    else {\n      // merge arguments into scope\n      defs.extend = extend;\n\n      var jsArgs = map(names, function (name) {\n        return stringify(name) + ': ' + args[name];\n      });\n\n      return 'extend(extend({}, scope), {' + join(jsArgs, ', ') + '})';\n    }\n  }\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  FunctionNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n\n  /**\n   * Create a new FunctionNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionNode} Returns a transformed copy of the node\n   */\n  FunctionNode.prototype.map = function (callback) {\n    var fn = this.fn.map(callback);\n    var args = [];\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n    return new FunctionNode(fn, args);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionNode}\n   */\n  FunctionNode.prototype.clone = function () {\n    return new FunctionNode(this.fn, this.args.slice(0));\n  };\n\n  //backup Node's toString function\n  //@private\n  var nodeToString = FunctionNode.prototype.toString;\n\n  /**\n   * Get string representation. (wrapper function)\n   * This overrides parts of Node's toString function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toString\n   * function.\n   *\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  FunctionNode.prototype.toString = function (options) {\n    var customString;\n    var name = this.fn.toString(options);\n    if (options && (typeof options.handler === 'object') && hasOwnProperty(options.handler, name)) {\n      //callback is a map of callback functions\n      customString = options.handler[name](this, options);\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    //fall back to Node's toString\n    return nodeToString.call(this, options);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  FunctionNode.prototype._toString = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toString(options);\n    });\n\n    // format the arguments like \"add(2, 4.2)\"\n    return this.fn.toString(options) + '(' + args.join(', ') + ')';\n  };\n  \n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  FunctionNode.prototype.toHTML = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toHTML(options);\n    });\n\n    // format the arguments like \"add(2, 4.2)\"\n    return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n  };\n\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n  function expandTemplate(template, node, options) {\n    var latex = '';\n\n    // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n    var regex = new RegExp('\\\\$(?:\\\\{([a-z_][a-z_0-9]*)(?:\\\\[([0-9]+)\\\\])?\\\\}|\\\\$)', 'ig');\n\n    var inputPos = 0;   //position in the input string\n    var match;\n    while ((match = regex.exec(template)) !== null) {   //go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n\n      if (match[0] === '$$') { // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      }\n      else { // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n        if (match[2] === undefined) { //no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n            case 'object':\n              if (property.isNode) {\n                latex += property.toTex(options);\n              }\n              else if (Array.isArray(property)) {\n                //make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (arg && arg.isNode) {\n                    return arg.toTex(options);\n                  }\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              }\n              else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n              break;\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        }\n        else { //with square brackets\n          if (property[match[2]] && property[match[2]].isNode) {\n            latex += property[match[2]].toTex(options);\n          }\n          else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n    latex += template.slice(inputPos);  //append rest of the template\n\n    return latex;\n  }\n\n  //backup Node's toTex function\n  //@private\n  var nodeToTex = FunctionNode.prototype.toTex;\n\n  /**\n   * Get LaTeX representation. (wrapper function)\n   * This overrides parts of Node's toTex function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toTex\n   * function.\n   *\n   * @param {Object} options\n   * @return {string}\n   */\n  FunctionNode.prototype.toTex = function (options) {\n    var customTex;\n    if (options && (typeof options.handler === 'object') && hasOwnProperty(options.handler, this.name)) {\n      //callback is a map of callback functions\n      customTex = options.handler[this.name](this, options);\n    }\n\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    }\n\n    //fall back to Node's toTex\n    return nodeToTex.call(this, options);\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  FunctionNode.prototype._toTex = function (options) {\n    var args = this.args.map(function (arg) { //get LaTeX of the arguments\n      return arg.toTex(options);\n    });\n\n    var latexConverter;\n\n    if (math[this.name] && ((typeof math[this.name].toTex === 'function') || (typeof math[this.name].toTex === 'object') || (typeof math[this.name].toTex === 'string'))) {\n      //.toTex is a callback function\n      latexConverter = math[this.name].toTex;\n    }\n\n    var customToTex;\n    switch (typeof latexConverter) {\n      case 'function': //a callback function\n        customToTex = latexConverter(this, options);\n        break;\n      case 'string': //a template string\n        customToTex = expandTemplate(latexConverter, this, options);\n        break;\n      case 'object': //an object with different \"converters\" for different numbers of arguments\n        switch (typeof latexConverter[args.length]) {\n          case 'function':\n            customToTex = latexConverter[args.length](this, options);\n            break;\n          case 'string':\n            customToTex = expandTemplate(latexConverter[args.length], this, options);\n            break;\n        }\n    }\n\n    if (typeof customToTex !== 'undefined') {\n      return customToTex;\n    }\n\n    return expandTemplate(latex.defaultTemplate, this, options);\n  };\n\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n  FunctionNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.name;\n  };\n\n  return FunctionNode;\n}\n\nexports.name = 'FunctionNode';\nexports.path = 'expression.node';\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\nexports.factory = factory;\n","'use strict';\n\nvar map = require('../../utils/array').map;\nvar join = require('../../utils/array').join;\nvar escape = require('../../utils/string').escape;\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n  var RangeNode = load(require('./RangeNode'));\n  var SymbolNode = load(require('./SymbolNode'));\n\n  var Range = load(require('../../type/matrix/Range'));\n\n  var isArray = Array.isArray;\n\n  /**\n   * @constructor IndexNode\n   * @extends Node\n   *\n   * Describes a subset of a matrix or an object property.\n   * Cannot be used on its own, needs to be used within an AccessorNode or\n   * AssignmentNode.\n   *\n   * @param {Node[]} dimensions\n   * @param {boolean} [dotNotation=false]  Optional property describing whether\n   *                                       this index was written using dot\n   *                                       notation like `a.b`, or using bracket\n   *                                       notation like `a[\"b\"]` (default).\n   *                                       Used to stringify an IndexNode.\n   */\n  function IndexNode(dimensions, dotNotation) {\n    if (!(this instanceof IndexNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.dimensions = dimensions;\n    this.dotNotation = dotNotation || false;\n\n    // validate input\n    if (!isArray(dimensions)\n        || !dimensions.every(function (range) {return range && range.isNode;})) {\n      throw new TypeError('Array containing Nodes expected for parameter \"dimensions\"');\n    }\n    if (this.dotNotation && !this.isObjectProperty()) {\n      throw new Error('dotNotation only applicable for object properties');\n    }\n\n    // TODO: deprecated since v3, remove some day\n    var deprecated = function () {\n      throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');\n    };\n    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });\n  }\n\n  IndexNode.prototype = new Node();\n\n  IndexNode.prototype.type = 'IndexNode';\n\n  IndexNode.prototype.isIndexNode = true;\n\n  /**\n   * Compile all range nodes\n   *\n   * When some of the dimensions has `end` defined, the IndexNode requires\n   * a variable `size` to be defined in the current closure, and must contain\n   * the size of the matrix that's being handled. To check whether the `size`\n   * variable is needed, call IndexNode.needsSize().\n   *\n   * @param {IndexNode} node        The node to be compiled\n   * @param {Object} defs           Object which can be used to define functions\n   *                                or constants globally available for the\n   *                                compiled expression\n   * @param {Object} args           Object with local function arguments, the key is\n   *                                the name of the argument, and the value is `true`.\n   *                                The object may not be mutated, but must be\n   *                                extended instead.\n   * @return {string} code\n   */\n  function compileIndexNode(node, defs, args) {\n    if (!(node instanceof IndexNode)) {\n      throw new TypeError('No valid IndexNode')\n    }\n\n    // args can be mutated by IndexNode, when dimensions use `end`\n    var childArgs = Object.create(args);\n\n    // helper function to create a Range from start, step and end\n    defs.range = function (start, end, step) {\n      return new Range(\n          (start && start.isBigNumber === true) ? start.toNumber() : start,\n          (end   && end.isBigNumber === true)   ? end.toNumber()   : end,\n          (step  && step.isBigNumber === true)  ? step.toNumber()  : step\n      );\n    };\n\n    // TODO: implement support for bignumber (currently bignumbers are silently\n    //       reduced to numbers when changing the value to zero-based)\n\n    // TODO: Optimization: when the range values are ConstantNodes,\n    //       we can beforehand resolve the zero-based value\n\n    // optimization for a simple object property\n    var dimensions = map(node.dimensions, function (range, i) {\n      if (range && range.isRangeNode) {\n        if (range.needsEnd()) {\n          childArgs.end = 'end';\n\n          // resolve end and create range\n          return '(function () {' +\n              'var end = size[' + i + ']; ' +\n              'return range(' +\n              compile(range.start, defs, childArgs) + ', ' +\n              compile(range.end, defs, childArgs) + ', ' +\n              (range.step ? compile(range.step, defs, childArgs) : '1') +\n              '); ' +\n              '})()';\n        }\n        else {\n          // create range\n          return 'range(' +\n              compile(range.start, defs, childArgs) + ', ' +\n              compile(range.end, defs, childArgs) + ', ' +\n              (range.step ? compile(range.step, defs, childArgs) : '1') +\n              ')';\n        }\n      }\n      if (range.isSymbolNode && range.name === 'end') {\n        childArgs.end = 'end';\n\n        // resolve the parameter 'end'\n        return '(function () {' +\n            'var end = size[' + i + ']; ' +\n            'return ' + compile(range, defs, childArgs) + '; ' +\n            '})()'\n      }\n      else { // ConstantNode\n        return compile(range, defs, childArgs);\n      }\n    });\n\n    return 'math.index(' + join(dimensions, ', ') + ')';\n  }\n\n  // register the compile function\n  register(IndexNode.prototype.type, compileIndexNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  IndexNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.dimensions.length; i++) {\n      callback(this.dimensions[i], 'dimensions[' + i + ']', this);\n    }\n  };\n\n  /**\n   * Create a new IndexNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {IndexNode} Returns a transformed copy of the node\n   */\n  IndexNode.prototype.map = function (callback) {\n    var dimensions = [];\n    for (var i = 0; i < this.dimensions.length; i++) {\n      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));\n    }\n\n    return new IndexNode(dimensions);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {IndexNode}\n   */\n  IndexNode.prototype.clone = function () {\n    return new IndexNode(this.dimensions.slice(0));\n  };\n\n  /**\n   * Test whether this IndexNode contains a single property name\n   * @return {boolean}\n   */\n  IndexNode.prototype.isObjectProperty = function () {\n    return this.dimensions.length === 1 &&\n        this.dimensions[0].isConstantNode &&\n        this.dimensions[0].valueType === 'string';\n  };\n\n  /**\n   * Returns the property name if IndexNode contains a property.\n   * If not, returns null.\n   * @return {string | null}\n   */\n  IndexNode.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this.dimensions[0].value : null;\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  IndexNode.prototype._toString = function (options) {\n    // format the parameters like \"[1, 0:5]\"\n    return this.dotNotation\n        ? ('.' + this.getObjectProperty())\n        : ('[' + this.dimensions.join(', ') + ']');\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  IndexNode.prototype.toHTML = function (options) {\n    // format the parameters like \"[1, 0:5]\"\n\tvar dimensions = []\n\tfor (var i=0; i<this.dimensions.length; i++)\t{\n\t  dimensions[i] = this.dimensions[i].toHTML();\n\t}\n\tif (this.dotNotation) {\n\t  return '<span class=\"math-operator math-accessor-operator\">.</span>' + '<span class=\"math-symbol math-property\">' + escape(this.getObjectProperty()) + '</span>';}\n\telse {\n\t  return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + dimensions.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>'}\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  IndexNode.prototype._toTex = function (options) {\n    var dimensions = this.dimensions.map(function (range) {\n      return range.toTex(options);\n    });\n\n    return this.dotNotation\n        ? ('.' + this.getObjectProperty() + '')\n        : ('_{' + dimensions.join(',') + '}');\n  };\n\n  /**\n   * Test whether this IndexNode needs the object size, size of the Matrix\n   * @return {boolean}\n   */\n  IndexNode.prototype.needsSize = function () {\n    return this.dimensions.some(function (range) {\n      return (range.isRangeNode && range.needsEnd()) ||\n          (range.isSymbolNode && range.name === 'end');\n    });\n  };\n\n  return IndexNode;\n}\n\nexports.name = 'IndexNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n","'use strict';\n\nvar keywords = require('../keywords');\nvar deepEqual= require('../../utils/object').deepEqual;\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nfunction factory (type, config, load, typed, math) {\n  var compile = load(require('./compile')).compile;\n\n  /**\n   * Node\n   */\n  function Node() {\n    if (!(this instanceof Node)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n\n  /**\n   * Evaluate the node\n   * @param {Object} [scope]  Scope to read/write variables\n   * @return {*}              Returns the result\n   */\n  Node.prototype.eval = function(scope) {\n    return this.compile().eval(scope);\n  };\n\n  Node.prototype.type = 'Node';\n\n  Node.prototype.isNode = true;\n\n  Node.prototype.comment = '';\n\n  /**\n   * Compile the node to javascript code\n   * @return {{eval: function}} expr  Returns an object with a function 'eval',\n   *                                  which can be invoked as expr.eval([scope]),\n   *                                  where scope is an optional object with\n   *                                  variables.\n   */\n  Node.prototype.compile = function () {\n    // TODO: calling compile(math) is deprecated since version 2.0.0. Remove this warning some day\n    if (arguments.length > 0) {\n      throw new Error('Calling compile(math) is deprecated. Call the function as compile() instead.');\n    }\n\n    // definitions globally available inside the closure of the compiled expressions\n    var defs = {\n      math: math.expression.mathWithTransform,\n      args: {}, // can be filled with names of FunctionAssignment arguments\n      _validateScope: _validateScope\n    };\n\n    // will be used to put local function arguments\n    var args = {};\n\n    var code = compile(this, defs, args);\n\n    var defsCode = Object.keys(defs).map(function (name) {\n      return '    var ' + name + ' = defs[\"' + name + '\"];';\n    });\n\n    var factoryCode =\n        defsCode.join(' ') +\n        'return {' +\n        '  \"eval\": function (scope) {' +\n        '    if (scope) _validateScope(scope);' +\n        '    scope = scope || {};' +\n        '    return ' + code + ';' +\n        '  }' +\n        '};';\n\n    var factory = new Function('defs', factoryCode);\n    return factory(defs);\n  };\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  Node.prototype.forEach = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run forEach on a Node interface');\n  };\n\n  /**\n   * Create a new Node having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n  Node.prototype.map = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run map on a Node interface');\n  };\n\n  /**\n   * Validate whether an object is a Node, for use with map\n   * @param {Node} node\n   * @returns {Node} Returns the input if it's a node, else throws an Error\n   * @protected\n   */\n  Node.prototype._ifNode = function (node) {\n    if (!(node && node.isNode)) {\n      throw new TypeError('Callback function must return a Node');\n    }\n\n    return node;\n  };\n\n  /**\n   * Recursively traverse all nodes in a node tree. Executes given callback for\n   * this node and each of its child nodes.\n   * @param {function(node: Node, path: string, parent: Node)} callback\n   *          A callback called for every node in the node tree.\n   */\n  Node.prototype.traverse = function (callback) {\n    // execute callback for itself\n    callback(this, null, null);\n\n    // recursively traverse over all childs of a node\n    function _traverse(node, callback) {\n      node.forEach(function (child, path, parent) {\n        callback(child, path, parent);\n        _traverse(child, callback);\n      });\n    }\n\n    _traverse(this, callback);\n  };\n\n  /**\n   * Recursively transform a node tree via a transform function.\n   *\n   * For example, to replace all nodes of type SymbolNode having name 'x' with a\n   * ConstantNode with value 2:\n   *\n   *     var res = Node.transform(function (node, path, parent) {\n   *       if (node && node.isSymbolNode) && (node.name == 'x')) {\n   *         return new ConstantNode(2);\n   *       }\n   *       else {\n   *         return node;\n   *       }\n   *     });\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *          A mapping function accepting a node, and returning\n   *          a replacement for the node or the original node.\n   *          Signature: callback(node: Node, index: string, parent: Node) : Node\n   * @return {Node} Returns the original node or its replacement\n   */\n  Node.prototype.transform = function (callback) {\n    // traverse over all childs\n    function _transform (node, callback) {\n      return node.map(function(child, path, parent) {\n        var replacement = callback(child, path, parent);\n        return _transform(replacement, callback);\n      });\n    }\n\n    var replacement = callback(this, null, null);\n    return _transform(replacement, callback);\n  };\n\n  /**\n   * Find any node in the node tree matching given filter function. For example, to\n   * find all nodes of type SymbolNode having name 'x':\n   *\n   *     var results = Node.filter(function (node) {\n   *       return (node && node.isSymbolNode) && (node.name == 'x');\n   *     });\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *            A test function returning true when a node matches, and false\n   *            otherwise. Function signature:\n   *            callback(node: Node, index: string, parent: Node) : boolean\n   * @return {Node[]} nodes       An array with nodes matching given filter criteria\n   */\n  Node.prototype.filter = function (callback) {\n    var nodes = [];\n\n    this.traverse(function (node, path, parent) {\n      if (callback(node, path, parent)) {\n        nodes.push(node);\n      }\n    });\n\n    return nodes;\n  };\n\n  // TODO: deprecated since version 1.1.0, remove this some day\n  Node.prototype.find = function () {\n    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');\n  };\n\n  // TODO: deprecated since version 1.1.0, remove this some day\n  Node.prototype.match = function () {\n    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');\n  };\n\n  /**\n   * Create a shallow clone of this node\n   * @return {Node}\n   */\n  Node.prototype.clone = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot clone a Node interface');\n  };\n\n  /**\n   * Create a deep clone of this node\n   * @return {Node}\n   */\n  Node.prototype.cloneDeep = function () {\n    return this.map(function (node) {\n      return node.cloneDeep();\n    });\n  };\n\n  /**\n   * Deep compare this node with another node.\n   * @param {Node} other\n   * @return {boolean} Returns true when both nodes are of the same type and\n   *                   contain the same values (as do their childs)\n   */\n  Node.prototype.equals = function (other) {\n    return other\n        ? deepEqual(this, other)\n        : false\n  };\n\n  /**\n   * Get string representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n  Node.prototype.toString = function (options) {\n    var customString;\n    if (options && typeof options === 'object') {\n        switch (typeof options.handler) {\n          case 'object':\n          case 'undefined':\n            break;\n          case 'function':\n            customString = options.handler(this, options);\n            break;\n          default:\n            throw new TypeError('Object or function expected as callback');\n        }\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this._toString(options);\n  };\n\n  /**\n   * Get HTML representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\" or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n  Node.prototype.toHTML = function (options) {\n    var customString;\n    if (options && typeof options === 'object') {\n        switch (typeof options.handler) {\n          case 'object':\n          case 'undefined':\n            break;\n          case 'function':\n            customString = options.handler(this, options);\n            break;\n          default:\n            throw new TypeError('Object or function expected as callback');\n        }\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this.toHTML(options);\n  };\n\n  /**\n   * Internal function to generate the string output.\n   * This has to be implemented by every Node\n   *\n   * @throws {Error}\n   */\n  Node.prototype._toString = function () {\n    //must be implemented by each of the Node implementations\n    throw new Error('_toString not implemented for ' + this.type);\n  };\n\n  /**\n   * Get LaTeX representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n  Node.prototype.toTex = function (options) {\n    var customTex;\n    if (options && typeof options == 'object') {\n      switch (typeof options.handler) {\n        case 'object':\n        case 'undefined':\n          break;\n        case 'function':\n          customTex = options.handler(this, options);\n          break;\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    }\n\n    return this._toTex(options);\n  };\n\n  /**\n   * Internal function to generate the LaTeX output.\n   * This has to be implemented by every Node\n   *\n   * @param {Object} [options]\n   * @throws {Error}\n   */\n  Node.prototype._toTex = function (options) {\n    //must be implemented by each of the Node implementations\n    throw new Error('_toTex not implemented for ' + this.type);\n  };\n\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n  Node.prototype.getIdentifier = function () {\n    return this.type;\n  };\n\n  /**\n   * Get the content of the current Node.\n   * @return {Node} node\n   **/\n  Node.prototype.getContent = function () {\n    return this;\n  };\n\n  /**\n   * Validate the symbol names of a scope.\n   * Throws an error when the scope contains an illegal symbol.\n   * @param {Object} scope\n   */\n  function _validateScope(scope) {\n    for (var symbol in scope) {\n      if (hasOwnProperty(scope, symbol)) {\n        if (symbol in keywords) {\n          throw new Error('Scope contains an illegal symbol, \"' + symbol + '\" is a reserved keyword');\n        }\n      }\n    }\n  }\n\n  return Node;\n}\n\nexports.name = 'Node';\nexports.path = 'expression.node';\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\nexports.factory = factory;\n","'use strict';\n\nvar stringify = require('../../utils/string').stringify;\nvar escape = require('../../utils/string').escape;\nvar isSafeProperty = require('../../utils/customs').isSafeProperty;\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * @constructor ObjectNode\n   * @extends {Node}\n   * Holds an object with keys/values\n   * @param {Object.<string, Node>} [properties]   array with key/value pairs\n   */\n  function ObjectNode(properties) {\n    if (!(this instanceof ObjectNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.properties = properties || {};\n\n    // validate input\n    if (properties) {\n      if (!(typeof properties === 'object') || Object.keys(properties).some(function (key) {\n            return !properties[key] || !properties[key].isNode;\n          })) {\n        throw new TypeError('Object containing Nodes expected');\n      }\n    }\n  }\n\n  ObjectNode.prototype = new Node();\n\n  ObjectNode.prototype.type = 'ObjectNode';\n\n  ObjectNode.prototype.isObjectNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {ObjectNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} code\n   * @private\n   */\n  function compileObjectNode(node, defs, args) {\n    if (!(node instanceof ObjectNode)) {\n      throw new TypeError('No valid ObjectNode')\n    }\n\n    var entries = [];\n    for (var key in node.properties) {\n      if (hasOwnProperty(node.properties, key)) {\n        if (!isSafeProperty(key)) {\n          throw new Error('No access to property \"' + key + '\"');\n        }\n\n        entries.push(stringify(key) + ': ' + compile(node.properties[key], defs, args));\n      }\n    }\n    return '{' + entries.join(', ') + '}';\n  }\n\n  // register the compile function\n  register(ObjectNode.prototype.type, compileObjectNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  ObjectNode.prototype.forEach = function (callback) {\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        callback(this.properties[key], 'properties[' + stringify(key) + ']', this);\n      }\n    }\n  };\n\n  /**\n   * Create a new ObjectNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ObjectNode} Returns a transformed copy of the node\n   */\n  ObjectNode.prototype.map = function (callback) {\n    var properties = {};\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        properties[key] = this._ifNode(callback(this.properties[key],\n            'properties[' + stringify(key) + ']', this));\n      }\n    }\n    return new ObjectNode(properties);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ObjectNode}\n   */\n  ObjectNode.prototype.clone = function() {\n    var properties = {};\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        properties[key] = this.properties[key];\n      }\n    }\n    return new ObjectNode(properties);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  ObjectNode.prototype._toString = function(options) {\n    var entries = [];\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        entries.push(stringify(key) + ': ' + this.properties[key].toString(options));\n      }\n    }\n    return '{' + entries.join(', ') + '}';\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  ObjectNode.prototype.toHTML = function(options) {\n    var entries = [];\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        entries.push('<span class=\"math-symbol math-property\">' + escape(key) + '</span>' + '<span class=\"math-operator math-assignment-operator math-property-assignment-operator math-binary-operator\">:</span>' + this.properties[key].toHTML(options));\n      }\n    }\n    return '<span class=\"math-parenthesis math-curly-parenthesis\">{</span>' + entries.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-curly-parenthesis\">}</span>';\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  ObjectNode.prototype._toTex = function(options) {\n    var entries = [];\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        entries.push(\"\\\\mathbf{\" + key + ':} & ' + this.properties[key].toTex(options) + \"\\\\\\\\\");\n      }\n    }\n    return '\\\\left\\\\{\\\\begin{array}{ll}' + entries.join('\\n') + '\\\\end{array}\\\\right\\\\}';\n  };\n\n  return ObjectNode;\n}\n\nexports.name = 'ObjectNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n","'use strict';\n\nvar latex = require('../../utils/latex');\nvar map = require('../../utils/array').map;\nvar join = require('../../utils/array').join;\nvar stringify = require('../../utils/string').stringify;\nvar escape = require('../../utils/string').escape;\nvar isSafeMethod = require('../../utils/customs').isSafeMethod;\nvar operators = require('../operators');\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node         = load(require('./Node'));\n  var ConstantNode = load(require('./ConstantNode'));\n  var SymbolNode   = load(require('./SymbolNode'));\n  var FunctionNode = load(require('./FunctionNode'));\n\n  /**\n   * @constructor OperatorNode\n   * @extends {Node}\n   * An operator with two arguments, like 2+3\n   *\n   * @param {string} op           Operator name, for example '+'\n   * @param {string} fn           Function name, for example 'add'\n   * @param {Node[]} args         Operator arguments\n   * @param {boolean} [implicit]  Is this an implicit multiplication?\n   */\n  function OperatorNode(op, fn, args, implicit) {\n    if (!(this instanceof OperatorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    //validate input\n    if (typeof op !== 'string') {\n      throw new TypeError('string expected for parameter \"op\"');\n    }\n    if (typeof fn !== 'string') {\n      throw new TypeError('string expected for parameter \"fn\"');\n    }\n    if (!Array.isArray(args)\n        || !args.every(function (node) {return node && node.isNode;})) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n\n    this.implicit = (implicit === true);\n    this.op = op;\n    this.fn = fn;\n    this.args = args || [];\n  }\n\n  OperatorNode.prototype = new Node();\n\n  OperatorNode.prototype.type = 'OperatorNode';\n\n  OperatorNode.prototype.isOperatorNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {OperatorNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileOperatorNode(node, defs, args) {\n    if (!(node instanceof OperatorNode)) {\n      throw new TypeError('No valid OperatorNode')\n    }\n\n    // validate fn\n    if (typeof node.fn !== 'string' || !isSafeMethod(defs.math, node.fn)) {\n      if (!defs.math[node.fn]) {\n        throw new Error('Function ' + node.fn + ' missing in provided namespace \"math\"');\n      }\n      else {\n        throw new Error('No access to function \"' + node.fn + '\"');\n      }\n    }\n\n    var jsArgs = map(node.args, function (arg) {\n      return compile(arg, defs, args);\n    });\n\n    return 'math[' + stringify(node.fn) + '](' + join(jsArgs, ', ') + ')';\n  }\n\n  // register the compile function\n  register(OperatorNode.prototype.type, compileOperatorNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  OperatorNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n\n  /**\n   * Create a new OperatorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n  OperatorNode.prototype.map = function (callback) {\n    var args = [];\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n    return new OperatorNode(this.op, this.fn, args);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {OperatorNode}\n   */\n  OperatorNode.prototype.clone = function () {\n    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);\n  };\n\n  /**\n   * Calculate which parentheses are necessary. Gets an OperatorNode\n   * (which is the root of the tree) and an Array of Nodes\n   * (this.args) and returns an array where 'true' means that an argument\n   * has to be enclosed in parentheses whereas 'false' means the opposite.\n   *\n   * @param {OperatorNode} root\n   * @param {string} parenthesis\n   * @param {Node[]} args\n   * @param {boolean} latex\n   * @return {boolean[]}\n   * @private\n   */\n  function calculateNecessaryParentheses(root, parenthesis, args, latex) {\n    //precedence of the root OperatorNode\n    var precedence = operators.getPrecedence(root, parenthesis);\n    var associativity = operators.getAssociativity(root, parenthesis);\n\n    if ((parenthesis === 'all') || ((args.length > 2) && (root.getIdentifier() !== 'OperatorNode:add') && (root.getIdentifier() !== 'OperatorNode:multiply'))) {\n      var parens = args.map(function (arg) {\n        switch (arg.getContent().type) { //Nodes that don't need extra parentheses\n          case 'ArrayNode':\n          case 'ConstantNode':\n          case 'SymbolNode':\n          case 'ParenthesisNode':\n            return false;\n            break;\n          default:\n            return true;\n        }\n      });\n      return parens;\n    }\n\n    if (args.length === 0) {\n      return [];\n    } else if (args.length === 1) { //unary operators\n      //precedence of the operand\n      var operandPrecedence = operators.getPrecedence(args[0], parenthesis);\n\n      //handle special cases for LaTeX, where some of the parentheses aren't needed\n      if (latex && (operandPrecedence !== null)) {\n        var operandIdentifier;\n        var rootIdentifier;\n        if (parenthesis === 'keep') {\n          operandIdentifier = args[0].getIdentifier();\n          rootIdentifier = root.getIdentifier();\n        }\n        else {\n          //Ignore Parenthesis Nodes when not in 'keep' mode\n          operandIdentifier = args[0].getContent().getIdentifier();\n          rootIdentifier = root.getContent().getIdentifier();\n        }\n        if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {\n          return [false];\n        }\n\n        if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {\n          return [false];\n        }\n      }\n\n      if (operandPrecedence === null) {\n        //if the operand has no defined precedence, no parens are needed\n        return [false];\n      }\n\n      if (operandPrecedence <= precedence) {\n        //if the operands precedence is lower, parens are needed\n        return [true];\n      }\n\n      //otherwise, no parens needed\n      return [false];\n    } else if (args.length === 2) { //binary operators\n      var lhsParens; //left hand side needs parenthesis?\n      //precedence of the left hand side\n      var lhsPrecedence = operators.getPrecedence(args[0], parenthesis);\n      //is the root node associative with the left hand side\n      var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);\n\n      if (lhsPrecedence === null) {\n        //if the left hand side has no defined precedence, no parens are needed\n        //FunctionNode for example\n        lhsParens = false;\n      }\n      else if ((lhsPrecedence === precedence) && (associativity === 'right') && !assocWithLhs) {\n        //In case of equal precedence, if the root node is left associative\n        // parens are **never** necessary for the left hand side.\n        //If it is right associative however, parens are necessary\n        //if the root node isn't associative with the left hand side\n        lhsParens = true;\n      }\n      else if (lhsPrecedence < precedence) {\n        lhsParens = true;\n      }\n      else {\n        lhsParens = false;\n      }\n\n      var rhsParens; //right hand side needs parenthesis?\n      //precedence of the right hand side\n      var rhsPrecedence = operators.getPrecedence(args[1], parenthesis);\n      //is the root node associative with the right hand side?\n      var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);\n\n      if (rhsPrecedence === null) {\n        //if the right hand side has no defined precedence, no parens are needed\n        //FunctionNode for example\n        rhsParens = false;\n      }\n      else if ((rhsPrecedence === precedence) && (associativity === 'left') && !assocWithRhs) {\n        //In case of equal precedence, if the root node is right associative\n        // parens are **never** necessary for the right hand side.\n        //If it is left associative however, parens are necessary\n        //if the root node isn't associative with the right hand side\n        rhsParens = true;\n      }\n      else if (rhsPrecedence < precedence) {\n        rhsParens = true;\n      }\n      else {\n        rhsParens = false;\n      }\n\n      //handle special cases for LaTeX, where some of the parentheses aren't needed\n      if (latex) {\n        var rootIdentifier;\n        var lhsIdentifier;\n        var rhsIdentifier;\n        if (parenthesis === 'keep') {\n          rootIdentifier = root.getIdentifier();\n          lhsIdentifier = root.args[0].getIdentifier();\n          rhsIdentifier = root.args[1].getIdentifier();\n        }\n        else {\n          //Ignore ParenthesisNodes when not in 'keep' mode\n          rootIdentifier = root.getContent().getIdentifier();\n          lhsIdentifier = root.args[0].getContent().getIdentifier();\n          rhsIdentifier = root.args[1].getContent().getIdentifier();\n        }\n\n        if (lhsPrecedence !== null) {\n          if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {\n            lhsParens = false;\n          }\n\n          if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {\n            lhsParens = false;\n          }\n        }\n\n        if (rhsPrecedence !== null) {\n          if (operators.properties[precedence][rootIdentifier].latexRightParens === false) {\n            rhsParens = false;\n          }\n\n          if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {\n            rhsParens = false;\n          }\n        }\n      }\n\n      return [lhsParens, rhsParens];\n    } else if ((args.length > 2) && ((root.getIdentifier() === 'OperatorNode:add') || (root.getIdentifier() === 'OperatorNode:multiply'))) {\n      var parensArray = args.map(function (arg) {\n        var argPrecedence = operators.getPrecedence(arg, parenthesis);\n        var assocWithArg = operators.isAssociativeWith(root, arg, parenthesis);\n        var argAssociativity = operators.getAssociativity(arg, parenthesis);\n        if (argPrecedence === null) {\n          //if the argument has no defined precedence, no parens are needed\n          return false;\n        } else if ((precedence === argPrecedence) && (associativity === argAssociativity) && !assocWithArg) {\n          return true;\n        } else if (argPrecedence < precedence) {\n          return true;\n        }\n\n        return false;\n      });\n      return parensArray;\n    }\n  }\n\n  /**\n   * Get string representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n  OperatorNode.prototype._toString = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var implicit = (options && options.implicit) ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, args, false);\n\n    if (args.length === 1) { //unary operators\n      var assoc = operators.getAssociativity(this, parenthesis);\n\n      var operand = args[0].toString(options);\n      if (parens[0]) {\n        operand = '(' + operand + ')';\n      }\n\n      if (assoc === 'right') { //prefix operator\n        return this.op + operand;\n      }\n      else if (assoc === 'left') { //postfix\n        return operand + this.op;\n      }\n\n      //fall back to postfix\n      return operand + this.op;\n    } else if (args.length == 2) {\n      var lhs = args[0].toString(options); //left hand side\n      var rhs = args[1].toString(options); //right hand side\n      if (parens[0]) { //left hand side in parenthesis?\n        lhs = '(' + lhs + ')';\n      }\n      if (parens[1]) { //right hand side in parenthesis?\n        rhs = '(' + rhs + ')';\n      }\n\n      if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit == 'hide')) {\n        return lhs + ' ' + rhs;\n      }\n\n      return lhs + ' ' + this.op + ' ' + rhs;\n    } else if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {\n      var stringifiedArgs = args.map(function (arg, index) {\n        arg = arg.toString(options);\n        if (parens[index]) { //put in parenthesis?\n          arg = '(' + arg + ')';\n        }\n\n        return arg;\n      });\n\n      if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit === 'hide')) {\n        return stringifiedArgs.join(' ');\n      }\n\n      return stringifiedArgs.join(' ' + this.op + ' ');\n    } else {\n      //fallback to formatting as a function call\n      return this.fn + '(' + this.args.join(', ') + ')';\n    }\n  };\n\n  /**\n   * Get HTML representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n  OperatorNode.prototype.toHTML = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var implicit = (options && options.implicit) ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, args, false);\n\n    if (args.length === 1) { //unary operators\n      var assoc = operators.getAssociativity(this, parenthesis);\n\n      var operand = args[0].toHTML(options);\n      if (parens[0]) {\n        operand = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + operand + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      if (assoc === 'right') { //prefix operator\n        return '<span class=\"math-operator math-unary-operator math-lefthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n      }\n      else if (assoc === 'left') { //postfix\n        return '<span class=\"math-operator math-unary-operator math-righthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n      }\n\n      //fall back to postfix\n      return '<span class=\"math-operator math-unary-operator math-righthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n    }\n\telse if (args.length == 2) { // binary operatoes\n      var lhs = args[0].toHTML(options); //left hand side\n      var rhs = args[1].toHTML(options); //right hand side\n      if (parens[0]) { //left hand side in parenthesis?\n        lhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + lhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      if (parens[1]) { //right hand side in parenthesis?\n        rhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + rhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\t  \n\t  if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit == 'hide')) {\n\t    return lhs + '<span class=\"math-operator math-binary-operator math-implicit-binary-operator\"></span>' + rhs;\n\t  }\n      \n\t  return lhs + '<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(this.op) + '</span>' + rhs;\n    }\n\telse if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {\n      var stringifiedArgs = args.map(function (arg, index) {\n        arg = arg.toHTML(options);\n        if (parens[index]) { //put in parenthesis?\n          arg = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + arg + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n\n        return arg;\n      });\n\n      if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit === 'hide')) {\n        return stringifiedArgs.join('<span class=\"math-operator math-binary-operator math-implicit-binary-operator\"></span>');\n      }\n\n      return stringifiedArgs.join('<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(this.op) + '</span>');\n    } else {\n      //fallback to formatting as a function call\n      return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + stringifiedArgs.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  OperatorNode.prototype._toTex = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var implicit = (options && options.implicit) ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, args, true);\n    var op = latex.operators[this.fn];\n    op = typeof op === 'undefined' ? this.op : op; //fall back to using this.op\n\n    if (args.length === 1) { //unary operators\n      var assoc = operators.getAssociativity(this, parenthesis);\n\n      var operand = args[0].toTex(options);\n      if (parens[0]) {\n        operand = '\\\\left(' + operand + '\\\\right)';\n      }\n\n      if (assoc === 'right') { //prefix operator\n        return op + operand;\n      }\n      else if (assoc === 'left') { //postfix operator\n        return operand + op;\n      }\n\n      //fall back to postfix\n      return operand + op;\n    } else if (args.length === 2) { //binary operators\n      var lhs = args[0]; //left hand side\n      var lhsTex = lhs.toTex(options);\n      if (parens[0]) {\n        lhsTex = '\\\\left(' + lhsTex + '\\\\right)';\n      }\n\n      var rhs = args[1]; //right hand side\n      var rhsTex = rhs.toTex(options);\n      if (parens[1]) {\n        rhsTex = '\\\\left(' + rhsTex + '\\\\right)';\n      }\n\n      //handle some exceptions (due to the way LaTeX works)\n      var lhsIdentifier;\n      if (parenthesis === 'keep') {\n        lhsIdentifier = lhs.getIdentifier();\n      }\n      else {\n        //Ignore ParenthesisNodes if in 'keep' mode\n        lhsIdentifier = lhs.getContent().getIdentifier();\n      }\n      switch (this.getIdentifier()) {\n        case 'OperatorNode:divide':\n          //op contains '\\\\frac' at this point\n          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';\n        case 'OperatorNode:pow':\n          lhsTex = '{' + lhsTex + '}';\n          rhsTex = '{' + rhsTex + '}';\n          switch (lhsIdentifier) {\n            case 'ConditionalNode': //\n            case 'OperatorNode:divide':\n              lhsTex = '\\\\left(' + lhsTex + '\\\\right)';\n          }\n        case 'OperatorNode:multiply':\n          if (this.implicit && (implicit === 'hide')) {\n            return lhsTex + '~' + rhsTex;\n          }\n      }\n      return lhsTex + op + rhsTex;\n    } else if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {\n      var texifiedArgs = args.map(function (arg, index) {\n        arg = arg.toTex(options);\n        if (parens[index]) {\n          arg = '\\\\left(' + arg + '\\\\right)';\n        }\n        return arg;\n      });\n\n      if ((this.getIdentifier() === 'OperatorNode:multiply') && this.implicit) {\n        return texifiedArgs.join('~');\n      }\n\n      return texifiedArgs.join(op)\n    } else {\n      //fall back to formatting as a function call\n      //as this is a fallback, it doesn't use\n      //fancy function names\n      return '\\\\mathrm{' + this.fn + '}\\\\left('\n          + args.map(function (arg) {\n            return arg.toTex(options);\n          }).join(',') + '\\\\right)';\n    }\n  };\n\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n  OperatorNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.fn;\n  };\n\n  return OperatorNode;\n}\n\nexports.name = 'OperatorNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * @constructor ParenthesisNode\n   * @extends {Node}\n   * A parenthesis node describes manual parenthesis from the user input\n   * @param {Node} content\n   * @extends {Node}\n   */\n  function ParenthesisNode(content) {\n    if (!(this instanceof ParenthesisNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // validate input\n    if (!(content && content.isNode)) {\n      throw new TypeError('Node expected for parameter \"content\"');\n    }\n\n    this.content = content;\n  }\n\n  ParenthesisNode.prototype = new Node();\n\n  ParenthesisNode.prototype.type = 'ParenthesisNode';\n\n  ParenthesisNode.prototype.isParenthesisNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {ParenthesisNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileParenthesisNode(node, defs, args) {\n    if (!(node instanceof ParenthesisNode)) {\n      throw new TypeError('No valid ParenthesisNode')\n    }\n\n    return compile(node.content, defs, args);\n  }\n\n  // register the compile function\n  register(ParenthesisNode.prototype.type, compileParenthesisNode);\n\n  /**\n   * Get the content of the current Node.\n   * @return {Node} content\n   * @override\n   **/\n  ParenthesisNode.prototype.getContent = function () {\n    return this.content.getContent();\n  };\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  ParenthesisNode.prototype.forEach = function (callback) {\n    callback(this.content, 'content', this);\n  };\n\n  /**\n   * Create a new ParenthesisNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ParenthesisNode} Returns a clone of the node\n   */\n  ParenthesisNode.prototype.map = function (callback) {\n    var content = callback(this.content, 'content', this);\n    return new ParenthesisNode(content);\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ParenthesisNode}\n   */\n  ParenthesisNode.prototype.clone = function() {\n    return new ParenthesisNode(this.content);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  ParenthesisNode.prototype._toString = function(options) {\n    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {\n      return '(' + this.content.toString(options) + ')';\n    }\n    return this.content.toString(options);\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  ParenthesisNode.prototype.toHTML = function(options) {\n    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {\n      return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n    return this.content.toHTML(options);\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  ParenthesisNode.prototype._toTex = function(options) {\n    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {\n      return '\\\\left(' + this.content.toTex(options) + '\\\\right)';\n    }\n    return this.content.toTex(options);\n  };\n\n  return ParenthesisNode;\n}\n\nexports.name = 'ParenthesisNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n","'use strict';\n\nvar operators = require('../operators');\n\nfunction factory (type, config, load, typed) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * @constructor RangeNode\n   * @extends {Node}\n   * create a range\n   * @param {Node} start  included lower-bound\n   * @param {Node} end    included upper-bound\n   * @param {Node} [step] optional step\n   */\n  function RangeNode(start, end, step) {\n    if (!(this instanceof RangeNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // validate inputs\n    if (!(start && start.isNode)) throw new TypeError('Node expected');\n    if (!(end && end.isNode)) throw new TypeError('Node expected');\n    if (step && !(step && step.isNode)) throw new TypeError('Node expected');\n    if (arguments.length > 3) throw new Error('Too many arguments');\n\n    this.start = start;         // included lower-bound\n    this.end = end;           // included upper-bound\n    this.step = step || null;  // optional step\n  }\n\n  RangeNode.prototype = new Node();\n\n  RangeNode.prototype.type = 'RangeNode';\n\n  RangeNode.prototype.isRangeNode = true;\n\n  /**\n   * Check whether the RangeNode needs the `end` symbol to be defined.\n   * This end is the size of the Matrix in current dimension.\n   * @return {boolean}\n   */\n  RangeNode.prototype.needsEnd = function () {\n    // find all `end` symbols in this RangeNode\n    var endSymbols = this.filter(function (node) {\n      return (node && node.isSymbolNode) && (node.name == 'end');\n    });\n\n    return endSymbols.length > 0;\n  };\n\n  /**\n   * Compile the node to javascript code\n   *\n   * When the range has a symbol `end` defined, the RangeNode requires\n   * a variable `end` to be defined in the current closure, which must contain\n   * the length of the of the matrix that's being handled in the range's\n   * dimension. To check whether the `end` variable is needed, call\n   * RangeNode.needsEnd().\n   *\n   * @param {RangeNode} node  The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileRangeNode(node, defs, args) {\n    if (!(node instanceof RangeNode)) {\n      throw new TypeError('No valid RangeNode')\n    }\n\n    return 'math.range(' +\n        compile(node.start, defs, args) + ', ' +\n        compile(node.end, defs, args) +\n        (node.step ? (', ' + compile(node.step, defs, args)) : '') +\n        ')';\n  }\n\n  // register the compile function\n  register(RangeNode.prototype.type, compileRangeNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  RangeNode.prototype.forEach = function (callback) {\n    callback(this.start, 'start', this);\n    callback(this.end, 'end', this);\n    if (this.step) {\n      callback(this.step, 'step', this);\n    }\n  };\n\n  /**\n   * Create a new RangeNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {RangeNode} Returns a transformed copy of the node\n   */\n  RangeNode.prototype.map = function (callback) {\n    return new RangeNode(\n        this._ifNode(callback(this.start, 'start', this)),\n        this._ifNode(callback(this.end, 'end', this)),\n        this.step && this._ifNode(callback(this.step, 'step', this))\n    );\n  };\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {RangeNode}\n   */\n  RangeNode.prototype.clone = function () {\n    return new RangeNode(this.start, this.end, this.step && this.step);\n  };\n\n  /**\n   * Calculate the necessary parentheses\n   * @param {Node} node\n   * @param {string} parenthesis\n   * @return {Object} parentheses\n   * @private\n   */\n  function calculateNecessaryParentheses(node, parenthesis) {\n    var precedence = operators.getPrecedence(node, parenthesis);\n    var parens = {};\n\n    var startPrecedence = operators.getPrecedence(node.start, parenthesis);\n    parens.start = ((startPrecedence !== null) && (startPrecedence <= precedence))\n      || (parenthesis === 'all');\n\n    if (node.step) {\n      var stepPrecedence = operators.getPrecedence(node.step, parenthesis);\n      parens.step = ((stepPrecedence !== null) && (stepPrecedence <= precedence))\n        || (parenthesis === 'all');\n    }\n\n    var endPrecedence = operators.getPrecedence(node.end, parenthesis);\n    parens.end = ((endPrecedence !== null) && (endPrecedence <= precedence))\n      || (parenthesis === 'all');\n\n    return parens;\n  }\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  RangeNode.prototype._toString = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis);\n\n    //format string as start:step:stop\n    var str;\n\n    var start = this.start.toString(options);\n    if (parens.start) {\n      start = '(' + start + ')';\n    }\n    str = start;\n\n    if (this.step) {\n      var step = this.step.toString(options);\n      if (parens.step) {\n        step = '(' + step + ')';\n      }\n      str += ':' + step;\n    }\n\n    var end = this.end.toString(options);\n    if (parens.end) {\n      end = '(' + end + ')';\n    }\n    str += ':' + end;\n\n    return str;\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n  RangeNode.prototype.toHTML = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis);\n\n    //format string as start:step:stop\n    var str;\n\n    var start = this.start.toHTML(options);\n    if (parens.start) {\n      start = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + start + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n    str = start;\n\n    if (this.step) {\n      var step = this.step.toHTML(options);\n      if (parens.step) {\n        step = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + step + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      str += '<span class=\"math-operator math-range-operator\">:</span>' + step;\n    }\n\n    var end = this.end.toHTML(options);\n    if (parens.end) {\n      end = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + end + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n    str += '<span class=\"math-operator math-range-operator\">:</span>' + end;\n\n    return str;\n  };\n\n  /**\n   * Get LaTeX representation\n   * @params {Object} options\n   * @return {string} str\n   */\n  RangeNode.prototype._toTex = function (options) {\n    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis);\n\n    var str = this.start.toTex(options);\n    if (parens.start) {\n      str = '\\\\left(' + str + '\\\\right)';\n    }\n\n    if (this.step) {\n      var step = this.step.toTex(options);\n      if (parens.step) {\n        step = '\\\\left(' + step + '\\\\right)';\n      }\n      str += ':' + step;\n    }\n\n    var end = this.end.toTex(options);\n    if (parens.end) {\n      end = '\\\\left(' + end + '\\\\right)';\n    }\n    str += ':' + end;\n\n    return str;\n  };\n\n  return RangeNode;\n}\n\nexports.name = 'RangeNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n","'use strict';\n\nvar latex = require('../../utils/latex');\nvar stringify = require('../../utils/string').stringify;\nvar escape = require('../../utils/string').escape;\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nfunction factory (type, config, load, typed, math) {\n  var register = load(require('./compile')).register;\n  var compile = load(require('./compile')).compile;\n  var Node = load(require('./Node'));\n\n  /**\n   * Check whether some name is a valueless unit like \"inch\".\n   * @param {string} name\n   * @return {boolean}\n   */\n  function isValuelessUnit (name) {\n    return type.Unit ? type.Unit.isValuelessUnit(name) : false;\n  }\n\n  /**\n   * @constructor SymbolNode\n   * @extends {Node}\n   * A symbol node can hold and resolve a symbol\n   * @param {string} name\n   * @extends {Node}\n   */\n  function SymbolNode(name) {\n    if (!(this instanceof SymbolNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // validate input\n    if (typeof name !== 'string')  throw new TypeError('String expected for parameter \"name\"');\n\n    this.name = name;\n  }\n\n  SymbolNode.prototype = new Node();\n\n  SymbolNode.prototype.type = 'SymbolNode';\n\n  SymbolNode.prototype.isSymbolNode = true;\n\n  /**\n   * Compile the node to javascript code\n   * @param {SymbolNode} node The node to be compiled\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} js\n   * @private\n   */\n  function compileSymbolNode(node, defs, args) {\n    if (!(node instanceof SymbolNode)) {\n      throw new TypeError('No valid SymbolNode')\n    }\n\n    // add a function to the definitions\n    defs['undef'] = undef;\n    defs['Unit'] = type.Unit;\n    defs.getSafeProperty = getSafeProperty;\n    defs.hasOwnProperty = hasOwnProperty;\n\n    var jsName = stringify(node.name); // escaped node name inside double quotes\n\n    if (hasOwnProperty(args, node.name)) {\n      // this is a FunctionAssignment argument\n      // (like an x when inside the expression of a function assignment `f(x) = ...`)\n      return args[node.name];\n    }\n    else if (node.name in defs.math) {\n      return '(' + jsName + ' in scope ' +\n          '? getSafeProperty(scope, ' + jsName + ') ' +\n          ': getSafeProperty(math, ' + jsName + '))';\n    }\n    else {\n      return '(' +\n          jsName + ' in scope ' +\n          '? getSafeProperty(scope, ' + jsName + ') ' +\n          ': ' + (isValuelessUnit(node.name)\n              ? 'new Unit(null, ' + jsName + ')'\n              : 'undef(' + jsName + ')') +\n          ')';\n    }\n  }\n\n  // register the compile function\n  register(SymbolNode.prototype.type, compileSymbolNode);\n\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n  SymbolNode.prototype.forEach = function (callback) {\n    // nothing to do, we don't have childs\n  };\n\n  /**\n   * Create a new SymbolNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {SymbolNode} Returns a clone of the node\n   */\n  SymbolNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n\n  /**\n   * Throws an error 'Undefined symbol {name}'\n   * @param {string} name\n   */\n  function undef (name) {\n    throw new Error('Undefined symbol ' + name);\n  }\n\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {SymbolNode}\n   */\n  SymbolNode.prototype.clone = function() {\n    return new SymbolNode(this.name);\n  };\n\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  SymbolNode.prototype._toString = function(options) {\n    return this.name;\n  };\n\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  SymbolNode.prototype.toHTML = function(options) {\n\tvar name = escape(this.name);\n\t\n    if (name == \"true\" || name == \"false\") {\n\t  return '<span class=\"math-symbol math-boolean\">' + name + '</span>';\n\t}\n\telse if (name == \"i\") {\n\t  return '<span class=\"math-symbol math-imaginary-symbol\">' + name + '</span>';\n\t}\n\telse if (name == \"Infinity\") {\n\t  return '<span class=\"math-symbol math-infinity-symbol\">' + name + '</span>';\n\t}\n\telse if (name == \"NaN\") {\n\t  return '<span class=\"math-symbol math-nan-symbol\">' + name + '</span>';\n\t}\n\telse if (name == \"null\") {\n\t  return '<span class=\"math-symbol math-null-symbol\">' + name + '</span>';\n\t}\n\telse if (name == \"uninitialized\") {\n\t  return '<span class=\"math-symbol math-uninitialized-symbol\">' + name + '</span>';\n\t}\n\t\n\treturn '<span class=\"math-symbol\">' + name + '</span>';\n  };\n\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n  SymbolNode.prototype._toTex = function(options) {\n    var isUnit = false;\n    if ((typeof math[this.name] === 'undefined') && isValuelessUnit(this.name)) {\n      isUnit = true;\n    }\n    var symbol = latex.toSymbol(this.name, isUnit);\n    if (symbol[0] === '\\\\') {\n      //no space needed if the symbol starts with '\\'\n      return symbol;\n    }\n    //the space prevents symbols from breaking stuff like '\\cdot' if it's written right before the symbol\n    return ' ' + symbol;\n  };\n\n  return SymbolNode;\n}\n\nexports.name = 'SymbolNode';\nexports.path = 'expression.node';\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  /**\n   * @constructor UpdateNode\n   */\n  function UpdateNode() {\n    // TODO: deprecated since v3. Cleanup some day\n    throw new Error('UpdateNode is deprecated. Use AssignmentNode instead.');\n  }\n\n  return UpdateNode;\n}\n\nexports.name = 'UpdateNode';\nexports.path = 'expression.node';\nexports.factory = factory;\n","// the compile functions which compile a Node into JavaScript are not\n// exposed as class methods for security reasons to prevent being able to\n// override them or create fake Nodes. Instead, only compile functions of\n// registered nodes can be executed\n\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nfunction factory () {\n  // map with node type as key and compile functions as value\n  var compileFunctions = {}\n\n  /**\n   * Register a compile function for a node\n   * @param {string} type\n   * @param {function} compileFunction\n   *                      The compile function, invoked as\n   *                      compileFunction(node, defs, args)\n   */\n  function register(type, compileFunction) {\n    if (compileFunctions[type] === undefined) {\n      compileFunctions[type] = compileFunction;\n    }\n    else {\n      throw new Error('Cannot register type \"' + type + '\": already exists');\n    }\n  }\n\n  /**\n   * Compile a Node into JavaScript\n   * @param {Node} node\n   * @param {Object} defs     Object which can be used to define functions\n   *                          or constants globally available for the compiled\n   *                          expression\n   * @param {Object} args     Object with local function arguments, the key is\n   *                          the name of the argument, and the value is `true`.\n   *                          The object may not be mutated, but must be\n   *                          extended instead.\n   * @return {string} Returns JavaScript code\n   */\n  function compile (node, defs, args) {\n    if (hasOwnProperty(compileFunctions, node.type)) {\n      var compileFunction = compileFunctions[node.type];\n      return compileFunction(node, defs, args);\n    }\n    else if (typeof node._compile === 'function' &&\n        !hasOwnProperty(node, '_compile')) {\n      // Compatibility for CustomNodes\n      // TODO: this is a security risk, change it such that you have to register CustomNodes separately in math.js, like math.expression.node.register(MyCustomNode)\n      return node._compile(defs, args);\n    }\n    else {\n      throw new Error('Cannot compile node: unknown type \"' + node.type + '\"');\n    }\n  }\n\n  return {\n    register: register,\n    compile: compile\n  }\n}\n\nexports.factory = factory;\n","module.exports = [\n  require('./AccessorNode'),\n  require('./ArrayNode'),\n  require('./AssignmentNode'),\n  require('./BlockNode'),\n  require('./ConditionalNode'),\n  require('./ConstantNode'),\n  require('./IndexNode'),\n  require('./FunctionAssignmentNode'),\n  require('./FunctionNode'),\n  require('./Node'),\n  require('./ObjectNode'),\n  require('./OperatorNode'),\n  require('./ParenthesisNode'),\n  require('./RangeNode'),\n  require('./SymbolNode'),\n  require('./UpdateNode')\n];\n","'use strict';\n\nvar errorTransform = require('../../transform/error.transform').transform;\nvar getSafeProperty = require('../../../utils/customs').getSafeProperty;\n\nfunction factory (type, config, load, typed) {\n  var subset = load(require('../../../function/matrix/subset'));\n\n  /**\n   * Retrieve part of an object:\n   *\n   * - Retrieve a property from an object\n   * - Retrieve a part of a string\n   * - Retrieve a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @return {Object | Array | Matrix | string} Returns the subset\n   */\n  return function access(object, index) {\n    try {\n      if (Array.isArray(object)) {\n        return subset(object, index);\n      }\n      else if (object && typeof object.subset === 'function') { // Matrix\n        return object.subset(index);\n      }\n      else if (typeof object === 'string') {\n        // TODO: move getStringSubset into a separate util file, use that\n        return subset(object, index);\n      }\n      else if (typeof object === 'object') {\n        if (!index.isObjectProperty()) {\n          throw new TypeError('Cannot apply a numeric index as object property');\n        }\n\n        return getSafeProperty(object, index.getObjectProperty());\n      }\n      else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    }\n    catch (err) {\n      throw errorTransform(err);\n    }\n  }\n}\n\nexports.factory = factory;\n","'use strict';\n\nvar errorTransform = require('../../transform/error.transform').transform;\nvar setSafeProperty = require('../../../utils/customs').setSafeProperty;\n\nfunction factory (type, config, load, typed) {\n  var subset = load(require('../../../function/matrix/subset'));\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n\n  /**\n   * Replace part of an object:\n   *\n   * - Assign a property to an object\n   * - Replace a part of a string\n   * - Replace a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @param {*} value\n   * @return {Object | Array | Matrix | string} Returns the original object\n   *                                            except in case of a string\n   */\n  // TODO: change assign to return the value instead of the object\n  return function assign(object, index, value) {\n    try {\n      if (Array.isArray(object)) {\n        return matrix(object).subset(index, value).valueOf();\n      }\n      else if (object && typeof object.subset === 'function') { // Matrix\n        return object.subset(index, value);\n      }\n      else if (typeof object === 'string') {\n        // TODO: move setStringSubset into a separate util file, use that\n        return subset(object, index, value);\n      }\n      else if (typeof object === 'object') {\n        if (!index.isObjectProperty()) {\n          throw TypeError('Cannot apply a numeric index as object property');\n        }\n        setSafeProperty(object, index.getObjectProperty(), value);\n        return object;\n      }\n      else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    }\n    catch (err) {\n        throw errorTransform(err);\n    }\n  }\n}\n\nexports.factory = factory;\n","/**\n * Get a unique name for an argument name to store in defs\n * @param {Object} defs\n * @return {string} A string like 'arg1', 'arg2', ...\n * @private\n */\nfunction getUniqueArgumentName (defs) {\n  return 'arg' + Object.keys(defs).length\n}\n\nmodule.exports = getUniqueArgumentName;\n","'use strict'\n\n//list of identifiers of nodes in order of their precedence\n//also contains information about left/right associativity\n//and which other operator the operator is associative with\n//Example:\n// addition is associative with addition and subtraction, because:\n// (a+b)+c=a+(b+c)\n// (a+b)-c=a+(b-c)\n//\n// postfix operators are left associative, prefix operators \n// are right associative\n//\n//It's also possible to set the following properties:\n// latexParens: if set to false, this node doesn't need to be enclosed\n//              in parentheses when using LaTeX\n// latexLeftParens: if set to false, this !OperatorNode's! \n//                  left argument doesn't need to be enclosed\n//                  in parentheses\n// latexRightParens: the same for the right argument\nvar properties = [\n  { //assignment\n    'AssignmentNode': {},\n    'FunctionAssignmentNode': {}\n  },\n  { //conditional expression\n    'ConditionalNode': {\n      latexLeftParens: false,\n      latexRightParens: false,\n      latexParens: false\n      //conditionals don't need parentheses in LaTeX because\n      //they are 2 dimensional\n    }\n  },\n  { //logical or\n    'OperatorNode:or': {\n      associativity: 'left',\n      associativeWith: []\n    }\n\n  },\n  { //logical xor\n    'OperatorNode:xor': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //logical and\n    'OperatorNode:and': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //bitwise or\n    'OperatorNode:bitOr': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //bitwise xor\n    'OperatorNode:bitXor': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //bitwise and\n    'OperatorNode:bitAnd': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //relational operators\n    'OperatorNode:equal': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:unequal': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:smaller': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:larger': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:smallerEq': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:largerEq': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //bitshift operators\n    'OperatorNode:leftShift': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:rightArithShift': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:rightLogShift': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //unit conversion\n    'OperatorNode:to': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //range\n    'RangeNode': {}\n  },\n  { //addition, subtraction\n    'OperatorNode:add': {\n      associativity: 'left',\n      associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']\n    },\n    'OperatorNode:subtract': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //multiply, divide, modulus\n    'OperatorNode:multiply': {\n      associativity: 'left',\n      associativeWith: [\n        'OperatorNode:multiply',\n        'OperatorNode:divide',\n        'Operator:dotMultiply',\n        'Operator:dotDivide'\n      ]\n    },\n    'OperatorNode:divide': {\n      associativity: 'left',\n      associativeWith: [],\n      latexLeftParens: false,\n      latexRightParens: false,\n      latexParens: false\n      //fractions don't require parentheses because\n      //they're 2 dimensional, so parens aren't needed\n      //in LaTeX\n    },\n    'OperatorNode:dotMultiply': {\n      associativity: 'left',\n      associativeWith: [\n        'OperatorNode:multiply',\n        'OperatorNode:divide',\n        'OperatorNode:dotMultiply',\n        'OperatorNode:doDivide'\n      ]\n    },\n    'OperatorNode:dotDivide': {\n      associativity: 'left',\n      associativeWith: []\n    },\n    'OperatorNode:mod': {\n      associativity: 'left',\n      associativeWith: []\n    }\n  },\n  { //unary prefix operators\n    'OperatorNode:unaryPlus': {\n      associativity: 'right'\n    },\n    'OperatorNode:unaryMinus': {\n      associativity: 'right'\n    },\n    'OperatorNode:bitNot': {\n      associativity: 'right'\n    },\n    'OperatorNode:not': {\n      associativity: 'right'\n    }\n  },\n  { //exponentiation\n    'OperatorNode:pow': {\n      associativity: 'right',\n      associativeWith: [],\n      latexRightParens: false\n      //the exponent doesn't need parentheses in\n      //LaTeX because it's 2 dimensional\n      //(it's on top)\n    },\n    'OperatorNode:dotPow': {\n      associativity: 'right',\n      associativeWith: []\n    }\n  },\n  { //factorial\n    'OperatorNode:factorial': {\n      associativity: 'left'\n    }\n  },\n  { //matrix transpose\n    'OperatorNode:transpose': {\n      associativity: 'left'\n    }\n  }\n];\n\n/**\n * Get the precedence of a Node.\n * Higher number for higher precedence, starting with 0.\n * Returns null if the precedence is undefined.\n *\n * @param {Node}\n * @param {string} parenthesis\n * @return {number|null}\n */\nfunction getPrecedence (_node, parenthesis) {\n  var node = _node;\n  if (parenthesis !== 'keep') {\n    //ParenthesisNodes are only ignored when not in 'keep' mode\n    node = _node.getContent();\n  }\n  var identifier = node.getIdentifier();\n  for (var i = 0; i < properties.length; i++) {\n    if (identifier in properties[i]) {\n      return i;\n    }\n  }\n  return null;\n}\n\n/**\n * Get the associativity of an operator (left or right).\n * Returns a string containing 'left' or 'right' or null if\n * the associativity is not defined.\n *\n * @param {Node}\n * @param {string} parenthesis\n * @return {string|null}\n * @throws {Error}\n */\nfunction getAssociativity (_node, parenthesis) {\n  var node = _node;\n  if (parenthesis !== 'keep') {\n    //ParenthesisNodes are only ignored when not in 'keep' mode\n    node = _node.getContent();\n  }\n  var identifier = node.getIdentifier();\n  var index = getPrecedence(node, parenthesis);\n  if (index === null) {\n    //node isn't in the list\n    return null;\n  }\n  var property = properties[index][identifier];\n\n  if (property.hasOwnProperty('associativity')) {\n    if (property.associativity === 'left') {\n      return 'left';\n    }\n    if (property.associativity === 'right') {\n      return 'right';\n    }\n    //associativity is invalid\n    throw Error('\\'' + identifier + '\\' has the invalid associativity \\''\n                + property.associativity + '\\'.');\n  }\n\n  //associativity is undefined\n  return null;\n}\n\n/**\n * Check if an operator is associative with another operator.\n * Returns either true or false or null if not defined.\n *\n * @param {Node} nodeA\n * @param {Node} nodeB\n * @param {string} parenthesis\n * @return {bool|null}\n */\nfunction isAssociativeWith (nodeA, nodeB, parenthesis) {\n  var a = nodeA;\n  var b = nodeB;\n  if (parenthesis !== 'keep') {\n    //ParenthesisNodes are only ignored when not in 'keep' mode\n    var a = nodeA.getContent();\n    var b = nodeB.getContent();\n  }\n  var identifierA = a.getIdentifier();\n  var identifierB = b.getIdentifier();\n  var index = getPrecedence(a, parenthesis);\n  if (index === null) {\n    //node isn't in the list\n    return null;\n  }\n  var property = properties[index][identifierA];\n\n  if (property.hasOwnProperty('associativeWith')\n      && (property.associativeWith instanceof Array)) {\n    for (var i = 0; i < property.associativeWith.length; i++) {\n      if (property.associativeWith[i] === identifierB) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  //associativeWith is not defined\n  return null;\n}\n\nmodule.exports.properties = properties;\nmodule.exports.getPrecedence = getPrecedence;\nmodule.exports.getAssociativity = getAssociativity;\nmodule.exports.isAssociativeWith = isAssociativeWith;\n","'use strict';\n\nvar ArgumentsError = require('../error/ArgumentsError');\nvar deepMap = require('../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var AccessorNode            = load(require('./node/AccessorNode'));\n  var ArrayNode               = load(require('./node/ArrayNode'));\n  var AssignmentNode          = load(require('./node/AssignmentNode'));\n  var BlockNode               = load(require('./node/BlockNode'));\n  var ConditionalNode         = load(require('./node/ConditionalNode'));\n  var ConstantNode            = load(require('./node/ConstantNode'));\n  var FunctionAssignmentNode  = load(require('./node/FunctionAssignmentNode'));\n  var IndexNode               = load(require('./node/IndexNode'));\n  var ObjectNode              = load(require('./node/ObjectNode'));\n  var OperatorNode            = load(require('./node/OperatorNode'));\n  var ParenthesisNode         = load(require('./node/ParenthesisNode'));\n  var FunctionNode            = load(require('./node/FunctionNode'));\n  var RangeNode               = load(require('./node/RangeNode'));\n  var SymbolNode              = load(require('./node/SymbolNode'));\n\n\n  /**\n   * Parse an expression. Returns a node tree, which can be evaluated by\n   * invoking node.eval();\n   *\n   * Syntax:\n   *\n   *     parse(expr)\n   *     parse(expr, options)\n   *     parse([expr1, expr2, expr3, ...])\n   *     parse([expr1, expr2, expr3, ...], options)\n   *\n   * Example:\n   *\n   *     var node = parse('sqrt(3^2 + 4^2)');\n   *     node.compile(math).eval(); // 5\n   *\n   *     var scope = {a:3, b:4}\n   *     var node = parse('a * b'); // 12\n   *     var code = node.compile(math);\n   *     code.eval(scope); // 12\n   *     scope.a = 5;\n   *     code.eval(scope); // 20\n   *\n   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);\n   *     nodes[2].compile(math).eval(); // 12\n   *\n   * @param {string | string[] | Matrix} expr\n   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n   *                                                   - `nodes` a set of custom nodes\n   * @return {Node | Node[]} node\n   * @throws {Error}\n   */\n  function parse (expr, options) {\n    if (arguments.length != 1 && arguments.length != 2) {\n      throw new ArgumentsError('parse', arguments.length, 1, 2);\n    }\n\n    // pass extra nodes\n    extra_nodes = (options && options.nodes) ? options.nodes : {};\n\n    if (typeof expr === 'string') {\n      // parse a single expression\n      expression = expr;\n      return parseStart();\n    }\n    else if (Array.isArray(expr) || expr instanceof type.Matrix) {\n      // parse an array or matrix with expressions\n      return deepMap(expr, function (elem) {\n        if (typeof elem !== 'string') throw new TypeError('String expected');\n\n        expression = elem;\n        return parseStart();\n      });\n    }\n    else {\n      // oops\n      throw new TypeError('String or matrix expected');\n    }\n  }\n\n  // token types enumeration\n  var TOKENTYPE = {\n    NULL : 0,\n    DELIMITER : 1,\n    NUMBER : 2,\n    SYMBOL : 3,\n    UNKNOWN : 4\n  };\n\n  // map with all delimiters\n  var DELIMITERS = {\n    ',': true,\n    '(': true,\n    ')': true,\n    '[': true,\n    ']': true,\n    '{': true,\n    '}': true,\n    '\\\"': true,\n    ';': true,\n\n    '+': true,\n    '-': true,\n    '*': true,\n    '.*': true,\n    '/': true,\n    './': true,\n    '%': true,\n    '^': true,\n    '.^': true,\n    '~': true,\n    '!': true,\n    '&': true,\n    '|': true,\n    '^|': true,\n    '\\'': true,\n    '=': true,\n    ':': true,\n    '?': true,\n\n    '==': true,\n    '!=': true,\n    '<': true,\n    '>': true,\n    '<=': true,\n    '>=': true,\n\n    '<<': true,\n    '>>': true,\n    '>>>': true\n  };\n\n  // map with all named delimiters\n  var NAMED_DELIMITERS = {\n    'mod': true,\n    'to': true,\n    'in': true,\n    'and': true,\n    'xor': true,\n    'or': true,\n    'not': true\n  };\n\n  var extra_nodes = {};             // current extra nodes\n  var expression = '';              // current expression\n  var comment = '';                 // last parsed comment\n  var index = 0;                    // current index in expr\n  var c = '';                       // current token character in expr\n  var token = '';                   // current token\n  var token_type = TOKENTYPE.NULL;  // type of the token\n  var nesting_level = 0;            // level of nesting inside parameters, used to ignore newline characters\n  var conditional_level = null;     // when a conditional is being parsed, the level of the conditional is stored here\n\n  /**\n   * Get the first character from the expression.\n   * The character is stored into the char c. If the end of the expression is\n   * reached, the function puts an empty string in c.\n   * @private\n   */\n  function first() {\n    index = 0;\n    c = expression.charAt(0);\n    nesting_level = 0;\n    conditional_level = null;\n  }\n\n  /**\n   * Get the next character from the expression.\n   * The character is stored into the char c. If the end of the expression is\n   * reached, the function puts an empty string in c.\n   * @private\n   */\n  function next() {\n    index++;\n    c = expression.charAt(index);\n  }\n\n  /**\n   * Preview the previous character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n  function prevPreview() {\n    return expression.charAt(index - 1);\n  }\n\n  /**\n   * Preview the next character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n  function nextPreview() {\n    return expression.charAt(index + 1);\n  }\n\n  /**\n   * Preview the second next character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n  function nextNextPreview() {\n    return expression.charAt(index + 2);\n  }\n\n  /**\n   * Get next token in the current string expr.\n   * The token and token type are available as token and token_type\n   * @private\n   */\n  function getToken() {\n    token_type = TOKENTYPE.NULL;\n    token = '';\n    comment = '';\n\n    // skip over whitespaces\n    // space, tab, and newline when inside parameters\n    while (parse.isWhitespace(c, nesting_level)) {\n      next();\n    }\n\n    // skip comment\n    if (c == '#') {\n      while (c != '\\n' && c != '') {\n        comment += c;\n        next();\n      }\n    }\n\n    // check for end of expression\n    if (c == '') {\n      // token is still empty\n      token_type = TOKENTYPE.DELIMITER;\n      return;\n    }\n\n    // check for new line character\n    if (c == '\\n' && !nesting_level) {\n      token_type = TOKENTYPE.DELIMITER;\n      token = c;\n      next();\n      return;\n    }\n\n    // check for delimiters consisting of 3 characters\n    var c2 = c + nextPreview();\n    var c3 = c2 + nextNextPreview();\n    if (c3.length == 3 && DELIMITERS[c3]) {\n      token_type = TOKENTYPE.DELIMITER;\n      token = c3;\n      next();\n      next();\n      next();\n      return;\n    }\n\n    // check for delimiters consisting of 2 characters\n    if (c2.length == 2 && DELIMITERS[c2]) {\n      token_type = TOKENTYPE.DELIMITER;\n      token = c2;\n      next();\n      next();\n      return;\n    }\n\n    // check for delimiters consisting of 1 character\n    if (DELIMITERS[c]) {\n      token_type = TOKENTYPE.DELIMITER;\n      token = c;\n      next();\n      return;\n    }\n\n    // check for a number\n    if (parse.isDigitDot(c)) {\n      token_type = TOKENTYPE.NUMBER;\n\n      // get number, can have a single dot\n      if (c == '.') {\n        token += c;\n        next();\n\n        if (!parse.isDigit(c)) {\n          // this is no number, it is just a dot (can be dot notation)\n          token_type = TOKENTYPE.DELIMITER;\n        }\n      }\n      else {\n        while (parse.isDigit(c)) {\n          token += c;\n          next();\n        }\n        if (parse.isDecimalMark(c, nextPreview())) {\n          token += c;\n          next();\n        }\n      }\n      while (parse.isDigit(c)) {\n        token += c;\n        next();\n      }\n\n      // check for exponential notation like \"2.3e-4\", \"1.23e50\" or \"2e+4\"\n      c2 = nextPreview();\n      if (c == 'E' || c == 'e') {\n        if (parse.isDigit(c2) || c2 == '-' || c2 == '+') {\n          token += c;\n          next();\n\n          if (c == '+' || c == '-') {\n            token += c;\n            next();\n          }\n\n          // Scientific notation MUST be followed by an exponent\n          if (!parse.isDigit(c)) {\n            throw createSyntaxError('Digit expected, got \"' + c + '\"');\n          }\n\n          while (parse.isDigit(c)) {\n            token += c;\n            next();\n          }\n\n          if (parse.isDecimalMark(c, nextPreview())) {\n            throw createSyntaxError('Digit expected, got \"' + c + '\"');\n          }\n        }\n        else if (c2 == '.') {\n          next();\n          throw createSyntaxError('Digit expected, got \"' + c + '\"');\n        }\n      }\n\n      return;\n    }\n\n    // check for variables, functions, named operators\n    if (parse.isAlpha(c, prevPreview(), nextPreview())) {\n      while (parse.isAlpha(c, prevPreview(), nextPreview()) || parse.isDigit(c)) {\n        token += c;\n        next();\n      }\n\n      if (NAMED_DELIMITERS.hasOwnProperty(token)) {\n        token_type = TOKENTYPE.DELIMITER;\n      }\n      else {\n        token_type = TOKENTYPE.SYMBOL;\n      }\n\n      return;\n    }\n\n    // something unknown is found, wrong characters -> a syntax error\n    token_type = TOKENTYPE.UNKNOWN;\n    while (c != '') {\n      token += c;\n      next();\n    }\n    throw createSyntaxError('Syntax error in part \"' + token + '\"');\n  }\n\n  /**\n   * Get next token and skip newline tokens\n   */\n  function getTokenSkipNewline () {\n    do {\n      getToken();\n    }\n    while (token == '\\n');\n  }\n\n  /**\n   * Open parameters.\n   * New line characters will be ignored until closeParams() is called\n   */\n  function openParams() {\n    nesting_level++;\n  }\n\n  /**\n   * Close parameters.\n   * New line characters will no longer be ignored\n   */\n  function closeParams() {\n    nesting_level--;\n  }\n\n  /**\n   * Checks whether the current character `c` is a valid alpha character:\n   *\n   * - A latin letter (upper or lower case) Ascii: a-z, A-Z\n   * - An underscore                         Ascii: _\n   * - A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n   * - A greek letter                       Unicode: \\u0370 - \\u03FF\n   * - A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n   *\n   * The previous and next characters are needed to determine whether\n   * this character is part of a unicode surrogate pair.\n   *\n   * @param {string} c      Current character in the expression\n   * @param {string} cPrev  Previous character\n   * @param {string} cNext  Next character\n   * @return {boolean}\n   */\n  parse.isAlpha = function isAlpha (c, cPrev, cNext) {\n    return parse.isValidLatinOrGreek(c)\n        || parse.isValidMathSymbol(c, cNext)\n        || parse.isValidMathSymbol(cPrev, c);\n  };\n\n  /**\n   * Test whether a character is a valid latin, greek, or letter-like character\n   * @param {string} c\n   * @return {boolean}\n   */\n  parse.isValidLatinOrGreek = function isValidLatinOrGreek (c) {\n    return /^[a-zA-Z_\\u00C0-\\u02AF\\u0370-\\u03FF\\u2100-\\u214F]$/.test(c);\n  };\n\n  /**\n   * Test whether two given 16 bit characters form a surrogate pair of a\n   * unicode math symbol.\n   *\n   * http://unicode-table.com/en/\n   * http://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n   *\n   * Note: In ES6 will be unicode aware:\n   * http://stackoverflow.com/questions/280712/javascript-unicode-regexes\n   * https://mathiasbynens.be/notes/es6-unicode-regex\n   *\n   * @param {string} high\n   * @param {string} low\n   * @return {boolean}\n   */\n  parse.isValidMathSymbol = function isValidMathSymbol (high, low) {\n    return /^[\\uD835]$/.test(high) &&\n        /^[\\uDC00-\\uDFFF]$/.test(low) &&\n        /^[^\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]$/.test(low);\n  };\n\n  /**\n   * Check whether given character c is a white space character: space, tab, or enter\n   * @param {string} c\n   * @param {number} nestingLevel\n   * @return {boolean}\n   */\n  parse.isWhitespace = function isWhitespace (c, nestingLevel) {\n    // TODO: also take '\\r' carriage return as newline? Or does that give problems on mac?\n    return c == ' ' || c == '\\t' || (c == '\\n' && nestingLevel > 0);\n  };\n\n  /**\n   * Test whether the character c is a decimal mark (dot).\n   * This is the case when it's not the start of a delimiter '.*', './', or '.^'\n   * @param {string} c\n   * @param {string} cNext\n   * @return {boolean}\n   */\n  parse.isDecimalMark = function isDecimalMark (c, cNext) {\n    return c == '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';\n  };\n\n  /**\n   * checks if the given char c is a digit or dot\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n  parse.isDigitDot = function isDigitDot (c) {\n    return ((c >= '0' && c <= '9') || c == '.');\n  };\n\n  /**\n   * checks if the given char c is a digit\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n  parse.isDigit = function isDigit (c) {\n    return (c >= '0' && c <= '9');\n  };\n\n  /**\n   * Start of the parse levels below, in order of precedence\n   * @return {Node} node\n   * @private\n   */\n  function parseStart () {\n    // get the first character in expression\n    first();\n\n    getToken();\n\n    var node = parseBlock();\n\n    // check for garbage at the end of the expression\n    // an expression ends with a empty character '' and token_type DELIMITER\n    if (token != '') {\n      if (token_type == TOKENTYPE.DELIMITER) {\n        // user entered a not existing operator like \"//\"\n\n        // TODO: give hints for aliases, for example with \"<>\" give as hint \" did you mean != ?\"\n        throw createError('Unexpected operator ' + token);\n      }\n      else {\n        throw createSyntaxError('Unexpected part \"' + token + '\"');\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * Parse a block with expressions. Expressions can be separated by a newline\n   * character '\\n', or by a semicolon ';'. In case of a semicolon, no output\n   * of the preceding line is returned.\n   * @return {Node} node\n   * @private\n   */\n  function parseBlock () {\n    var node;\n    var blocks = [];\n    var visible;\n\n    if (token != '' && token != '\\n' && token != ';') {\n      node = parseAssignment();\n      node.comment = comment;\n    }\n\n    // TODO: simplify this loop\n    while (token == '\\n' || token == ';') {\n      if (blocks.length == 0 && node) {\n        visible = (token != ';');\n        blocks.push({\n          node: node,\n          visible: visible\n        });\n      }\n\n      getToken();\n      if (token != '\\n' && token != ';' && token != '') {\n        node = parseAssignment();\n        node.comment = comment;\n\n        visible = (token != ';');\n        blocks.push({\n          node: node,\n          visible: visible\n        });\n      }\n    }\n\n    if (blocks.length > 0) {\n      return new BlockNode(blocks);\n    }\n    else {\n      if (!node) {\n        node = new ConstantNode('undefined', 'undefined');\n        node.comment = comment;\n      }\n\n      return node\n    }\n  }\n\n  /**\n   * Assignment of a function or variable,\n   * - can be a variable like 'a=2.3'\n   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'\n   * - defining a function like 'f(x) = x^2'\n   * @return {Node} node\n   * @private\n   */\n  function parseAssignment () {\n    var name, args, value, valid;\n\n    var node = parseConditional();\n\n    if (token == '=') {\n      if (node && node.isSymbolNode) {\n        // parse a variable assignment like 'a = 2/3'\n        name = node.name;\n        getTokenSkipNewline();\n        value = parseAssignment();\n        return new AssignmentNode(new SymbolNode(name), value);\n      }\n      else if (node && node.isAccessorNode) {\n        // parse a matrix subset assignment like 'A[1,2] = 4'\n        getTokenSkipNewline();\n        value = parseAssignment();\n        return new AssignmentNode(node.object, node.index, value);\n      }\n      else if (node && node.isFunctionNode) {\n        // parse function assignment like 'f(x) = x^2'\n        valid = true;\n        args = [];\n\n        name = node.name;\n        node.args.forEach(function (arg, index) {\n          if (arg && arg.isSymbolNode) {\n            args[index] = arg.name;\n          }\n          else {\n            valid = false;\n          }\n        });\n\n        if (valid) {\n          getTokenSkipNewline();\n          value = parseAssignment();\n          return new FunctionAssignmentNode(name, args, value);\n        }\n      }\n\n      throw createSyntaxError('Invalid left hand side of assignment operator =');\n    }\n\n    return node;\n  }\n\n  /**\n   * conditional operation\n   *\n   *     condition ? truePart : falsePart\n   *\n   * Note: conditional operator is right-associative\n   *\n   * @return {Node} node\n   * @private\n   */\n  function parseConditional () {\n    var node = parseLogicalOr();\n\n    while (token == '?') {\n      // set a conditional level, the range operator will be ignored as long\n      // as conditional_level == nesting_level.\n      var prev = conditional_level;\n      conditional_level = nesting_level;\n      getTokenSkipNewline();\n\n      var condition = node;\n      var trueExpr = parseAssignment();\n\n      if (token != ':') throw createSyntaxError('False part of conditional expression expected');\n\n      conditional_level = null;\n      getTokenSkipNewline();\n\n      var falseExpr = parseAssignment(); // Note: check for conditional operator again, right associativity\n\n      node = new ConditionalNode(condition, trueExpr, falseExpr);\n\n      // restore the previous conditional level\n      conditional_level = prev;\n    }\n\n    return node;\n  }\n\n  /**\n   * logical or, 'x or y'\n   * @return {Node} node\n   * @private\n   */\n  function parseLogicalOr() {\n    var node = parseLogicalXor();\n\n    while (token == 'or') {\n      getTokenSkipNewline();\n      node = new OperatorNode('or', 'or', [node, parseLogicalXor()]);\n    }\n\n    return node;\n  }\n\n  /**\n   * logical exclusive or, 'x xor y'\n   * @return {Node} node\n   * @private\n   */\n  function parseLogicalXor() {\n    var node = parseLogicalAnd();\n\n    while (token == 'xor') {\n      getTokenSkipNewline();\n      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd()]);\n    }\n\n    return node;\n  }\n\n  /**\n   * logical and, 'x and y'\n   * @return {Node} node\n   * @private\n   */\n  function parseLogicalAnd() {\n    var node = parseBitwiseOr();\n\n    while (token == 'and') {\n      getTokenSkipNewline();\n      node = new OperatorNode('and', 'and', [node, parseBitwiseOr()]);\n    }\n\n    return node;\n  }\n\n  /**\n   * bitwise or, 'x | y'\n   * @return {Node} node\n   * @private\n   */\n  function parseBitwiseOr() {\n    var node = parseBitwiseXor();\n\n    while (token == '|') {\n      getTokenSkipNewline();\n      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor()]);\n    }\n\n    return node;\n  }\n\n  /**\n   * bitwise exclusive or (xor), 'x ^| y'\n   * @return {Node} node\n   * @private\n   */\n  function parseBitwiseXor() {\n    var node = parseBitwiseAnd();\n\n    while (token == '^|') {\n      getTokenSkipNewline();\n      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd()]);\n    }\n\n    return node;\n  }\n\n  /**\n   * bitwise and, 'x & y'\n   * @return {Node} node\n   * @private\n   */\n  function parseBitwiseAnd () {\n    var node = parseRelational();\n\n    while (token == '&') {\n      getTokenSkipNewline();\n      node = new OperatorNode('&', 'bitAnd', [node, parseRelational()]);\n    }\n\n    return node;\n  }\n\n  /**\n   * relational operators\n   * @return {Node} node\n   * @private\n   */\n  function parseRelational () {\n    var node, operators, name, fn, params;\n\n    node = parseShift();\n\n    operators = {\n      '==': 'equal',\n      '!=': 'unequal',\n      '<': 'smaller',\n      '>': 'larger',\n      '<=': 'smallerEq',\n      '>=': 'largerEq'\n    };\n    while (operators.hasOwnProperty(token)) {\n      name = token;\n      fn = operators[name];\n\n      getTokenSkipNewline();\n      params = [node, parseShift()];\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n\n  /**\n   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift\n   * @return {Node} node\n   * @private\n   */\n  function parseShift () {\n    var node, operators, name, fn, params;\n\n    node = parseConversion();\n\n    operators = {\n      '<<' : 'leftShift',\n      '>>' : 'rightArithShift',\n      '>>>' : 'rightLogShift'\n    };\n\n    while (operators.hasOwnProperty(token)) {\n      name = token;\n      fn = operators[name];\n\n      getTokenSkipNewline();\n      params = [node, parseConversion()];\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n\n  /**\n   * conversion operators 'to' and 'in'\n   * @return {Node} node\n   * @private\n   */\n  function parseConversion () {\n    var node, operators, name, fn, params;\n\n    node = parseRange();\n\n    operators = {\n      'to' : 'to',\n      'in' : 'to'   // alias of 'to'\n    };\n\n    while (operators.hasOwnProperty(token)) {\n      name = token;\n      fn = operators[name];\n\n      getTokenSkipNewline();\n      \n      if (name === 'in' && token === '') {\n        // end of expression -> this is the unit 'in' ('inch')\n        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);\n      }\n      else {\n        // operator 'a to b' or 'a in b'\n        params = [node, parseRange()];\n        node = new OperatorNode(name, fn, params);\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * parse range, \"start:end\", \"start:step:end\", \":\", \"start:\", \":end\", etc\n   * @return {Node} node\n   * @private\n   */\n  function parseRange () {\n    var node, params = [];\n\n    if (token == ':') {\n      // implicit start=1 (one-based)\n      node = new ConstantNode('1', 'number');\n    }\n    else {\n      // explicit start\n      node = parseAddSubtract();\n    }\n\n    if (token == ':' && (conditional_level !== nesting_level)) {\n      // we ignore the range operator when a conditional operator is being processed on the same level\n      params.push(node);\n\n      // parse step and end\n      while (token == ':' && params.length < 3) {\n        getTokenSkipNewline();\n\n        if (token == ')' || token == ']' || token == ',' || token == '') {\n          // implicit end\n          params.push(new SymbolNode('end'));\n        }\n        else {\n          // explicit end\n          params.push(parseAddSubtract());\n        }\n      }\n\n      if (params.length == 3) {\n        // params = [start, step, end]\n        node = new RangeNode(params[0], params[2], params[1]); // start, end, step\n      }\n      else { // length == 2\n        // params = [start, end]\n        node = new RangeNode(params[0], params[1]); // start, end\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * add or subtract\n   * @return {Node} node\n   * @private\n   */\n  function parseAddSubtract ()  {\n    var node, operators, name, fn, params;\n\n    node = parseMultiplyDivide();\n\n    operators = {\n      '+': 'add',\n      '-': 'subtract'\n    };\n    while (operators.hasOwnProperty(token)) {\n      name = token;\n      fn = operators[name];\n\n      getTokenSkipNewline();\n      params = [node, parseMultiplyDivide()];\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n\n  /**\n   * multiply, divide, modulus\n   * @return {Node} node\n   * @private\n   */\n  function parseMultiplyDivide () {\n    var node, last, operators, name, fn;\n\n    node = parseUnary();\n    last = node;\n\n    operators = {\n      '*': 'multiply',\n      '.*': 'dotMultiply',\n      '/': 'divide',\n      './': 'dotDivide',\n      '%': 'mod',\n      'mod': 'mod'\n    };\n\n    while (true) {\n      if (operators.hasOwnProperty(token)) {\n        // explicit operators\n        name = token;\n        fn = operators[name];\n\n        getTokenSkipNewline();\n\n        last = parseUnary();\n        node = new OperatorNode(name, fn, [node, last]);\n      }\n      else if ((token_type == TOKENTYPE.SYMBOL) ||\n          (token == 'in' && (node && node.isConstantNode)) ||\n          (token_type == TOKENTYPE.NUMBER &&\n              !last.isConstantNode &&\n              (!last.isOperatorNode || last.op === '!')) ||\n          (token == '(')) {\n        // parse implicit multiplication\n        //\n        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'\n        // number:      implicit multiplication like '(2+3)2'\n        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'\n        last = parseUnary();\n        node = new OperatorNode('*', 'multiply', [node, last], true /*implicit*/);\n      }\n      else {\n        break;\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * Unary plus and minus, and logical and bitwise not\n   * @return {Node} node\n   * @private\n   */\n  function parseUnary () {\n    var name, params, fn;\n    var operators = {\n      '-': 'unaryMinus',\n      '+': 'unaryPlus',\n      '~': 'bitNot',\n      'not': 'not'\n    };\n\n    if (operators.hasOwnProperty(token)) {\n      fn = operators[token];\n      name = token;\n\n      getTokenSkipNewline();\n      params = [parseUnary()];\n\n      return new OperatorNode(name, fn, params);\n    }\n\n    return parsePow();\n  }\n\n  /**\n   * power\n   * Note: power operator is right associative\n   * @return {Node} node\n   * @private\n   */\n  function parsePow () {\n    var node, name, fn, params;\n\n    node = parseLeftHandOperators();\n\n    if (token == '^' || token == '.^') {\n      name = token;\n      fn = (name == '^') ? 'pow' : 'dotPow';\n\n      getTokenSkipNewline();\n      params = [node, parseUnary()]; // Go back to unary, we can have '2^-3'\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n\n  /**\n   * Left hand operators: factorial x!, transpose x'\n   * @return {Node} node\n   * @private\n   */\n  function parseLeftHandOperators ()  {\n    var node, operators, name, fn, params;\n\n    node = parseCustomNodes();\n\n    operators = {\n      '!': 'factorial',\n      '\\'': 'transpose'\n    };\n\n    while (operators.hasOwnProperty(token)) {\n      name = token;\n      fn = operators[name];\n\n      getToken();\n      params = [node];\n\n      node = new OperatorNode(name, fn, params);\n      node = parseAccessors(node);\n    }\n\n    return node;\n  }\n\n  /**\n   * Parse a custom node handler. A node handler can be used to process\n   * nodes in a custom way, for example for handling a plot.\n   *\n   * A handler must be passed as second argument of the parse function.\n   * - must extend math.expression.node.Node\n   * - must contain a function _compile(defs: Object) : string\n   * - must contain a function find(filter: Object) : Node[]\n   * - must contain a function toString() : string\n   * - the constructor is called with a single argument containing all parameters\n   *\n   * For example:\n   *\n   *     nodes = {\n   *       'plot': PlotHandler\n   *     };\n   *\n   * The constructor of the handler is called as:\n   *\n   *     node = new PlotHandler(params);\n   *\n   * The handler will be invoked when evaluating an expression like:\n   *\n   *     node = math.parse('plot(sin(x), x)', nodes);\n   *\n   * @return {Node} node\n   * @private\n   */\n  function parseCustomNodes () {\n    var params = [];\n\n    if (token_type == TOKENTYPE.SYMBOL && extra_nodes.hasOwnProperty(token)) {\n      var CustomNode = extra_nodes[token];\n\n      getToken();\n\n      // parse parameters\n      if (token == '(') {\n        params = [];\n\n        openParams();\n        getToken();\n\n        if (token != ')') {\n          params.push(parseAssignment());\n\n          // parse a list with parameters\n          while (token == ',') {\n            getToken();\n            params.push(parseAssignment());\n          }\n        }\n\n        if (token != ')') {\n          throw createSyntaxError('Parenthesis ) expected');\n        }\n        closeParams();\n        getToken();\n      }\n\n      // create a new custom node\n      //noinspection JSValidateTypes\n      return new CustomNode(params);\n    }\n\n    return parseSymbol();\n  }\n\n  /**\n   * parse symbols: functions, variables, constants, units\n   * @return {Node} node\n   * @private\n   */\n  function parseSymbol () {\n    var node, name;\n\n    if (token_type == TOKENTYPE.SYMBOL ||\n        (token_type == TOKENTYPE.DELIMITER && token in NAMED_DELIMITERS)) {\n      name = token;\n\n      getToken();\n\n      // parse function parameters and matrix index\n      node = new SymbolNode(name);\n      node = parseAccessors(node);\n      return node;\n    }\n\n    return parseString();\n  }\n\n  /**\n   * parse accessors:\n   * - function invocation in round brackets (...), for example sqrt(2)\n   * - index enclosed in square brackets [...], for example A[2,3]\n   * - dot notation for properties, like foo.bar\n   * @param {Node} node    Node on which to apply the parameters. If there\n   *                       are no parameters in the expression, the node\n   *                       itself is returned\n   * @param {string[]} [types]  Filter the types of notations\n   *                            can be ['(', '[', '.']\n   * @return {Node} node\n   * @private\n   */\n  function parseAccessors (node, types) {\n    var params;\n\n    while ((token == '(' || token == '[' || token == '.') &&\n        (!types || types.indexOf(token) !== -1)) {\n      params = [];\n\n      if (token == '(') {\n        if (node.isSymbolNode || node.isAccessorNode || node.isFunctionNode) {\n          // function invocation like fn(2, 3)\n          openParams();\n          getToken();\n\n          if (token != ')') {\n            params.push(parseAssignment());\n\n            // parse a list with parameters\n            while (token == ',') {\n              getToken();\n              params.push(parseAssignment());\n            }\n          }\n\n          if (token != ')') {\n            throw createSyntaxError('Parenthesis ) expected');\n          }\n          closeParams();\n          getToken();\n\n          node = new FunctionNode(node, params);\n        }\n        else {\n          // implicit multiplication like (2+3)(4+5)\n          // don't parse it here but let it be handled by parseMultiplyDivide\n          // with correct precedence\n          return node;\n        }\n      }\n      else if (token == '[') {\n        // index notation like variable[2, 3]\n        openParams();\n        getToken();\n\n        if (token != ']') {\n          params.push(parseAssignment());\n\n          // parse a list with parameters\n          while (token == ',') {\n            getToken();\n            params.push(parseAssignment());\n          }\n        }\n\n        if (token != ']') {\n          throw createSyntaxError('Parenthesis ] expected');\n        }\n        closeParams();\n        getToken();\n\n        node = new AccessorNode(node, new IndexNode(params));\n      }\n      else {\n        // dot notation like variable.prop\n        getToken();\n\n        if (token_type != TOKENTYPE.SYMBOL) {\n          throw createSyntaxError('Property name expected after dot');\n        }\n        params.push(new ConstantNode(token));\n        getToken();\n\n        var dotNotation = true;\n        node = new AccessorNode(node, new IndexNode(params, dotNotation));\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * parse a string.\n   * A string is enclosed by double quotes\n   * @return {Node} node\n   * @private\n   */\n  function parseString () {\n    var node, str;\n\n    if (token == '\"') {\n      str = parseStringToken();\n\n      // create constant\n      node = new ConstantNode(str, 'string');\n\n      // parse index parameters\n      node = parseAccessors(node);\n\n      return node;\n    }\n\n    return parseMatrix();\n  }\n\n  /**\n   * Parse a string surrounded by double quotes \"...\"\n   * @return {string}\n   */\n  function parseStringToken () {\n    var str = '';\n\n    while (c != '' && c != '\\\"') {\n      if (c == '\\\\') {\n        // escape character\n        str += c;\n        next();\n      }\n\n      str += c;\n      next();\n    }\n\n    getToken();\n    if (token != '\"') {\n      throw createSyntaxError('End of string \" expected');\n    }\n    getToken();\n\n    return str;\n  }\n\n  /**\n   * parse the matrix\n   * @return {Node} node\n   * @private\n   */\n  function parseMatrix () {\n    var array, params, rows, cols;\n\n    if (token == '[') {\n      // matrix [...]\n      openParams();\n      getToken();\n\n      if (token != ']') {\n        // this is a non-empty matrix\n        var row = parseRow();\n\n        if (token == ';') {\n          // 2 dimensional array\n          rows = 1;\n          params = [row];\n\n          // the rows of the matrix are separated by dot-comma's\n          while (token == ';') {\n            getToken();\n\n            params[rows] = parseRow();\n            rows++;\n          }\n\n          if (token != ']') {\n            throw createSyntaxError('End of matrix ] expected');\n          }\n          closeParams();\n          getToken();\n\n          // check if the number of columns matches in all rows\n          cols = params[0].items.length;\n          for (var r = 1; r < rows; r++) {\n            if (params[r].items.length != cols) {\n              throw createError('Column dimensions mismatch ' +\n                  '(' + params[r].items.length + ' != ' + cols + ')');\n            }\n          }\n\n          array = new ArrayNode(params);\n        }\n        else {\n          // 1 dimensional vector\n          if (token != ']') {\n            throw createSyntaxError('End of matrix ] expected');\n          }\n          closeParams();\n          getToken();\n\n          array = row;\n        }\n      }\n      else {\n        // this is an empty matrix \"[ ]\"\n        closeParams();\n        getToken();\n        array = new ArrayNode([]);\n      }\n\n      return parseAccessors(array);\n    }\n\n    return parseObject();\n  }\n\n  /**\n   * Parse a single comma-separated row from a matrix, like 'a, b, c'\n   * @return {ArrayNode} node\n   */\n  function parseRow () {\n    var params = [parseAssignment()];\n    var len = 1;\n\n    while (token == ',') {\n      getToken();\n\n      // parse expression\n      params[len] = parseAssignment();\n      len++;\n    }\n\n    return new ArrayNode(params);\n  }\n\n  /**\n   * parse an object, enclosed in angle brackets{...}, for example {value: 2}\n   * @return {Node} node\n   * @private\n   */\n  function parseObject () {\n    if (token == '{') {\n      var key;\n\n      var properties = {};\n      do {\n        getToken();\n\n        if (token != '}') {\n          // parse key\n          if (token == '\"') {\n            key = parseStringToken();\n          }\n          else if (token_type == TOKENTYPE.SYMBOL) {\n            key = token;\n            getToken();\n          }\n          else {\n            throw createSyntaxError('Symbol or string expected as object key');\n          }\n\n          // parse key/value separator\n          if (token != ':') {\n            throw createSyntaxError('Colon : expected after object key');\n          }\n          getToken();\n\n          // parse key\n          properties[key] = parseAssignment();\n        }\n      }\n      while (token == ',');\n\n      if (token != '}') {\n        throw createSyntaxError('Comma , or bracket } expected after object value');\n      }\n      getToken();\n\n      var node = new ObjectNode(properties);\n\n      // parse index parameters\n      node = parseAccessors(node);\n\n      return node;\n    }\n\n    return parseNumber();\n  }\n\n  /**\n   * parse a number\n   * @return {Node} node\n   * @private\n   */\n  function parseNumber () {\n    var number;\n\n    if (token_type == TOKENTYPE.NUMBER) {\n      // this is a number\n      number = token;\n      getToken();\n\n      return new ConstantNode(number, 'number');\n    }\n\n    return parseParentheses();\n  }\n\n  /**\n   * parentheses\n   * @return {Node} node\n   * @private\n   */\n  function parseParentheses () {\n    var node;\n\n    // check if it is a parenthesized expression\n    if (token == '(') {\n      // parentheses (...)\n      openParams();\n      getToken();\n\n      node = parseAssignment(); // start again\n\n      if (token != ')') {\n        throw createSyntaxError('Parenthesis ) expected');\n      }\n      closeParams();\n      getToken();\n\n      node = new ParenthesisNode(node);\n      node = parseAccessors(node);\n      return node;\n    }\n\n    return parseEnd();\n  }\n\n  /**\n   * Evaluated when the expression is not yet ended but expected to end\n   * @return {Node} res\n   * @private\n   */\n  function parseEnd () {\n    if (token == '') {\n      // syntax error or unexpected end of expression\n      throw createSyntaxError('Unexpected end of expression');\n    } else if (token === \"'\") {\n      throw createSyntaxError('Value expected. Note: strings must be enclosed by double quotes');\n    } else {\n      throw createSyntaxError('Value expected');\n    }\n  }\n\n  /**\n   * Shortcut for getting the current row value (one based)\n   * Returns the line of the currently handled expression\n   * @private\n   */\n  /* TODO: implement keeping track on the row number\n  function row () {\n    return null;\n  }\n  */\n\n  /**\n   * Shortcut for getting the current col value (one based)\n   * Returns the column (position) where the last token starts\n   * @private\n   */\n  function col () {\n    return index - token.length + 1;\n  }\n\n  /**\n   * Create an error\n   * @param {string} message\n   * @return {SyntaxError} instantiated error\n   * @private\n   */\n  function createSyntaxError (message) {\n    var c = col();\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error['char'] = c;\n\n    return error;\n  }\n\n  /**\n   * Create an error\n   * @param {string} message\n   * @return {Error} instantiated error\n   * @private\n   */\n  function createError (message) {\n    var c = col();\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error['char'] = c;\n\n    return error;\n  }\n\n  return parse;\n}\n\nexports.name = 'parse';\nexports.path = 'expression';\nexports.factory = factory;\n","'use strict';\n\nvar errorTransform = require('./error.transform').transform;\n\n/**\n * Attach a transform function to math.range\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function concat\n * from one-based to zero based\n */\nfunction factory (type, config, load, typed) {\n  var concat = load(require('../../function/matrix/concat'));\n\n  // @see: comment of concat itself\n return typed('concat', {\n    '...any': function (args) {\n      // change last argument from one-based to zero-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n      if (typeof last === 'number') {\n        args[lastIndex] = last - 1;\n      }\n      else if (last && last.isBigNumber === true) {\n        args[lastIndex] = last.minus(1);\n      }\n\n      try {\n        return concat.apply(null, args);\n      }\n      catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}\n\nexports.name = 'concat';\nexports.path = 'expression.transform';\nexports.factory = factory;\n","var IndexError = require('../../error/IndexError');\n\n/**\n * Transform zero-based indices to one-based indices in errors\n * @param {Error} err\n * @returns {Error} Returns the transformed error\n */\nexports.transform = function (err) {\n  if (err && err.isIndexError) {\n    return new IndexError(\n        err.index + 1,\n        err.min + 1,\n        err.max !== undefined ? err.max + 1 : undefined);\n  }\n\n  return err;\n};\n","'use strict';\n\n/**\n * Attach a transform function to math.filter\n * Adds a property transform containing the transform function.\n *\n * This transform adds support for equations as test function for math.filter,\n * so you can do something like 'filter([3, -2, 5], x > 0)'.\n */\nfunction factory (type, config, load, typed) {\n  var filter = load(require('../../function/matrix/filter'));\n  var SymbolNode = load(require('../node/SymbolNode'));\n\n  function filterTransform(args, math, scope) {\n    var x, test;\n\n    if (args[0]) {\n      x = args[0].compile().eval(scope);\n    }\n\n    if (args[1]) {\n      if (args[1] && args[1].isSymbolNode) {\n        // a function pointer, like filter([3, -2, 5], myTestFunction);\n        test = args[1].compile().eval(scope);\n      }\n      else {\n        // an equation like filter([3, -2, 5], x > 0)\n\n        // find an undefined symbol\n        var _scope = scope || {};\n        var symbol = args[1]\n            .filter(function (node) {\n              return (node && node.isSymbolNode) &&\n                  !(node.name in math) &&\n                  !(node.name in _scope);\n            })[0];\n\n        // create a test function for this equation\n        var sub = Object.create(_scope);\n        var eq = args[1].compile();\n        if (symbol) {\n          var name = symbol.name;\n          test = function (x) {\n            sub[name] = x;\n            return eq.eval(sub);\n          }\n        }\n        else {\n          throw new Error('No undefined variable found in filter equation');\n        }\n      }\n    }\n\n    return filter(x, test);\n  }\n\n  filterTransform.rawArgs = true;\n\n  return filterTransform;\n}\n\nexports.name = 'filter';\nexports.path = 'expression.transform';\nexports.factory = factory;\n","'use strict';\n\nvar maxArgumentCount = require('../../utils/function').maxArgumentCount;\n\n/**\n * Attach a transform function to math.forEach\n * Adds a property transform containing the transform function.\n *\n * This transform creates a one-based index instead of a zero-based index\n */\nfunction factory (type, config, load, typed) {\n  var forEach = load(require('../../function/matrix/forEach'));\n\n  return typed('forEach', {\n    'Array | Matrix, function': function (array, callback) {\n      // figure out what number of arguments the callback function expects\n      var args = maxArgumentCount(callback);\n\n      var recurse = function (value, index) {\n        if (Array.isArray(value)) {\n          value.forEach(function (child, i) {\n            // we create a copy of the index array and append the new index value\n            recurse(child, index.concat(i + 1)); // one based index, hence i+1\n          });\n        }\n        else {\n          // invoke the callback function with the right number of arguments\n          if (args === 1) {\n            callback(value);\n          }\n          else if (args === 2) {\n            callback(value, index);\n          }\n          else { // 3 or -1\n            callback(value, index, array);\n          }\n        }\n      };\n      recurse(array.valueOf(), []); // pass Array\n    }\n  });\n}\n\nexports.name = 'forEach';\nexports.path = 'expression.transform';\nexports.factory = factory;\n","module.exports = [\n  require('./concat.transform'),\n  require('./filter.transform'),\n  require('./forEach.transform'),\n  require('./index.transform'),\n  require('./map.transform'),\n  require('./max.transform'),\n  require('./mean.transform'),\n  require('./min.transform'),\n  require('./range.transform'),\n  require('./subset.transform')\n];\n","'use strict';\n\n/**\n * Attach a transform function to math.index\n * Adds a property transform containing the transform function.\n *\n * This transform creates a one-based index instead of a zero-based index\n */\nfunction factory (type, config, load) {\n\n  return function indexTransform() {\n    var args = [];\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n\n      // change from one-based to zero based, and convert BigNumber to number\n      if (arg && arg.isRange === true) {\n        arg.start--;\n        arg.end -= (arg.step > 0 ? 0 : 2);\n      }\n      else if (arg && arg.isSet === true) {\n        arg = arg.map(function (v) { return v - 1; });\n      }\n      else if (arg && (arg.isArray === true || arg.isMatrix)) {\n        arg = arg.map(function (v) { return v - 1; });\n      }\n      else if (typeof arg === 'number') {\n        arg--;\n      }\n      else if (arg && arg.isBigNumber === true) {\n        arg = arg.toNumber() - 1;\n      }\n      else if (typeof arg === 'string') {\n        // leave as is\n      }\n      else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n\n      args[i] = arg;\n    }\n\n    var res = new type.Index();\n    type.Index.apply(res, args);\n    return res;\n  };\n}\n\nexports.name = 'index';\nexports.path = 'expression.transform';\nexports.factory = factory;\n","'use strict';\n\nvar maxArgumentCount = require('../../utils/function').maxArgumentCount;\n\n/**\n * Attach a transform function to math.map\n * Adds a property transform containing the transform function.\n *\n * This transform creates a one-based index instead of a zero-based index\n */\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  return typed('map', {\n    'Array, function': function (x, callback) {\n      return _map(x, callback, x);\n    },\n\n    'Matrix, function': function (x, callback) {\n      return matrix(_map(x.valueOf(), callback, x));\n    }\n  });\n}\n\n/**\n * Map for a multi dimensional array. One-based indexes\n * @param {Array} array\n * @param {function} callback\n * @param {Array} orig\n * @return {Array}\n * @private\n */\nfunction _map (array, callback, orig) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1\n      });\n    }\n    else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        return callback(value);\n      }\n      else if (args === 2) {\n        return callback(value, index);\n      }\n      else { // 3 or -1\n        return callback(value, index, orig);\n      }\n    }\n  }\n\n  return recurse(array, []);\n}\n\nexports.name = 'map';\nexports.path = 'expression.transform';\nexports.factory = factory;\n","'use strict';\n\nvar errorTransform = require('./error.transform').transform;\nvar isCollection = require('../../utils/collection/isCollection');\n\n/**\n * Attach a transform function to math.max\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function max\n * from one-based to zero based\n */\nfunction factory (type, config, load, typed) {\n  var max = load(require('../../function/statistics/max'));\n\n  return typed('max', {\n    '...any': function (args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length == 2 && isCollection(args[0])) {\n        var dim = args[1];\n        if (typeof dim === 'number') {\n          args[1] = dim - 1;\n        }\n        else if (dim && dim.isBigNumber === true) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return max.apply(null, args);\n      }\n      catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}\n\nexports.name = 'max';\nexports.path = 'expression.transform';\nexports.factory = factory;\n","'use strict';\n\nvar errorTransform = require('./error.transform').transform;\nvar isCollection = require('../../utils/collection/isCollection');\n\n/**\n * Attach a transform function to math.mean\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function mean\n * from one-based to zero based\n */\nfunction factory (type, config, load, typed) {\n  var mean = load(require('../../function/statistics/mean'));\n\n  return typed('mean', {\n    '...any': function (args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length == 2 && isCollection(args[0])) {\n        var dim = args[1];\n        if (typeof dim === 'number') {\n          args[1] = dim - 1;\n        }\n        else if (dim && dim.isBigNumber === true) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return mean.apply(null, args);\n      }\n      catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}\n\nexports.name = 'mean';\nexports.path = 'expression.transform';\nexports.factory = factory;\n","'use strict';\n\nvar errorTransform = require('./error.transform').transform;\nvar isCollection = require('../../utils/collection/isCollection');\n\n/**\n * Attach a transform function to math.min\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function min\n * from one-based to zero based\n */\nfunction factory (type, config, load, typed) {\n  var min = load(require('../../function/statistics/min'));\n\n  return typed('min', {\n    '...any': function (args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length == 2 && isCollection(args[0])) {\n        var dim = args[1];\n        if (typeof dim === 'number') {\n          args[1] = dim - 1;\n        }\n        else if (dim && dim.isBigNumber === true) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return min.apply(null, args);\n      }\n      catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}\n\nexports.name = 'min';\nexports.path = 'expression.transform';\nexports.factory = factory;\n","'use strict';\n\n/**\n * Attach a transform function to math.range\n * Adds a property transform containing the transform function.\n *\n * This transform creates a range which includes the end value\n */\nfunction factory (type, config, load, typed) {\n  var range = load(require('../../function/matrix/range'));\n\n  return typed('range', {\n    '...any': function (args) {\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n      if (typeof last !== 'boolean') {\n        // append a parameter includeEnd=true\n        args.push(true);\n      }\n\n      return range.apply(null, args);\n    }\n  });\n}\n\nexports.name = 'range';\nexports.path = 'expression.transform';\nexports.factory = factory;\n","'use strict';\n\nvar errorTransform = require('./error.transform').transform;\n\n/**\n * Attach a transform function to math.subset\n * Adds a property transform containing the transform function.\n *\n * This transform creates a range which includes the end value\n */\nfunction factory (type, config, load, typed) {\n  var subset = load(require('../../function/matrix/subset'));\n\n  return typed('subset', {\n    '...any': function (args) {\n      try {\n        return subset.apply(null, args);\n      }\n      catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}\n\nexports.name = 'subset';\nexports.path = 'expression.transform';\nexports.factory = factory;\n","'use strict';\n\nvar util = require('../../../utils/index');\n\nvar object = util.object;\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  var abs = load(require('../../arithmetic/abs'));\n  var addScalar = load(require('../../arithmetic/addScalar'));\n  var divideScalar = load(require('../../arithmetic/divideScalar'));\n  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));\n  var subtract = load(require('../../arithmetic/subtract'));\n  var larger = load(require('../../relational/larger'));\n  var equalScalar = load(require('../../relational/equalScalar'));\n  var unaryMinus = load(require('../../arithmetic/unaryMinus'));\n  \n  var SparseMatrix = type.SparseMatrix;\n  var DenseMatrix = type.DenseMatrix;\n  var Spa = type.Spa;\n  \n  /**\n   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a\n   * row permutation vector `p` where `A[p,:] = L * U`\n   *\n   * Syntax:\n   *\n   *    math.lup(A);\n   *\n   * Example:\n   *\n   *    var m = [[2, 1], [1, 4]];\n   *    var r = math.lup(m);\n   *    // r = {\n   *    //   L: [[1, 0], [0.5, 1]],\n   *    //   U: [[2, 1], [0, 3.5]],\n   *    //   P: [0, 1]\n   *    // }\n   *\n   * See also:\n   *\n   *    slu, lsolve, lusolve, usolve\n   *\n   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.\n   *\n   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.\n   */\n  var lup = typed('lup', {\n\n    'DenseMatrix': function (m) {\n      return _denseLUP(m);\n    },\n    \n    'SparseMatrix': function (m) {\n      return _sparseLUP(m);\n    },\n\n    'Array': function (a) {\n      // create dense matrix from array\n      var m = matrix(a);\n      // lup, use matrix implementation\n      var r = _denseLUP(m);\n      // result\n      return {\n        L: r.L.valueOf(),\n        U: r.U.valueOf(),\n        p: r.p\n      };\n    }\n  });\n\n  var _denseLUP = function (m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // minimum rows and columns\n    var n = Math.min(rows, columns);\n    // matrix array, clone original data\n    var data = object.clone(m._data);\n    // l matrix arrays\n    var ldata = [];\n    var lsize = [rows, n];\n    // u matrix arrays\n    var udata = [];\n    var usize = [n, columns];\n    // vars\n    var i, j, k;\n    // permutation vector    \n    var p = [];\n    for (i = 0; i < rows; i++)\n      p[i] = i;    \n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // skip first column in upper triangular matrix\n      if (j > 0) {\n        // loop rows\n        for (i = 0; i < rows; i++) {\n          // min i,j\n          var min = Math.min(i, j);\n          // v[i, j]\n          var s = 0;\n          // loop up to min\n          for (k = 0; k < min; k++) {\n            // s = l[i, k] - data[k, j]\n            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));\n          }\n          data[i][j] = subtract(data[i][j], s);\n        }\n      }      \n      // row with larger value in cvector, row >= j\n      var pi = j;\n      var pabsv = 0;\n      var vjj = 0;\n      // loop rows\n      for (i = j; i < rows; i++) {\n        // data @ i, j\n        var v = data[i][j];\n        // absolute value\n        var absv = abs(v);\n        // value is greater than pivote value\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = i;\n          // update max value\n          pabsv = absv;\n          // value @ [j, j]\n          vjj = v;\n        }\n      }\n      // swap rows (j <-> pi)\n      if (j !== pi) {\n        // swap values j <-> pi in p\n        p[j] = [p[pi], p[pi] = p[j]][0];\n        // swap j <-> pi in data\n        DenseMatrix._swapRows(j, pi, data);\n      }\n      // check column is in lower triangular matrix\n      if (j < rows) {\n        // loop rows (lower triangular matrix)\n        for (i = j + 1; i < rows; i++) {\n          // value @ i, j\n          var vij = data[i][j];\n          if (!equalScalar(vij, 0)) {\n            // update data\n            data[i][j] = divideScalar(data[i][j], vjj);\n          }\n        }\n      }\n    }\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // initialize row in arrays\n        if (j === 0) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i] = [];\n          }\n          // L\n          ldata[i] = [];\n        }\n        // check we are in the upper triangular matrix\n        if (i < j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          }\n          // check column exists in lower triangular matrix\n          if (j < rows) {\n            // L\n            ldata[i][j] = 0;\n          }\n          continue;\n        }\n        // diagonal value\n        if (i === j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          }\n          // check column exists in lower triangular matrix\n          if (j < rows) {\n            // L\n            ldata[i][j] = 1;\n          }\n          continue;\n        }\n        // check row exists in upper triangular matrix\n        if (i < columns) {\n          // U\n          udata[i][j] = 0;\n        }\n        // check column exists in lower triangular matrix\n        if (j < rows) {\n          // L\n          ldata[i][j] = data[i][j];\n        }\n      }\n    }\n    // l matrix\n    var l =  new DenseMatrix({\n      data: ldata,\n      size: lsize\n    });\n    // u matrix\n    var u =  new DenseMatrix({\n      data: udata,\n      size: usize\n    });\n    // p vector\n    var pv = [];\n    for (i = 0, n = p.length; i < n; i++)\n      pv[p[i]] = i;\n    // return matrices\n    return { \n      L: l, \n      U: u, \n      p: pv, \n      toString: function () {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  };\n  \n  var _sparseLUP = function (m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // minimum rows and columns\n    var n = Math.min(rows, columns);\n    // matrix arrays (will not be modified, thanks to permutation vector)\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // l matrix arrays\n    var lvalues = [];\n    var lindex = [];\n    var lptr = [];\n    var lsize = [rows, n];\n    // u matrix arrays\n    var uvalues = [];\n    var uindex = [];\n    var uptr = [];\n    var usize = [n, columns];\n    // vars\n    var i, j, k;\n    // permutation vectors, (current index -> original index) and (original index -> current index)\n    var pv_co = [];\n    var pv_oc = [];\n    for (i = 0; i < rows; i++) {\n      pv_co[i] = i;\n      pv_oc[i] = i;\n    }\n    // swap indices in permutation vectors (condition x < y)!\n    var swapIndeces = function (x, y) {      \n      // find pv indeces getting data from x and y\n      var kx = pv_oc[x];\n      var ky = pv_oc[y];\n      // update permutation vector current -> original\n      pv_co[kx] = y;\n      pv_co[ky] = x;\n      // update permutation vector original -> current\n      pv_oc[x] = ky;\n      pv_oc[y] = kx;\n    };\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // sparse accumulator\n      var spa = new Spa();            \n      // check lower triangular matrix has a value @ column j\n      if (j < rows) {\n        // update ptr\n        lptr.push(lvalues.length);\n        // first value in j column for lower triangular matrix\n        lvalues.push(1);\n        lindex.push(j);\n      }\n      // update ptr\n      uptr.push(uvalues.length);\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // copy column j into sparse accumulator\n      for (k = k0; k < k1; k++) {\n        // row\n        i = index[k];\n        // copy column values into sparse accumulator (use permutation vector)\n        spa.set(pv_co[i], values[k]);\n      }\n      // skip first column in upper triangular matrix\n      if (j > 0) {\n        // loop rows in column j (above diagonal)\n        spa.forEach(0, j - 1, function (k, vkj) {\n          // loop rows in column k (L)\n          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {\n            // check row is below k\n            if (i > k) {\n              // update spa value\n              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));\n            }\n          });\n        });        \n      }\n      // row with larger value in spa, row >= j\n      var pi = j;\n      var vjj = spa.get(j);\n      var pabsv = abs(vjj);      \n      // loop values in spa (order by row, below diagonal)\n      spa.forEach(j + 1, rows - 1, function (x, v) {\n        // absolute value\n        var absv = abs(v);\n        // value is greater than pivote value\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = x;\n          // update max value\n          pabsv = absv;\n          // value @ [j, j]\n          vjj = v;\n        }\n      });\n      // swap rows (j <-> pi)\n      if (j !== pi) {\n        // swap values j <-> pi in L\n        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr);\n        // swap values j <-> pi in U\n        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr);\n        // swap values in spa\n        spa.swap(j, pi);\n        // update permutation vector (swap values @ j, pi)\n        swapIndeces(j, pi);\n      }\n      // loop values in spa (order by row)\n      spa.forEach(0, rows - 1, function (x, v) {\n        // check we are above diagonal\n        if (x <= j) {\n          // update upper triangular matrix\n          uvalues.push(v);\n          uindex.push(x);\n        }\n        else {\n          // update value\n          v = divideScalar(v, vjj);\n          // check value is non zero\n          if (!equalScalar(v, 0)) {\n            // update lower triangular matrix\n            lvalues.push(v);\n            lindex.push(x);\n          }\n        }\n      });\n    }\n    // update ptrs\n    uptr.push(uvalues.length);\n    lptr.push(lvalues.length);\n\n    // return matrices\n    return {\n      L: new SparseMatrix({\n        values: lvalues,\n        index: lindex,\n        ptr: lptr,\n        size: lsize\n      }), \n      U: new SparseMatrix({\n        values: uvalues,\n        index: uindex,\n        ptr: uptr,\n        size: usize\n      }),\n      p: pv_co,\n      toString: function () {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  };\n  \n  return lup;\n}\n\nexports.name = 'lup';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  var zeros = load(require('../../matrix/zeros'));\n  var eye = load(require('../../matrix/eye'));\n  var clone = load(require('../../utils/clone'));\n  \n  var isZero = load(require('../../utils/isZero'));\n  var isPositive = load(require('../../utils/isPositive'));\n  var unequal = load(require('../../relational/unequal'));\n    \n  var abs = load(require('../../arithmetic/abs'));\n  var sign = load(require('../../arithmetic/sign'));\n  var sqrt = load(require('../../arithmetic/sqrt'));\n  var conj = load(require('../../complex/conj'));\n  \n  var unaryMinus = load(require('../../arithmetic/unaryMinus')); \n  var addScalar = load(require('../../arithmetic/addScalar'));  \n  var divideScalar = load(require('../../arithmetic/divideScalar'));\n  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));  \n  var subtract = load(require('../../arithmetic/subtract'));\n    \n  \n  /**\n   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in \n   * two matrices (`Q`, `R`) where `Q` is an \n   * orthogonal matrix and `R` is an upper triangular matrix.\n   *\n   * Syntax:\n   *\n   *    math.qr(A);\n   *\n   * Example:\n   *\n   *    var m = [\n   *      [1, -1,  4],\n   *      [1,  4, -2],\n   *      [1,  4,  2],\n   *      [1,  -1, 0]\n   *    ];\n   *    var result = math.qr(m);\n   *    // r = {\n   *    //   Q: [\n   *    //     [0.5, -0.5,   0.5],\n   *    //     [0.5,  0.5,  -0.5],\n   *    //     [0.5,  0.5,   0.5],\n   *    //     [0.5, -0.5,  -0.5],\n   *    //   ],\n   *    //   R: [\n   *    //     [2, 3,  2],\n   *    //     [0, 5, -2],\n   *    //     [0, 0,  4],\n   *    //     [0, 0,  0]\n   *    //   ]\n   *    // }\n   *\n   * See also:\n   *\n   *    lu\n   *\n   * @param {Matrix | Array} A    A two dimensional matrix or array \n   * for which to get the QR decomposition.\n   *\n   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal\n   * matrix and R: the upper triangular matrix\n   */\n  var qr = typed('qr', {\n\n    'DenseMatrix': function (m) {\n      return _denseQR(m);\n    },\n    \n    'SparseMatrix': function (m) {\n      return _sparseQR(m);\n    },\n\n    'Array': function (a) {\n      // create dense matrix from array\n      var m = matrix(a);\n      // lup, use matrix implementation\n      var r = _denseQR(m);\n      // result\n      return {\n        Q: r.Q.valueOf(),\n        R: r.R.valueOf()\n      };\n    }\n  });\n\n  var _denseQR = function (m) {\n    \n    // rows & columns (m x n)\n    var rows = m._size[0]; // m\n    var cols = m._size[1]; // n\n            \n    var Q = eye([rows], 'dense');\n    var Qdata = Q._data;\n    \n    var R = m.clone();\n    var Rdata = R._data;\n    \n    // vars\n    var i, j, k;\n        \n    var w = zeros([rows], '');\n    \n    for (k = 0; k < Math.min(cols, rows); ++k) {\n      \n      /*\n       * **k-th Household matrix**\n       *\n       * The matrix I - 2*v*transpose(v)\n       * x     = first column of A\n       * x1    = first element of x\n       * alpha = x1 / |x1| * |x|\n       * e1    = tranpose([1, 0, 0, ...])\n       * u     = x - alpha * e1\n       * v     = u / |u|\n       *\n       * Household matrix = I - 2 * v * tranpose(v)\n       *\n       *  * Initially Q = I and R = A.\n       *  * Household matrix is a reflection in a plane normal to v which \n       *    will zero out all but the top right element in R.\n       *  * Appplying reflection to both Q and R will not change product.\n       *  * Repeat this process on the (1,1) minor to get R as an upper \n       *    triangular matrix.\n       *  * Reflections leave the magnitude of the columns of Q unchanged \n       *    so Q remains othoganal.\n       *\n       */  \n      \n      var pivot = Rdata[k][k];          \n      var sgn = unaryMinus(sign(pivot));\n      var conjSgn = conj(sgn);\n      \n      var alphaSquared = 0;\n\n      for(i = k; i < rows; i++) {\n        alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));        \n      }\n      \n      var alpha = multiplyScalar(sgn, sqrt(alphaSquared));\n      \n      \n      if (!isZero(alpha)) {\n          \n        // first element in vector u\n        var u1 = subtract(pivot, alpha);\n        \n        // w = v * u1 / |u|    (only elements k to (rows-1) are used)    \n        w[k] = 1;\n        \n        for (i = k+1; i < rows; i++) {\n          w[i] = divideScalar(Rdata[i][k], u1);\n        }        \n         \n        // tau = - conj(u1 / alpha)\n        var tau = unaryMinus(conj(divideScalar(u1, alpha)));\n        \n        var s;\n        \n        /*\n         * tau and w have been choosen so that\n         * \n         * 2 * v * tranpose(v) = tau * w * tranpose(w)\n         */\n         \n        /*\n         * -- calculate R = R - tau * w * tranpose(w) * R --\n         * Only do calculation with rows k to (rows-1)\n         * Additionally columns 0 to (k-1) will not be changed by this\n         *   multiplication so do not bother recalculating them\n         */\n        for (j = k; j < cols; j++) {\n          s = 0.0;\n          \n          // calculate jth element of [tranpose(w) * R]\n          for (i = k; i < rows; i++) {\n            s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));\n          }\n          \n          // calculate the jth element of [tau * transpose(w) * R]\n          s = multiplyScalar(s, tau);\n          \n          for (i = k; i < rows; i++) {\n            Rdata[i][j] = multiplyScalar(\n              subtract(Rdata[i][j], multiplyScalar(w[i], s)), \n              conjSgn\n            );            \n          }          \n        }\n        /*\n         * -- calculate Q = Q - tau * Q * w * transpose(w) --\n         * Q is a square matrix (rows x rows)\n         * Only do calculation with columns k to (rows-1)\n         * Additionally rows 0 to (k-1) will not be changed by this\n         *   multiplication so do not bother recalculating them\n         */\n        for (i = 0; i < rows; i++) {\n          s = 0.0;\n          \n          // calculate ith element of [Q * w]\n          for (j = k; j < rows; j++) {\n            s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));\n          }\n          \n          // calculate the ith element of [tau * Q * w]\n          s = multiplyScalar(s, tau);\n          \n          for (j = k; j < rows; ++j) {\n            Qdata[i][j] = divideScalar(\n              subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), \n              conjSgn\n            );\n          }\n          \n        }\n      }\n      \n    }\n    \n    // coerse almost zero elements to zero\n    // TODO I feel uneasy just zeroing these values\n    for (i = 0; i < rows; ++i) {\n      for (j = 0; j < i && j < cols; ++j) {\n        if (unequal(0, divideScalar(Rdata[i][j], 1e5))) {\n          throw new Error('math.qr(): unknown error - ' + \n           'R is not lower triangular (element (' + \n            i + ', ' + j + ')  = ' + Rdata[i][j] + ')'\n          );\n        }\n        Rdata[i][j] = multiplyScalar(Rdata[i][j], 0);\n      }\n    }\n    \n    // return matrices\n    return { \n      Q: Q,\n      R: R,\n      toString: function () {\n        return 'Q: ' + this.Q.toString() + '\\nR: ' + this.R.toString();\n      }\n    };\n  };\n  \n  var _sparseQR = function (m) {\n    \n    throw new Error('qr not implemented for sparse matrices yet');\n  \n  };\n  \n  return qr;\n}\n\nexports.name = 'qr';\nexports.factory = factory;\n","'use strict';\n\nvar util = require('../../../utils/index');\n\nvar number = util.number,\n    \n    isInteger = number.isInteger;\n\nfunction factory (type, config, load, typed) {\n\n  var cs_sqr = load(require('../../algebra/sparse/cs_sqr'));\n  var cs_lu = load(require('../../algebra/sparse/cs_lu'));\n\n  /**\n   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where\n   *\n   * `P * A * Q = L * U`\n   *\n   * Syntax:\n   *\n   *    math.slu(A, order, threshold);\n   *\n   * See also:\n   *\n   *    lup, lsolve, usolve, lusolve\n   *\n   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.\n   * @param {Number}       order          The Symbolic Ordering and Analysis order:\n   *                                       0 - Natural ordering, no permutation vector q is returned\n   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'\n   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'. \n   *                                           This is appropriatefor LU factorization of unsymmetric matrices.\n   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.\n   *                                           A dense row is a row with more than 10*sqr(columns) entries.\n   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)\n   *\n   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.\n   */\n  var slu = typed('slu', {\n\n    'SparseMatrix, number, number': function (a, order, threshold) {\n      // verify order\n      if (!isInteger(order) || order < 0 || order > 3)\n        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');\n      // verify threshold\n      if (threshold < 0 || threshold > 1)\n        throw new Error('Partial pivoting threshold must be a number from 0 to 1');\n      \n      // perform symbolic ordering and analysis\n      var s = cs_sqr(order, a, false);\n      \n      // perform lu decomposition\n      var f = cs_lu(a, s, threshold);\n      \n      // return decomposition\n      return {\n        L: f.L,\n        U: f.U,\n        p: f.pinv,\n        q: s.q,\n        toString: function () {\n          return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\np: ' + this.p.toString() + (this.q ? '\\nq: ' + this.q.toString() : '') + '\\n';\n        }\n      };\n    }\n  });\n\n  return slu;\n}\n\nexports.name = 'slu';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var parse = load(require('../../expression/parse'));\n  var simplify = load(require('./simplify'));\n  var ConstantNode = load(require('../../expression/node/ConstantNode'));\n  var FunctionNode = load(require('../../expression/node/FunctionNode'));\n  var OperatorNode = load(require('../../expression/node/OperatorNode'));\n  var ParenthesisNode = load(require('../../expression/node/ParenthesisNode'));\n  var SymbolNode = load(require('../../expression/node/SymbolNode'));\n\n  /**\n   * Takes the derivative of an expression expressed in parser Nodes.\n   * The derivative will be taken over the supplied variable in the\n   * second parameter. If there are multiple variables in the expression,\n   * it will return a partial derivative.\n   *\n   * This uses rules of differentiation which can be found here:\n   *\n   * - [Differentiation rules (Wikipedia)](http://en.wikipedia.org/wiki/Differentiation_rules)\n   *\n   * Syntax:\n   *\n   *     derivative(expr, variable)\n   *     derivative(expr, variable, options)\n   *\n   * Examples:\n   *\n   *     math.derivative('x^2', 'x');                     // Node {2 * x}\n   *     math.derivative('x^2', 'x', {simplify: false});  // Node {2 * 1 * x ^ (2 - 1)\n   *     math.derivative('sin(2x)', 'x'));                // Node {2 * cos(2 * x)}\n   *     math.derivative('2*x', 'x').eval();              // number 2\n   *     math.derivative('x^2', 'x').eval({x: 4});        // number 8\n   *     var f = math.parse('x^2');\n   *     var x = math.parse('x');\n   *     math.derivative(f, x);                           // Node {2 * x}\n   *\n   * See also:\n   *\n   *     simplify, parse, eval\n   *\n   * @param  {Node | string} expr           The expression to differentiate\n   * @param  {SymbolNode | string} variable The variable over which to differentiate\n   * @param  {{simplify: boolean}} [options]\n   *                         There is one option available, `simplify`, which\n   *                         is true by default. When false, output will not\n   *                         be simplified.\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n  var derivative = typed('derivative', {\n    'Node, SymbolNode, Object': function (expr, variable, options) {\n      var constNodes = {};\n      constTag(constNodes, expr, variable.name);\n      var res = _derivative(expr, constNodes);\n      return options.simplify ? simplify(res) : res;\n    },\n    'Node, SymbolNode': function (expr, variable) {\n      return derivative(expr, variable, {simplify: true})\n    },\n\n    'string, SymbolNode': function (expr, variable) {\n      return derivative(parse(expr), variable)\n    },\n    'string, SymbolNode, Object': function (expr, variable, options) {\n      return derivative(parse(expr), variable, options)\n    },\n\n    'string, string': function (expr, variable) {\n      return derivative(parse(expr), parse(variable))\n    },\n    'string, string, Object': function (expr, variable, options) {\n      return derivative(parse(expr), parse(variable), options)\n    },\n\n    'Node, string': function (expr, variable) {\n      return derivative(expr, parse(variable))\n    },\n    'Node, string, Object': function (expr, variable, options) {\n      return derivative(expr, parse(variable), options)\n    }\n\n    // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments\n\n    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}\n    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {\n      var res = expr;\n      for (var i = 0; i < order; i++) {\n        var constNodes = {};\n        constTag(constNodes, expr, variable.name);\n        res = _derivative(res, constNodes);\n      }\n      return res;\n    }\n    */\n  });\n\n  derivative._simplify = true\n\n  derivative.toTex = function(deriv) {\n    return _derivTex.apply(null, deriv.args);\n  }\n\n  var _derivTex = typed('_derivTex', {\n    'Node, SymbolNode': function (expr, x) {\n      return _derivTex(expr.toString(), x.toString(), 1);\n    },\n    'Node, SymbolNode, ConstantNode': function (expr, x, order) {\n      return _derivTex(expr.toString(), x.name, order.value);\n    },\n    'string, string, number': function (expr, x, order) {\n      var d;\n      if (order === 1) {\n        d = \"{d\\\\over d\" + x + \"}\";\n      }\n      else {\n        d = \"{d^{\" + order + \"}\\\\over d\" + x + \"^{\" + order + \"}}\";\n      }\n      return d + \"\\\\left[\" + expr + \"\\\\right]\"\n    }\n  });\n\n  /**\n   * Does a depth-first search on the expression tree to identify what Nodes\n   * are constants (e.g. 2 + 2), and stores the ones that are constants in\n   * constNodes. Classification is done as follows:\n   *\n   *   1. ConstantNodes are constants.\n   *   2. If there exists a SymbolNode, of which we are differentiating over,\n   *      in the subtree it is not constant.\n   *\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {string} varName     Variable that we are differentiating\n   * @return {boolean}  if node is constant\n   */\n  // TODO: can we rewrite constTag into a pure function?\n  var constTag = typed('constTag', {\n    'Object, ConstantNode, string': function (constNodes, node) {\n      return constNodes[node] = true;\n    },\n\n    'Object, SymbolNode, string': function (constNodes, node, varName) {\n      // Treat other variables like constants. For reasoning, see:\n      //   https://en.wikipedia.org/wiki/Partial_derivative\n      if (node.name != varName) {\n        return constNodes[node] = true;\n      }\n      return false;\n    },\n\n    'Object, ParenthesisNode, string': function (constNodes, node, varName) {\n      return constTag(constNodes, node.content, varName);\n    },\n\n    'Object, FunctionAssignmentNode, string': function (constNodes, node, varName) {\n      if (node.params.indexOf(varName) == -1) {\n        return constNodes[node] = true;\n      }\n      return constTag(constNodes, node.expr, varName);\n    },\n\n    'Object, FunctionNode | OperatorNode, string': function (constNodes, node, varName) {\n      if (node.args.length != 0) {\n        var isConst = constTag(constNodes, node.args[0], varName);\n        for (var i = 1; i < node.args.length; ++i) {\n          isConst = constTag(constNodes, node.args[i], varName) && isConst;\n        }\n\n        if (isConst) {\n          return constNodes[node] = true;\n        }\n      }\n      return false;\n    }\n  });\n\n  /**\n   * Applies differentiation rules.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n  var _derivative = typed('_derivative', {\n    'ConstantNode, Object': function (node) {\n       return new ConstantNode('0', node.valueType);\n    },\n\n    'SymbolNode, Object': function (node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return new ConstantNode('0', config.number);\n      }\n      return new ConstantNode('1', config.number);\n    },\n\n    'ParenthesisNode, Object': function (node, constNodes) {\n      return new ParenthesisNode(_derivative(node.content, constNodes));\n    },\n\n    'FunctionAssignmentNode, Object': function (node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return new ConstantNode('0', config.number);\n      }\n      return _derivative(node.expr, constNodes);\n    },\n\n    'FunctionNode, Object': function (node, constNodes) {\n      if (node.args.length != 1) {\n        funcArgsCheck(node);\n      }\n\n      if (constNodes[node] !== undefined) {\n        return new ConstantNode('0', config.number);\n      }\n\n      var arg1 = node.args[0];\n      var arg2;\n\n      var div = false;       // is output a fraction?\n      var negative = false;  // is output negative?\n\n      var funcDerivative;\n      switch (node.name) {\n        case 'cbrt':\n          // d/dx(cbrt(x)) = 1 / (3x^(2/3))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            new ConstantNode('3', config.number),\n            new OperatorNode('^', 'pow', [\n              arg1,\n              new OperatorNode('/', 'divide', [\n                new ConstantNode('2', config.number),\n                new ConstantNode('3', config.number)\n              ])\n            ])\n          ]);\n          break;\n        case 'sqrt':\n        case 'nthRoot':\n          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))\n          if (node.args.length == 1) {\n            div = true;\n            funcDerivative = new OperatorNode('*', 'multiply', [\n              new ConstantNode('2', config.number),\n              new FunctionNode('sqrt', [arg1])\n            ]);\n            break;\n          }\n\n          // Rearrange from nthRoot(x, a) -> x^(1/a)\n          arg2 = new OperatorNode('/', 'divide', [\n            new ConstantNode('1', config.number),\n            node.args[1]\n          ]);\n\n          // Is a variable?\n          constNodes[arg2] = constNodes[node.args[1]];\n\n          return _derivative(new OperatorNode('^', 'pow', [arg1, arg2]), constNodes);\n        case 'log10':\n          arg2 = new ConstantNode('10', config.number);\n        case 'log':\n          if (!arg2 && node.args.length == 1) {\n            // d/dx(log(x)) = 1 / x\n            funcDerivative = arg1.clone();\n          } else if (arg2 || constNodes[node.args[1]] !== undefined) {\n            // d/dx(log(x, c)) = 1 / (x*ln(c))\n            funcDerivative = new OperatorNode('*', 'multiply', [\n              arg1.clone(),\n              new FunctionNode('log', [arg2 || node.args[1]])\n            ]);\n          } else {\n            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))\n            return _derivative(new OperatorNode('/', 'divide', [\n                new FunctionNode('log', [arg1]),\n                new FunctionNode('log', [node.args[1]])\n              ]), constNodes);\n          }\n\n          div = true;\n          break;\n        case 'exp':\n          // d/dx(e^x) = e^x\n          funcDerivative = new FunctionNode('exp', [arg1.clone()]);\n          break;\n        case 'sin':\n          // d/dx(sin(x)) = cos(x)\n          funcDerivative = new FunctionNode('cos', [arg1.clone()]);\n          break;\n        case 'cos':\n          // d/dx(cos(x)) = -sin(x)\n          funcDerivative = new OperatorNode('-', 'unaryMinus', [\n            new FunctionNode('sin', [arg1.clone()])\n          ]);\n          break;\n        case 'tan':\n          // d/dx(tan(x)) = sec(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [\n            new FunctionNode('sec', [arg1.clone()]),\n            new ConstantNode('2', config.number)\n          ]);\n          break;\n        case 'sec':\n          // d/dx(sec(x)) = sec(x)tan(x)\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            node,\n            new FunctionNode('tan', [arg1.clone()])\n          ]);\n          break;\n        case 'csc':\n          // d/dx(csc(x)) = -csc(x)cot(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            node,\n            new FunctionNode('cot', [arg1.clone()])\n          ]);\n          break;\n        case 'cot':\n          // d/dx(cot(x)) = -csc(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [\n            new FunctionNode('csc', [arg1.clone()]),\n            new ConstantNode('2', config.number)\n          ]);\n          break;\n        case 'asin':\n          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [\n            new OperatorNode('-', 'subtract', [\n              new ConstantNode('1', config.number),\n              new OperatorNode('^', 'pow', [\n                arg1.clone(),\n                new ConstantNode('2', config.number)\n              ])\n            ])\n          ]);\n          break;\n        case 'acos':\n          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new FunctionNode('sqrt', [\n            new OperatorNode('-', 'subtract', [\n              new ConstantNode('1', config.number),\n              new OperatorNode('^', 'pow', [\n                arg1.clone(),\n                new ConstantNode('2', config.number)\n              ])\n            ])\n          ]);\n          break;\n        case 'atan':\n          // d/dx(atan(x)) = 1 / (x^2 + 1)\n          div = true;\n          funcDerivative = new OperatorNode('+', 'add', [\n            new OperatorNode('^', 'pow', [\n              arg1.clone(),\n              new ConstantNode('2', config.number)\n            ]),\n            new ConstantNode('1', config.number)\n          ]);\n          break;\n        case 'asec':\n          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            new FunctionNode('abs', [arg1.clone()]),\n            new FunctionNode('sqrt', [\n              new OperatorNode('-', 'subtract', [\n                new OperatorNode('^', 'pow', [\n                  arg1.clone(),\n                  new ConstantNode('2', config.number)\n                ]),\n                new ConstantNode('1', config.number)\n              ])\n            ])\n          ]);\n          break;\n        case 'acsc':\n          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            new FunctionNode('abs', [arg1.clone()]),\n            new FunctionNode('sqrt', [\n              new OperatorNode('-', 'subtract', [\n                new OperatorNode('^', 'pow', [\n                  arg1.clone(),\n                  new ConstantNode('2', config.number)\n                ]),\n                new ConstantNode('1', config.number)\n              ])\n            ])\n          ]);\n          break;\n        case 'acot':\n          // d/dx(acot(x)) = -1 / (x^2 + 1)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('+', 'add', [\n            new OperatorNode('^', 'pow', [\n              arg1.clone(),\n              new ConstantNode('2', config.number)\n            ]),\n            new ConstantNode('1', config.number)\n          ]);\n          break;\n        case 'sinh':\n          // d/dx(sinh(x)) = cosh(x)\n          funcDerivative = new FunctionNode('cosh', [arg1.clone()]);\n          break;\n        case 'cosh':\n          // d/dx(cosh(x)) = sinh(x)\n          funcDerivative = new FunctionNode('sinh', [arg1.clone()]);\n          break;\n        case 'tanh':\n          // d/dx(tanh(x)) = sech(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [\n            new FunctionNode('sech', [arg1.clone()]),\n            new ConstantNode('2', config.number)\n          ]);\n          break;\n        case 'sech':\n          // d/dx(sech(x)) = -sech(x)tanh(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            node,\n            new FunctionNode('tanh', [arg1.clone()])\n          ]);\n          break;\n        case 'csch':\n          // d/dx(csch(x)) = -csch(x)coth(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            node,\n            new FunctionNode('coth', [arg1.clone()])\n          ]);\n          break;\n        case 'coth':\n          // d/dx(coth(x)) = -csch(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [\n            new FunctionNode('csch', [arg1.clone()]),\n            new ConstantNode('2', config.number)\n          ]);\n          break;\n        case 'asinh':\n          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [\n            new OperatorNode('+', 'add', [\n              new OperatorNode('^', 'pow', [\n                arg1.clone(),\n                new ConstantNode('2', config.number)\n              ]),\n              new ConstantNode('1', config.number)\n            ])\n          ]);\n          break;\n        case 'acosh':\n          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [\n            new OperatorNode('-', 'subtract', [\n              new OperatorNode('^', 'pow', [\n                arg1.clone(),\n                new ConstantNode('2', config.number)\n              ]),\n              new ConstantNode('1', config.number),\n            ])\n          ]);\n          break;\n        case 'atanh':\n          // d/dx(atanh(x)) = 1 / (1 - x^2)\n          div = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [\n            new ConstantNode('1', config.number),\n            new OperatorNode('^', 'pow', [\n              arg1.clone(),\n              new ConstantNode('2', config.number)\n            ])\n          ]);\n          break;\n        case 'asech':\n          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            arg1.clone(),\n            new FunctionNode('sqrt', [\n              new OperatorNode('-', 'subtract', [\n                new ConstantNode('1', config.number),\n                new OperatorNode('^', 'pow', [\n                  arg1.clone(),\n                  new ConstantNode('2', config.number)\n                ])\n              ])\n            ])\n          ]);\n          break;\n        case 'acsch':\n          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [\n            new FunctionNode('abs', [arg1.clone()]),\n            new FunctionNode('sqrt', [\n              new OperatorNode('+', 'add', [\n                new OperatorNode('^', 'pow', [\n                  arg1.clone(),\n                  new ConstantNode('2', config.number)\n                ]),\n                new ConstantNode('1', config.number)\n              ])\n            ])\n          ]);\n          break;\n        case 'acoth':\n          // d/dx(acoth(x)) = -1 / (1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [\n            new ConstantNode('1', config.number),\n            new OperatorNode('^', 'pow', [\n              arg1.clone(),\n              new ConstantNode('2', config.number)\n            ])\n          ]);\n          break;\n        case 'abs':\n          // d/dx(abs(x)) = abs(x)/x\n          funcDerivative = new OperatorNode('/', 'divide', [\n            new FunctionNode(new SymbolNode('abs'), [arg1.clone()]),\n            arg1.clone()\n          ]);\n          break;\n        case 'gamma':  // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)\n        default: throw new Error('Function \"' + node.name + '\" not supported by derivative');\n      }\n\n      var op, func;\n      if (div) {\n        op = '/';\n        func = 'divide';\n      } else {\n        op = '*';\n        func = 'multiply';\n      }\n\n      /* Apply chain rule to all functions:\n         F(x)  = f(g(x))\n         F'(x) = g'(x)*f'(g(x)) */\n      var chainDerivative = _derivative(arg1, constNodes);\n      if (negative) {\n        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);\n      }\n      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);\n    },\n\n    'OperatorNode, Object': function (node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return new ConstantNode('0', config.number);\n      }\n\n      var arg1 = node.args[0];\n      var arg2 = node.args[1];\n\n      switch (node.op) {\n        case '+':\n        case '-':\n          // d/dx(+/-f(x)) = +/-f'(x)\n          if (node.args.length == 1) {\n            return new OperatorNode(node.op, node.fn, [_derivative(arg1, constNodes)]);\n          }\n\n          // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)\n          return new OperatorNode(node.op, node.fn, [\n            _derivative(arg1, constNodes),\n            _derivative(arg2, constNodes)\n          ]);\n        case '*':\n          // d/dx(c*f(x)) = c*f'(x)\n          if (constNodes[arg1] !== undefined || constNodes[arg2] !== undefined) {\n            var newArgs = (constNodes[arg1] !== undefined)\n              ? [arg1.clone(), _derivative(arg2, constNodes)]\n              : [arg2.clone(), _derivative(arg1, constNodes)];\n\n            return new OperatorNode('*', 'multiply', newArgs);\n          }\n\n          // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)\n          return new OperatorNode('+', 'add', [\n            new OperatorNode('*', 'multiply', [_derivative(arg1, constNodes), arg2.clone()]),\n            new OperatorNode('*', 'multiply', [arg1.clone(), _derivative(arg2, constNodes)])\n          ]);\n        case '/':\n          // d/dx(f(x) / c) = f'(x) / c\n          if (constNodes[arg2] !== undefined) {\n            return new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), arg2]);\n          }\n\n          // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)\n          if (constNodes[arg1] !== undefined) {\n            return new OperatorNode('*', 'multiply', [\n              new OperatorNode('-', 'unaryMinus', [arg1]),\n              new OperatorNode('/', 'divide', [\n                _derivative(arg2, constNodes),\n                new OperatorNode('^', 'pow', [arg2.clone(), new ConstantNode('2', config.number)])\n              ])\n            ]);\n          }\n\n          // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2\n          return new OperatorNode('/', 'divide', [\n            new OperatorNode('-', 'subtract', [\n              new OperatorNode('*', 'multiply', [_derivative(arg1, constNodes), arg2.clone()]),\n              new OperatorNode('*', 'multiply', [arg1.clone(), _derivative(arg2, constNodes)])\n            ]),\n            new OperatorNode('^', 'pow', [arg2.clone(), new ConstantNode('2', config.number)])\n          ]);\n        case '^':\n          if (constNodes[arg1] !== undefined) {\n            // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1\n            if (arg1.isConstantNode && (arg1.value == '0' || arg1.value == '1')) {\n              return new ConstantNode('0', config.number);\n            }\n\n            // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)\n            return new OperatorNode('*', 'multiply', [\n              node,\n              new OperatorNode('*', 'multiply', [\n                new FunctionNode('log', [arg1.clone()]),\n                _derivative(arg2.clone(), constNodes)\n              ])\n            ]);\n          }\n\n          if (constNodes[arg2] !== undefined) {\n            if (arg2.isConstantNode) {\n              var expValue = arg2.value;\n\n              // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0\n              if (expValue == '0') {\n                return new ConstantNode('0', config.number);\n              }\n              // Ignore exponent; f(x)^1 = f(x)\n              if (expValue == '1') {\n                return _derivative(arg1, constNodes);\n              }\n            }\n\n            // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)\n            var powMinusOne = new OperatorNode('^', 'pow', [\n              arg1.clone(),\n              new OperatorNode('-', 'subtract', [\n                arg2,\n                new ConstantNode('1', config.number)\n              ])\n            ]);\n\n            return new OperatorNode('*', 'multiply', [\n              arg2.clone(),\n              new OperatorNode('*', 'multiply', [\n                _derivative(arg1, constNodes),\n                powMinusOne\n              ]),\n            ]);\n          }\n\n          // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]\n          return new OperatorNode('*', 'multiply', [\n            new OperatorNode('^', 'pow', [arg1.clone(), arg2.clone()]),\n            new OperatorNode('+', 'add', [\n              new OperatorNode('*', 'multiply', [\n                _derivative(arg1, constNodes),\n                new OperatorNode('/', 'divide', [arg2.clone(), arg1.clone()])\n              ]),\n              new OperatorNode('*', 'multiply', [\n                _derivative(arg2, constNodes),\n                new FunctionNode('log', [arg1.clone()])\n              ])\n            ])\n          ]);\n        case '%':\n        case 'mod':\n        default: throw new Error('Operator \"' + node.op + '\" not supported by derivative');\n      }\n    }\n  });\n\n  /**\n   * Ensures the number of arguments for a function are correct,\n   * and will throw an error otherwise.\n   *\n   * @param {FunctionNode} node\n   */\n  function funcArgsCheck(node) {\n    //TODO add min, max etc\n    if ((node.name == 'log' || node.name == 'nthRoot') && node.args.length == 2) {\n      return;\n    }\n\n    // There should be an incorrect number of arguments if we reach here\n\n    // Change all args to constants to avoid unidentified\n    // symbol error when compiling function\n    for (var i = 0; i < node.args.length; ++i) {\n      node.args[i] = new ConstantNode(0);\n    }\n\n    node.compile().eval();\n    throw new Error('Expected TypeError, but none found');\n  }\n\n\n  return derivative;\n}\n\nexports.name = 'derivative';\nexports.factory = factory;\n","module.exports = [\n  require('./derivative'),\n\n  // simplify\n  require('./simplify'),\n\n  // decomposition\n  require('./decomposition/qr'),\n  require('./decomposition/lup'),\n  require('./decomposition/slu'),\n\n  // solver\n  require('./solver/lsolve'),\n  require('./solver/lusolve'),\n  require('./solver/usolve')\n];\n","'use strict';\n\n\nfunction factory (type, config, load, typed, math) {\n  var parse = load(require('../../expression/parse'));\n  var ConstantNode = load(require('../../expression/node/ConstantNode'));\n  var FunctionNode = load(require('../../expression/node/FunctionNode'));\n  var OperatorNode = load(require('../../expression/node/OperatorNode'));\n  var ParenthesisNode = load(require('../../expression/node/ParenthesisNode'));\n  var SymbolNode = load(require('../../expression/node/SymbolNode'));\n  var Node = load(require('../../expression/node/Node'));\n  var simplifyConstant = load(require('./simplify/simplifyConstant'));\n\n  var util = load(require('./simplify/util'));\n  var isCommutative = util.isCommutative;\n  var isAssociative = util.isAssociative;\n  var flatten = util.flatten;\n  var unflattenr = util.unflattenr;\n  var unflattenl = util.unflattenl;\n  var createMakeNodeFunction = util.createMakeNodeFunction;\n\n  /**\n   * Simplify an expression tree.\n   *\n   * A list of rules are applied to an expression, repeating over the list until\n   * no further changes are made.\n   * It's possible to pass a custom set of rules to the function as second\n   * argument. A rule can be specified as an object, string, or function:\n   *\n   *     var rules = [\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\n   *       function (node) {\n   *         // ... return a new node or return the node unchanged\n   *         return node\n   *       }\n   *     ]\n   *\n   * String and object rules consist of a left and right pattern. The left is\n   * used to match against the expression and the right determines what matches\n   * are replaced with. The main difference between a pattern and a normal\n   * expression is that variables starting with the following characters are\n   * interpreted as wildcards:\n   *\n   * - 'n' - matches any Node\n   * - 'c' - matches any ConstantNode\n   * - 'v' - matches any Node that is not a ConstantNode\n   *\n   * The default list of rules is exposed on the function as `simplify.rules`\n   * and can be used as a basis to built a set of custom rules.\n   *\n   * For more details on the theory, see:\n   *\n   * - [Strategies for simplifying math expressions (Stackoverflow)](http://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\n   *\n   * Syntax:\n   *\n   *     simplify(expr)\n   *     simplify(expr, rules)\n   *\n   * Examples:\n   *\n   *     math.simplify('2 * 1 * x ^ (2 - 1)');      // Node {2 * x}\n   *     var f = math.parse('2 * 1 * x ^ (2 - 1)');\n   *     math.simplify(f);                          // Node {2 * x}\n   *\n   * See also:\n   *\n   *     derivative, parse, eval\n   *\n   * @param {Node | string} expr\n   *            The expression to be simplified\n   * @param {Array<{l:string, r: string} | string | function>} [rules]\n   *            Optional list with custom rules\n   * @return {Node} Returns the simplified form of `expr`\n   */\n  var simplify = typed('simplify', {\n    'string': function (expr) {\n      return simplify(parse(expr), simplify.rules);\n    },\n\n    'string, Array': function (expr, rules) {\n      return simplify(parse(expr), rules);\n    },\n\n    'Node': function (expr) {\n      return simplify(expr, simplify.rules);\n    },\n\n    'Node, Array': function (expr, rules) {\n      rules = _buildRules(rules);\n\n      var res = removeParens(expr);\n      var visited = {};\n\n      var str = res.toString({parenthesis: 'all'});\n      while(!visited[str]) {\n        visited[str] = true;\n        _lastsym = 0; // counter for placeholder symbols\n        for (var i=0; i<rules.length; i++) {\n          if (typeof rules[i] === 'function') {\n            res = rules[i](res);\n          }\n          else {\n            flatten(res);\n            res = applyRule(res, rules[i]);\n          }\n          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it\n        }\n        str = res.toString({parenthesis: 'all'});\n      }\n\n      return res;\n    }\n  });\n\n  function removeParens(node) {\n    return node.transform(function(node, path, parent) {\n      if(node.isParenthesisNode) {\n        return node.content;\n      }\n      else {\n        return node;\n      }\n    });\n  }\n\n  // All constants that are allowed in rules\n  var SUPPORTED_CONSTANTS = {\n    true: true,\n    false: true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true,\n    // null: false,\n    // uninitialized: false,\n    // version: false,\n  };\n\n  // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n  simplify.rules = [\n    { l: 'n+0', r: 'n' },\n    { l: 'n^0', r: '1' },\n    { l: '0*n', r: '0' },\n    { l: 'n/n', r: '1'},\n    { l: 'n^1', r: 'n' },\n    { l: '+n1', r:'n1' },\n    { l: 'n--n1', r:'n+n1' },\n    { l: 'log(e)', r:'1' },\n\n    // temporary rules\n    { l: 'n-n1', r:'n+-n1' }, // temporarily replace 'subtract' so we can further flatten the 'add' operator\n    { l: '-(c*v)', r: '(-c) * v' }, // make non-constant terms positive\n    { l: '-v', r: '(-1) * v' },\n    { l: 'n/n1^n2', r:'n*n1^-n2' }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n    { l: 'n/n1', r:'n*n1^-1' },\n\n    // collect like factors\n    { l: 'n*n', r: 'n^2' },\n    { l: 'n * n^n1', r: 'n^(n1+1)' },\n    { l: 'n^n1 * n^n2', r: 'n^(n1+n2)' },\n\n    // collect like terms\n    { l: 'n+n', r: '2*n' },\n    { l: 'n+-n', r: '0' },\n    { l: 'n1*n2 + n2', r: '(n1+1)*n2' },\n    { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n\n    simplifyConstant,\n\n    { l: '(-n)*n1', r: '-(n*n1)' }, // make factors positive (and undo 'make non-constant terms positive')\n\n    // ordering of constants\n    { l: 'c+v', r: 'v+c', context: { 'add': { commutative:false } } },\n    { l: 'v*c', r: 'c*v', context: { 'multiply': { commutative:false } } },\n\n    // undo temporary rules\n    { l: '(-1) * n', r: '-n' },\n    { l: 'n+-n1', r:'n-n1' },  // undo replace 'subtract'\n    { l: 'n*(n1^-1)', r:'n/n1' },  // undo replace 'divide'\n    { l: 'n*n1^-n2', r:'n/n1^n2' },\n    { l: 'n1^-1', r:'1/n1' },\n\n    { l: 'n*(n1/n2)', r:'(n*n1)/n2' }, // '*' before '/'\n    { l: 'n-(n1+n2)', r:'n-n1-n2' }, // '-' before '+'\n    // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n    // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n\n    { l: '1*n', r: 'n' } // this pattern can be produced by simplifyConstant\n\n  ];\n\n  /**\n   * Parse the string array of rules into nodes\n   *\n   * Example syntax for rules:\n   *\n   * Position constants to the left in a product:\n   * { l: 'n1 * c1', r: 'c1 * n1' }\n   * n1 is any Node, and c1 is a ConstantNode.\n   *\n   * Apply difference of squares formula:\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\n   * n1, n2 mean any Node.\n   *\n   * Short hand notation:\n   * 'n1 * c1 -> c1 * n1'\n   */\n  function _buildRules(rules) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n    for(var i=0; i<rules.length; i++) {\n      var rule = rules[i];\n      var newRule;\n      var ruleType = typeof rule;\n      switch (ruleType) {\n        case 'string':\n          var lr = rule.split('->');\n          if (lr.length !== 2) {\n            throw SyntaxError('Could not parse rule: ' + rule);\n          }\n          rule = {l: lr[0], r: lr[1]};\n          /* falls through */\n        case 'object':\n          newRule = {\n            l: removeParens(parse(rule.l)),\n            r: removeParens(parse(rule.r)),\n          }\n          if(rule.context) {\n            newRule.evaluate = rule.context;\n          }\n          if(rule.evaluate) {\n            newRule.evaluate = parse(rule.evaluate);\n          }\n\n          if (newRule.l.isOperatorNode && isAssociative(newRule.l)) {\n            var makeNode = createMakeNodeFunction(newRule.l);\n            var expandsym = _getExpandPlaceholderSymbol();\n            newRule.expanded = {};\n            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]);\n            // Push the expandsym into the deepest possible branch.\n            // This helps to match the newRule against nodes returned from getSplits() later on.\n            flatten(newRule.expanded.l);\n            unflattenr(newRule.expanded.l);\n            newRule.expanded.r = makeNode([newRule.r, expandsym]);\n          }\n          break;\n        case 'function':\n          newRule = rule;\n          break;\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      }\n     // console.log('Adding rule: ' + rules[i]);\n     // console.log(newRule);\n      ruleSet.push(newRule);\n    }\n    return ruleSet;\n  }\n\n  var _lastsym = 0;\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n\n  /**\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\n   */\n  var applyRule = typed('applyRule', {\n    'Node, Object': function (node, rule) {\n\n      //console.log('Entering applyRule(' + node.toString() + ')');\n\n      // Do not clone node unless we find a match\n      var res = node;\n\n      // First replace our child nodes with their simplified versions\n      // If a child could not be simplified, the assignments will have\n      // no effect since the node is returned unchanged\n      if (res instanceof OperatorNode || res instanceof FunctionNode) {\n        if (res.args) {\n          for(var i=0; i<res.args.length; i++) {\n            res.args[i] = applyRule(res.args[i], rule);\n          }\n        }\n      }\n      else if(res instanceof ParenthesisNode) {\n        if(res.content) {\n          res.content = applyRule(res.content, rule);\n        }\n      }\n\n      // Try to match a rule against this node\n      var repl = rule.r;\n      var matches = _ruleMatch(rule.l, res)[0];\n\n      // If the rule is associative operator, we can try matching it while allowing additional terms.\n      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n      if (!matches && rule.expanded) {\n        repl = rule.expanded.r;\n        matches = _ruleMatch(rule.expanded.l, res)[0];\n      }\n\n      if (matches) {\n        // var before = res.toString({parenthesis: 'all'});\n\n        // Create a new node by cloning the rhs of the matched rule\n        res = repl.clone();\n\n        // Replace placeholders with their respective nodes\n        //console.log('Traversing rule ' + res);\n        res = res.transform(function(n, path, parent) {\n          if(n.isSymbolNode) {\n            if(matches.placeholders.hasOwnProperty(n.name)) {\n              var replace = matches.placeholders[n.name].clone();\n              return replace;\n            }\n          }\n          return n;\n        });\n\n        // var after = res.toString({parenthesis: 'all'});\n        // console.log('Simplified ' + before + ' to ' + after);\n      }\n\n      return res;\n    }\n  });\n\n  /**\n   * Get (binary) combinations of a flattened binary node\n   * e.g. +(node1, node2, node3) -> [\n   *        +(node1,  +(node2, node3)),\n   *        +(node2,  +(node1, node3)),\n   *        +(node3,  +(node1, node2))]\n   *\n   */\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n    if (isCommutative(node, context)) {\n      for (var i=0; i<node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = (rightArgs.length === 1) ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    }\n    else {\n      rightArgs = node.args.slice(1);\n      right = (rightArgs.length === 1) ? rightArgs[0] : makeNode(rightArgs);\n      res.push(makeNode([node.args[0], right]));\n    }\n    return res;\n  }\n\n  /**\n   * Returns the set union of two match-placeholders or null if there is a conflict.\n   */\n  function mergeMatch(match1, match2) {\n    var res = {placeholders:{}};\n\n    // Some matches may not have placeholders; this is OK\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    }\n    else if (!match1.placeholders) {\n      return match2;\n    }\n    else if (!match2.placeholders) {\n      return match1;\n    }\n\n    // Placeholders with the same key must match exactly\n    for (var key in match1.placeholders) {\n      res.placeholders[key] = match1.placeholders[key];\n      if (match2.placeholders.hasOwnProperty(key)) {\n        if (!_exactMatch(match1.placeholders[key], match2.placeholders[key] )) {\n          return null;\n        }\n      }\n    }\n\n    for (var key in match2.placeholders) {\n      res.placeholders[key] = match2.placeholders[key];\n    }\n\n    return res;\n  }\n\n  /**\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   */\n  function combineChildMatches(list1, list2) {\n    var res = [];\n\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n\n    var merged;\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   * Returns a list of unique matches.\n   */\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n    for(var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i]);\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n    return uniqueSets;\n  }\n\n  /**\n   * Determines whether node matches rule.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {Object} Information about the match, if it exists.\n   */\n  function _ruleMatch(rule, node, isSplit) {\n//    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')');\n//    console.log('rule = ' + rule);\n//    console.log('node = ' + node);\n\n//    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')');\n    var res = [{placeholders:{}}];\n\n    if (rule instanceof OperatorNode && node instanceof OperatorNode\n     || rule instanceof FunctionNode && node instanceof FunctionNode) {\n\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      }\n      else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      }\n\n      // rule and node match. Search the children of rule and node.\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) || isSplit) {\n        // Expect non-associative operators to match exactly\n        var childMatches = [];\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i]);\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            return [];\n          }\n          // The child matched, so add the information returned from the child to our result\n          childMatches.push(childMatch);\n        }\n        res = mergeChildMatches(childMatches);\n      }\n      else if (node.args.length >= 2 && rule.args.length === 2) { // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule matches each\n        // them and return their union.\n        var splits = getSplits(node, rule.context);\n        var splitMatches = [];\n        for(var i = 0; i < splits.length; i++) {\n          var matchSet = _ruleMatch(rule, splits[i], true); // recursing at the same tree depth here\n          splitMatches = splitMatches.concat(matchSet);\n        }\n        return splitMatches;\n      }\n      else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      }\n      else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    }\n    else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first character of the symbol node name.\n      // c.* matches a ConstantNode\n      // n.* matches any node\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n     if (math.hasOwnProperty(rule.name)) {\n        if (!SUPPORTED_CONSTANTS[rule.name]) {\n          throw new Error('Built in constant: ' + rule.name + ' is not supported by simplify.');\n        }\n\n        // built-in constant must match exactly\n        if(rule.name !== node.name) {\n          return [];\n        }\n      }\n      else if (rule.name[0] == 'n' || rule.name.substring(0,2) == '_p') {\n        // rule matches _anything_, so assign this node to the rule.name placeholder\n        // Assign node to the rule.name placeholder.\n        // Our parent will check for matches among placeholders.\n        res[0].placeholders[rule.name] = node;\n      }\n      else if (rule.name[0] == 'v') {\n        // rule matches any variable thing (not a ConstantNode)\n        if(!node.isConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        }\n        else {\n          // Mis-match: rule was expecting something other than a ConstantNode\n          return [];\n        }\n      }\n      else if (rule.name[0] == 'c') {\n        // rule matches any ConstantNode\n        if(node instanceof ConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        }\n        else {\n          // Mis-match: rule was expecting a ConstantNode\n          return [];\n        }\n      }\n      else {\n        throw new Error('Invalid symbol in rule: ' + rule.name);\n      }\n    }\n    else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if(rule.value !== node.value) {\n        return [];\n      }\n    }\n    else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    }\n\n    // It's a match!\n\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match');\n    return res;\n  }\n\n\n  /**\n   * Determines whether p and q (and all their children nodes) are identical.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\n   * @return {Object} Information about the match, if it exists.\n   */\n  function _exactMatch(p, q) {\n    if(p instanceof ConstantNode && q instanceof ConstantNode) {\n      if(p.value !== q.value) {\n        return false;\n      }\n    }\n    else if(p instanceof SymbolNode && q instanceof SymbolNode) {\n      if(p.name !== q.name) {\n        return false;\n      }\n    }\n    else if(p instanceof OperatorNode && q instanceof OperatorNode\n         || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      }\n      else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n\n      if(p.args.length !== q.args.length) {\n        return false;\n      }\n\n      for(var i=0; i<p.args.length; i++) {\n        if(!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    }\n    else {\n      return false;\n    }\n\n    return true;\n  }\n\n  return simplify;\n}\n\nexports.math = true;\nexports.name = 'simplify';\nexports.factory = factory;\n","'use strict';\n\nvar digits = require('./../../../utils/number').digits;\n// TODO this could be improved by simplifying seperated constants under associative and commutative operators\nfunction factory(type, config, load, typed, math) {\n  var util = load(require('./util'));\n  var isCommutative = util.isCommutative;\n  var isAssociative = util.isAssociative;\n  var allChildren = util.allChildren;\n  var createMakeNodeFunction = util.createMakeNodeFunction;\n  var ConstantNode = math.expression.node.ConstantNode;\n  var OperatorNode = math.expression.node.OperatorNode;\n\n  function simplifyConstant(expr) {\n    var res = foldFraction(expr);\n    return res.isNode ? res : _toNode(res);\n  }\n\n  function _eval(fnname, args) {\n    try {\n      return _toNumber(math[fnname].apply(null, args));\n    }\n    catch (ignore) {\n      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions\n      args = args.map(function(x){\n        if (x.isFraction) {\n          return x.valueOf();\n        }\n        return x;\n      });\n      return _toNumber(math[fnname].apply(null, args));\n    }\n  }\n\n  var _toNode = typed({\n    'Fraction': _fractionToNode,\n    'number': function(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n      return new ConstantNode(n);\n    },\n    'BigNumber': function(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(n.negated().toString(), 'number'));\n      }\n      return new ConstantNode(n.toString(), 'number');\n    },\n    'Complex': function(s) {\n      throw 'Cannot convert Complex number to Node';\n    }\n  });\n\n  // convert a number to a fraction only if it can be expressed exactly\n  function _exactFraction(n) {\n    if (isFinite(n)) {\n      var f = math.fraction(n);\n      if (f.valueOf() === n) {\n        return f;\n      }\n    }\n    return n;\n  }\n\n  // Convert numbers to a preferred number type in preference order: Fraction, number, Complex\n  // BigNumbers are left alone\n  var _toNumber = typed({\n    'string': function(s) {\n      if (config.number === 'BigNumber') {\n        return math.bignumber(s);\n      }\n      else if (config.number === 'Fraction') {\n        return math.fraction(s);\n      }\n      else {\n        return _exactFraction(parseFloat(s));\n      }\n    },\n\n    'Fraction': function(s) { return s; },\n\n    'BigNumber': function(s) { return s; },\n\n    'number': function(s) {\n      return _exactFraction(s);\n    },\n\n    'Complex': function(s) {\n      if (s.im !== 0) {\n        return s;\n      }\n      return _exactFraction(s.re);\n    },\n  });\n\n  function unaryMinusNode(n) {\n    return new OperatorNode('-', 'unaryMinus', [n]);\n  }\n\n  function _fractionToNode(f) {\n    var n;\n    var vn = f.s*f.n;\n    if (vn < 0) {\n      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)])\n    }\n    else {\n      n = new ConstantNode(vn);\n    }\n\n    if (f.d === 1) {\n      return n;\n    }\n    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);\n  }\n\n  /*\n   * Create a binary tree from a list of Fractions and Nodes.\n   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so\n   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).\n   * @param args - list of Fractions and Nodes\n   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions\n   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes\n   * if args.length is 1, returns args[0]\n   * @return - Either a Node representing a binary expression or Fraction\n   */\n  function foldOp(fn, args, makeNode) {\n    return args.reduce(function(a, b) {\n      if (!a.isNode && !b.isNode) {\n        try {\n          return _eval(fn, [a,b]);\n        }\n        catch (ignoreandcontinue) {}\n        a = _toNode(a);\n        b = _toNode(b);\n      }\n      else if (!a.isNode) {\n        a = _toNode(a);\n      }\n      else if (!b.isNode) {\n        b = _toNode(b);\n      }\n\n      return makeNode([a, b]);\n    });\n  }\n\n  // destroys the original node and returns a folded one\n  function foldFraction(node) {\n    switch(node.type) {\n      case 'SymbolNode':\n        return node;\n      case 'ConstantNode':\n        if (node.valueType === 'number') {\n          return _toNumber(node.value);\n        }\n        return node;\n      case 'FunctionNode':\n        if (math[node.name] && math[node.name].rawArgs) {\n          return node;\n        }\n        /* falls through */\n      case 'OperatorNode':\n        var fn = node.fn.toString();\n        var args;\n        var res;\n        var makeNode = createMakeNodeFunction(node);\n        if (node.args.length === 1) {\n          args = [foldFraction(node.args[0])];\n          if (!args[0].isNode) {\n            res = _eval(fn, args);\n          }\n          else {\n            res = makeNode(args);\n          }\n        }\n        else if (isAssociative(node)) {\n          args = allChildren(node);\n          args = args.map(foldFraction);\n\n          if (isCommutative(fn)) {\n            // commutative binary operator\n            var consts = [], vars = [];\n\n            for (var i=0; i < args.length; i++) {\n              if (!args[i].isNode) {\n                consts.push(args[i]);\n              }\n              else {\n                vars.push(args[i]);\n              }\n            }\n\n            if (consts.length > 1) {\n              res = foldOp(fn, consts, makeNode);\n              vars.unshift(res);\n              res = foldOp(fn, vars, makeNode);\n            }\n            else {\n              // we won't change the children order since it's not neccessary\n              res = foldOp(fn, args, makeNode);\n            }\n          }\n          else {\n            // non-commutative binary operator\n            res = foldOp(fn, args, makeNode);\n          }\n        }\n        else {\n          // non-associative binary operator\n          args = node.args.map(foldFraction);\n          res = foldOp(fn, args, makeNode);\n        }\n        return res;\n      case 'ParenthesisNode':\n        // remove the uneccessary parenthesis\n        return foldFraction(node.content);\n      case 'AccessorNode':\n        /* falls through */\n      case 'ArrayNode':\n        /* falls through */\n      case 'AssignmentNode':\n        /* falls through */\n      case 'BlockNode':\n        /* falls through */\n      case 'FunctionAssignmentNode':\n        /* falls through */\n      case 'IndexNode':\n        /* falls through */\n      case 'ObjectNode':\n        /* falls through */\n      case 'RangeNode':\n        /* falls through */\n      case 'UpdateNode':\n        /* falls through */\n      case 'ConditionalNode':\n        /* falls through */\n      default:\n        throw 'Unimplemented node type in simplifyConstant: '+node.type;\n    }\n  }\n\n  return simplifyConstant;\n}\n\nexports.math = true;\nexports.name = 'simplifyConstant';\nexports.path = 'algebra.simplify';\nexports.factory = factory;\n","'use strict';\n\nfunction factory(type, config, load, typed, math) {\n  var FunctionNode = math.expression.node.FunctionNode;\n  var OperatorNode = math.expression.node.OperatorNode;\n  var SymbolNode = math.expression.node.SymbolNode;\n\n  // TODO commutative/associative properties rely on the arguments\n  // e.g. multiply is not commutative for matrices\n  // The properties should be calculated from an argument to simplify, or possibly something in math.config\n  // the other option is for typed() to specify a return type so that we can evaluate the type of arguments\n  var commutative = {\n    'add': true,\n    'multiply': true\n  }\n  var associative = {\n    'add': true,\n    'multiply': true\n  }\n\n\n  function isCommutative(node, context) {\n    if (!node.args || node.args.length <=1) {\n      return true;\n    }\n    var name = node.fn.toString();\n    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('commutative')) {\n      return context[name].commutative;\n    }\n    return commutative[name] || false;\n  }\n\n  function isAssociative(node, context) {\n    if (!node.args || node.args.length <=1) {\n      return true;\n    }\n    var name = node.fn.toString();\n    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('associative')) {\n      return context[name].associative;\n    }\n    return associative[name] || false;\n  }\n\n  /**\n   * Flatten all associative operators in an expression tree.\n   * Assumes parentheses have already been removed.\n   */\n  function flatten(node) {\n    if (!node.args || node.args.length === 0) {\n      return node;\n    }\n    node.args = allChildren(node);\n    for (var i=0; i<node.args.length; i++) {\n      flatten(node.args[i]);\n    }\n  }\n\n  /**\n   * Get the children of a node as if it has been flattened.\n   * TODO implement for FunctionNodes\n   */\n  function allChildren(node) {\n    var op;\n    var children = [];\n    var findChildren = function(node) {\n      for (var i = 0; i < node.args.length; i++) {\n        var child = node.args[i];\n        if (child.isOperatorNode && op === child.op) {\n          findChildren(child);\n        }\n        else {\n          children.push(child);\n        }\n      }\n    };\n\n    if (node.isOperatorNode && isAssociative(node)) {\n      op = node.op;\n      findChildren(node);\n      return children;\n    }\n    else {\n      return node.args;\n    }\n  }\n\n  /**\n   *  Unflatten all flattened operators to a right-heavy binary tree.\n   */\n  function unflattenr(node) {\n    if (!node.args || node.args.length === 0) {\n      return;\n    }\n    var makeNode = createMakeNodeFunction(node);\n    var l = node.args.length;\n    for (var i = 0; i < l; i++) {\n      unflattenr(node.args[i])\n    }\n    if (l > 2 && isAssociative(node)) {\n      var curnode = node.args.pop();\n      while (node.args.length > 0) {\n        curnode = makeNode([node.args.pop(), curnode]);\n      }\n      node.args = curnode.args;\n    }\n  }\n\n  /**\n   *  Unflatten all flattened operators to a left-heavy binary tree.\n   */\n  function unflattenl(node) {\n    if (!node.args || node.args.length === 0) {\n      return;\n    }\n    var makeNode = createMakeNodeFunction(node);\n    var l = node.args.length;\n    for (var i = 0; i < l; i++) {\n      unflattenl(node.args[i])\n    }\n    if (l > 2 && isAssociative(node)) {\n      var curnode = node.args.shift();\n      while (node.args.length > 0) {\n        curnode = makeNode([curnode, node.args.shift()]);\n      }\n      node.args = curnode.args;\n    }\n  }\n\n  function createMakeNodeFunction(node) {\n    if (node.isOperatorNode) {\n      return function(args){\n        try{\n          return new OperatorNode(node.op, node.fn, args);\n        } catch(err){\n          console.error(err);\n          return [];\n        }\n      };\n    }\n    else {\n      return function(args){\n        return new FunctionNode(new SymbolNode(node.name), args);\n      };\n    }\n  }\n  return {\n    createMakeNodeFunction: createMakeNodeFunction,\n    isCommutative: isCommutative,\n    isAssociative: isAssociative,\n    flatten: flatten,\n    allChildren: allChildren,\n    unflattenr: unflattenr,\n    unflattenl: unflattenl\n  };\n}\n\nexports.factory = factory;\nexports.math = true;","'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  var divideScalar = load(require('../../arithmetic/divideScalar'));\n  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));\n  var subtract = load(require('../../arithmetic/subtract'));\n  var equalScalar = load(require('../../relational/equalScalar'));\n\n  var solveValidation = load(require('./utils/solveValidation'));\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /** \n   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.\n   *\n   * `L * x = b`\n   *\n   * Syntax:\n   *\n   *    math.lsolve(L, b);\n   *\n   * Examples:\n   *\n   *    var a = [[-2, 3], [2, 1]];\n   *    var b = [11, 9];\n   *    var x = lsolve(a, b);  // [[-5.5], [20]]\n   *\n   * See also:\n   *\n   *    lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} L       A N x N matrix or array (L)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\n   */\n  var lsolve = typed('lsolve', {\n\n    'SparseMatrix, Array | Matrix': function (m, b) {\n      // process matrix\n      return _sparseForwardSubstitution(m, b);\n    },\n    \n    'DenseMatrix, Array | Matrix': function (m, b) {\n      // process matrix\n      return _denseForwardSubstitution(m, b);\n    },\n    \n    'Array, Array | Matrix': function (a, b) {\n      // create dense matrix from array\n      var m = matrix(a);\n      // use matrix implementation\n      var r = _denseForwardSubstitution(m, b);\n      // result\n      return r.valueOf();\n    }\n  });\n\n  var _denseForwardSubstitution = function (m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    // column vector data\n    var bdata = b._data;\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // result\n    var x = [];\n    // data\n    var data = m._data;\n    // forward solve m * x = b, loop columns\n    for (var j = 0; j < columns; j++) {\n      // b[j]\n      var bj = bdata[j][0] || 0;\n      // x[j]\n      var xj;\n      // forward substitution (outer product) avoids inner looping when bj == 0\n      if (!equalScalar(bj, 0)) {\n        // value @ [j, j]\n        var vjj = data[j][j];\n        // check vjj\n        if (equalScalar(vjj, 0)) {\n          // system cannot be solved\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        // calculate xj\n        xj = divideScalar(bj, vjj);\n        // loop rows\n        for (var i = j + 1; i < rows; i++) {\n          // update copy of b\n          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];\n        }\n      }\n      else {\n        // zero @ j\n        xj = 0;\n      }\n      // update x\n      x[j] = [xj];\n    }\n    // return vector\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  };\n\n  var _sparseForwardSubstitution = function (m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    // column vector data\n    var bdata = b._data;\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // vars\n    var i, k;\n    // result\n    var x = [];\n    // forward solve m * x = b, loop columns\n    for (var j = 0; j < columns; j++) {\n      // b[j]\n      var bj = bdata[j][0] || 0;\n      // forward substitution (outer product) avoids inner looping when bj == 0\n      if (!equalScalar(bj, 0)) {\n        // value @ [j, j]\n        var vjj = 0;\n        // lower triangular matrix values & index (column j)\n        var jvalues = [];\n        var jindex = [];\n        // last index in column\n        var l = ptr[j + 1];\n        // values in column, find value @ [j, j]\n        for (k = ptr[j]; k < l; k++) {\n          // row\n          i = index[k];\n          // check row (rows are not sorted!)\n          if (i === j) {\n            // update vjj\n            vjj = values[k];\n          }\n          else if (i > j) {\n            // store lower triangular\n            jvalues.push(values[k]);\n            jindex.push(i);\n          }\n        }\n        // at this point we must have a value @ [j, j]\n        if (equalScalar(vjj, 0)) {\n          // system cannot be solved, there is no value @ [j, j]\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        // calculate xj\n        var xj = divideScalar(bj, vjj);\n        // loop lower triangular\n        for (k = 0, l = jindex.length; k < l; k++) {\n          // row\n          i = jindex[k];\n          // update copy of b\n          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, jvalues[k]))];\n        }\n        // update x\n        x[j] = [xj];\n      }\n      else {\n        // update x\n        x[j] = [0];\n      }\n    }\n    // return vector\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  };\n\n  return lsolve;\n}\n\nexports.name = 'lsolve';\nexports.factory = factory;\n","'use strict';\n\nvar isArray = Array.isArray;\n\nfunction factory (type, config, load, typed) {\n  \n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  var lup = load(require('../decomposition/lup'));\n  var slu = load(require('../decomposition/slu'));\n  var cs_ipvec = load(require('../sparse/cs_ipvec'));\n\n  var solveValidation = load(require('./utils/solveValidation'));\n\n  var usolve = load(require('./usolve'));\n  var lsolve = load(require('./lsolve'));\n\n  /**\n   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.\n   *\n   * Syntax:\n   *\n   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b\n   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)\n   *\n   * Examples:\n   *\n   *    var m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]];\n   *\n   *    var x = math.lusolve(m, [-1, -1, -1, -1]);        // x = [[-1], [-0.5], [-1/3], [-0.25]]\n   *\n   *    var f = math.lup(m);\n   *    var x1 = math.lusolve(f, [-1, -1, -1, -1]);       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]\n   *    var x2 = math.lusolve(f, [1, 2, 1, -1]);          // x2 = [[1], [1], [1/3], [-0.25]]\n   *\n   *    var a = [[-2, 3], [2, 1]];\n   *    var b = [11, 9];\n   *    var x = lusolve(a, b);  // [[-5.5], [20]]\n   *\n   * See also:\n   *\n   *    lup, slu, lsolve, usolve\n   *\n   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition\n   * @param {Matrix | Array} b               Column Vector\n   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix\n   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.\n   *\n   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b\n   */\n  var lusolve = typed('lusolve', {\n    \n    'Array, Array | Matrix': function (a, b) {\n      // convert a to matrix\n      a = matrix(a);\n      // matrix lup decomposition\n      var d = lup(a);\n      // solve\n      var x = _lusolve(d.L, d.U, d.p, null, b);\n      // convert result to array\n      return x.valueOf();\n    },\n    \n    'DenseMatrix, Array | Matrix': function (a, b) {\n      // matrix lup decomposition\n      var d = lup(a);\n      // solve\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    \n    'SparseMatrix, Array | Matrix': function (a, b) {\n      // matrix lup decomposition\n      var d = lup(a);\n      // solve\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    \n    'SparseMatrix, Array | Matrix, number, number': function (a, b, order, threshold) {\n      // matrix lu decomposition\n      var d = slu(a, order, threshold);\n      // solve\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    },\n\n    'Object, Array | Matrix': function (d, b) {\n      // solve\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    }\n  });\n  \n  var _toMatrix = function (a) {\n    // check it is a matrix\n    if (a && a.isMatrix === true)\n      return a;\n    // check array\n    if (isArray(a))\n      return matrix(a);\n    // throw\n    throw new TypeError('Invalid Matrix LU decomposition');\n  };\n  \n  var _lusolve = function (l, u, p, q, b) {\n    // verify L, U, P\n    l = _toMatrix(l);\n    u = _toMatrix(u);\n    // validate matrix and vector\n    b = solveValidation(l, b, false);\n    // apply row permutations if needed (b is a DenseMatrix)\n    if (p)\n      b._data = cs_ipvec(p, b._data);\n    // use forward substitution to resolve L * y = b\n    var y = lsolve(l, b);\n    // use backward substitution to resolve U * x = y\n    var x = usolve(u, y);\n    // apply column permutations if needed (x is a DenseMatrix)\n    if (q)\n      x._data = cs_ipvec(q, x._data);\n    // return solution\n    return x;\n  };\n\n  return lusolve;\n}\n\nexports.name = 'lusolve';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  var divideScalar = load(require('../../arithmetic/divideScalar'));\n  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));\n  var subtract = load(require('../../arithmetic/subtract'));\n  var equalScalar = load(require('../../relational/equalScalar'));\n\n  var solveValidation = load(require('./utils/solveValidation'));\n  \n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.\n   *\n   * `U * x = b`\n   *\n   * Syntax:\n   *\n   *    math.usolve(U, b);\n   *\n   * Examples:\n   *\n   *    var a = [[-2, 3], [2, 1]];\n   *    var b = [11, 9];\n   *    var x = usolve(a, b);  // [[8], [9]]\n   *\n   * See also:\n   *\n   *    lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} U       A N x N matrix or array (U)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\n   */\n  var usolve = typed('usolve', {\n    \n    'SparseMatrix, Array | Matrix': function (m, b) {\n      // process matrix\n      return _sparseBackwardSubstitution(m, b);\n    },\n\n    'DenseMatrix, Array | Matrix': function (m, b) {\n      // process matrix\n      return _denseBackwardSubstitution(m, b);\n    },\n\n    'Array, Array | Matrix': function (a, b) {\n      // create dense matrix from array\n      var m = matrix(a);\n      // use matrix implementation\n      var r = _denseBackwardSubstitution(m, b);\n      // result\n      return r.valueOf();\n    }\n  });\n\n  var _denseBackwardSubstitution = function (m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    // column vector data\n    var bdata = b._data;\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // result\n    var x = [];\n    // arrays\n    var data = m._data;\n    // backward solve m * x = b, loop columns (backwards)\n    for (var j = columns - 1; j >= 0 ; j--) {\n      // b[j]\n      var bj = bdata[j][0] || 0;\n      // x[j]\n      var xj;\n      // backward substitution (outer product) avoids inner looping when bj == 0\n      if (!equalScalar(bj, 0)) {\n        // value @ [j, j]\n        var vjj = data[j][j];\n        // check vjj\n        if (equalScalar(vjj, 0)) {\n          // system cannot be solved\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        // calculate xj\n        xj = divideScalar(bj, vjj);        \n        // loop rows\n        for (var i = j - 1; i >= 0; i--) {\n          // update copy of b\n          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];\n        }\n      }\n      else {\n        // zero value @ j\n        xj = 0;\n      }\n      // update x\n      x[j] = [xj];\n    }\n    // return column vector\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  };\n  \n  var _sparseBackwardSubstitution = function (m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    // column vector data\n    var bdata = b._data;\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // vars\n    var i, k;\n    // result\n    var x = [];\n    // backward solve m * x = b, loop columns (backwards)\n    for (var j = columns - 1; j >= 0 ; j--) {\n      // b[j]\n      var bj = bdata[j][0] || 0;\n      // backward substitution (outer product) avoids inner looping when bj == 0\n      if (!equalScalar(bj, 0)) {\n        // value @ [j, j]\n        var vjj = 0;\n        // upper triangular matrix values & index (column j)\n        var jvalues = [];\n        var jindex = [];\n        // first & last indeces in column\n        var f = ptr[j];\n        var l = ptr[j + 1];\n        // values in column, find value @ [j, j], loop backwards\n        for (k = l - 1; k >= f; k--) {\n          // row\n          i = index[k];\n          // check row\n          if (i === j) {\n            // update vjj\n            vjj = values[k];\n          }\n          else if (i < j) {\n            // store upper triangular\n            jvalues.push(values[k]);\n            jindex.push(i);\n          }\n        }\n        // at this point we must have a value @ [j, j]\n        if (equalScalar(vjj, 0)) {\n          // system cannot be solved, there is no value @ [j, j]\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        // calculate xj\n        var xj = divideScalar(bj, vjj);\n        // loop upper triangular\n        for (k = 0, l = jindex.length; k < l; k++) {\n          // row\n          i = jindex[k];\n          // update copy of b\n          bdata[i] = [subtract(bdata[i][0], multiplyScalar(xj, jvalues[k]))];\n        }\n        // update x\n        x[j] = [xj];\n      }\n      else {\n        // update x\n        x[j] = [0];\n      }\n    }\n    // return vector\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  };\n  \n  return usolve;\n}\n\nexports.name = 'usolve';\nexports.factory = factory;\n","'use strict';\n\nvar util = require('../../../../utils/index');\n\nvar string = util.string;\nvar array = util.array;\n\nvar isArray = Array.isArray;\n\nfunction factory (type) {\n  \n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\n   *\n   * @param {Matrix} m            An N x N matrix\n   * @param {Array | Matrix} b    A column vector\n   * @param {Boolean} copy        Return a copy of vector b\n   *\n   * @return {DenseMatrix}        Dense column vector b\n   */\n  var solveValidation = function (m, b, copy) {\n    // matrix size\n    var size = m.size();\n    // validate matrix dimensions\n    if (size.length !== 2)\n      throw new RangeError('Matrix must be two dimensional (size: ' + string.format(size) + ')');\n    // rows & columns\n    var rows = size[0];\n    var columns = size[1];    \n    // validate rows & columns\n    if (rows !== columns) \n      throw new RangeError('Matrix must be square (size: ' + string.format(size) + ')');\n    // vars\n    var data, i, bdata;\n    // check b is matrix\n    if (b && b.isMatrix === true) {\n      // matrix size\n      var msize = b.size();\n      // vector\n      if (msize.length === 1) {\n        // check vector length\n        if (msize[0] !== rows)\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        // create data array\n        data = [];\n        // matrix data (DenseMatrix)\n        bdata = b._data;\n        // loop b data\n        for (i = 0; i < rows; i++) {\n          // row array\n          data[i] = [bdata[i]];\n        }\n        // return Dense Matrix\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      }\n      // two dimensions\n      if (msize.length === 2) {\n        // array must be a column vector\n        if (msize[0] !== rows || msize[1] !== 1)\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        // check matrix type\n        if (b.isDenseMatrix === true) {\n          // check a copy is needed\n          if (copy) {\n            // create data array\n            data = [];\n            // matrix data (DenseMatrix)\n            bdata = b._data;\n            // loop b data\n            for (i = 0; i < rows; i++) {\n              // row array\n              data[i] = [bdata[i][0]];\n            }\n            // return Dense Matrix\n            return new DenseMatrix({\n              data: data,\n              size: [rows, 1],\n              datatype: b._datatype\n            });\n          }\n          // b is already a column vector\n          return b;\n        }\n        // create data array\n        data = [];\n        for (i = 0; i < rows; i++)\n          data[i] = [0];\n        // sparse matrix arrays\n        var values = b._values;\n        var index = b._index;\n        var ptr = b._ptr;\n        // loop values in column 0\n        for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n          // row\n          i = index[k];\n          // add to data\n          data[i][0] = values[k]; \n        }\n        // return Dense Matrix\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      }\n      // throw error\n      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n    }\n    // check b is array\n    if (isArray(b)) {\n      // size\n      var asize = array.size(b);\n      // check matrix dimensions, vector\n      if (asize.length === 1) {\n        // check vector length\n        if (asize[0] !== rows)\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');        \n        // create data array\n        data = [];\n        // loop b\n        for (i = 0; i < rows; i++) {\n          // row array\n          data[i] = [b[i]];\n        }\n        // return Dense Matrix\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n      if (asize.length === 2) {\n        // array must be a column vector\n        if (asize[0] !== rows || asize[1] !== 1)\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        // create data array\n        data = [];\n        // loop b data\n        for (i = 0; i < rows; i++) {\n          // row array\n          data[i] = [b[i][0]];\n        }\n        // return Dense Matrix\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n      // throw error\n      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');      \n    }\n  };\n  \n  return solveValidation;\n}\n\nexports.factory = factory;","'use strict';\n\nfunction factory (type, config, load) {\n\n  var cs_flip = load(require('./cs_flip'));\n  var cs_fkeep = load(require('./cs_fkeep'));\n  var cs_tdfs = load(require('./cs_tdfs'));\n  \n  var add       = load(require('../../arithmetic/add'));\n  var multiply  = load(require('../../arithmetic/multiply'));\n  var transpose = load(require('../../matrix/transpose'));\n\n  /**\n   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used \n   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n   * of a right looking sparse Cholesky factorization.\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   *\n   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n   * @param {Matrix} m        Sparse Matrix\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_amd = function (order, a) {\n    // check input parameters\n    if (!a || order <= 0 || order > 3)\n      return null;\n    // a matrix arrays\n    var asize = a._size;\n    // rows and columns\n    var m = asize[0];\n    var n = asize[1];    \n    // initialize vars\n    var lemax = 0;\n    // dense threshold\n    var dense = Math.max(16, 10 * Math.sqrt(n));\n    dense = Math.min(n - 2, dense);\n    // create target matrix C\n    var cm = _createTargetMatrix(order, a, m, n, dense);\n    // drop diagonal entries\n    cs_fkeep(cm, _diag, null);\n    // C matrix arrays\n    var cindex = cm._index;\n    var cptr = cm._ptr;\n\n    // number of nonzero elements in C\n    var cnz = cptr[n];\n    \n    // allocate result (n+1)\n    var P = [];\n    \n    // create workspace (8 * (n + 1))\n    var W = [];\n    var len = 0; // first n + 1 entries\n    var nv = n + 1; // next n + 1 entries\n    var next = 2 * (n + 1); // next n + 1 entries\n    var head = 3 * (n + 1);  // next n + 1 entries\n    var elen = 4 * (n + 1);  // next n + 1 entries\n    var degree = 5 * (n + 1);  // next n + 1 entries\n    var w = 6 * (n + 1);  // next n + 1 entries\n    var hhead = 7 * (n + 1);  // last n + 1 entries    \n\n    // use P as workspace for last\n    var last = P;\n    \n    // initialize quotient graph\n    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);\n    \n    // initialize degree lists\n    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);\n    \n    // minimum degree node\n    var mindeg = 0;\n    \n    // vars\n    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d;\n    \n    // while (selecting pivots) do\n    while (nel < n) {\n      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first\n      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow\n      // many nodes have been eliminated.\n      for (k = -1; mindeg < n && (k = W[head + mindeg]) == -1; mindeg++);      \n      if (W[next + k] != -1) \n        last[W[next + k]] = -1;\n      // remove k from degree list\n      W[head + mindeg] = W[next + k];\n      // elenk = |Ek|\n      var elenk = W[elen + k];\n      // # of nodes k represents\n      var nvk = W[nv + k];\n      // W[nv + k] nodes of A eliminated\n      nel += nvk;\n\n      // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is \n      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the\n      // degree lists. All elements e in Ek are absorved into element k.\n      var dk = 0;\n      // flag k as in Lk\n      W[nv + k] = -nvk;\n      var p = cptr[k];\n      // do in place if W[elen + k] == 0\n      var pk1 = (elenk === 0) ? p : cnz;\n      var pk2 = pk1;\n      for (k1 = 1; k1 <= elenk + 1; k1++) {\n        if (k1 > elenk) {\n          // search the nodes in k\n          e = k;\n          // list of nodes starts at cindex[pj]\n          pj = p;\n          // length of list of nodes in k\n          ln = W[len + k] - elenk;\n        }\n        else {\n          // search the nodes in e\n          e = cindex[p++];\n          pj = cptr[e];\n          // length of list of nodes in e\n          ln = W[len + e];\n        }\n        for (k2 = 1; k2 <= ln; k2++) {\n          i = cindex[pj++];\n          // check  node i dead, or seen\n          if ((nvi = W[nv + i]) <= 0) \n            continue;\n          // W[degree + Lk] += size of node i\n          dk += nvi;\n          // negate W[nv + i] to denote i in Lk\n          W[nv + i] = -nvi;\n          // place i in Lk\n          cindex[pk2++] = i;\n          if (W[next + i] != -1) \n            last[W[next + i]] = last[i];\n          // check we need to remove i from degree list\n          if (last[i] != -1) \n            W[next + last[i]] = W[next + i];\n          else\n            W[head + W[degree + i]] = W[next + i];\n        }\n        if (e != k) {\n          // absorb e into k\n          cptr[e] = cs_flip(k);\n          // e is now a dead element\n          W[w + e] = 0;\n        }\n      }\n      // cindex[cnz...nzmax] is free\n      if (elenk !== 0) \n        cnz = pk2;\n      // external degree of k - |Lk\\i|\n      W[degree + k] = dk;\n      // element k is in cindex[pk1..pk2-1]\n      cptr[k] = pk1;\n      W[len + k] = pk2 - pk1;\n      // k is now an element\n      W[elen + k] = -2;\n            \n      // Find set differences. The scan1 function now computes the set differences |Le \\ Lk| for all elements e. At the start of the\n      // scan, no entry in the w array is greater than or equal to mark.\n      \n      // clear w if necessary\n      mark = _wclear(mark, lemax, W, w, n);\n      // scan 1: find |Le\\Lk|\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check if W[elen + i] empty, skip it\n        if ((eln = W[elen + i]) <= 0) \n          continue;\n        // W[nv + i] was negated\n        nvi = -W[nv + i];\n        var wnvi = mark - nvi;\n        // scan Ei\n        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {\n          e = cindex[p];\n          if (W[w + e] >= mark) {\n            // decrement |Le\\Lk|\n            W[w + e] -= nvi;\n          }\n          else if (W[w + e] !== 0) {\n            // ensure e is a live element, 1st time e seen in scan 1\n            W[w + e] = W[degree + e] + wnvi;\n          }\n        }\n      }\n      \n      // degree update\n      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash\n      // function h(i) for all nodes in Lk.\n      \n      // scan2: degree update\n      for (pk = pk1; pk < pk2; pk++) {\n        // consider node i in Lk\n        i = cindex[pk];\n        p1 = cptr[i];\n        p2 = p1 + W[elen + i] - 1;\n        pn = p1;\n        // scan Ei\n        for (h = 0, d = 0, p = p1; p <= p2; p++) {\n          e = cindex[p];\n          // check e is an unabsorbed element\n          if (W[w + e] !== 0) {\n            // dext = |Le\\Lk|\n            var dext = W[w + e] - mark;\n            if (dext > 0) {\n              // sum up the set differences\n              d += dext;\n              // keep e in Ei\n              cindex[pn++] = e;\n              // compute the hash of node i\n              h += e;\n            }\n            else {\n              // aggressive absorb. e->k\n              cptr[e] = cs_flip(k);\n              // e is a dead element\n              W[w + e] = 0;\n            }\n          }\n        }\n        // W[elen + i] = |Ei|\n        W[elen + i] = pn - p1 + 1;\n        var p3 = pn;\n        var p4 = p1 + W[len + i];\n        // prune edges in Ai\n        for (p = p2 + 1; p < p4; p++) {\n          j = cindex[p];\n          // check node j dead or in Lk\n          var nvj = W[nv + j];\n          if (nvj <= 0) \n            continue;\n          // degree(i) += |j|\n          d += nvj;\n          // place j in node list of i\n          cindex[pn++] = j;\n          // compute hash for node i\n          h += j;\n        }\n        // check for mass elimination\n        if (d === 0) {\n          // absorb i into k\n          cptr[i] = cs_flip(k);\n          nvi = -W[nv + i];\n          // |Lk| -= |i|\n          dk -= nvi;\n          // |k| += W[nv + i]\n          nvk += nvi;\n          nel += nvi;\n          W[nv + i] = 0;\n          // node i is dead\n          W[elen + i] = -1;\n        }\n        else {\n          // update degree(i)\n          W[degree + i] = Math.min(W[degree + i], d);\n          // move first node to end\n          cindex[pn] = cindex[p3];\n          // move 1st el. to end of Ei\n          cindex[p3] = cindex[p1];\n          // add k as 1st element in of Ei\n          cindex[p1] = k;\n          // new len of adj. list of node i\n          W[len + i] = pn - p1 + 1;\n          // finalize hash of i\n          h = (h < 0 ? -h : h) % n;\n          // place i in hash bucket\n          W[next + i] = W[hhead + h];\n          W[hhead + h] = i;\n          // save hash of i in last[i]\n          last[i] = h;\n        }\n      }\n      // finalize |Lk|\n      W[degree + k] = dk;\n      lemax = Math.max(lemax, dk);\n      // clear w\n      mark = _wclear(mark + lemax, lemax, W, w, n);\n      \n      // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.\n      // If two nodes have identical adjacency lists, their hash functions wil be identical.\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check i is dead, skip it\n        if (W[nv + i] >= 0) \n          continue;\n        // scan hash bucket of node i\n        h = last[i];\n        i = W[hhead + h];\n        // hash bucket will be empty\n        W[hhead + h] = -1;\n        for (; i != -1 && W[next + i] != -1; i = W[next + i], mark++) {\n          ln = W[len + i];\n          eln = W[elen + i];\n          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) \n            W[w + cindex[p]] = mark;\n          var jlast = i;\n          // compare i with all j\n          for (j = W[next + i]; j != -1; ) {\n            var ok = W[len + j] === ln && W[elen + j] === eln;\n            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {\n              // compare i and j\n              if (W[w + cindex[p]] != mark) \n                ok = 0;\n            }\n            // check i and j are identical\n            if (ok) {\n              // absorb j into i\n              cptr[j] = cs_flip(i);\n              W[nv + i] += W[nv + j];\n              W[nv + j] = 0;\n              // node j is dead\n              W[elen + j] = -1;\n              // delete j from hash bucket\n              j = W[next + j];\n              W[next + jlast] = j;\n            }\n            else {\n              // j and i are different\n              jlast = j;\n              j = W[next + j];\n            }\n          }\n        }\n      }\n      \n      // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.\n      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.\n      for (p = pk1, pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check  i is dead, skip it\n        if ((nvi = -W[nv + i]) <= 0) \n          continue;\n        // restore W[nv + i]\n        W[nv + i] = nvi;\n        // compute external degree(i)\n        d = W[degree + i] + dk - nvi;\n        d = Math.min(d, n - nel - nvi);\n        if (W[head + d] != -1) \n          last[W[head + d]] = i;\n        // put i back in degree list\n        W[next + i] = W[head + d];\n        last[i] = -1;\n        W[head + d] = i;\n        // find new minimum degree\n        mindeg = Math.min(mindeg, d);\n        W[degree + i] = d;\n        // place i in Lk\n        cindex[p++] = i;\n      }\n      // # nodes absorbed into k\n      W[nv + k] = nvk;\n      // length of adj list of element k\n      if ((W[len + k] = p - pk1) === 0) {\n        // k is a root of the tree\n        cptr[k] = -1;\n        // k is now a dead element\n        W[w + k] = 0;\n      }\n      if (elenk !== 0) {\n        // free unused space in Lk\n        cnz = p;\n      }\n    }\n    \n    // Postordering. The elimination is complete, but no permutation has been computed. All that is left \n    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if\n    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation\n    // is computed. The tree is restored by unflipping all of ptr.\n    \n    // fix assembly tree\n    for (i = 0; i < n; i++) \n      cptr[i] = cs_flip(cptr[i]);\n    for (j = 0; j <= n; j++) \n      W[head + j] = -1;\n    // place unordered nodes in lists\n    for (j = n; j >= 0; j--) {\n      // skip if j is an element\n      if (W[nv + j] > 0)\n        continue;\n      // place j in list of its parent\n      W[next + j] = W[head + cptr[j]];\n      W[head + cptr[j]] = j;\n    }\n    // place elements in lists\n    for (e = n; e >= 0; e--) {\n      // skip unless e is an element\n      if (W[nv + e] <= 0)\n        continue;\n      if (cptr[e] != -1) {\n        // place e in list of its parent\n        W[next + e] = W[head + cptr[e]];\n        W[head + cptr[e]] = e;\n      }\n    }\n    // postorder the assembly tree\n    for (k = 0, i = 0; i <= n; i++) {\n      if (cptr[i] == -1) \n        k = cs_tdfs(i, k, W, head, next, P, w);\n    }\n    // remove last item in array\n    P.splice(P.length - 1, 1);\n    // return P\n    return P;\n  };\n  \n  /**\n   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\n   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n   *\n   * Order: 0\n   *   A natural ordering P=null matrix is returned.\n   *\n   * Order: 1\n   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n   *   P = M + M'\n   *\n   * Order: 2\n   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n   *   P = M' * M\n   * \n   * Order: 3\n   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n   *   P = M' * M\n   */\n  var _createTargetMatrix = function (order, a, m, n, dense) {\n    // compute A'\n    var at = transpose(a);\n\n    // check order = 1, matrix must be square\n    if (order === 1 && n === m) {\n      // C = A + A'\n      return add(a, at);\n    }\n    \n    // check order = 2, drop dense columns from M'\n    if (order == 2) {\n      // transpose arrays\n      var tindex = at._index;\n      var tptr = at._ptr;\n      // new column index\n      var p2 = 0;\n      // loop A' columns (rows)\n      for (var j = 0; j < m; j++) {\n        // column j of AT starts here\n        var p = tptr[j];\n        // new column j starts here\n        tptr[j] = p2;\n        // skip dense col j\n        if (tptr[j + 1] - p > dense) \n          continue;\n        // map rows in column j of A\n        for (var p1 = tptr[j + 1]; p < p1; p++) \n          tindex[p2++] = tindex[p];\n      }\n      // finalize AT\n      tptr[m] = p2;\n      // recreate A from new transpose matrix\n      a = transpose(at);\n      // use A' * A\n      return multiply(at, a);\n    }\n    \n    // use A' * A, square or rectangular matrix\n    return multiply(at, a);\n  };\n\n  /**\n   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:\n   *\n   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).\n   */\n  var _initializeQuotientGraph = function (n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {\n    // Initialize quotient graph\n    for (var k = 0; k < n; k++) \n      W[len + k] = cptr[k + 1] - cptr[k];\n    W[len + n] = 0;\n    // initialize workspace\n    for (var i = 0; i <= n; i++) {\n      // degree list i is empty\n      W[head + i] = -1;\n      last[i] = -1;\n      W[next + i] = -1;\n      // hash list i is empty\n      W[hhead + i] = -1;\n      // node i is just one node\n      W[nv + i] = 1;\n      // node i is alive\n      W[w + i] = 1;\n      // Ek of node i is empty\n      W[elen + i] = 0;\n      // degree of node i\n      W[degree + i] = W[len + i];\n    }\n    // clear w\n    var mark = _wclear(0, 0, W, w, n);\n    // n is a dead element\n    W[elen + n] = -2;\n    // n is a root of assembly tree\n    cptr[n] = -1;\n    // n is a dead element\n    W[w + n] = 0;\n    // return mark\n    return mark;\n  };\n\n  /**\n   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with \n   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\n   * output permutation p.\n   */\n  var _initializeDegreeLists = function (n, cptr, W, degree, elen, w, dense, nv, head, last, next) {\n    // result\n    var nel = 0;\n    // loop columns\n    for (var i = 0; i < n; i++) {\n      // degree @ i\n      var d = W[degree + i];\n      // check node i is empty\n      if (d === 0) {\n        // element i is dead\n        W[elen + i] = -2;\n        nel++;\n        // i is a root of assembly tree\n        cptr[i] = -1;\n        W[w + i] = 0;\n      }\n      else if (d > dense) {\n        // absorb i into element n\n        W[nv + i] = 0;\n        // node i is dead\n        W[elen + i] = -1;\n        nel++;\n        cptr[i] = cs_flip(n);\n        W[nv + n]++;\n      }\n      else {\n        var h = W[head + d];\n        if (h != -1)\n          last[h] = i;\n        // put node i in degree list d\n        W[next + i] = W[head + d];\n        W[head + d] = i;\n      }\n    }\n    return nel;\n  };\n\n  var _wclear = function(mark, lemax, W, w, n) {\n    if (mark < 2 || (mark + lemax < 0)) {\n      for (var k = 0; k < n; k++) {\n        if (W[w + k] !== 0)\n          W[w + k] = 1;\n      }\n      mark = 2 ;\n    }\n    // at this point, W [0..n-1] < mark holds\n    return mark;\n  };\n  \n  var _diag = function (i, j) { \n    return i != j;\n  };\n  \n  return cs_amd;\n}\n\nexports.name = 'cs_amd';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load) {\n\n  var transpose = load(require('../../matrix/transpose'));\n  \n  var cs_leaf = load(require('./cs_leaf'));\n\n  /**\n   * Computes the column counts using the upper triangular part of A.\n   * It transposes A internally, none of the input parameters are modified.\n   *\n   * @param {Matrix} a           The sparse matrix A\n   *\n   * @param {Matrix} ata         Count the columns of A'A instead\n   *\n   * @return                     An array of size n of the column counts or null on error\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_counts = function (a, parent, post, ata) {\n    // check inputs\n    if (!a || !parent || !post) \n      return null;\n    // a matrix arrays\n    var asize = a._size;\n    // rows and columns\n    var m = asize[0];\n    var n = asize[1];   \n    // variables\n    var i, j, k,  J,  p, p0, p1;\n    \n    // workspace size\n    var s = 4 * n + (ata ? (n + m + 1) : 0);\n    // allocate workspace\n    var w = []; // (s)\n    var ancestor = 0; // first n entries\n    var maxfirst = n; // next n entries\n    var prevleaf = 2 * n; // next n entries\n    var first = 3 * n; // next n entries\n    var head = 4 * n; // next n + 1 entries (used when ata is true)\n    var next = 5 * n + 1; // last entries in workspace\n    // clear workspace w[0..s-1]\n    for (k = 0; k < s; k++) \n      w[k] = -1;\n    \n    // allocate result\n    var colcount = []; // (n);\n    \n    // AT = A'\n    var at = transpose(a);\n    // at arrays\n    var tindex = at._index;\n    var tptr = at._ptr;\n\n    // find w[first + j]\n    for (k = 0; k < n; k++) {\n      j = post[k];\n      // colcount[j]=1 if j is a leaf\n      colcount[j] = (w[first + j] == -1) ? 1 : 0;\n      for (; j != -1 && w[first + j] == -1; j = parent[j]) \n        w[first + j] = k;\n    }\n\n    // initialize ata if needed\n    if (ata) {\n      // invert post\n      for (k = 0; k < n; k++) \n        w[post[k]] = k;\n      // loop rows (columns in AT)\n      for (i = 0; i < m; i++) {\n        // values in column i of AT\n        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) \n          k = Math.min(k, w[tindex[p]]);\n        // place row i in linked list k\n        w[next + i] = w[head + k];\n        w[head + k] = i;\n      }\n    }\n    \n    // each node in its own set\n    for (i = 0; i < n; i++) \n      w[ancestor + i] = i;\n    \n    for (k = 0; k < n; k++) {\n      // j is the kth node in postordered etree\n      j = post[k];\n      // check j is not a root\n      if (parent[j] != -1) \n        colcount[parent[j]]--;\n      \n      // J=j for LL'=A case\n      for (J = (ata ? w[head + k] : j); J != -1; J = (ata ? w[next + J] : -1)) {\n        for (p = tptr[J]; p < tptr[J+1]; p++) {\n          i = tindex[p];\n          var r = cs_leaf(i, j, w, first, maxfirst, prevleaf, ancestor);\n          // check A(i,j) is in skeleton\n          if (r.jleaf >= 1) \n            colcount[j]++;\n          // check account for overlap in q\n          if (r.jleaf == 2) \n            colcount[r.q]--;\n        }\n      }\n      if (parent[j] != -1) \n        w[ancestor + j] = parent[j];\n    }\n    // sum up colcount's of each child\n    for (j = 0; j < n; j++) {\n      if (parent[j] != -1) \n        colcount[parent[j]] += colcount[j];\n    }\n    return colcount;\n  };\n\n  return cs_counts;\n}\n\nexports.name = 'cs_counts';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load) {\n\n  var cs_marked = load(require('./cs_marked'));\n  var cs_mark   = load(require('./cs_mark'));\n  var cs_unflip = load(require('./cs_unflip'));\n\n  /**\n   * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting\n   * at nodes in B (see cs_reach()).\n   *\n   * @param {Number}  j               The starting node for the DFS algorithm\n   * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored\n   * @param {Number}  top             Start index in stack xi[top..n-1]\n   * @param {Number}  k               The kth column in B\n   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n   *\n   * @return {Number}                 New value of top\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_dfs = function (j, g, top, xi, pinv) {\n    // g arrays\n    var index = g._index;\n    var ptr = g._ptr;\n    var size = g._size;\n    // columns\n    var n = size[1];\n    // vars\n    var i, p, p2;\n    // initialize head\n    var head = 0;\n    // initialize the recursion stack\n    xi[0] = j;\n    // loop\n    while (head >= 0) {\n      // get j from the top of the recursion stack\n      j = xi[head];\n      // apply permutation vector\n      var jnew = pinv ? pinv[j] : j;\n      // check node j is marked\n      if (!cs_marked(ptr, j)) {\n        // mark node j as visited\n        cs_mark(ptr, j);\n        // update stack (last n entries in xi)\n        xi[n + head] = jnew < 0 ? 0 : cs_unflip(ptr[jnew]);\n      }\n      // node j done if no unvisited neighbors\n      var done = 1;\n      // examine all neighbors of j, stack (last n entries in xi)\n      for (p = xi[n + head], p2 = jnew < 0 ? 0 : cs_unflip(ptr[jnew+1]); p < p2; p++) {\n        // consider neighbor node i\n        i = index[p];\n        // check we have visited node i, skip it\n        if (cs_marked(ptr, i)) \n          continue;\n        // pause depth-first search of node j, update stack (last n entries in xi)\n        xi[n + head] = p;\n        // start dfs at node i\n        xi[++head] = i;\n        // node j is not done\n        done = 0;\n        // break, to start dfs(i)\n        break;\n      }\n      // check depth-first search at node j is done\n      if (done) {\n        // remove j from the recursion stack\n        head--;\n        // and place in the output stack\n        xi[--top] = j;\n      }\n    }\n    return top;    \n  };\n\n  return cs_dfs;\n}\n\nexports.name = 'cs_dfs';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory () {\n\n  /**\n   * Computes the elimination tree of Matrix A (using triu(A)) or the \n   * elimination tree of A'A without forming A'A.\n   *\n   * @param {Matrix}  a               The A Matrix\n   * @param {boolean} ata             A value of true the function computes the etree of A'A\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_etree = function (a, ata) {\n    // check inputs\n    if (!a)\n      return null;\n    // a arrays\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    // rows & columns\n    var m = asize[0];\n    var n = asize[1];\n    \n    // allocate result\n    var parent = []; // (n)\n    \n    // allocate workspace\n    var w = []; // (n + (ata ? m : 0))\n    var ancestor = 0; // first n entries in w\n    var prev = n; // last m entries (ata = true)\n    \n    var i, inext;\n    \n    // check we are calculating A'A\n    if (ata) {\n      // initialize workspace\n      for (i = 0; i < m; i++) \n        w[prev + i] = -1;\n    }\n    // loop columns\n    for (var k = 0; k < n; k++) {\n      // node k has no parent yet\n      parent[k] = -1;\n      // nor does k have an ancestor\n      w[ancestor + k] = -1;\n      // values in column k\n      for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {\n        // row\n        var r = aindex[p];\n        // node\n        i = ata ? (w[prev + r]) : r;\n        // traverse from i to k \n        for (; i != -1 && i < k; i = inext) {\n          // inext = ancestor of i\n          inext = w[ancestor + i];\n          // path compression\n          w[ancestor + i] = k;\n          // check no anc., parent is k\n          if (inext == -1) \n            parent[i] = k;\n        }\n        if (ata) \n          w[prev + r] = k;\n      }\n    }\n    return parent;\n  };\n\n  return cs_etree;\n}\n\nexports.name = 'cs_etree';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory () {\n\n  /**\n   * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise\n   *\n   * @param {Matrix}   a              The sparse matrix\n   * @param {function} callback       The callback function, function will be invoked with the following args:\n   *                                    - The entry row\n   *                                    - The entry column\n   *                                    - The entry value\n   *                                    - The state parameter\n   * @param {any}      other          The state\n   *\n   * @return                          The number of nonzero elements in the matrix\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_fkeep = function (a, callback, other) {\n    // a arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    // columns\n    var n = asize[1];\n    // nonzero items\n    var nz = 0;\n    // loop columns\n    for (var j = 0; j < n; j++) {\n      // get current location of col j\n      var p = aptr[j];\n      // record new location of col j\n      aptr[j] = nz;\n      for (; p < aptr[j+1]; p++) {\n        // check we need to keep this item\n        if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {\n          // keep A(i,j)\n          aindex[nz] = aindex[p];\n          // check we need to process values (pattern only)\n          if (avalues) \n            avalues[nz] = avalues[p];\n          // increment nonzero items\n          nz++;\n        }\n      }\n    }\n    // finalize A\n    aptr[n] = nz;\n    // trim arrays\n    aindex.splice(nz, aindex.length - nz);\n    // check we need to process values (pattern only)\n    if (avalues)\n      avalues.splice(nz, avalues.length - nz);    \n    // return number of nonzero items\n    return (nz);\n  };\n  \n  return cs_fkeep;\n}\n\nexports.name = 'cs_fkeep';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory () {\n\n  /**\n   * This function \"flips\" its input about the integer -1.\n   *\n   * @param {Number}  i               The value to flip\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_flip = function (i) {\n    // flip the value\n    return -i - 2;\n  };\n\n  return cs_flip;\n}\n\nexports.name = 'cs_flip';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory () {\n\n  /**\n   * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.\n   *\n   * @param {Array} p           The permutation vector of length n. null value denotes identity\n   * @param {Array} b           The input vector\n   *\n   * @return {Array}            The output vector x = P'b\n   */\n  var cs_ipvec = function (p, b, n) {\n    // vars \n    var k;\n    var n = b.length;\n    var x = [];\n    // check permutation vector was provided, p = null denotes identity\n    if (p) {\n      // loop vector\n      for (k = 0; k < n; k++) {\n        // apply permutation\n        x[p[k]] = b[k];\n      }\n    }\n    else {\n      // loop vector\n      for (k = 0; k < n; k++) {\n        // x[i] = b[i]\n        x[k] = b[k];\n      }\n    }\n    return x;\n  };\n\n  return cs_ipvec;\n}\n\nexports.name = 'cs_ipvec';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory () {\n\n  /**\n   * This function determines if j is a leaf of the ith row subtree.\n   * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)\n   *\n   * @param {Number}  i               The ith row subtree\n   * @param {Number}  j               The node to test\n   * @param {Array}   w               The workspace array\n   * @param {Number}  first           The index offset within the workspace for the first array\n   * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array\n   * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array\n   * @param {Number}  ancestor        The index offset within the workspace for the ancestor array\n   *\n   * @return {Object}\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_leaf = function (i, j, w, first, maxfirst, prevleaf, ancestor) {\n    \n    var s, sparent, jprev;\n    \n    // our result\n    var jleaf = 0;\n    var q;\n    \n    // check j is a leaf\n    if (i <= j || w[first + j] <= w[maxfirst + i]) \n      return (-1);\n    // update max first[j] seen so far\n    w[maxfirst + i] = w[first + j];\n    // jprev = previous leaf of ith subtree\n    jprev = w[prevleaf + i];\n    w[prevleaf + i] = j;\n    \n    // check j is first or subsequent leaf\n    if (jprev === -1) {\n      // 1st leaf, q = root of ith subtree\n      jleaf = 1;\n      q = i;\n    }\n    else {\n      // update jleaf\n      jleaf = 2;\n      // q = least common ancester (jprev,j)\n      for (q = jprev; q != w[ancestor + q]; q = w[ancestor + q]);\n      for (s = jprev; s != q; s = sparent) {\n        // path compression\n        sparent = w[ancestor + s];\n        w[ancestor + s] = q;\n      }      \n    }\n    return {\n      jleaf: jleaf,\n      q: q\n    };\n  };\n\n  return cs_leaf;\n}\n\nexports.name = 'cs_leaf';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load) {\n\n  var abs = load(require('../../arithmetic/abs'));\n  var divideScalar = load(require('../../arithmetic/divideScalar'));\n  var multiply = load(require('../../arithmetic/multiply'));\n  \n  var larger = load(require('../../relational/larger'));\n  var largerEq = load(require('../../relational/largerEq'));\n  \n  var cs_spsolve = load(require('./cs_spsolve'));\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization\n   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L \n   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so\n   * L * U = A(p, q), where p is the inverse of pinv.\n   *\n   * @param {Matrix}  m               The A Matrix to factorize\n   * @param {Object}  s               The symbolic analysis from cs_sqr(). Provides the fill-reducing \n   *                                  column ordering q\n   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)\n   *\n   * @return {Number}                 The numeric LU factorization of A or null\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_lu = function (m, s, tol) {\n    // validate input\n    if (!m)\n      return null;\n    // m arrays\n    var size = m._size;\n    // columns\n    var n = size[1];\n    // symbolic analysis result\n    var q;\n    var lnz = 100;\n    var unz = 100;\n    // update symbolic analysis parameters\n    if (s) {\n      q = s.q;\n      lnz = s.lnz || lnz;\n      unz = s.unz || unz;\n    }\n    // L arrays\n    var lvalues = []; // (lnz)\n    var lindex = []; // (lnz);\n    var lptr = []; // (n + 1);\n    // L\n    var L = new SparseMatrix({\n      values: lvalues,\n      index: lindex,\n      ptr: lptr,\n      size: [n, n]\n    });\n    // U arrays\n    var uvalues = []; // (unz);\n    var uindex = []; // (unz);\n    var uptr = []; // (n + 1);\n    // U\n    var U = new SparseMatrix({\n      values: uvalues,\n      index: uindex,\n      ptr: uptr,\n      size: [n, n]\n    });\n    // inverse of permutation vector\n    var pinv = []; // (n);\n    // vars \n    var i, p;\n    // allocate arrays\n    var x = []; // (n);\n    var xi = []; // (2 * n);\n    // initialize variables\n    for (i = 0; i < n; i++) {\n      // clear workspace\n      x[i] = 0;\n      // no rows pivotal yet\n      pinv[i] = -1;\n      // no cols of L yet\n      lptr[i + 1] = 0;\n    }\n    // reset number of nonzero elements in L and U\n    lnz = 0;\n    unz = 0;\n    // compute L(:,k) and U(:,k)\n    for (var k = 0; k < n; k++) {\n      // update ptr\n      lptr[k] = lnz;\n      uptr[k] = unz;\n      // apply column permutations if needed\n      var col = q ? q[k] : k;\n      // solve triangular system, x = L\\A(:,col)\n      var top = cs_spsolve(L, m, col, xi, x, pinv, 1);\n      // find pivot\n      var ipiv = -1;\n      var a = -1;\n      // loop xi[] from top -> n\n      for (p = top; p < n; p++) {\n        // x[i] is nonzero\n        i = xi[p];\n        // check row i is not yet pivotal\n        if (pinv[i] < 0) {\n          // absolute value of x[i]          \n          var xabs = abs(x[i]);\n          // check absoulte value is greater than pivot value\n          if (larger(xabs, a)) {\n            // largest pivot candidate so far\n            a = xabs;\n            ipiv = i;\n          }\n        }\n        else {\n          // x(i) is the entry U(pinv[i],k)\n          uindex[unz] = pinv[i];\n          uvalues[unz++] = x[i];\n        }\n      }\n      // validate we found a valid pivot\n      if (ipiv == -1 || a <= 0) \n        return null;\n      // update actual pivot column, give preference to diagonal value\n      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol)))\n        ipiv = col;\n      // the chosen pivot\n      var pivot = x[ipiv];\n      // last entry in U(:,k) is U(k,k)\n      uindex[unz] = k;\n      uvalues[unz++] = pivot;\n      // ipiv is the kth pivot row\n      pinv[ipiv] = k;\n      // first entry in L(:,k) is L(k,k) = 1\n      lindex[lnz] = ipiv;\n      lvalues[lnz++] = 1;\n      // L(k+1:n,k) = x / pivot      \n      for (p = top; p < n; p++) {\n        // row\n        i = xi[p];\n        // check x(i) is an entry in L(:,k)\n        if (pinv[i] < 0) {\n          // save unpermuted row in L\n          lindex[lnz] = i;\n          // scale pivot column\n          lvalues[lnz++] = divideScalar(x[i], pivot);\n        }\n        // x[0..n-1] = 0 for next k\n        x[i] = 0;\n      }\n    }\n    // update ptr\n    lptr[n] = lnz;\n    uptr[n] = unz;\n    // fix row indices of L for final pinv\n    for (p = 0; p < lnz; p++) \n      lindex[p] = pinv[lindex[p]];\n    // trim arrays\n    lvalues.splice(lnz, lvalues.length - lnz);\n    lindex.splice(lnz, lindex.length - lnz);\n    uvalues.splice(unz, uvalues.length - unz);\n    uindex.splice(unz, uindex.length - unz);    \n    // return LU factor\n    return {\n      L: L,\n      U: U,\n      pinv: pinv\n    };\n  };\n\n  return cs_lu;\n}\n\nexports.name = 'cs_lu';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load) {\n\n  var cs_flip = load(require('./cs_flip'));\n\n  /**\n   * Marks the node at w[j]\n   *\n   * @param {Array}   w               The array\n   * @param {Number}  j               The array index\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_mark = function (w, j) {\n    // mark w[j]\n    w[j] = cs_flip(w [j]);\n  };\n\n  return cs_mark;\n}\n\nexports.name = 'cs_mark';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory () {\n\n  /**\n   * Checks if the node at w[j] is marked\n   *\n   * @param {Array}   w               The array\n   * @param {Number}  j               The array index\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_marked = function (w, j) {\n    // check node is marked\n    return w[j] < 0;\n  };\n\n  return cs_marked;\n}\n\nexports.name = 'cs_marked';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type) {\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Permutes a sparse matrix C = P * A * Q\n   *\n   * @param {Matrix}  a               The Matrix A\n   * @param {Array}   pinv            The row permutation vector\n   * @param {Array}   q               The column permutation vector\n   * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise\n   *\n   * @return {Matrix}                 C = P * A * Q, null on error\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_permute = function (a, pinv, q, values) {\n    // a arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // rows & columns\n    var m = asize[0];\n    var n = asize[1];\n    // c arrays\n    var cvalues = values && a._values ? [] : null;\n    var cindex = []; // (aptr[n]);\n    var cptr = []; // (n + 1);\n    // initialize vars\n    var nz = 0;\n    // loop columns    \n    for (var k = 0; k < n; k++) {\n      // column k of C is column q[k] of A\n      cptr[k] = nz;\n      // apply column permutation\n      var j = q ? (q[k]) : k;\n      // loop values in column j of A\n      for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {\n        // row i of A is row pinv[i] of C\n        var r = pinv ? pinv[aindex[t]] : aindex[t];\n        // index\n        cindex[nz] = r;\n        // check we need to populate values\n        if (cvalues) \n          cvalues[nz] = avalues[t];\n        // increment number of nonzero elements\n        nz++;\n      }\n    }\n    // finalize the last column of C\n    cptr[n] = nz;\n    // return C matrix\n    return new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [m, n],\n      datatype: adt\n    });\n  };\n\n  return cs_permute;\n}\n\nexports.name = 'cs_permute';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load) {\n\n  var cs_tdfs = load(require('./cs_tdfs'));\n\n  /**\n   * Post order a tree of forest\n   *\n   * @param {Array}   parent          The tree or forest\n   * @param {Number}  n               Number of columns\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_post = function (parent, n) {\n    // check inputs\n    if (!parent) \n      return null;\n    // vars \n    var k = 0;\n    var j;\n    // allocate result\n    var post = []; // (n);\n    // workspace, head: first n entries, next: next n entries, stack: last n entries\n    var w = []; // (3 * n);\n    var head = 0; \n    var next = n; \n    var stack = 2 * n;\n    // initialize workspace\n    for (j = 0; j < n; j++) {\n      // empty linked lists\n      w[head + j] = -1;\n    }\n    // traverse nodes in reverse order\n    for (j = n-1; j >= 0; j--) {\n      // check j is a root\n      if (parent[j] == -1) \n        continue;\n      // add j to list of its parent\n      w[next + j] = w[head + parent[j]];\n      w[head + parent[j]] = j;\n    }\n    // loop nodes\n    for (j = 0; j < n; j++) {\n      // skip j if it is not a root\n      if (parent[j] != -1) \n        continue;\n      // depth-first search\n      k = cs_tdfs(j, k, w, head, next, post, stack);\n    }\n    return post;\n  };\n\n  return cs_post;\n}\n\nexports.name = 'cs_post';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load) {\n\n  var cs_dfs = load(require('./cs_dfs'));\n  var cs_marked = load(require('./cs_marked'));\n  var cs_mark = load(require('./cs_mark'));\n\n  /**\n   * The cs_reach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1 \n   * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The\n   * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).\n   *\n   * @param {Matrix}  g               The G matrix\n   * @param {Matrix}  b               The B matrix\n   * @param {Number}  k               The kth column in B\n   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n   * @param {Array}   pinv            The inverse row permutation vector\n   *\n   * @return {Number}                 The index for the nonzero pattern\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_reach = function (g, b, k, xi, pinv) {\n    // g arrays\n    var gptr = g._ptr;\n    var gsize = g._size;\n    // b arrays\n    var bindex = b._index;\n    var bptr = b._ptr;\n    // columns\n    var n = gsize[1];\n    // vars\n    var p, p0, p1;\n    // initialize top\n    var top = n;\n    // loop column indeces in B\n    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {\n      // node i\n      var i = bindex[p];\n      // check node i is marked\n      if (!cs_marked(gptr, i)) {\n        // start a dfs at unmarked node i\n        top = cs_dfs(i, g, top, xi, pinv);\n      }\n    }\n    // loop columns from top -> n - 1\n    for (p = top; p < n; p++) {\n      // restore G\n      cs_mark(gptr, xi[p]);\n    }\n    return top;\n  };\n\n  return cs_reach;\n}\n\nexports.name = 'cs_reach';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load) {\n\n  var divideScalar = load(require('../../arithmetic/divideScalar'));\n  var multiply = load(require('../../arithmetic/multiply'));\n  var subtract = load(require('../../arithmetic/subtract'));\n\n  var cs_reach = load(require('./cs_reach'));\n\n  /**\n   * The function cs_spsolve() computes the solution to G * x = bk, where bk is the\n   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the\n   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U \n   * is upper triangular with the diagonal entry as the last entry in each column.\n   *\n   * @param {Matrix}  g               The G matrix\n   * @param {Matrix}  b               The B matrix\n   * @param {Number}  k               The kth column in B\n   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n   * @param {Array}   x               The soluton to the linear system G * x = b\n   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n   * @param {boolean} lo              The lower (true) upper triangular (false) flag\n   *\n   * @return {Number}                 The index for the nonzero pattern\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_spsolve = function (g, b, k, xi, x, pinv, lo) {\n    // g arrays\n    var gvalues = g._values;\n    var gindex = g._index;\n    var gptr = g._ptr;\n    var gsize = g._size;\n    // columns\n    var n = gsize[1];\n    // b arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    // vars\n    var p, p0, p1, q;\n    // xi[top..n-1] = cs_reach(B(:,k))\n    var top = cs_reach(g, b, k, xi, pinv);\n    // clear x\n    for (p = top; p < n; p++) \n      x[xi[p]] = 0;\n    // scatter b\n    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) \n      x[bindex[p]] = bvalues[p];\n    // loop columns\n    for (var px = top; px < n; px++) {\n      // x array index for px\n      var j = xi[px];\n      // apply permutation vector (U x = b), j maps to column J of G\n      var J = pinv ? pinv[j] : j;\n      // check column J is empty\n      if (J < 0)\n        continue;\n      // column value indeces in G, p0 <= p < p1\n      p0 = gptr[J];\n      p1 = gptr[J + 1];\n      // x(j) /= G(j,j)\n      x[j] = divideScalar(x[j], gvalues[lo ? p0 : (p1 - 1)]);\n      // first entry L(j,j)\n      p = lo ? (p0 + 1) : p0;\n      q = lo ? (p1) : (p1 - 1);\n      // loop\n      for ( ; p < q ; p++) {\n        // row\n        var i = gindex[p];\n        // x(i) -= G(i,j) * x(j)\n        x[i] = subtract(x[i], multiply(gvalues[p], x[j]));\n      }\n    }\n    // return top of stack\n    return top;\n  };\n  \n  return cs_spsolve;\n}\n\nexports.name = 'cs_spsolve';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load) {\n\n  var cs_amd = load(require('./cs_amd'));\n  var cs_permute = load(require('./cs_permute'));\n  var cs_etree = load(require('./cs_etree'));\n  var cs_post = load(require('./cs_post'));\n  var cs_counts = load(require('./cs_counts'));\n\n  /**\n   * Symbolic ordering and analysis for QR and LU decompositions.\n   *\n   * @param {Number}  order           The ordering strategy (see cs_amd for more details)\n   * @param {Matrix}  a               The A matrix\n   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or\n   *                                  symbolic ordering and analysis for LU decomposition (false)\n   *\n   * @return {Object}                 The Symbolic ordering and analysis for matrix A\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_sqr = function (order, a, qr) {\n    // a arrays\n    var aptr = a._ptr;\n    var asize = a._size;\n    // columns\n    var n = asize[1];\n    // vars\n    var k;\n    // symbolic analysis result\n    var s = {};    \n    // fill-reducing ordering\n    s.q = cs_amd(order, a);\n    // validate results\n    if (order && !s.q) \n      return null;\n    // QR symbolic analysis\n    if (qr) {\n      // apply permutations if needed\n      var c = order ? cs_permute(a, null, s.q, 0) : a;\n      // etree of C'*C, where C=A(:,q)\n      s.parent = cs_etree(c, 1);\n      // post order elimination tree\n      var post = cs_post (s.parent, n);\n      // col counts chol(C'*C)\n      s.cp = cs_counts(c, s.parent, post, 1);\n      // check we have everything needed to calculate number of nonzero elements\n      if (c && s.parent && s.cp && _vcount(c, s)) {\n        // calculate number of nonzero elements\n        for (s.unz = 0, k = 0; k < n; k++) \n          s.unz += s.cp[k];\n      }\n    }\n    else {\n      // for LU factorization only, guess nnz(L) and nnz(U)\n      s.unz = 4 * (aptr[n]) + n;\n      s.lnz = s.unz;\n    }\n    // return result S\n    return s;\n  };\n  \n  /**\n   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent\n   */\n  var _vcount = function (a, s) {\n    // a arrays\n    var aptr = a._ptr;\n    var aindex = a._index;\n    var asize = a._size;\n    // rows & columns\n    var m = asize[0];\n    var n = asize[1];\n    // initialize s arrays\n    s.pinv = []; // (m + n);\n    s.leftmost = []; // (m);\n    // vars\n    var parent = s.parent;\n    var pinv = s.pinv;\n    var leftmost = s.leftmost;\n    // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries\n    var w = []; // (m + 3 * n);\n    var next = 0;\n    var head = m;\n    var tail = m + n;\n    var nque = m + 2 * n;\n    // vars\n    var i, k, p, p0, p1;\n    // initialize w\n    for (k = 0; k < n; k++) {\n      // queue k is empty\n      w[head + k] = -1;\n      w[tail + k] = -1;\n      w[nque + k] = 0;\n    }\n    // initialize row arrays\n    for (i = 0; i < m; i++) \n      leftmost[i] = -1;\n    // loop columns backwards    \n    for (k = n - 1; k >= 0; k--) {\n      // values & index for column k\n      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {\n        // leftmost[i] = min(find(A(i,:)))\n        leftmost[aindex[p]] = k;\n      }\n    }\n    // scan rows in reverse order\n    for (i = m - 1; i >= 0; i--) {\n      // row i is not yet ordered\n      pinv[i] = -1;\n      k = leftmost[i];\n      // check row i is empty\n      if (k == -1) \n        continue;\n      // first row in queue k\n      if (w[nque + k]++ === 0) \n        w[tail + k] = i;\n      // put i at head of queue k\n      w[next + i] = w[head + k];\n      w[head + k] = i;\n    }\n    s.lnz = 0;\n    s.m2 = m;\n    // find row permutation and nnz(V)\n    for (k = 0; k < n; k++) {\n      // remove row i from queue k\n      i = w[head + k];\n      // count V(k,k) as nonzero\n      s.lnz++;\n      // add a fictitious row\n      if (i < 0) \n        i = s.m2++;\n      // associate row i with V(:,k)\n      pinv[i] = k;\n      // skip if V(k+1:m,k) is empty\n      if (--nque[k] <= 0) \n        continue;\n      // nque[k] is nnz (V(k+1:m,k))\n      s.lnz += w[nque + k];\n      // move all rows to parent of k\n      var pa = parent[k];\n      if (pa != -1) {\n        if (w[nque + pa] === 0) \n          w[tail + pa] = w[tail + k];\n        w[next + w[tail + k]] = w[head + pa];\n        w[head + pa] = w[next + i];\n        w[nque + pa] += w[nque + k];\n      }\n    }\n    for (i = 0; i < m; i++) {\n      if (pinv[i] < 0) \n        pinv[i] = k++;\n    }\n    return true;\n  };\n\n  return cs_sqr;\n}\n\nexports.name = 'cs_sqr';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory () {\n\n  /**\n   * Depth-first search and postorder of a tree rooted at node j\n   *\n   * @param {Number}  j               The tree node\n   * @param {Number}  k               \n   * @param {Array}   w               The workspace array\n   * @param {Number}  head            The index offset within the workspace for the head array\n   * @param {Number}  next            The index offset within the workspace for the next array\n   * @param {Array}   post            The post ordering array\n   * @param {Number}  stack           The index offset within the workspace for the stack array\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_tdfs = function (j, k, w, head, next, post, stack) {\n    // variables\n    var top = 0;\n    // place j on the stack\n    w[stack] = j;\n    // while (stack is not empty) \n    while (top >= 0) {\n      // p = top of stack\n      var p = w[stack + top];\n      // i = youngest child of p\n      var i = w[head + p];\n      if (i == -1) {\n        // p has no unordered children left\n        top--;\n        // node p is the kth postordered node\n        post[k++] = p;\n      }\n      else {\n        // remove i from children of p\n        w[head + p] = w[next + i];\n        // increment top\n        ++top;\n        // start dfs on child node i\n        w[stack + top] = i;\n      }\n    }\n    return k;\n  };\n\n  return cs_tdfs;\n}\n\nexports.name = 'cs_tdfs';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load) {\n\n  var cs_flip = load(require('./cs_flip'));\n  \n  /**\n   * Flips the value if it is negative of returns the same value otherwise.\n   *\n   * @param {Number}  i               The value to flip\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  var cs_unflip = function (i) {\n    // flip the value if it is negative\n    return i < 0 ? cs_flip(i) : i;\n  };\n\n  return cs_unflip;\n}\n\nexports.name = 'cs_unflip';\nexports.path = 'sparse';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the absolute value of a number. For matrices, the function is\n   * evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.abs(x)\n   *\n   * Examples:\n   *\n   *    math.abs(3.5);                // returns number 3.5\n   *    math.abs(-4.2);               // returns number 4.2\n   *\n   *    math.abs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]\n   *\n   * See also:\n   *\n   *    sign\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            A number or matrix for which to get the absolute value\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Absolute value of `x`\n   */\n  var abs = typed('abs', {\n    'number': Math.abs,\n\n    'Complex': function (x) {\n      return x.abs();\n    },\n\n    'BigNumber': function (x) {\n      return x.abs();\n    },\n\n    'Fraction': function (x) {\n      return x.abs();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since abs(0) = 0\n      return deepMap(x, abs, true);\n    },\n\n    'Unit': function(x) {\n      return x.abs();\n    }\n  });\n\n  abs.toTex = {1: '\\\\left|${args[0]}\\\\right|'};\n\n  return abs;\n}\n\nexports.name = 'abs';\nexports.factory = factory;\n","'use strict';\n\nvar extend = require('../../utils/object').extend;\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n  var latex = require('../../utils/latex.js');\n  \n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Add two or more values, `x + y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.add(x, y)\n   *    math.add(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.add(2, 3);               // returns number 5\n   *    math.add(2, 3, 4);            // returns number 9\n   *\n   *    var a = math.complex(2, 3);\n   *    var b = math.complex(-4, 1);\n   *    math.add(a, b);               // returns Complex -2 + 4i\n   *\n   *    math.add([1, 2, 3], 4);       // returns Array [5, 6, 7]\n   *\n   *    var c = math.unit('5 cm');\n   *    var d = math.unit('2.1 mm');\n   *    math.add(c, d);               // returns Unit 52.1 mm\n   *\n   *    math.add(\"2.3\", \"4\");         // returns number 6.3\n   *\n   * See also:\n   *\n   *    subtract, sum\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\n   */\n  var add = typed('add', extend({\n    // we extend the signatures of addScalar with signatures dealing with matrices\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n      \n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm04(x, y, addScalar);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm01(y, x, addScalar, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm01(x, y, addScalar, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, addScalar);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n    \n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return add(matrix(x), matrix(y)).valueOf();\n    },\n    \n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return add(matrix(x), y);\n    },\n    \n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return add(x, matrix(y));\n    },\n    \n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm10(x, y, addScalar, false);\n          break;\n        default:\n          c = algorithm14(x, y, addScalar, false);\n          break;\n      }\n      return c;\n    },\n    \n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm10(y, x, addScalar, true);\n          break;\n        default:\n          c = algorithm14(y, x, addScalar, true);\n          break;\n      }\n      return c;\n    },\n    \n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, addScalar, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, addScalar, true).valueOf();\n    },\n\n    'any, any': addScalar,\n\n    'any, any, ...any': function (x, y, rest) {\n      var result = add(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = add(result, rest[i]);\n      }\n\n      return result;\n    }\n  }, addScalar.signatures));\n\n  add.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['add'] + '${args[1]}\\\\right)'\n  };\n  \n  return add;\n}\n\nexports.name = 'add';\nexports.factory = factory;\n","'use strict';\n\nfunction factory(type, config, load, typed) {\n\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`\n   * @private\n   */\n  var add = typed('add', {\n\n    'number, number': function (x, y) {\n      return x + y;\n    },\n\n    'Complex, Complex': function (x, y) {\n      return x.add(y);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.plus(y);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.add(y);\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (x.value == null) throw new Error('Parameter x contains a unit with undefined value');\n      if (y.value == null) throw new Error('Parameter y contains a unit with undefined value');\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n\n      var res = x.clone();\n      res.value = add(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    }\n  });\n\n  return add;\n}\n\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var unaryMinus = load(require('./unaryMinus'));\n  var isNegative = load(require('../utils/isNegative'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Calculate the cubic root of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cbrt(x)\n   *    math.cbrt(x, allRoots)\n   *\n   * Examples:\n   *\n   *    math.cbrt(27);                  // returns 3\n   *    math.cube(3);                   // returns 27\n   *    math.cbrt(-64);                 // returns -4\n   *    math.cbrt(math.unit('27 m^3')); // returns Unit 3 m\n   *    math.cbrt([27, 64, 125]);       // returns [3, 4, 5]\n   *\n   *    var x = math.complex('8i');\n   *    math.cbrt(x);                   // returns Complex 1.7320508075689 + i\n   *    math.cbrt(x, true);             // returns Matrix [\n   *                                    //    1.7320508075689 + i\n   *                                    //   -1.7320508075689 + i\n   *                                    //   -2i\n   *                                    // ]\n   *\n   * See also:\n   *\n   *    square, sqrt, cube\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x\n   *            Value for which to calculate the cubic root.\n   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n   *            when `x` is a number or complex number. If true, all complex\n   *            roots are returned, if false (default) the principal root is\n   *            returned.\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}\n   *            Returns the cubic root of `x`\n   */\n  var cbrt = typed('cbrt', {\n    'number': _cbrtNumber,\n    // note: signature 'number, boolean' is also supported,\n    //       created by typed as it knows how to convert number to Complex\n\n    'Complex': _cbrtComplex,\n\n    'Complex, boolean': _cbrtComplex,\n\n    'BigNumber': function (x) {\n      return x.cbrt();\n    },\n\n    'Unit': _cbrtUnit,\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since cbrt(0) = 0\n      return deepMap(x, cbrt, true);\n    }\n  });\n\n  /**\n   * Calculate the cubic root for a complex number\n   * @param {Complex} x\n   * @param {boolean} [allRoots]   If true, the function will return an array\n   *                               with all three roots. If false or undefined,\n   *                               the principal root is returned.\n   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x\n   * @private\n   */\n  function _cbrtComplex(x, allRoots) {\n    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers\n\n    var arg_3 = x.arg() / 3;\n    var abs = x.abs();\n\n    // principal root:\n    var principal = new type.Complex(_cbrtNumber(abs), 0).mul(\n        new type.Complex(0, arg_3).exp());\n\n    if (allRoots) {\n      var all = [\n          principal,\n          new type.Complex(_cbrtNumber(abs), 0).mul(\n            new type.Complex(0, arg_3 + Math.PI * 2 / 3).exp()),\n          new type.Complex(_cbrtNumber(abs), 0).mul(\n            new type.Complex(0, arg_3 - Math.PI * 2 / 3).exp())\n      ];\n\n      return (config.matrix === 'Array') ? all : matrix(all);\n    }\n    else {\n      return principal;\n    }\n  }\n\n  /**\n   * Calculate the cubic root for a Unit\n   * @param {Unit} x\n   * @return {Unit} Returns the cubic root of x\n   * @private\n   */\n  function _cbrtUnit(x) {\n    if(x.value && x.value.isComplex) {\n      var result = x.clone();\n      result.value = 1.0;\n      result = result.pow(1.0/3);           // Compute the units\n      result.value = _cbrtComplex(x.value); // Compute the value\n      return result;\n    }\n    else {\n      var negate = isNegative(x.value);\n      if (negate) {\n        x.value = unaryMinus(x.value);\n      }\n\n      // TODO: create a helper function for this\n      var third;\n      if (x.value && x.value.isBigNumber) {\n        third = new type.BigNumber(1).div(3);\n      }\n      else if (x.value && x.value.isFraction) {\n        third = new type.Fraction(1, 3);\n      }\n      else {\n        third = 1/3;\n      }\n\n      var result = x.pow(third);\n\n      if (negate) {\n        result.value = unaryMinus(result.value);\n      }\n\n      return result;\n    }\n  }\n\n  cbrt.toTex = {1: '\\\\sqrt[3]{${args[0]}}'};\n\n  return cbrt;\n}\n\n/**\n * Calculate cbrt for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number | Complex} Returns the cubic root of x\n * @private\n */\nvar _cbrtNumber = Math.cbrt || function (x) {\n  if (x === 0) {\n    return x;\n  }\n\n  var negate = x < 0;\n  var result;\n  if (negate) {\n    x = -x;\n  }\n\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3);\n    // from http://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n    result = (x / (result * result) + (2 * result)) / 3;\n  } else {\n    result = x;\n  }\n\n  return negate ? -result : result;\n};\n\nexports.name = 'cbrt';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2);               // returns number 4\n   *    math.ceil(3.8);               // returns number 4\n   *    math.ceil(-4.2);              // returns number -4\n   *    math.ceil(-4.7);              // returns number -4\n   *\n   *    var c = math.complex(3.2, -2.7);\n   *    math.ceil(c);                 // returns Complex 4 - 2i\n   *\n   *    math.ceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  var ceil = typed('ceil', {\n    'number': Math.ceil,\n\n    'Complex': function (x) {\n      return x.ceil();\n    },\n\n    'BigNumber': function (x) {\n      return x.ceil();\n    },\n\n    'Fraction': function (x) {\n      return x.ceil();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, ceil, true);\n    }\n  });\n\n  ceil.toTex = {1: '\\\\left\\\\lceil${args[0]}\\\\right\\\\rceil'};\n\n  return ceil;\n}\n\nexports.name = 'ceil';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Compute the cube of a value, `x * x * x`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cube(x)\n   *\n   * Examples:\n   *\n   *    math.cube(2);            // returns number 8\n   *    math.pow(2, 3);          // returns number 8\n   *    math.cube(4);            // returns number 64\n   *    4 * 4 * 4;               // returns number 64\n   *\n   *    math.cube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]\n   *\n   * See also:\n   *\n   *    multiply, square, pow, cbrt\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x\n   */\n  var cube = typed('cube', {\n    'number': function (x) {\n      return x * x * x;\n    },\n\n    'Complex': function (x) {\n      return x.mul(x).mul(x); // Is faster than pow(x, 3)\n    },\n\n    'BigNumber': function (x) {\n      return x.times(x).times(x);\n    },\n\n    'Fraction': function (x) {\n      return x.pow(3); // Is faster than mul()mul()mul()\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since cube(0) = 0\n      return deepMap(x, cube, true);\n    },\n\n    'Unit': function(x) {\n      return x.pow(3);\n    }\n  });\n\n  cube.toTex = {1: '\\\\left(${args[0]}\\\\right)^3'};\n\n  return cube;\n}\n\nexports.name = 'cube';\nexports.factory = factory;\n","'use strict';\n\nvar extend = require('../../utils/object').extend;\n\nfunction factory (type, config, load, typed) {\n\n  var divideScalar = load(require('./divideScalar'));\n  var multiply     = load(require('./multiply'));\n  var inv          = load(require('../matrix/inv'));\n  var matrix       = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3);            // returns number 0.6666666666666666\n   *\n   *    var a = math.complex(5, 14);\n   *    var b = math.complex(4, 1);\n   *    math.divide(a, b);            // returns Complex 2 + 3i\n   *\n   *    var c = [[7, -6], [13, -4]];\n   *    var d = [[1, 2], [4, 3]];\n   *    math.divide(c, d);            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    var e = math.unit('18 km');\n   *    math.divide(e, 4.5);          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n  var divide = typed('divide', extend({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n\n    'Array | Matrix, Array | Matrix': function (x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // http://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // http://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n\n      // process storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, divideScalar, false);\n          break;\n        case 'dense':\n          c = algorithm14(x, y, divideScalar, false);\n          break;\n      }\n      return c;\n    },\n    \n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n\n    'any, Array | Matrix': function (x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n\n  divide.toTex = {2: '\\\\frac{${args[0]}}{${args[1]}}'};\n\n  return divide;\n}\n\nexports.name = 'divide';\nexports.factory = factory;\n","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var multiplyScalar = load(require('./multiplyScalar'));\n\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`\n   * @private\n   */\n  var divideScalar = typed('divide', {\n    'number, number': function (x, y) {\n      return x / y;\n    },\n\n    'Complex, Complex': function (x, y) {\n      return x.div(y);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.div(y);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.div(y);\n    },\n\n    'Unit, number | Fraction | BigNumber': function (x, y) {\n      var res = x.clone();\n      // TODO: move the divide function to Unit.js, it uses internals of Unit\n      res.value = divideScalar(((res.value === null) ? res._normalize(1) : res.value), y);\n      return res;\n    },\n\n    'number | Fraction | BigNumber, Unit': function (x, y) {\n      var res = y.pow(-1);\n      // TODO: move the divide function to Unit.js, it uses internals of Unit\n      res.value = multiplyScalar(((res.value === null) ? res._normalize(1) : res.value), x);\n      return res;\n    },\n\n    'Unit, Unit': function (x, y) {\n      return x.divide(y);\n    }\n\n  });\n\n  return divideScalar;\n}\n\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var divideScalar = load(require('./divideScalar'));\n  var latex = require('../../utils/latex');\n  \n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Divide two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotDivide(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotDivide(2, 4);   // returns 0.5\n   *\n   *    a = [[9, 5], [6, 1]];\n   *    b = [[3, 2], [5, 2]];\n   *\n   *    math.dotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]\n   *    math.divide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]\n   *\n   * See also:\n   *\n   *    divide, multiply, dotMultiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`\n   */\n  var dotDivide = typed('dotDivide', {\n    \n    'any, any': divideScalar,\n    \n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse ./ sparse\n              c = algorithm07(x, y, divideScalar, false);\n              break;\n            default:\n              // sparse ./ dense\n              c = algorithm02(y, x, divideScalar, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense ./ sparse\n              c = algorithm03(x, y, divideScalar, false);\n              break;\n            default:\n              // dense ./ dense\n              c = algorithm13(x, y, divideScalar);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return dotDivide(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return dotDivide(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return dotDivide(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, divideScalar, false);\n          break;\n        default:\n          c = algorithm14(x, y, divideScalar, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, divideScalar, true);\n          break;\n        default:\n          c = algorithm14(y, x, divideScalar, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, divideScalar, true).valueOf();\n    }\n  });\n\n  dotDivide.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['dotDivide'] + '${args[1]}\\\\right)'\n  };\n  \n  return dotDivide;\n}\n\nexports.name = 'dotDivide';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var multiplyScalar = load(require('./multiplyScalar'));\n  var latex = require('../../utils/latex');\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm09 = load(require('../../type/matrix/utils/algorithm09'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Multiply two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotMultiply(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotMultiply(2, 4); // returns 8\n   *\n   *    a = [[9, 5], [6, 1]];\n   *    b = [[3, 2], [5, 2]];\n   *\n   *    math.dotMultiply(a, b); // returns [[27, 10], [30, 2]]\n   *    math.multiply(a, b);    // returns [[52, 28], [23, 14]]\n   *\n   * See also:\n   *\n   *    multiply, divide, dotDivide\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`\n   */\n  var dotMultiply = typed('dotMultiply', {\n    \n    'any, any': multiplyScalar,\n    \n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse .* sparse\n              c = algorithm09(x, y, multiplyScalar, false);\n              break;\n            default:\n              // sparse .* dense\n              c = algorithm02(y, x, multiplyScalar, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense .* sparse\n              c = algorithm02(x, y, multiplyScalar, false);\n              break;\n            default:\n              // dense .* dense\n              c = algorithm13(x, y, multiplyScalar);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n    \n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return dotMultiply(matrix(x), matrix(y)).valueOf();\n    },\n    \n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return dotMultiply(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return dotMultiply(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, multiplyScalar, false);\n          break;\n        default:\n          c = algorithm14(x, y, multiplyScalar, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm11(y, x, multiplyScalar, true);\n          break;\n        default:\n          c = algorithm14(y, x, multiplyScalar, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n    }\n  });\n\n  dotMultiply.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['dotMultiply'] + '${args[1]}\\\\right)'\n  };\n  \n  return dotMultiply;\n}\n\nexports.name = 'dotMultiply';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var pow = load(require('./pow'));\n  var latex = require('../../utils/latex');\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Calculates the power of x to y element wise.\n   *\n   * Syntax:\n   *\n   *    math.dotPow(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotPow(2, 3);            // returns number 8\n   *\n   *    var a = [[1, 2], [4, 3]];\n   *    math.dotPow(a, 2);            // returns Array [[1, 4], [16, 9]]\n   *    math.pow(a, 2);               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    pow, sqrt, multiply\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`\n   */\n  var dotPow = typed('dotPow', {\n    \n    'any, any': pow,\n    \n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse .^ sparse\n              c = algorithm07(x, y, pow, false);\n              break;\n            default:\n              // sparse .^ dense\n              c = algorithm03(y, x, pow, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense .^ sparse\n              c = algorithm03(x, y, pow, false);\n              break;\n            default:\n              // dense .^ dense\n              c = algorithm13(x, y, pow);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return dotPow(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return dotPow(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return dotPow(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, dotPow, false);\n          break;\n        default:\n          c = algorithm14(x, y, dotPow, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, dotPow, true);\n          break;\n        default:\n          c = algorithm14(y, x, dotPow, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, dotPow, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, dotPow, true).valueOf();\n    }\n  });\n\n  dotPow.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['dotPow'] + '${args[1]}\\\\right)'\n  };\n  \n  return dotPow;\n}\n\nexports.name = 'dotPow';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the exponent of a value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.exp(x)\n   *\n   * Examples:\n   *\n   *    math.exp(2);                  // returns number 7.3890560989306495\n   *    math.pow(math.e, 2);          // returns number 7.3890560989306495\n   *    math.log(math.exp(2));        // returns number 2\n   *\n   *    math.exp([1, 2, 3]);\n   *    // returns Array [\n   *    //   2.718281828459045,\n   *    //   7.3890560989306495,\n   *    //   20.085536923187668\n   *    // ]\n   *\n   * See also:\n   *\n   *    log, pow\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate\n   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`\n   */\n  var exp = typed('exp', {\n    'number': Math.exp,\n\n    'Complex': function (x) {\n      return x.exp();\n    },\n\n    'BigNumber': function (x) {\n      return x.exp();\n    },\n\n    'Array | Matrix': function (x) {\n      // TODO: exp(sparse) should return a dense matrix since exp(0)==1\n      return deepMap(x, exp);\n    }\n  });\n\n  exp.toTex = {1: '\\\\exp\\\\left(${args[0]}\\\\right)'};\n\n  return exp;\n}\n\nexports.name = 'exp';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Round a value towards zero.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.fix(x)\n   *\n   * Examples:\n   *\n   *    math.fix(3.2);                // returns number 3\n   *    math.fix(3.8);                // returns number 3\n   *    math.fix(-4.2);               // returns number -4\n   *    math.fix(-4.7);               // returns number -4\n   *\n   *    var c = math.complex(3.2, -2.7);\n   *    math.fix(c);                  // returns Complex 3 - 2i\n   *\n   *    math.fix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]\n   *\n   * See also:\n   *\n   *    ceil, floor, round\n   *\n   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value\n   */\n  var fix = typed('fix', {\n    'number': function (x) {\n      return (x > 0) ? Math.floor(x) : Math.ceil(x);\n    },\n\n    'Complex': function (x) {\n      return new type.Complex(\n          (x.re > 0) ? Math.floor(x.re) : Math.ceil(x.re),\n          (x.im > 0) ? Math.floor(x.im) : Math.ceil(x.im)\n      );\n    },\n\n    'BigNumber': function (x) {\n      return x.isNegative() ? x.ceil() : x.floor();\n    },\n\n    'Fraction': function (x) {\n      return x.s < 0 ? x.ceil() : x.floor();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since fix(0) = 0\n      return deepMap(x, fix, true);\n    }\n  });\n\n  fix.toTex = {1: '\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)'};\n\n  return fix;\n}\n\nexports.name = 'fix';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Round a value towards minus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.floor(x)\n   *\n   * Examples:\n   *\n   *    math.floor(3.2);              // returns number 3\n   *    math.floor(3.8);              // returns number 3\n   *    math.floor(-4.2);             // returns number -5\n   *    math.floor(-4.7);             // returns number -5\n   *\n   *    var c = math.complex(3.2, -2.7);\n   *    math.floor(c);                // returns Complex 3 - 3i\n   *\n   *    math.floor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  var floor = typed('floor', {\n    'number': Math.floor,\n\n    'Complex': function (x) {\n      return x.floor();\n    },\n\n    'BigNumber': function (x) {\n      return x.floor();\n    },\n\n    'Fraction': function (x) {\n      return x.floor();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since floor(0) = 0\n      return deepMap(x, floor, true);\n    }\n  });\n\n  floor.toTex = {1: '\\\\left\\\\lfloor${args[0]}\\\\right\\\\rfloor'};\n\n  return floor;\n}\n\nexports.name = 'floor';\nexports.factory = factory;\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12);              // returns 4\n   *    math.gcd(-4, 6);              // returns 2\n   *    math.gcd(25, 15, -10);        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6]);   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n  var gcd = typed('gcd', {\n\n    'number, number': _gcd,\n\n    'BigNumber, BigNumber': _gcdBigNumber,\n\n    'Fraction, Fraction': function (x, y) {\n      return x.gcd(y);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm04(x, y, gcd);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm01(y, x, gcd, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm01(x, y, gcd, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, gcd);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return gcd(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return gcd(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return gcd(x, matrix(y));\n    },\n    \n    'Matrix, number | BigNumber': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm10(x, y, gcd, false);\n          break;\n        default:\n          c = algorithm14(x, y, gcd, false);\n          break;\n      }\n      return c;\n    },\n\n    'number | BigNumber, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm10(y, x, gcd, true);\n          break;\n        default:\n          c = algorithm14(y, x, gcd, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, gcd, false).valueOf();\n    },\n\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, gcd, true).valueOf();\n    },\n\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {\n      var res = gcd(a, b);\n      for (var i = 0; i < args.length; i++) {\n        res = gcd(res, args[i]);\n      }\n      return res;\n    }\n  });\n\n  gcd.toTex = '\\\\gcd\\\\left(${args}\\\\right)';\n\n  return gcd;\n\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    }\n\n    // http://en.wikipedia.org/wiki/Euclidean_algorithm\n    var zero = new type.BigNumber(0);\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n    return a.lt(zero) ? a.neg() : a;\n  }\n}\n\n/**\n * Calculate gcd for numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the greatest common denominator of a and b\n * @private\n */\nfunction _gcd(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function gcd must be integer numbers');\n  }\n\n  // http://en.wikipedia.org/wiki/Euclidean_algorithm\n  var r;\n  while (b != 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n  return (a < 0) ? -a : a;\n}\n\nexports.name = 'gcd';\nexports.factory = factory;\n","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var abs = load(require('./abs'));\n  var add = load(require('./addScalar'));\n  var divide = load(require('./divideScalar'));\n  var multiply = load(require('./multiplyScalar'));\n  var sqrt = load(require('./sqrt'));\n  var smaller = load(require('../relational/smaller'));\n  var isPositive = load(require('../utils/isPositive'));\n\n  /**\n   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\n   *\n   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n   *\n   * For matrix input, the hypotenusa is calculated for all values in the matrix.\n   *\n   * Syntax:\n   *\n   *     math.hypot(a, b, ...)\n   *     math.hypot([a, b, c, ...])\n   *\n   * Examples:\n   *\n   *     math.hypot(3, 4);      // 5\n   *     math.hypot(3, 4, 5);   // 7.0710678118654755\n   *     math.hypot([3, 4, 5]); // 7.0710678118654755\n   *     math.hypot(-2);        // 2\n   *\n   * See also:\n   *\n   *     abs, norm\n   *\n   * @param {... number | BigNumber} args\n   * @return {number | BigNumber} Returns the hypothenusa of the input values.\n   */\n  var hypot = typed('hypot', {\n    '... number | BigNumber': _hypot,\n\n    'Array': function (x) {\n      return hypot.apply(hypot, flatten(x));\n    },\n\n    'Matrix': function (x) {\n      return hypot.apply(hypot, flatten(x.toArray()));\n    }\n  });\n\n  /**\n   * Calculate the hypotenusa for an Array with values\n   * @param {Array.<number | BigNumber>} args\n   * @return {number | BigNumber} Returns the result\n   * @private\n   */\n  function _hypot (args) {\n    // code based on `hypot` from es6-shim:\n    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633\n    var result = 0;\n    var largest = 0;\n\n    for (var i = 0; i < args.length; i++) {\n      var value = abs(args[i]);\n      if (smaller(largest, value)) {\n        result = multiply(result, multiply(divide(largest, value), divide(largest, value)));\n        result = add(result, 1);\n        largest = value;\n      } else {\n        result = add(result, isPositive(value) ? multiply(divide(value, largest), divide(value, largest)) : value);\n      }\n    }\n\n    return multiply(largest, sqrt(result));\n  }\n\n  hypot.toTex = '\\\\hypot\\\\left(${args}\\\\right)';\n\n  return hypot;\n}\n\nexports.name = 'hypot';\nexports.factory = factory;\n","module.exports = [\n  require('./abs'),\n  require('./add'),\n  require('./addScalar'),\n  require('./cbrt'),\n  require('./ceil'),\n  require('./cube'),\n  require('./divide'),\n  require('./dotDivide'),\n  require('./dotMultiply'),\n  require('./dotPow'),\n  require('./exp'),\n  require('./fix'),\n  require('./floor'),\n  require('./gcd'),\n  require('./hypot'),\n  require('./lcm'),\n  require('./log'),\n  require('./log10'),\n  require('./mod'),\n  require('./multiply'),\n  require('./norm'),\n  require('./nthRoot'),\n  require('./pow'),\n  require('./round'),\n  require('./sign'),\n  require('./sqrt'),\n  require('./square'),\n  require('./subtract'),\n  require('./unaryMinus'),\n  require('./unaryPlus'),\n  require('./xgcd')\n];\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  \n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Calculate the least common multiple for two or more values or arrays.\n   *\n   * lcm is defined as:\n   *\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.lcm(a, b)\n   *    math.lcm(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.lcm(4, 6);               // returns 12\n   *    math.lcm(6, 21);              // returns 42\n   *    math.lcm(6, 21, 5);           // returns 210\n   *\n   *    math.lcm([4, 6], [6, 21]);    // returns [12, 42]\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\n   */\n  var lcm = typed('lcm', {\n    'number, number': _lcm,\n\n    'BigNumber, BigNumber': _lcmBigNumber,\n\n    'Fraction, Fraction': function (x, y) {\n\n      return x.lcm(y);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm06(x, y, lcm);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm02(y, x, lcm, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm02(x, y, lcm, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, lcm);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return lcm(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return lcm(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return lcm(x, matrix(y));\n    },\n\n    'Matrix, number | BigNumber': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, lcm, false);\n          break;\n        default:\n          c = algorithm14(x, y, lcm, false);\n          break;\n      }\n      return c;\n    },\n\n    'number | BigNumber, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm11(y, x, lcm, true);\n          break;\n        default:\n          c = algorithm14(y, x, lcm, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, lcm, false).valueOf();\n    },\n\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, lcm, true).valueOf();\n    },\n\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {\n      var res = lcm(a, b);\n      for (var i = 0; i < args.length; i++) {\n        res = lcm(res, args[i]);\n      }\n      return res;\n    }\n  });\n\n  lcm.toTex = undefined;  // use default template\n\n  return lcm;\n\n  /**\n   * Calculate lcm for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns the least common multiple of a and b\n   * @private\n   */\n  function _lcmBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function lcm must be integer numbers');\n    }\n\n    if (a.isZero() || b.isZero()) {\n      return new type.BigNumber(0);\n    }\n\n    // http://en.wikipedia.org/wiki/Euclidean_algorithm\n    // evaluate lcm here inline to reduce overhead\n    var prod = a.times(b);\n    while (!b.isZero()) {\n      var t = b;\n      b = a.mod(t);\n      a = t;\n    }\n    return prod.div(a).abs();\n  }\n}\n\n/**\n * Calculate lcm for two numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the least common multiple of a and b\n * @private\n */\nfunction _lcm (a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function lcm must be integer numbers');\n  }\n\n  if (a == 0 || b == 0) {\n    return 0;\n  }\n\n  // http://en.wikipedia.org/wiki/Euclidean_algorithm\n  // evaluate lcm here inline to reduce overhead\n  var t;\n  var prod = a * b;\n  while (b != 0) {\n    t = b;\n    b = a % t;\n    a = t;\n  }\n  return Math.abs(prod / a);\n}\n\nexports.name = 'lcm';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var divideScalar = load(require('./divideScalar'));\n\n  /**\n   * Calculate the logarithm of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log(x)\n   *    math.log(x, base)\n   *\n   * Examples:\n   *\n   *    math.log(3.5);                  // returns 1.252762968495368\n   *    math.exp(math.log(2.4));        // returns 2.4\n   *\n   *    math.pow(10, 4);                // returns 10000\n   *    math.log(10000, 10);            // returns 4\n   *    math.log(10000) / math.log(10); // returns 4\n   *\n   *    math.log(1024, 2);              // returns 10\n   *    math.pow(2, 10);                // returns 1024\n   *\n   * See also:\n   *\n   *    exp, log10\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @param {number | BigNumber | Complex} [base=e]\n   *            Optional base for the logarithm. If not provided, the natural\n   *            logarithm of `x` is calculated.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the logarithm of `x`\n   */\n  var log = typed('log', {\n    'number': function (x) {\n      if (x >= 0 || config.predictable) {\n        return Math.log(x);\n      }\n      else {\n        // negative value -> complex value computation\n        return new type.Complex(x, 0).log();\n      }\n    },\n\n    'Complex': function (x) {\n      return x.log();\n    },\n\n    'BigNumber': function (x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.ln();\n      }\n      else {\n        // downgrade to number, return Complex valued result\n        return new type.Complex(x.toNumber(), 0).log();\n      }\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, log);\n    },\n\n    'any, any': function (x, base) {\n      // calculate logarithm for a specified base, log(x, base)\n      return divideScalar(log(x), log(base));\n    }\n  });\n\n  log.toTex = {\n    1: '\\\\ln\\\\left(${args[0]}\\\\right)',\n    2: '\\\\log_{${args[1]}}\\\\left(${args[0]}\\\\right)'\n  };\n\n  return log;\n}\n\nexports.name = 'log';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log10(x)\n   *\n   * Examples:\n   *\n   *    math.log10(0.00001);            // returns -5\n   *    math.log10(10000);              // returns 4\n   *    math.log(10000) / math.log(10); // returns 4\n   *    math.pow(10, 4);                // returns 10000\n   *\n   * See also:\n   *\n   *    exp, log\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 10-base logarithm of `x`\n   */\n  var log10 = typed('log10', {\n    'number': function (x) {\n      if (x >= 0 || config.predictable) {\n        return _log10(x);\n      }\n      else {\n        // negative value -> complex value computation\n        return new type.Complex(x, 0).log().div(Math.LN10);\n      }\n    },\n\n    'Complex': function (x) {\n      return new type.Complex(x).log().div(Math.LN10);\n    },\n\n    'BigNumber': function (x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log();\n      }\n      else {\n        // downgrade to number, return Complex valued result\n        return new type.Complex(x.toNumber(), 0).log().div(Math.LN10);\n      }\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, log10);\n    }\n  });\n\n  log10.toTex = {1: '\\\\log_{10}\\\\left(${args[0]}\\\\right)'};\n\n  return log10;\n}\n\n/**\n * Calculate the 10-base logarithm of a number\n * @param {number} x\n * @return {number}\n * @private\n */\nvar _log10 = Math.log10 || function (x) {\n  return Math.log(x) / Math.LN10;\n};\n\nexports.name = 'log10';\nexports.factory = factory;\n\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var latex = require('../../utils/latex');\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See http://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3);                // returns 2\n   *    math.mod(11, 2);               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0;\n   *    }\n   *\n   *    isOdd(2);                      // returns false\n   *    isOdd(3);                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n  var mod = typed('mod', {\n\n    'number, number': _mod,\n\n    'BigNumber, BigNumber': function (x, y) {\n      return y.isZero() ? x : x.mod(y);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.mod(y);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // mod(sparse, sparse)\n              c = algorithm05(x, y, mod, false);\n              break;\n            default:\n              // mod(sparse, dense)\n              c = algorithm02(y, x, mod, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // mod(dense, sparse)\n              c = algorithm03(x, y, mod, false);\n              break;\n            default:\n              // mod(dense, dense)\n              c = algorithm13(x, y, mod);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n    \n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return mod(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return mod(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return mod(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, mod, false);\n          break;\n        default:\n          c = algorithm14(x, y, mod, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, mod, true);\n          break;\n        default:\n          c = algorithm14(y, x, mod, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, mod, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, mod, true).valueOf();\n    }\n  });\n\n  mod.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['mod'] + '${args[1]}\\\\right)'\n  };\n\n  return mod;\n\n  /**\n   * Calculate the modulus of two numbers\n   * @param {number} x\n   * @param {number} y\n   * @returns {number} res\n   * @private\n   */\n  function _mod(x, y) {\n    if (y > 0) {\n      // We don't use JavaScript's % operator here as this doesn't work\n      // correctly for x < 0 and x == 0\n      // see http://en.wikipedia.org/wiki/Modulo_operation\n      return x - y * Math.floor(x / y);\n    }\n    else if (y === 0) {\n      return x;\n    }\n    else { // y < 0\n      // TODO: implement mod for a negative divisor\n      throw new Error('Cannot calculate mod for a negative divisor');\n    }\n  }\n}\n\nexports.name = 'mod';\nexports.factory = factory;\n","'use strict';\n\nvar extend = require('../../utils/object').extend;\nvar array = require('../../utils/array');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n  var multiplyScalar = load(require('./multiplyScalar'));\n  var equalScalar = load(require('../relational/equalScalar'));\n\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  var DenseMatrix = type.DenseMatrix;\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2);        // returns number 20.8\n   *    math.multiply(2, 3, 4);       // returns number 24\n   *\n   *    var a = math.complex(2, 3);\n   *    var b = math.complex(4, 1);\n   *    math.multiply(a, b);          // returns Complex 5 + 14i\n   *\n   *    var c = [[1, 2], [4, 3]];\n   *    var d = [[1, 2, 3], [3, -4, 7]];\n   *    math.multiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    var e = math.unit('2.1 km');\n   *    math.multiply(3, e);          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n  var multiply = typed('multiply', extend({\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n\n    'Array, Array': function (x, y) {\n      // check dimensions\n      _validateMatrixDimensions(array.size(x), array.size(y));\n\n      // use dense matrix implementation\n      var m = multiply(matrix(x), matrix(y));\n      // return array or scalar\n      return (m && m.isMatrix === true) ? m.valueOf() : m;\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size();\n\n      // check dimensions\n      _validateMatrixDimensions(xsize, ysize);\n\n      // process dimensions\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        }\n        // Vector * Matrix\n        return _multiplyVectorMatrix(x, y);\n      }\n      // process y dimensions\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      }\n      // Matrix * Matrix\n      return _multiplyMatrixMatrix(x, y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use Matrix * Matrix implementation\n      return multiply(x, matrix(y));\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use Matrix * Matrix implementation\n      return multiply(matrix(x, y.storage()), y);\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      \n      // process storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, multiplyScalar, false);\n          break;\n        case 'dense':\n          c = algorithm14(x, y, multiplyScalar, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm11(y, x, multiplyScalar, true);\n          break;\n        case 'dense':\n          c = algorithm14(y, x, multiplyScalar, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n\n    'any, any': multiplyScalar,\n\n    'any, any, ...any': function (x, y, rest) {\n      var result = multiply(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = multiply(result, rest[i]);\n      }\n\n      return result;\n    }\n  }, multiplyScalar.signatures));\n\n  var _validateMatrixDimensions = function (size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n            break;\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n            break;\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n        break;\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n            break;\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n            break;\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n        break;\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n  var _multiplyVectorVector = function (a, b, n) {\n    // check empty vector\n    if (n === 0)\n      throw new Error('Cannot multiply two empty vectors');\n\n    // a dense\n    var adata = a._data;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n    \n    // result (do not initialize it with zero)\n    var c = mf(adata[0], bdata[0]);\n    // loop data\n    for (var i = 1; i < n; i++) {\n      // multiply and accumulate\n      c = af(c, mf(adata[i], bdata[i]));\n    }\n    return c;\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n  var _multiplyVectorMatrix = function (a, b) {\n    // process storage\n    switch (b.storage()) {\n      case 'dense':\n        return _multiplyVectorDenseMatrix(a, b);\n    }\n    throw new Error('Not implemented');\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n  var _multiplyVectorDenseMatrix = function (a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // rows & columns\n    var alength = asize[0];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix columns\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]);      \n      // loop vector\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n      c[j] = sum;\n    }\n\n    // return matrix\n    return new DenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n  var _multiplyMatrixVector = function (a, b) {\n    // process storage\n    switch (a.storage()) {\n      case 'dense':\n        return _multiplyDenseMatrixVector(a, b);\n      case 'sparse':\n        return _multiplySparseMatrixVector(a, b);\n    }\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n  var _multiplyMatrixMatrix = function (a, b) {\n    // process storage\n    switch (a.storage()) {\n      case 'dense':\n        // process storage\n        switch (b.storage()) {\n          case 'dense':\n            return _multiplyDenseMatrixDenseMatrix(a, b);\n          case 'sparse':\n            return _multiplyDenseMatrixSparseMatrix(a, b);\n        }\n        break;\n      case 'sparse':\n        // process storage\n        switch (b.storage()) {\n          case 'dense':\n            return _multiplySparseMatrixDenseMatrix(a, b);\n          case 'sparse':\n            return _multiplySparseMatrixSparseMatrix(a, b);\n        }\n        break;\n    }\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M) \n   */ \n  var _multiplyDenseMatrixVector = function (a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = asize[0];\n    var acolumns = asize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix a rows\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i];\n      // sum (do not initialize it with zero)\n      var sum = mf(row[0], bdata[0]);\n      // loop matrix a columns\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n      c[i] = sum;\n    }\n\n    // return matrix\n    return new DenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n  var _multiplyDenseMatrixDenseMatrix = function (a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n    \n    // result\n    var c = [];\n\n    // loop matrix a rows\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i];\n      // initialize row array\n      c[i] = [];\n      // loop matrix b columns\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]);\n        // loop matrix a columns\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n        c[i][j] = sum;\n      }\n    }\n\n    // return matrix\n    return new DenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n  var _multiplyDenseMatrixSparseMatrix = function (a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b sparse\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // validate b matrix\n    if (!bvalues)\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    // rows & columns\n    var arows = asize[0];\n    var bcolumns = bsize[1];\n    \n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = new SparseMatrix({\n      values : cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // indeces in column jb\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1];\n      // do not process column jb if no data exists\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0;\n        // loop a rows\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1;\n          // C[i, jb]\n          var cij;\n          // values in b column j\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb];\n            // check value has been initialized\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]);\n              // update mark\n              last = mark;\n            }\n            else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          }\n          // check column has been processed and value != 0\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1) \n   */\n  var _multiplySparseMatrixVector = function (a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // validate a matrix\n    if (!avalues)\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = a._size[0];\n    var brows = b._size[0];\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    \n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // workspace\n    var x = [];\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n\n    // update ptr\n    cptr[0] = 0;\n    // rows in b\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib];\n      // check b[ib] != 0, avoid loops\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka];\n          // check value exists in current j\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true;\n            // add i to pattern of C\n            cindex.push(ia);\n            // x(ia) = A\n            x[ia] = mf(vbi, avalues[ka]);\n          }\n          else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    }\n    // copy values from x to column jb of c\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p];\n      // copy value\n      cvalues[p] = x[ic];\n    }\n    // update ptr\n    cptr[1] = cindex.length;\n\n    // return sparse matrix\n    return new SparseMatrix({\n      values : cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n  var _multiplySparseMatrixDenseMatrix = function (a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // validate a matrix\n    if (!avalues)\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = new SparseMatrix({\n      values : cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // workspace\n    var x = [];\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // mark in workspace for current column\n      var mark = jb + 1;\n      // rows in jb\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb];\n        // check b[ib, jb] != 0, avoid loops\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n              // x(ia) = A\n              x[ia] = mf(vbij, avalues[ka]);\n            }\n            else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      }\n      // copy values from x to column jb of c\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p];\n        // copy value\n        cvalues[p] = x[ic];\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n  var _multiplySparseMatrixSparseMatrix = function (a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // b sparse\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype;\n    \n    // rows & columns\n    var arows = a._size[0];\n    var bcolumns = b._size[1];\n    // flag indicating both matrices (a & b) contain data\n    var values = avalues && bvalues;\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n    \n    // result\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = new SparseMatrix({\n      values : cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // workspace\n    var x = values ? [] : undefined;\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n    // variables\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib;\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // mark in workspace for current column\n      var mark = jb + 1;\n      // B values & index in j\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb];\n        // check we need to process values\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n              // x(ia) = A\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            }\n            else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        }\n        else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n            }\n          }\n        }\n      }\n      // check we need to process matrix values (pattern matrix)\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p];\n          // copy value\n          cvalues[p] = x[ic];\n        }\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n\n  multiply.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['multiply'] + '${args[1]}\\\\right)'\n  };\n\n  return multiply;\n}\n\nexports.name = 'multiply';\nexports.factory = factory;\n","'use strict';\n\nfunction factory(type, config, load, typed) {\n  \n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`\n   * @private\n   */\n  var multiplyScalar = typed('multiplyScalar', {\n\n    'number, number': function (x, y) {\n      return x * y;\n    },\n\n    'Complex, Complex': function (x, y) {\n      return x.mul(y);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.times(y);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.mul(y);\n    },\n\n    'number | Fraction | BigNumber | Complex, Unit': function (x, y) {\n      var res = y.clone();\n      res.value = (res.value === null) ? res._normalize(x) : multiplyScalar(res.value, x);\n      return res;\n    },\n\n    'Unit, number | Fraction | BigNumber | Complex': function (x, y) {\n      var res = x.clone();\n      res.value = (res.value === null) ? res._normalize(y) : multiplyScalar(res.value, y);\n      return res;\n    },\n\n    'Unit, Unit': function (x, y) {\n      return x.multiply(y);\n    }\n\n  });\n\n  return multiplyScalar;\n}\n\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  \n  var abs         = load(require('../arithmetic/abs'));\n  var add         = load(require('../arithmetic/add'));\n  var pow         = load(require('../arithmetic/pow'));\n  var sqrt        = load(require('../arithmetic/sqrt'));\n  var multiply    = load(require('../arithmetic/multiply'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var larger      = load(require('../relational/larger'));\n  var smaller     = load(require('../relational/smaller'));\n  var matrix      = load(require('../../type/matrix/function/matrix'));\n  var trace       = load(require('../matrix/trace'));\n  var transpose   = load(require('../matrix/transpose'));\n\n\n  /**\n   * Calculate the norm of a number, vector or matrix.\n   *\n   * The second parameter p is optional. If not provided, it defaults to 2.\n   *\n   * Syntax:\n   *\n   *    math.norm(x)\n   *    math.norm(x, p)\n   *\n   * Examples:\n   *\n   *    math.abs(-3.5);                         // returns 3.5\n   *    math.norm(-3.5);                        // returns 3.5\n   *\n   *    math.norm(math.complex(3, -4));         // returns 5\n   *\n   *    math.norm([1, 2, -3], Infinity);        // returns 3\n   *    math.norm([1, 2, -3], -Infinity);       // returns 1\n   *\n   *    math.norm([3, 4], 2);                   // returns 5\n   *\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n   *    math.norm([[1, 2], [3, 4]], 'inf');     // returns 7\n   *    math.norm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661\n   *\n   * See also:\n   *\n   *    abs, hypot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the norm\n   * @param  {number | BigNumber | string} [p=2]\n   *            Vector space.\n   *            Supported numbers include Infinity and -Infinity.\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n   * @return {number | BigNumber} the p-norm\n   */\n  var norm = typed('norm', {\n    'number': Math.abs,\n\n    'Complex': function (x) {\n      return x.abs();\n    },\n\n    'BigNumber': function (x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    \n    'boolean | null' : function (x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n\n    'Array': function (x) {\n      return _norm(matrix(x), 2);\n    },\n    \n    'Matrix': function (x) {\n      return _norm(x, 2);\n    },\n\n    'number | Complex | BigNumber | boolean | null, number | BigNumber | string': function (x) {\n      // ignore second parameter, TODO: remove the option of second parameter for these types\n      return norm(x);\n    },\n\n    'Array, number | BigNumber | string': function (x, p) {\n      return _norm(matrix(x), p);\n    },\n    \n    'Matrix, number | BigNumber | string': function (x, p) {\n      return _norm(x, p);\n    }\n  });\n\n  /**\n   * Calculate the norm for an array\n   * @param {Array} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _norm (x, p) {\n    // size\n    var sizeX = x.size();\n    \n    // check if it is a vector\n    if (sizeX.length == 1) {\n      // check p\n      if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n        // norm(x, Infinity) = max(abs(x))\n        var pinf = 0;\n        // skip zeros since abs(0) == 0\n        x.forEach(\n          function (value) {\n            var v = abs(value);\n            if (larger(v, pinf))\n              pinf = v;\n          },\n          true);\n        return pinf;\n      }\n      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n        // norm(x, -Infinity) = min(abs(x))\n        var ninf;\n        // skip zeros since abs(0) == 0\n        x.forEach(\n          function (value) {\n            var v = abs(value);\n            if (!ninf || smaller(v, ninf))\n              ninf = v;\n          },\n          true);\n        return ninf || 0;\n      }\n      if (p === 'fro') {\n        return _norm(x, 2);\n      }\n      if (typeof p === 'number' && !isNaN(p)) {\n        // check p != 0\n        if (!equalScalar(p, 0)) {\n          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n          var n = 0;\n          // skip zeros since abs(0) == 0\n          x.forEach(\n            function (value) {\n              n = add(pow(abs(value), p), n);\n            },\n            true);\n          return pow(n, 1 / p);\n        }\n        return Number.POSITIVE_INFINITY;\n      }\n      // invalid parameter value\n      throw new Error('Unsupported parameter value');\n    }\n    // MxN matrix\n    if (sizeX.length == 2) {\n      // check p\n      if (p === 1) {\n        // norm(x) = the largest column sum\n        var c = [];\n        // result\n        var maxc = 0;\n        // skip zeros since abs(0) == 0\n        x.forEach(\n          function (value, index) {\n            var j = index[1];\n            var cj = add(c[j] || 0, abs(value));\n            if (larger(cj, maxc))\n              maxc = cj;\n            c[j] = cj;\n          },\n          true);\n        return maxc;\n      }\n      if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n        // norm(x) = the largest row sum\n        var r = [];\n        // result\n        var maxr = 0;\n        // skip zeros since abs(0) == 0\n        x.forEach(\n          function (value, index) {\n            var i = index[0];\n            var ri = add(r[i] || 0, abs(value));\n            if (larger(ri, maxr))\n              maxr = ri;\n            r[i] = ri;\n          },\n          true);\n        return maxr;\n      }\n      if (p === 'fro') {\n        // norm(x) = sqrt(sum(diag(x'x)))\n        return sqrt(trace(multiply(transpose(x), x)));\n      }\n      if (p === 2) {\n        // not implemented\n        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');\n      }\n      // invalid parameter value\n      throw new Error('Unsupported parameter value');\n    }\n  }\n\n  norm.toTex = {\n    1: '\\\\left\\\\|${args[0]}\\\\right\\\\|',\n    2: undefined  // use default template\n  };\n\n  return norm;\n}\n\nexports.name = 'norm';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2);    // returns 3, as 3^2 == 9\n   *     math.sqrt(9);          // returns 3, as 3^2 == 9\n   *     math.nthRoot(64, 3);   // returns 4, as 4^3 == 64\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n  var nthRoot = typed('nthRoot', {\n    \n    'number': function (x) {\n      return _nthRoot(x, 2);\n    },\n    'number, number': _nthRoot,\n\n    'BigNumber': function (x) {\n      return _bigNthRoot(x, new type.BigNumber(2));\n    },\n    'Complex' : function(x) {\n      return _nthComplexRoot(x, 2);\n    }, \n    'Complex, number' : _nthComplexRoot,\n    'BigNumber, BigNumber': _bigNthRoot,\n\n    'Array | Matrix': function (x) {\n      return nthRoot(x, 2);\n    },\n    \n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // density must be one (no zeros in matrix)\n              if (y.density() === 1) {\n                // sparse + sparse\n                c = algorithm06(x, y, nthRoot);\n              }\n              else {\n                // throw exception\n                throw new Error('Root must be non-zero');\n              }\n              break;\n            default:\n              // sparse + dense\n              c = algorithm02(y, x, nthRoot, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // density must be one (no zeros in matrix)\n              if (y.density() === 1) {\n                // dense + sparse\n                c = algorithm01(x, y, nthRoot, false);\n              }\n              else {\n                // throw exception\n                throw new Error('Root must be non-zero');\n              }\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, nthRoot);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return nthRoot(x, matrix(y));\n    },\n    \n    'Matrix, number | BigNumber': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, nthRoot, false);\n          break;\n        default:\n          c = algorithm14(x, y, nthRoot, false);\n          break;\n      }\n      return c;\n    },\n\n    'number | BigNumber, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          // density must be one (no zeros in matrix)\n          if (y.density() === 1) {\n            // sparse - scalar\n            c = algorithm11(y, x, nthRoot, true);\n          }\n          else {\n            // throw exception\n            throw new Error('Root must be non-zero');\n          }\n          break;\n        default:\n          c = algorithm14(y, x, nthRoot, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), y).valueOf();\n    },\n\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return nthRoot(x, matrix(y)).valueOf();\n    }\n  });\n\n  nthRoot.toTex = {2: '\\\\sqrt[${args[1]}]{${args[0]}}'};\n\n  return nthRoot;\n\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * http://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n  function _bigNthRoot(a, root) {\n    var precision = type.BigNumber.precision;\n    var Big = type.BigNumber.clone({precision: precision + 2});\n    var zero = new type.BigNumber(0);\n\n    var one = new Big(1);\n    var inv = root.isNegative();\n    if (inv) {\n      root = root.neg();\n    }\n\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    }\n\n    // edge cases zero and infinity\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n\n    var x = a.abs().pow(one.div(root));\n    // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n    x = a.isNeg() ? x.neg() : x;\n    return new type.BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n}\n\n/**\n * Calculate the nth root of a, solve x^root == a\n * http://rosettacode.org/wiki/Nth_root#JavaScript\n * @param {number} a\n * @param {number} root\n * @private\n */\nfunction _nthRoot(a, root) {\n  var inv = root < 0;\n  if (inv) {\n    root = -root;\n  }\n\n  if (root === 0) {\n    throw new Error('Root must be non-zero');\n  }\n  if (a < 0 && (Math.abs(root) % 2 != 1)) {\n    throw new Error('Root must be odd when a is negative.');\n  }\n\n  // edge cases zero and infinity\n  if (a == 0) {\n    return inv ? Infinity : 0;\n  }\n  if (!isFinite(a)) {\n    return inv ? 0 : a;\n  }\n\n  var x = Math.pow(Math.abs(a), 1/root);\n  // If a < 0, we require that root is an odd integer,\n  // so (-1) ^ (1/root) = -1\n  x = a < 0 ? -x : x;\n  return inv ? 1 / x : x;\n\n  // Very nice algorithm, but fails with nthRoot(-2, 3).\n  // Newton's method has some well-known problems at times:\n  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\n  /*\n  var x = 1; // Initial guess\n  var xPrev = 1;\n  var i = 0;\n  var iMax = 10000;\n  do {\n    var delta = (a / Math.pow(x, root - 1) - x) / root;\n    xPrev = x;\n    x = x + delta;\n    i++;\n  }\n  while (xPrev !== x && i < iMax);\n\n  if (xPrev !== x) {\n    throw new Error('Function nthRoot failed to converge');\n  }\n\n  return inv ? 1 / x : x;\n  */\n}\n\n/**\n * Calculate the nth root of a Complex Number a using De Moviers Theorem.\n * @param  {Complex} a\n * @param  {number} root\n * @return {Array} array or n Complex Roots in Polar Form.\n */\nfunction _nthComplexRoot(a, root) {\n  if (root < 0) throw new Error('Root must be greater than zero');\n  if (root === 0) throw new Error('Root must be non-zero');\n  if (root % 1 !== 0) throw new Error('Root must be an integer');  \n  var arg = a.arg();\n  var abs = a.abs();\n  var roots = [];\n  var r = Math.pow(abs, 1/root);\n  for(var k = 0; k < root; k++) {\n    roots.push({r: r, phi: (arg + 2 * Math.PI * k)/root});\n  }\n  return roots;\n}\n\nexports.name = 'nthRoot';\nexports.factory = factory;\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar size = require('../../utils/array').size;\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n  var eye = load(require('../matrix/eye'));\n  var multiply = load(require('./multiply'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var fraction = load(require('../../type/fraction/function/fraction'));\n  var number = load(require('../../type/number'));\n\n  /**\n   * Calculates the power of x to y, `x ^ y`.\n   * Matrix exponentiation is supported for square matrices `x`, and positive\n   * integer exponents `y`.\n   *\n   * For cubic roots of negative numbers, the function returns the principal\n   * root by default. In order to let the function return the real root,\n   * math.js can be configured with `math.config({predictable: true})`.\n   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n   *\n   * Syntax:\n   *\n   *    math.pow(x, y)\n   *\n   * Examples:\n   *\n   *    math.pow(2, 3);               // returns number 8\n   *\n   *    var a = math.complex(2, 3);\n   *    math.pow(a, 2)                // returns Complex -5 + 12i\n   *\n   *    var b = [[1, 2], [4, 3]];\n   *    math.pow(b, 2);               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    multiply, sqrt, cbrt, nthRoot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex} y                   The exponent\n   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n   */\n  var pow = typed('pow', {\n    'number, number': _pow,\n\n    'Complex, Complex': function (x, y) {\n      return x.pow(y);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      if (y.isInteger() || x >= 0 || config.predictable) {\n        return x.pow(y);\n      }\n      else {\n        return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n      }\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      if (y.d !== 1) {\n        if (config.predictable) {\n          throw new Error('Function pow does not support non-integer exponents for fractions.');\n        }\n        else {\n          return _pow(x.valueOf(), y.valueOf());\n        }\n      }\n      else {\n        return x.pow(y);\n     }\n    },\n\n    'Array, number': _powArray,\n\n    'Array, BigNumber': function (x, y) {\n      return _powArray(x, y.toNumber());\n    },\n\n    'Matrix, number': _powMatrix,\n\n    'Matrix, BigNumber': function (x, y) {\n      return _powMatrix(x, y.toNumber());\n    },\n\n    'Unit, number': function (x, y) {\n      return x.pow(y);\n    }\n\n  });\n\n  /**\n   * Calculates the power of x to y, x^y, for two numbers.\n   * @param {number} x\n   * @param {number} y\n   * @return {number | Complex} res\n   * @private\n   */\n  function _pow(x, y) {\n\n    // Alternatively could define a 'realmode' config option or something, but\n    // 'predictable' will work for now\n    if (config.predictable && !isInteger(y) && x < 0) {\n      // Check to see if y can be represented as a fraction\n      try {\n        var yFrac = fraction(y);\n        var yNum = number(yFrac);\n        if(y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n          if(yFrac.d % 2 === 1) {\n            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n          }\n        }\n      }\n      catch (ex) {\n        // fraction() throws an error if y is Infinity, etc.\n      }\n\n      // Unable to express y as a fraction, so continue on\n    }\n\n\n    // x^Infinity === 0 if -1 < x < 1\n    // A real number 0 is returned instead of complex(0)\n    if ((x*x < 1 && y ===  Infinity) ||\n        (x*x > 1 && y === -Infinity)) {\n      return 0;\n    }\n\n    // **for predictable mode** x^Infinity === NaN if x < -1\n    // N.B. this behavour is different from `Math.pow` which gives\n    // (-2)^Infinity === Infinity\n    if (config.predictable &&\n        ((x < -1 &&          y ===  Infinity) ||\n         (x > -1 && x < 0 && y === -Infinity))) {\n      return NaN;\n    }\n\n    if (isInteger(y) || x >= 0 || config.predictable) {\n      return Math.pow(x, y);\n    }\n    else {\n      return new type.Complex(x, 0).pow(y, 0);\n    }\n  }\n\n  /**\n   * Calculate the power of a 2d array\n   * @param {Array} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Array}\n   * @private\n   */\n  function _powArray(x, y) {\n    if (!isInteger(y) || y < 0) {\n      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');\n    }\n    // verify that A is a 2 dimensional square matrix\n    var s = size(x);\n    if (s.length != 2) {\n      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n    }\n    if (s[0] != s[1]) {\n      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n    }\n\n    var res = eye(s[0]).valueOf();\n    var px = x;\n    while (y >= 1) {\n      if ((y & 1) == 1) {\n        res = multiply(px, res);\n      }\n      y >>= 1;\n      px = multiply(px, px);\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the power of a 2d matrix\n   * @param {Matrix} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Matrix}\n   * @private\n   */\n  function _powMatrix (x, y) {\n    return matrix(_powArray(x.valueOf(), y));\n  }\n\n\n\n  pow.toTex = {\n    2: '\\\\left(${args[0]}\\\\right)' + latex.operators['pow'] + '{${args[1]}}'\n  };\n\n  return pow;\n}\n\nexports.name = 'pow';\nexports.factory = factory;\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar toFixed = require('../../utils/number').toFixed;\nvar deepMap = require('../../utils/collection/deepMap');\n\nvar NO_INT = 'Number of decimals in function round must be an integer';\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var zeros = load(require('../matrix/zeros'));\n\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.2);              // returns number 3\n   *    math.round(3.8);              // returns number 4\n   *    math.round(-4.2);             // returns number -4\n   *    math.round(-4.7);             // returns number -5\n   *    math.round(math.pi, 3);       // returns number 3.142\n   *    math.round(123.45678, 2);     // returns number 123.46\n   *\n   *    var c = math.complex(3.2, -2.7);\n   *    math.round(c);                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  var round = typed('round', {\n\n    'number': Math.round,\n\n    'number, number': function (x, n) {\n      if (!isInteger(n))   {throw new TypeError(NO_INT);}\n      if (n < 0 || n > 15) {throw new Error('Number of decimals in function round must be in te range of 0-15');}\n\n      return _round(x, n);\n    },\n\n    'Complex': function (x) {\n      return x.round();\n    },\n\n    'Complex, number': function (x, n) {\n      if (n % 1) {throw new TypeError(NO_INT);}\n      \n      return x.round(n);\n    },\n\n    'Complex, BigNumber': function (x, n) {\n      if (!n.isInteger()) {throw new TypeError(NO_INT);}\n\n      var _n = n.toNumber();\n      return x.round(_n);\n    },\n\n    'number, BigNumber': function (x, n) {\n      if (!n.isInteger()) {throw new TypeError(NO_INT);}\n\n      return new type.BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n\n    'BigNumber': function (x) {\n      return x.toDecimalPlaces(0);\n    },\n\n    'BigNumber, BigNumber': function (x, n) {\n      if (!n.isInteger()) {throw new TypeError(NO_INT);}\n\n      return x.toDecimalPlaces(n.toNumber());\n    },\n\n    'Fraction': function (x) {\n      return x.round();\n    },\n\n    'Fraction, number': function (x, n) {\n      if (n % 1) {throw new TypeError(NO_INT);}\n      return x.round(n);\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, round, true);\n    },\n\n    'Matrix, number | BigNumber': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, round, false);\n          break;\n        default:\n          c = algorithm14(x, y, round, false);\n          break;\n      }\n      return c;\n    },\n\n    'number | Complex | BigNumber, Matrix': function (x, y) {\n      // check scalar is zero\n      if (!equalScalar(x, 0)) {\n        // result\n        var c;\n        // check storage format\n        switch (y.storage()) {\n          case 'sparse':\n            c = algorithm12(y, x, round, true);\n            break;\n          default:\n            c = algorithm14(y, x, round, true);\n            break;\n        }\n        return c;\n      }\n      // do not execute algorithm, result will be a zero matrix\n      return zeros(y.size(), y.storage());\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, round, false).valueOf();\n    },\n\n    'number | Complex | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, round, true).valueOf();\n    }\n  });\n\n  round.toTex = {\n    1: '\\\\left\\\\lfloor${args[0]}\\\\right\\\\rceil',\n    2: undefined  // use default template\n  };\n\n  return round;\n}\n\n/**\n * round a number to the given number of decimals, or to zero if decimals is\n * not provided\n * @param {number} value\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\n * @return {number} roundedValue\n * @private\n */\nfunction _round (value, decimals) {\n  return parseFloat(toFixed(value, decimals));\n}\n\nexports.name = 'round';\nexports.factory = factory;\n","'use strict';\n\nvar number = require('../../utils/number');\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Compute the sign of a value. The sign of a value x is:\n   *\n   * -  1 when x > 1\n   * - -1 when x < 0\n   * -  0 when x == 0\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sign(x)\n   *\n   * Examples:\n   *\n   *    math.sign(3.5);               // returns 1\n   *    math.sign(-4.2);              // returns -1\n   *    math.sign(0);                 // returns 0\n   *\n   *    math.sign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]\n   *\n   * See also:\n   *\n   *    abs\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            The number for which to determine the sign\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n   *            The sign of `x`\n   */\n  var sign = typed('sign', {\n    'number': number.sign,\n\n    'Complex': function (x) {\n      return x.sign();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(x.cmp(0));\n    },\n\n    'Fraction': function (x) {\n      return new type.Fraction(x.s, 1);\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since sign(0) = 0\n      return deepMap(x, sign, true);\n    },\n\n    'Unit': function(x) {\n      return sign(x.value);\n    }\n  });\n\n  sign.toTex = {1: '\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)'};\n\n  return sign;\n}\n\nexports.name = 'sign';\nexports.factory = factory;\n\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the square root of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sqrt(x)\n   *\n   * Examples:\n   *\n   *    math.sqrt(25);                // returns 5\n   *    math.square(5);               // returns 25\n   *    math.sqrt(-4);                // returns Complex 2i\n   *\n   * See also:\n   *\n   *    square, multiply, cube, cbrt\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x\n   *            Value for which to calculate the square root.\n   * @return {number | BigNumber | Complex | Array | Matrix | Unit}\n   *            Returns the square root of `x`\n   */\n  var sqrt = typed('sqrt', {\n    'number': _sqrtNumber,\n\n    'Complex': function (x) {\n        return x.sqrt();\n    },\n\n    'BigNumber': function (x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.sqrt();\n      }\n      else {\n        // negative value -> downgrade to number to do complex value computation\n        return _sqrtNumber(x.toNumber());\n      }\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since sqrt(0) = 0\n      return deepMap(x, sqrt, true);\n    },\n\n    'Unit': function (x) {\n      // Someday will work for complex units when they are implemented\n      return x.pow(0.5);\n    }\n\n  });\n\n  /**\n   * Calculate sqrt for a number\n   * @param {number} x\n   * @returns {number | Complex} Returns the square root of x\n   * @private\n   */\n  function _sqrtNumber(x) {\n    if (x >= 0 || config.predictable) {\n      return Math.sqrt(x);\n    }\n    else {\n      return new type.Complex(x, 0).sqrt();\n    }\n  }\n\n  sqrt.toTex = {1: '\\\\sqrt{${args[0]}}'};\n\n  return sqrt;\n}\n\nexports.name = 'sqrt';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Compute the square of a value, `x * x`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.square(x)\n   *\n   * Examples:\n   *\n   *    math.square(2);           // returns number 4\n   *    math.square(3);           // returns number 9\n   *    math.pow(3, 2);           // returns number 9\n   *    math.multiply(3, 3);      // returns number 9\n   *\n   *    math.square([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]\n   *\n   * See also:\n   *\n   *    multiply, cube, sqrt, pow\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            Number for which to calculate the square\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Squared value\n   */\n  var square = typed('square', {\n    'number': function (x) {\n      return x * x;\n    },\n\n    'Complex': function (x) {\n      return x.mul(x);\n    },\n\n    'BigNumber': function (x) {\n      return x.times(x);\n    },\n\n    'Fraction': function (x) {\n      return x.mul(x);\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since square(0) = 0\n      return deepMap(x, square, true);\n    },\n\n    'Unit': function(x) {\n      return x.pow(2);\n    }\n  });\n\n  square.toTex = {1: '\\\\left(${args[0]}\\\\right)^2'};\n\n  return square;\n}\n\nexports.name = 'square';\nexports.factory = factory;\n","'use strict';\n\nvar DimensionError = require('../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n  var unaryMinus = load(require('./unaryMinus'));\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  // TODO: split function subtract in two: subtract and subtractScalar\n\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2);        // returns number 3.3\n   *\n   *    var a = math.complex(2, 3);\n   *    var b = math.complex(4, 1);\n   *    math.subtract(a, b);          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4);  // returns Array [1, 3, 0]\n   *\n   *    var c = math.unit('2.1 km');\n   *    var d = math.unit('500m');\n   *    math.subtract(c, d);          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n  var subtract = typed('subtract', {\n\n    'number, number': function (x, y) {\n      return x - y;\n    },\n\n    'Complex, Complex': function (x, y) {\n      return x.sub(y);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.minus(y);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.sub(y);\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (x.value == null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value == null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      var res = x.clone();\n      res.value = subtract(res.value, y.value);\n      res.fixPrefix = false;\n\n      return res;\n    },\n    \n    'Matrix, Matrix': function (x, y) {\n      // matrix sizes\n      var xsize = x.size();\n      var ysize = y.size();\n\n      // check dimensions\n      if (xsize.length !== ysize.length)\n        throw new DimensionError(xsize.length, ysize.length);\n\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse - sparse\n              c = algorithm05(x, y, subtract);\n              break;\n            default:\n              // sparse - dense\n              c = algorithm03(y, x, subtract, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense - sparse\n              c = algorithm01(x, y, subtract, false);\n              break;\n            default:\n              // dense - dense\n              c = algorithm13(x, y, subtract);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n    \n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return subtract(x, matrix(y));\n    },\n    \n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          // algorithm 7 is faster than 9 since it calls f() for nonzero items only!\n          c = algorithm10(x, unaryMinus(y), addScalar);\n          break;\n        default:\n          c = algorithm14(x, y, subtract);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm10(y, x, subtract, true);\n          break;\n        default:\n          c = algorithm14(y, x, subtract, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, subtract, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, subtract, true).valueOf();\n    }\n  });\n\n  subtract.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['subtract'] + '${args[1]}\\\\right)'\n  };\n\n  return subtract;\n}\n\nexports.name = 'subtract';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  /**\n   * Inverse the sign of a value, apply a unary minus operation.\n   *\n   * For matrices, the function is evaluated element wise. Boolean values and\n   * strings will be converted to a number. For complex numbers, both real and\n   * complex value are inverted.\n   *\n   * Syntax:\n   *\n   *    math.unaryMinus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryMinus(3.5);      // returns -3.5\n   *    math.unaryMinus(-4.2);     // returns 4.2\n   *\n   * See also:\n   *\n   *    add, subtract, unaryPlus\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\n   */\n  var unaryMinus = typed('unaryMinus', {\n    'number': function (x) {\n      return -x;\n    },\n\n    'Complex': function (x) {\n      return x.neg();\n    },\n\n    'BigNumber': function (x) {\n      return x.neg();\n    },\n\n    'Fraction': function (x) {\n      return x.neg();\n    },\n\n    'Unit': function (x) {\n      var res = x.clone();\n      res.value = unaryMinus(x.value);\n      return res;\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since unaryMinus(0) = 0\n      return deepMap(x, unaryMinus, true);\n    }\n\n    // TODO: add support for string\n  });\n\n  unaryMinus.toTex = {\n    1: latex.operators['unaryMinus'] + '\\\\left(${args[0]}\\\\right)'\n  };\n\n  return unaryMinus;\n}\n\nexports.name = 'unaryMinus';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  /**\n   * Unary plus operation.\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.unaryPlus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryPlus(3.5);      // returns 3.5\n   *    math.unaryPlus(1);     // returns 1\n   *\n   * See also:\n   *\n   *    unaryMinus, add, subtract\n   *\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n   *            Input value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\n   */\n  var unaryPlus = typed('unaryPlus', {\n    'number': function (x) {\n      return x;\n    },\n\n    'Complex': function (x) {\n      return x; // complex numbers are immutable\n    },\n\n    'BigNumber': function (x) {\n      return x; // bignumbers are immutable\n    },\n\n    'Fraction': function (x) {\n      return x; // fractions are immutable\n    },\n\n    'Unit': function (x) {\n      return x.clone();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since unaryPlus(0) = 0\n      return deepMap(x, unaryPlus, true);\n    },\n\n    'boolean | string | null': function (x) {\n      // convert to a number or bignumber\n      return (config.number == 'BigNumber') ? new type.BigNumber(+x): +x;\n    }\n  });\n\n  unaryPlus.toTex = {\n    1: latex.operators['unaryPlus'] + '\\\\left(${args[0]}\\\\right)'\n  };\n\n  return unaryPlus;\n}\n\nexports.name = 'unaryPlus';\nexports.factory = factory;\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Calculate the extended greatest common divisor for two values.\n   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n   *\n   * Syntax:\n   *\n   *    math.xgcd(a, b)\n   *\n   * Examples:\n   *\n   *    math.xgcd(8, 12);             // returns [4, -1, 1]\n   *    math.gcd(8, 12);              // returns 4\n   *    math.xgcd(36163, 21199);      // returns [1247, -7, 12]\n   *\n   * See also:\n   *\n   *    gcd, lcm\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n   *                              where `div = gcd(a, b)` and `a*m + b*n = div`\n   */\n  var xgcd = typed('xgcd', {\n    'number, number': _xgcd,\n    'BigNumber, BigNumber': _xgcdBigNumber\n    // TODO: implement support for Fraction\n  });\n\n  xgcd.toTex = undefined; // use default template\n\n  return xgcd;\n\n  /**\n   * Calculate xgcd for two numbers\n   * @param {number} a\n   * @param {number} b\n   * @return {number} result\n   * @private\n   */\n  function _xgcd (a, b) {\n    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n    var t, // used to swap two variables\n        q, // quotient\n        r, // remainder\n        x = 0, lastx = 1,\n        y = 1, lasty = 0;\n\n    if (!isInteger(a) || !isInteger(b)) {\n      throw new Error('Parameters in function xgcd must be integer numbers');\n    }\n\n    while (b) {\n      q = Math.floor(a / b);\n      r = a - q*b;\n\n      t = x;\n      x = lastx - q * x;\n      lastx = t;\n\n      t = y;\n      y = lasty - q * y;\n      lasty = t;\n\n      a = b;\n      b = r;\n    }\n\n    var res;\n    if (a < 0) {\n      res = [-a, -lastx, -lasty];\n    }\n    else {\n      res = [a, a ? lastx : 0, lasty];\n    }\n    return (config.matrix === 'Array') ? res : matrix(res);\n  }\n\n  /**\n   * Calculate xgcd for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @return {BigNumber[]} result\n   * @private\n   */\n  function _xgcdBigNumber(a, b) {\n    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n    var t, // used to swap two variables\n        q, // quotient\n        r, // remainder\n        zero = new type.BigNumber(0),\n        one = new type.BigNumber(1),\n        x = zero,\n        lastx = one,\n        y = one,\n        lasty = zero;\n\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function xgcd must be integer numbers');\n    }\n\n    while (!b.isZero()) {\n      q = a.div(b).floor();\n      r = a.mod(b);\n\n      t = x;\n      x = lastx.minus(q.times(x));\n      lastx = t;\n\n      t = y;\n      y = lasty.minus(q.times(y));\n      lasty = t;\n\n      a = b;\n      b = r;\n    }\n\n    var res;\n    if (a.lt(zero)) {\n      res = [a.neg(), lastx.neg(), lasty.neg()];\n    }\n    else {\n      res = [a, !a.isZero() ? lastx : 0, lasty];\n    }\n    return (config.matrix === 'Array') ? res : matrix(res);\n  }\n}\n\nexports.name = 'xgcd';\nexports.factory = factory;\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar bigBitAnd = require('../../utils/bignumber/bitAnd');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Bitwise AND two values, `x & y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitAnd(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitAnd(53, 131);               // returns number 1\n   *\n   *    math.bitAnd([1, 12, 31], 42);       // returns Array [0, 8, 10]\n   *\n   * See also:\n   *\n   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to and\n   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`\n   */\n  var bitAnd = typed('bitAnd', {\n\n    'number, number': function (x, y) {\n      if (!isInteger(x) || !isInteger(y)) {\n        throw new Error('Integers expected in function bitAnd');\n      }\n\n      return x & y;\n    },\n\n    'BigNumber, BigNumber': bigBitAnd,\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse & sparse\n              c = algorithm06(x, y, bitAnd, false);\n              break;\n            default:\n              // sparse & dense\n              c = algorithm02(y, x, bitAnd, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense & sparse\n              c = algorithm02(x, y, bitAnd, false);\n              break;\n            default:\n              // dense & dense\n              c = algorithm13(x, y, bitAnd);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n    \n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return bitAnd(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return bitAnd(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return bitAnd(x, matrix(y));\n    },\n    \n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, bitAnd, false);\n          break;\n        default:\n          c = algorithm14(x, y, bitAnd, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm11(y, x, bitAnd, true);\n          break;\n        default:\n          c = algorithm14(y, x, bitAnd, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, bitAnd, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, bitAnd, true).valueOf();\n    }\n  });\n\n  bitAnd.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['bitAnd'] + '${args[1]}\\\\right)'\n  };\n\n  return bitAnd;\n}\n\nexports.name = 'bitAnd';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar bigBitNot = require('../../utils/bignumber/bitNot');\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  /**\n   * Bitwise NOT value, `~x`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.bitNot(x)\n   *\n   * Examples:\n   *\n   *    math.bitNot(1);               // returns number -2\n   *\n   *    math.bitNot([2, -3, 4]);      // returns Array [-3, 2, 5]\n   *\n   * See also:\n   *\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to not\n   * @return {number | BigNumber | Array | Matrix} NOT of `x`\n   */\n  var bitNot = typed('bitNot', {\n    'number': function (x) {\n      if (!isInteger(x)) {\n        throw new Error('Integer expected in function bitNot');\n      }\n\n      return ~x;\n    },\n\n    'BigNumber': bigBitNot,\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, bitNot);\n    }\n  });\n\n  bitNot.toTex = {\n    1: latex.operators['bitNot'] + '\\\\left(${args[0]}\\\\right)'\n  };\n\n  return bitNot;\n}\n\nexports.name = 'bitNot';\nexports.factory = factory;\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar bigBitOr = require('../../utils/bignumber/bitOr');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Bitwise OR two values, `x | y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the lowest print base.\n   *\n   * Syntax:\n   *\n   *    math.bitOr(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitOr(1, 2);               // returns number 3\n   *\n   *    math.bitOr([1, 2, 3], 4);       // returns Array [5, 6, 7]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to or\n   * @param  {number | BigNumber | Array | Matrix} y Second value to or\n   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`\n   */\n  var bitOr = typed('bitOr', {\n\n    'number, number': function (x, y) {\n      if (!isInteger(x) || !isInteger(y)) {\n        throw new Error('Integers expected in function bitOr');\n      }\n\n      return x | y;\n    },\n\n    'BigNumber, BigNumber': bigBitOr,\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm04(x, y, bitOr);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm01(y, x, bitOr, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm01(x, y, bitOr, false);\n              break;\n            default:\n              c = algorithm13(x, y, bitOr);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return bitOr(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return bitOr(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return bitOr(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm10(x, y, bitOr, false);\n          break;\n        default:\n          c = algorithm14(x, y, bitOr, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm10(y, x, bitOr, true);\n          break;\n        default:\n          c = algorithm14(y, x, bitOr, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, bitOr, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, bitOr, true).valueOf();\n    }\n  });\n\n  bitOr.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['bitOr'] + '${args[1]}\\\\right)'\n  };\n\n  return bitOr;\n}\n\nexports.name = 'bitOr';\nexports.factory = factory;\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar bigBitXor = require('../../utils/bignumber/bitXor');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Bitwise XOR two values, `x ^ y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitXor(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitXor(1, 2);               // returns number 3\n   *\n   *    math.bitXor([2, 3, 4], 4);       // returns Array [6, 7, 0]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to xor\n   * @param  {number | BigNumber | Array | Matrix} y Second value to xor\n   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`\n   */\n  var bitXor = typed('bitXor', {\n\n    'number, number': function (x, y) {\n      if (!isInteger(x) || !isInteger(y)) {\n        throw new Error('Integers expected in function bitXor');\n      }\n\n      return x ^ y;\n    },\n\n    'BigNumber, BigNumber': bigBitXor,\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, bitXor);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, bitXor, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, bitXor, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, bitXor);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return bitXor(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return bitXor(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return bitXor(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, bitXor, false);\n          break;\n        default:\n          c = algorithm14(x, y, bitXor, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, bitXor, true);\n          break;\n        default:\n          c = algorithm14(y, x, bitXor, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, bitXor, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, bitXor, true).valueOf();\n    }\n  });\n\n  bitXor.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['bitXor'] + '${args[1]}\\\\right)'\n  };\n\n  return bitXor;\n}\n\nexports.name = 'bitXor';\nexports.factory = factory;\n","module.exports = [\n  require('./bitAnd'),\n  require('./bitNot'),\n  require('./bitOr'),\n  require('./bitXor'),\n  require('./leftShift'),\n  require('./rightArithShift'),\n  require('./rightLogShift')\n];\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar bigLeftShift = require('../../utils/bignumber/leftShift');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var zeros = load(require('../matrix/zeros'));\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.leftShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.leftShift(1, 2);               // returns number 4\n   *\n   *    math.leftShift([1, 2, 3], 4);       // returns Array [16, 32, 64]\n   *\n   * See also:\n   *\n   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times\n   */\n  var leftShift = typed('leftShift', {\n    \n    'number, number': function (x, y) {\n      if (!isInteger(x) || !isInteger(y)) {\n        throw new Error('Integers expected in function leftShift');\n      }\n\n      return x << y;\n    },\n\n    'BigNumber, BigNumber': bigLeftShift,\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse & sparse\n              c = algorithm08(x, y, leftShift, false);\n              break;\n            default:\n              // sparse & dense\n              c = algorithm02(y, x, leftShift, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense & sparse\n              c = algorithm01(x, y, leftShift, false);\n              break;\n            default:\n              // dense & dense\n              c = algorithm13(x, y, leftShift);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return leftShift(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return leftShift(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return leftShift(x, matrix(y));\n    },\n\n    'Matrix, number | BigNumber': function (x, y) {\n      // check scalar\n      if (!equalScalar(y, 0)) {\n        // result\n        var c;\n        // check storage format\n        switch (x.storage()) {\n          case 'sparse':\n            c = algorithm11(x, y, leftShift, false);\n            break;\n          default:\n            c = algorithm14(x, y, leftShift, false);\n            break;\n        }\n        return c;\n      }\n      return x.clone();\n    },\n\n    'number | BigNumber, Matrix': function (x, y) {\n      // check scalar\n      if (!equalScalar(x, 0)) {\n        // result\n        var c;\n        // check storage format\n        switch (y.storage()) {\n          case 'sparse':\n            c = algorithm10(y, x, leftShift, true);\n            break;\n          default:\n            c = algorithm14(y, x, leftShift, true);\n            break;\n        }\n        return c;\n      }\n      return zeros(y.size(), y.storage());\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return leftShift(matrix(x), y).valueOf();\n    },\n\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return leftShift(x, matrix(y)).valueOf();\n    }\n  });\n\n  leftShift.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['leftShift'] + '${args[1]}\\\\right)'\n  };\n\n  return leftShift;\n}\n\nexports.name = 'leftShift';\nexports.factory = factory;\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar bigRightArithShift = require('../../utils/bignumber/rightArithShift');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n  \n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var zeros = load(require('../matrix/zeros'));\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightArithShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightArithShift(4, 2);               // returns number 1\n   *\n   *    math.rightArithShift([16, -32, 64], 4);   // returns Array [1, -2, 3]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times\n   */\n  var rightArithShift = typed('rightArithShift', {\n\n    'number, number': function (x, y) {\n      if (!isInteger(x) || !isInteger(y)) {\n        throw new Error('Integers expected in function rightArithShift');\n      }\n\n      return x >> y;\n    },\n\n    'BigNumber, BigNumber': bigRightArithShift,\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse & sparse\n              c = algorithm08(x, y, rightArithShift, false);\n              break;\n            default:\n              // sparse & dense\n              c = algorithm02(y, x, rightArithShift, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense & sparse\n              c = algorithm01(x, y, rightArithShift, false);\n              break;\n            default:\n              // dense & dense\n              c = algorithm13(x, y, rightArithShift);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return rightArithShift(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return rightArithShift(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return rightArithShift(x, matrix(y));\n    },\n\n    'Matrix, number | BigNumber': function (x, y) {\n      // check scalar\n      if (!equalScalar(y, 0)) {\n        // result\n        var c;\n        // check storage format\n        switch (x.storage()) {\n          case 'sparse':\n            c = algorithm11(x, y, rightArithShift, false);\n            break;\n          default:\n            c = algorithm14(x, y, rightArithShift, false);\n            break;\n        }\n        return c;\n      }\n      return x.clone();\n    },\n\n    'number | BigNumber, Matrix': function (x, y) {\n      // check scalar\n      if (!equalScalar(x, 0)) {\n        // result\n        var c;\n        // check storage format\n        switch (y.storage()) {\n          case 'sparse':\n            c = algorithm10(y, x, rightArithShift, true);\n            break;\n          default:\n            c = algorithm14(y, x, rightArithShift, true);\n            break;\n        }\n        return c;\n      }\n      return zeros(y.size(), y.storage());\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return rightArithShift(matrix(x), y).valueOf();\n    },\n\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return rightArithShift(x, matrix(y)).valueOf();\n    }\n  });\n\n  rightArithShift.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['rightArithShift'] + '${args[1]}\\\\right)'\n  };\n\n  return rightArithShift;\n}\n\nexports.name = 'rightArithShift';\nexports.factory = factory;\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var zeros = load(require('../matrix/zeros'));\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightLogShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightLogShift(4, 2);               // returns number 1\n   *\n   *    math.rightLogShift([16, -32, 64], 4);   // returns Array [1, 2, 3]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n   *\n   * @param  {number | Array | Matrix} x Value to be shifted\n   * @param  {number} y Amount of shifts\n   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n\n  var rightLogShift = typed('rightLogShift', {\n\n    'number, number': function (x, y) {\n      if (!isInteger(x) || !isInteger(y)) {\n        throw new Error('Integers expected in function rightLogShift');\n      }\n\n      return x >>> y;\n    },\n\n    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse & sparse\n              c = algorithm08(x, y, rightLogShift, false);\n              break;\n            default:\n              // sparse & dense\n              c = algorithm02(y, x, rightLogShift, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense & sparse\n              c = algorithm01(x, y, rightLogShift, false);\n              break;\n            default:\n              // dense & dense\n              c = algorithm13(x, y, rightLogShift);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return rightLogShift(x, matrix(y));\n    },\n\n    'Matrix, number | BigNumber': function (x, y) {\n      // check scalar\n      if (!equalScalar(y, 0)) {\n        // result\n        var c;\n        // check storage format\n        switch (x.storage()) {\n          case 'sparse':\n            c = algorithm11(x, y, rightLogShift, false);\n            break;\n          default:\n            c = algorithm14(x, y, rightLogShift, false);\n            break;\n        }\n        return c;\n      }\n      return x.clone();\n    },\n\n    'number | BigNumber, Matrix': function (x, y) {\n      // check scalar\n      if (!equalScalar(x, 0)) {\n        // result\n        var c;\n        // check storage format\n        switch (y.storage()) {\n          case 'sparse':\n            c = algorithm10(y, x, rightLogShift, true);\n            break;\n          default:\n            c = algorithm14(y, x, rightLogShift, true);\n            break;\n        }\n        return c;\n      }\n      return zeros(y.size(), y.storage());\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), y).valueOf();\n    },\n\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return rightLogShift(x, matrix(y)).valueOf();\n    }\n  });\n\n  rightLogShift.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['rightLogShift'] + '${args[1]}\\\\right)'\n  };\n\n  return rightLogShift;\n}\n\nexports.name = 'rightLogShift';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var stirlingS2 = load(require('./stirlingS2'));\n  var isNegative = load(require('../utils/isNegative'));\n  var isInteger = load(require('../utils/isInteger'));\n\n  /**\n   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\n   * bellNumbers only takes integer arguments.\n   * The following condition must be enforced: n >= 0\n   *\n   * Syntax:\n   *\n   *   math.bellNumbers(n)\n   *\n   * Examples:\n   *\n   *    math.bellNumbers(3); // returns 5;\n   *    math.bellNumbers(8); // returns 4140;\n   *\n   * See also:\n   *\n   *    stirlingS2\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @return {Number | BigNumber}     B(n)\n   */\n  var bellNumbers = typed('bellNumbers', {\n    'number | BigNumber': function (n) {\n\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function bellNumbers');\n      }\n\n      // Sum (k=0, n) S(n,k).\n      var result = 0;\n      for(var i = 0; i <= n; i++) {\n        result = add(result, stirlingS2(n, i));\n      }\n\n      return result;\n    }\n  });\n\n  bellNumbers.toTex = {1: '\\\\mathrm{B}_{${args[0]}}'};\n\n  return bellNumbers;\n}\n\nexports.name = 'bellNumbers';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var divide = load(require('../arithmetic/divide'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var combinations = load(require('../probability/combinations'));\n  var isNegative = load(require('../utils/isNegative'));\n  var isInteger = load(require('../utils/isInteger'));\n\n\n  /**\n   * The Catalan Numbers enumerate combinatorial structures of many different types.\n   * catalan only takes integer arguments.\n   * The following condition must be enforced: n >= 0\n   *\n   * Syntax:\n   *\n   *   math.catalan(n)\n   *\n   * Examples:\n   *\n   *    math.catalan(3); // returns 5;\n   *    math.catalan(8); // returns 1430;\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    nth Catalan number\n   * @return {Number | BigNumber}     Cn(n)\n   */\n  var catalan = typed('catalan', {\n    'number | BigNumber': function (n) {\n\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function catalan');\n      }\n       \n      return divide(combinations(multiply(n,2), n), add(n,1));\n\n    }\n  });\n\n  catalan.toTex = {1: '\\\\mathrm{C}_{${args[0]}}'};\n\n  return catalan;\n}\n\nexports.name = 'catalan';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var combinations = load(require('../probability/combinations'));\n  var add = load(require('../arithmetic/addScalar'));\n  var isPositive = load(require('../utils/isPositive'));\n  var isInteger = load(require('../utils/isInteger'));\n  var larger = load(require('../relational/larger'));\n\n  /**\n   * The composition counts of n into k parts.\n   *\n   * composition only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *   math.composition(n, k)\n   *\n   * Examples:\n   *\n   *    math.composition(5, 3); // returns 6\n   *\n   * See also:\n   *\n   *    combinations\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.\n   */\n  var composition =  typed('composition', {\n    'number | BigNumber, number | BigNumber': function (n, k) {\n      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {\n        throw new TypeError('Positive integer value expected in function composition');\n      }\n      else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function composition');\n      }\n\n      return combinations(add(n, -1), add(k, -1));\n    }\n  });\n\n  composition.toTex = undefined; // use default template\n\n  return composition;\n}\n\nexports.name = 'composition';\nexports.factory = factory;\n","module.exports = [\n  require('./bellNumbers'),\n  require('./composition'),\n  require('./stirlingS2'),\n  require('./catalan')\n];\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var divide = load(require('../arithmetic/divide'));\n  var pow = load(require('../arithmetic/pow'));\n  var factorial = load(require('../probability/factorial'));\n  var combinations = load(require('../probability/combinations'));\n  var isNegative = load(require('../utils/isNegative'));\n  var isInteger = load(require('../utils/isInteger'));\n  var larger = load(require('../relational/larger'));\n\n  /**\n   * The Stirling numbers of the second kind, counts the number of ways to partition\n   * a set of n labelled objects into k nonempty unlabelled subsets.\n   * stirlingS2 only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   *  If n = k or k = 1, then s(n,k) = 1\n   *\n   * Syntax:\n   *\n   *   math.stirlingS2(n, k)\n   *\n   * Examples:\n   *\n   *    math.stirlingS2(5, 3); //returns 25\n   *\n   * See also:\n   *\n   *    Bell numbers\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     S(n,k)\n   */\n  var stirlingS2 = typed('stirlingS2', {\n    'number | BigNumber, number | BigNumber': function (n, k) {\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n      }\n      else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n      }\n\n      // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]\n      var kFactorial = factorial(k);\n      var result = 0;\n      for(var i = 0; i <= k; i++) {\n        var negativeOne = pow(-1, subtract(k,i));\n        var kChooseI = combinations(k,i);\n        var iPower = pow(i,n);\n\n        result = add(result, multiply(multiply(kChooseI, iPower), negativeOne));\n      }\n\n      return divide(result, kFactorial);\n    }\n  });\n\n  stirlingS2.toTex = {2: '\\\\mathrm{S}\\\\left(${args}\\\\right)'};\n\n  return stirlingS2;\n}\n\nexports.name = 'stirlingS2';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Compute the argument of a complex value.\n   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.arg(x)\n   *\n   * Examples:\n   *\n   *    var a = math.complex(2, 2);\n   *    math.arg(a) / math.pi;          // returns number 0.25\n   *\n   *    var b = math.complex('2 + 3i');\n   *    math.arg(b);                    // returns number 0.982793723247329\n   *    math.atan2(3, 2);               // returns number 0.982793723247329\n   *\n   * See also:\n   *\n   *    re, im, conj, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The argument of x\n   */\n  var arg = typed('arg', {\n    'number': function (x) {\n      return Math.atan2(0, x);\n    },\n\n    'BigNumber': function (x) {\n      return type.BigNumber.atan2(0, x);\n    },\n\n    'Complex': function (x) {\n      return x.arg();\n    },\n\n    // TODO: implement BigNumber support for function arg\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, arg);\n    }\n  });\n\n  arg.toTex = {1: '\\\\arg\\\\left(${args[0]}\\\\right)'};\n\n  return arg;\n}\n\nexports.name = 'arg';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Compute the complex conjugate of a complex value.\n   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.conj(x)\n   *\n   * Examples:\n   *\n   *    math.conj(math.complex('2 + 3i'));  // returns Complex 2 - 3i\n   *    math.conj(math.complex('2 - 3i'));  // returns Complex 2 + 3i\n   *    math.conj(math.complex('-5.2i'));  // returns Complex 5.2i\n   *\n   * See also:\n   *\n   *    re, im, arg, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            The complex conjugate of x\n   */\n  var conj = typed('conj', {\n    'number': function (x) {\n      return x;\n    },\n\n    'BigNumber': function (x) {\n      return x;\n    },\n\n    'Complex': function (x) {\n      return x.conjugate();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, conj);\n    }\n  });\n\n  conj.toTex = {1: '\\\\left(${args[0]}\\\\right)^*'};\n\n  return conj;\n}\n\nexports.name = 'conj';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Get the imaginary part of a complex number.\n   * For a complex number `a + bi`, the function returns `b`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.im(x)\n   *\n   * Examples:\n   *\n   *    var a = math.complex(2, 3);\n   *    math.re(a);                     // returns number 2\n   *    math.im(a);                     // returns number 3\n   *\n   *    math.re(math.complex('-5.2i')); // returns number -5.2\n   *    math.re(math.complex(2.4));     // returns number 0\n   *\n   * See also:\n   *\n   *    re, conj, abs, arg\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The imaginary part of x\n   */\n  var im = typed('im', {\n    'number': function (x) {\n      return 0;\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(0);\n    },\n\n    'Complex': function (x) {\n      return x.im;\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, im);\n    }\n  });\n\n  im.toTex = {1: '\\\\Im\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace'};\n\n  return im;\n}\n\nexports.name = 'im';\nexports.factory = factory;\n","module.exports = [\n  require('./arg'),\n  require('./conj'),\n  require('./im'),\n  require('./re')\n];\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Get the real part of a complex number.\n   * For a complex number `a + bi`, the function returns `a`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.re(x)\n   *\n   * Examples:\n   *\n   *    var a = math.complex(2, 3);\n   *    math.re(a);                     // returns number 2\n   *    math.im(a);                     // returns number 3\n   *\n   *    math.re(math.complex('-5.2i')); // returns number 0\n   *    math.re(math.complex(2.4));     // returns number 2.4\n   *\n   * See also:\n   *\n   *    im, conj, abs, arg\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The real part of x\n   */\n  var re = typed('re', {\n    'number': function (x) {\n      return x;\n    },\n\n    'BigNumber': function (x) {\n      return x;\n    },\n\n    'Complex': function (x) {\n      return x.re;\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, re);\n    }\n  });\n\n  re.toTex = {1: '\\\\Re\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace'};\n\n  return re;\n}\n\nexports.name = 're';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n    * Calculates:\n    *    The eucledian distance between two points in 2 and 3 dimensional spaces.\n    *    Distance between point and a line in 2 and 3 dimensional spaces.\n    *    Pairwise distance between a set of 2D or 3D points\n    * NOTE:\n    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n    *\n    * Syntax:\n    *    math.distance([x1, y1], [x2, y2])\n    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\n    *    math.distance([x1, y1, z1], [x2, y2, z2])\n    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\n    *    math.distance([[A], [B], [C]...])\n    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\n    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\n    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\n    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\n    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])\n    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\n    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\n    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])\n    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\n    *\n    * Examples:\n    *    math.distance([0,0], [4,4])                     // Returns 5.6569\n    *    math.distance(\n    *     {pointOneX: 0, pointOneY: 0},\n    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166\n    *    math.distance(\n    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n    *    math.distance(\n    *     {pointX: 1, pointY: 4},\n    *     {lineOnePtX: 6, lineOnePtY: 3},\n    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n    *    math.distance(\n    *     {pointX: 2, pointY: 3, pointZ: 1},\n    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857\n    *\n    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n    * @return {Number | BigNumber} Returns the distance from two/three points\n  */\n\n  var distance = typed('distance', {\n    'Array, Array, Array': function(x, y, z){\n      // Point to Line 2D; (x=Point, y=LinePoint1, z=LinePoint2)\n      if (x.length == 2 && y.length == 2 && z.length == 2){\n        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }\n        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for second argument'); }\n        if (!_2d(z)) { throw new TypeError('Array with 2 numbers expected for third argument'); }\n        var m = (z[1]-z[0])/(y[1]-y[0]);\n        var xCoeff = m*m*y[0];\n        var yCoeff = -1*(m*y[0]);\n        var constant = x[1];\n\n        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\n      }\n      else{\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object, Object': function(x, y, z){\n      if (Object.keys(x).length == 2 && Object.keys(y).length == 2 && Object.keys(z).length == 2){\n        if (!_2d(x)) { throw new TypeError('Values of pointX and pointY should be numbers'); }\n        if (!_2d(y)) { throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers'); }\n        if (!_2d(z)) { throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers'); }\n        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('lineOnePtX') &&\n          y.hasOwnProperty('lineOnePtY') && z.hasOwnProperty('lineTwoPtX') && z.hasOwnProperty('lineTwoPtY')){\n          var m = (z.lineTwoPtY-z.lineTwoPtX)/(y.lineOnePtY-y.lineOnePtX);\n          var xCoeff = m*m*y.lineOnePtX;\n          var yCoeff = -1*(m*y.lineOnePtX);\n          var constant = x.pointX;\n\n          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\n        }\n        else{\n          throw new TypeError('Key names do not match');\n        }\n      }\n      else{\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array, Array': function(x, y){\n      // Point to Line 2D; (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\n      if (x.length == 2 && y.length == 3){\n        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }\n        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }\n\n        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\n      }\n      // Point to Line 3D\n      else if (x.length == 3 && y.length == 6){\n        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }\n        if (!_parametricLine(y)) { throw new TypeError('Array with 6 numbers expected for second argument'); }\n\n        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\n      }\n      // Point to Point 2D\n      else if (x.length == 2 && y.length == 2){\n        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }\n        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for second argument'); }\n\n        return _distance2d(x[0], x[1], y[0], y[1]);\n      }\n      // Point to Point 3D\n      else if(x.length == 3 && y.length == 3){\n        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }\n        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }\n\n        return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);\n      }\n      else{\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object': function(x, y){\n      if (Object.keys(x).length == 2 && Object.keys(y).length == 3){\n        if (!_2d(x)) { throw new TypeError('Values of pointX and pointY should be numbers'); }\n        if (!_3d(y)) { throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers'); }\n        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('xCoeffLine') &&\n          y.hasOwnProperty('yCoeffLine') && y.hasOwnProperty('yCoeffLine')){\n\n          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\n        }\n        else{\n          throw new TypeError('Key names do not match');\n        }\n      }\n      // Point to Line 3D\n      else if (Object.keys(x).length == 3 && Object.keys(y).length == 6){\n        if (!_3d(x)) { throw new TypeError('Values of pointX, pointY and pointZ should be numbers'); }\n        if (!_parametricLine(y)) { throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers'); }\n        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('x0') &&\n          y.hasOwnProperty('y0') && y.hasOwnProperty('z0') && y.hasOwnProperty('a') &&\n          y.hasOwnProperty('b') && y.hasOwnProperty('c')){\n\n          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\n        }\n        else{\n          throw new TypeError('Key names do not match');\n        }\n      }\n      // Point to Point 2D\n      else if (Object.keys(x).length == 2 && Object.keys(y).length == 2){\n        if (!_2d(x)) { throw new TypeError('Values of pointOneX and pointOneY should be numbers'); }\n        if (!_2d(y)) { throw new TypeError('Values of pointTwoX and pointTwoY should be numbers'); }\n        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') &&\n          y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY')){\n\n          return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);\n        }\n        else{\n          throw new TypeError('Key names do not match');\n        }\n      }\n      // Point to Point 3D\n      else if(Object.keys(x).length == 3 && Object.keys(y).length == 3){\n        if (!_3d(x)) { throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers'); }\n        if (!_3d(y)) { throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers'); }\n        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && x.hasOwnProperty('pointOneZ') &&\n          y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY') && y.hasOwnProperty('pointTwoZ')){\n\n          return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);\n        }\n        else {\n          throw new TypeError('Key names do not match');\n        }\n      }\n      else{\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array': function(arr){\n      if (!_pairwise(arr)) { throw new TypeError('Incorrect array format entered for pairwise distance calculation'); }\n\n      return _distancePairwise(arr);\n    }\n  });\n  return distance;\n}\n\nfunction _2d(a){\n  // checks if the number of arguments are correct in count and are valid (should be numbers)\n  if (a.constructor !== Array){\n    a = _objectToArray(a);\n  }\n  return typeof a[0] === 'number' && typeof a[1] === 'number';\n}\n\nfunction _3d(a){\n  // checks if the number of arguments are correct in count and are valid (should be numbers)\n  if (a.constructor !== Array){\n    a = _objectToArray(a);\n  }\n  return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number';\n}\n\nfunction _parametricLine(a){\n  if (a.constructor !== Array){\n    a = _objectToArray(a);\n  }\n  return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number' &&\n    typeof a[3] === 'number' && typeof a[4] === 'number' && typeof a[5] === 'number';\n\n}\n\nfunction _objectToArray(o){\n  var keys = Object.keys(o);\n  var a = [];\n  for (var i = 0; i < keys.length; i++) {\n    a.push(o[keys[i]]);\n  }\n  return a;\n}\n\nfunction _pairwise(a){\n  //checks for valid arguments passed to _distancePairwise(Array)\n  if (a[0].length == 2 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number'){\n    for(var i in a){\n      if (a[i].length != 2 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number'){\n        return false;\n      }\n    }\n  }\n  else if (a[0].length == 3 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number' && typeof a[0][2] === 'number'){\n    for(var i in a){\n      if (a[i].length != 3 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number' || typeof a[i][2] !== 'number'){\n        return false;\n      }\n    }\n  }\n  else{\n    return false;\n  }\n  return true;\n}\n\nfunction _distancePointLine2D(x, y, a, b, c){\n  var num =  Math.abs(a*x + b*y + c);\n  var den = Math.pow((a*a + b*b), 0.5);\n  var result = (num/den);\n  return result;\n}\n\nfunction _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c){\n  var num = [((y0-y)*(c))-((z0-z)*(b)), ((z0-z)*(a))-((x0-x)*(c)), ((x0-x)*(b))-((y0-y)*(a))]\n  num = Math.pow(num[0]*num[0] + num[1]*num[1] + num[2]*num[2], 0.5);\n  var den = Math.pow(a*a + b*b + c*c, 0.5);\n  var result = num/den;\n  return result;\n}\n\nfunction _distance2d(x1, y1, x2, y2){\n  var yDiff = y2 - y1;\n  var xDiff = x2 - x1;\n  var radicant = yDiff * yDiff + xDiff * xDiff;\n  var result = Math.pow(radicant, 0.5);\n  return result;\n}\n\nfunction _distance3d(x1, y1, z1, x2, y2, z2){\n  var zDiff = z2 - z1;\n  var yDiff = y2 - y1;\n  var xDiff = x2 - x1;\n  var radicant = zDiff * zDiff + yDiff * yDiff + xDiff * xDiff;\n  var result = Math.pow(radicant, 0.5);\n  return result;\n}\n\nfunction _distancePairwise(a){\n  var result = [];\n  for(var i = 0; i < a.length-1; i++){\n    for(var j = i+1; j < a.length; j++){\n      if (a[0].length == 2){\n        result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));\n      }\n      else if (a[0].length == 3){\n        result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));\n      }\n    }\n  }\n  return result;\n}\n\nexports.name = 'distance';\nexports.factory = factory;\n","module.exports = [\n  require('./intersect'),\n  require('./distance')\n];\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var abs = load(require('../arithmetic/abs'));\n  var add = load(require('../arithmetic/add'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var subtract = load(require('../arithmetic/subtract'));\n\n  /**\n   * Calculates the point of intersection of two lines in two or three dimensions\n   * and of a line and a plane in three dimensions. The inputs are in the form of\n   * arrays or 1 dimensional matrices. The line intersection functions return null\n   * if the lines do not meet.\n   *\n   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n   *\n   * Syntax:\n   *\n   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n   *\n   * Examples:\n   *\n   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10]);              // Returns [5, 5]\n   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0]);  // Returns [5, 5, 0]\n   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6]);            // Returns [7, -4, 3]\n   *\n   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n   *                              OR Co-efficients of the plane's equation\n   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n   *                              OR null if the calculation is for line and plane\n   * @return {Array}              Returns the point of intersection of lines/lines-planes\n   */\n  var intersect = typed('intersect', {\n    'Array, Array, Array': function (x, y, plane) {\n      if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }\n      if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }\n      if (!_4d(plane)) { throw new TypeError('Array with 4 numbers expected as third argument'); }\n\n      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);\n    },\n\n    'Array, Array, Array, Array': function (w, x, y, z) {\n      if (w.length === 2) {\n        if (!_2d(w)) { throw new TypeError('Array with 2 numbers expected for first argument'); }\n        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for second argument'); }\n        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for third argument'); }\n        if (!_2d(z)) { throw new TypeError('Array with 2 numbers expected for fourth argument'); }\n\n        return _intersect2d(w, x, y, z);\n      }\n      else if (w.length === 3) {\n        if (!_3d(w)) { throw new TypeError('Array with 3 numbers expected for first argument'); }\n        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for second argument'); }\n        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for third argument'); }\n        if (!_3d(z)) { throw new TypeError('Array with 3 numbers expected for fourth argument'); }\n\n        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);\n      }\n      else {\n        throw new TypeError('Arrays with two or thee dimensional points expected');\n      }\n    },\n\n    'Matrix, Matrix, Matrix': function (x, y, plane) {\n      return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));\n    },\n\n    'Matrix, Matrix, Matrix, Matrix': function (w, x, y, z) {\n      // TODO: output matrix type should match input matrix type\n      return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));\n    }\n  });\n\n  function _2d(x) {\n    return x.length === 2 && typeof x[0] === 'number' && typeof x[1] === 'number';\n  }\n\n  function _3d(x) {\n    return x.length === 3 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number';\n  }\n\n  function _4d(x) {\n    return x.length === 4 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number' && typeof x[3] === 'number';\n  }\n\n  function _intersect2d(p1a, p1b, p2a, p2b){\n    var o1 = p1a;\n    var o2 = p2a;\n    var d1 = subtract(o1, p1b);\n    var d2 = subtract(o2, p2b);\n    var det = d1[0]*d2[1] - d2[0]*d1[1];\n    if (abs(det) < config.epsilon) {\n      return null;\n    }\n    var t = (d2[0]*o1[1] - d2[1]*o1[0] - d2[0]*o2[1] + d2[1]*o2[0]) / det;\n    return add(multiply(d1, t), o1); \n  }\n\n  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4){\n    var d1343 = (x1 - x3)*(x4 - x3) + (y1 - y3)*(y4 - y3) + (z1 - z3)*(z4 - z3);\n    var d4321 = (x4 - x3)*(x2 - x1) + (y4 - y3)*(y2 - y1) + (z4 - z3)*(z2 - z1);\n    var d1321 = (x1 - x3)*(x2 - x1) + (y1 - y3)*(y2 - y1) + (z1 - z3)*(z2 - z1);\n    var d4343 = (x4 - x3)*(x4 - x3) + (y4 - y3)*(y4 - y3) + (z4 - z3)*(z4 - z3);\n    var d2121 = (x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1) + (z2 - z1)*(z2 - z1);\n    var ta = ( d1343*d4321 - d1321*d4343 ) / ( d2121*d4343 - d4321*d4321 );\n    var tb = ( d1343 + ta * d4321 ) / (d4343);\n\n    var pax = x1 + ta * (x2 - x1);\n    var pay = y1 + ta * (y2 - y1);\n    var paz = z1 + ta * (z2 - z1);\n    var pbx = x3 + tb * (x4 - x3);\n    var pby = y3 + tb * (y4 - y3);\n    var pbz = z3 + tb * (z4 - z3);\n    if (pax === pbx && pay === pby && paz === pbz){\n      return [pax, pay, paz];\n    }\n    else{\n      return null;\n    }\n  }\n\n  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c){\n    var t = (c - x1*x - y1*y - z1*z)/(x2*x + y2*y + z2*z - x1*x - y1*y - z1*z);\n    var px = x1 + t * (x2 - x1);\n    var py = y1 + t * (y2 - y1);\n    var pz = z1 + t * (z2 - z1);\n    return [px, py, pz];\n    // TODO: Add cases when line is parallel to the plane:\n    //       (a) no intersection,\n    //       (b) line contained in plane\n  }\n\n  return intersect;\n}\n\nexports.name = 'intersect';\nexports.factory = factory;\n","module.exports = [\n  require('./algebra'),\n  require('./arithmetic'),\n  require('./bitwise'),\n  require('./combinatorics'),\n  require('./complex'),\n  require('./geometry'),\n  require('./logical'),\n  require('./matrix'),\n  require('./probability'),\n  require('./relational'),\n  require('./set'),\n  require('./special'),\n  require('./statistics'),\n  require('./string'),\n  require('./trigonometry'),\n  require('./unit'),\n  require('./utils')\n];\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var zeros = load(require('../matrix/zeros'));\n  var not = load(require('./not'));\n  var isZero = load(require('../utils/isZero'));\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4);   // returns true\n   *\n   *    a = [2, 0, 0];\n   *    b = [3, 7, 0];\n   *    c = 0;\n   *\n   *    math.and(a, b);   // returns [true, false, false]\n   *    math.and(a, c);   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n  var and = typed('and', {\n\n    'number, number': function (x, y) {\n      return !!(x && y);\n    },\n\n    'Complex, Complex': function (x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n\n    'Unit, Unit': function (x, y) {\n      return and(x.value, y.value);\n    },\n    \n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse & sparse\n              c = algorithm06(x, y, and, false);\n              break;\n            default:\n              // sparse & dense\n              c = algorithm02(y, x, and, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense & sparse\n              c = algorithm02(x, y, and, false);\n              break;\n            default:\n              // dense & dense\n              c = algorithm13(x, y, and);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return and(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return and(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return and(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, and, false);\n          break;\n        default:\n          c = algorithm14(x, y, and, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm11(y, x, and, true);\n          break;\n        default:\n          c = algorithm14(y, x, and, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return and(matrix(x), y).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return and(x, matrix(y)).valueOf();\n    }\n  });\n\n  and.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['and'] + '${args[1]}\\\\right)'\n  };\n\n  return and;\n}\n\nexports.name = 'and';\nexports.factory = factory;\n","module.exports = [\n  require('./and'),\n  require('./not'),\n  require('./or'),\n  require('./xor')\n];\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  /**\n   * Logical `not`. Flips boolean value of a given parameter.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.not(x)\n   *\n   * Examples:\n   *\n   *    math.not(2);      // returns false\n   *    math.not(0);      // returns true\n   *    math.not(true);   // returns false\n   *\n   *    a = [2, -7, 0];\n   *    math.not(a);      // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    and, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when input is a zero or empty value.\n   */\n  var not = typed('not', {\n    'number': function (x) {\n      return !x;\n    },\n\n    'Complex': function (x) {\n      return x.re === 0 && x.im === 0;\n    },\n\n    'BigNumber': function (x) {\n      return x.isZero() || x.isNaN();\n    },\n\n    'Unit': function (x) {\n      return not(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, not);\n    }\n  });\n\n  not.toTex = {\n    1: latex.operators['not'] + '\\\\left(${args[0]}\\\\right)'\n  };\n\n  return not;\n}\n\nexports.name = 'not';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.or(x, y)\n   *\n   * Examples:\n   *\n   *    math.or(2, 4);   // returns true\n   *\n   *    a = [2, 5, 0];\n   *    b = [0, 22, 0];\n   *    c = 0;\n   *\n   *    math.or(a, b);   // returns [true, true, false]\n   *    math.or(b, c);   // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    and, not, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\n   */\n  var or = typed('or', {\n\n    'number, number': function (x, y) {\n      return !!(x || y);\n    },\n\n    'Complex, Complex': function (x, y) {\n      return (x.re !== 0 || x.im !== 0) || (y.re !== 0 || y.im !== 0);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return (!x.isZero() && !x.isNaN()) || (!y.isZero() && !y.isNaN());\n    },\n\n    'Unit, Unit': function (x, y) {\n      return or(x.value, y.value);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm05(x, y, or);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, or, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, or, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, or);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return or(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return or(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return or(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, or, false);\n          break;\n        default:\n          c = algorithm14(x, y, or, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, or, true);\n          break;\n        default:\n          c = algorithm14(y, x, or, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, or, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, or, true).valueOf();\n    }\n  });\n\n  or.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['or'] + '${args[1]}\\\\right)'\n  };\n\n  return or;\n}\n\nexports.name = 'or';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.xor(x, y)\n   *\n   * Examples:\n   *\n   *    math.xor(2, 4);   // returns false\n   *\n   *    a = [2, 0, 0];\n   *    b = [2, 7, 0];\n   *    c = 0;\n   *\n   *    math.xor(a, b);   // returns [false, true, false]\n   *    math.xor(a, c);   // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    and, not, or\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one and only one input is defined with a nonzero/nonempty value.\n   */\n  var xor = typed('xor', {\n \n    'number, number': function (x, y) {\n      return !!x !== !!y;\n    },\n\n    'Complex, Complex': function (x, y) {\n      return ((x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0));\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return ((!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN()));\n    },\n\n    'Unit, Unit': function (x, y) {\n      return xor(x.value, y.value);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, xor);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, xor, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, xor, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, xor);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return xor(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return xor(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return xor(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, xor, false);\n          break;\n        default:\n          c = algorithm14(x, y, xor, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, xor, true);\n          break;\n        default:\n          c = algorithm14(y, x, xor, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, xor, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, xor, true).valueOf();\n    }\n  });\n\n  xor.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['xor'] + '${args[1]}\\\\right)'\n  };\n\n  return xor;\n}\n\nexports.name = 'xor';\nexports.factory = factory;\n","'use strict';\n\nvar clone = require('../../utils/object').clone;\nvar isInteger = require('../../utils/number').isInteger;\nvar array = require('../../utils/array');\nvar IndexError = require('../../error/IndexError');\nvar DimensionError = require('../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Concatenate two or more matrices.\n   *\n   * Syntax:\n   *\n   *     math.concat(A, B, C, ...)\n   *     math.concat(A, B, C, ..., dim)\n   *\n   * Where:\n   *\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n   *   By default the last dimension of the matrices.\n   *\n   * Examples:\n   *\n   *    var A = [[1, 2], [5, 6]];\n   *    var B = [[3, 4], [7, 8]];\n   *\n   *    math.concat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n   *    math.concat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n   *    math.concat('hello', ' ', 'world'); // returns 'hello world'\n   *\n   * See also:\n   *\n   *    size, squeeze, subset, transpose\n   *\n   * @param {... Array | Matrix} args     Two or more matrices\n   * @return {Array | Matrix} Concatenated matrix\n   */\n  var concat = typed('concat', {\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\n    '...Array | Matrix | number | BigNumber': function (args) {\n      var i;\n      var len = args.length;\n      var dim = -1;  // zero-based dimension\n      var prevDim;\n      var asMatrix = false;\n      var matrices = [];  // contains multi dimensional arrays\n\n      for (i = 0; i < len; i++) {\n        var arg = args[i];\n\n        // test whether we need to return a Matrix (if not we return an Array)\n        if (arg && arg.isMatrix === true) {\n          asMatrix = true;\n        }\n\n        if (typeof arg === 'number' || (arg && arg.isBigNumber === true)) {\n          if (i !== len - 1) {\n            throw new Error('Dimension must be specified as last argument');\n          }\n\n          // last argument contains the dimension on which to concatenate\n          prevDim = dim;\n          dim = arg.valueOf(); // change BigNumber to number\n\n          if (!isInteger(dim)) {\n            throw new TypeError('Integer number expected for dimension');\n          }\n\n          if (dim < 0 || (i > 0 && dim > prevDim)) {\n            // TODO: would be more clear when throwing a DimensionError here\n            throw new IndexError(dim, prevDim + 1);\n          }\n        }\n        else {\n          // this is a matrix or array\n          var m = clone(arg).valueOf();\n          var size = array.size(m);\n          matrices[i] = m;\n          prevDim = dim;\n          dim = size.length - 1;\n\n          // verify whether each of the matrices has the same number of dimensions\n          if (i > 0 && dim != prevDim) {\n            throw new DimensionError(prevDim + 1, dim + 1);\n          }\n        }\n      }\n\n      if (matrices.length == 0) {\n        throw new SyntaxError('At least one matrix expected');\n      }\n\n      var res = matrices.shift();\n      while (matrices.length) {\n        res = _concat(res, matrices.shift(), dim, 0);\n      }\n\n      return asMatrix ? matrix(res) : res;\n    },\n\n    '...string': function (args) {\n      return args.join('');\n    }\n  });\n\n  concat.toTex = undefined; // use default template\n\n  return concat;\n}\n\n/**\n * Recursively concatenate two matrices.\n * The contents of the matrices is not cloned.\n * @param {Array} a             Multi dimensional array\n * @param {Array} b             Multi dimensional array\n * @param {number} concatDim    The dimension on which to concatenate (zero-based)\n * @param {number} dim          The current dim (zero-based)\n * @return {Array} c            The concatenated matrix\n * @private\n */\nfunction _concat(a, b, concatDim, dim) {\n  if (dim < concatDim) {\n    // recurse into next dimension\n    if (a.length != b.length) {\n      throw new DimensionError(a.length, b.length);\n    }\n\n    var c = [];\n    for (var i = 0; i < a.length; i++) {\n      c[i] = _concat(a[i], b[i], concatDim, dim + 1);\n    }\n    return c;\n  }\n  else {\n    // concatenate this dimension\n    return a.concat(b);\n  }\n}\n\nexports.name = 'concat';\nexports.factory = factory;\n","'use strict';\n\nvar array = require('../../utils/array');\n\nfunction factory (type, config, load, typed) {\n  var matrix   = load(require('../../type/matrix/function/matrix'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var multiply = load(require('../arithmetic/multiply'));\n\n  /**\n   * Calculate the cross product for two vectors in three dimensional space.\n   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined\n   * as:\n   *\n   *    cross(A, B) = [\n   *      a2 * b3 - a3 * b2,\n   *      a3 * b1 - a1 * b3,\n   *      a1 * b2 - a2 * b1\n   *    ]\n   *\n   * If one of the input vectors has a dimension greater than 1, the output\n   * vector will be a 1x3 (2-dimensional) matrix.\n   *\n   * Syntax:\n   *\n   *    math.cross(x, y)\n   *\n   * Examples:\n   *\n   *    math.cross([1, 1, 0],   [0, 1, 1]);       // Returns [1, -1, 1]\n   *    math.cross([3, -3, 1],  [4, 9, 2]);       // Returns [-15, -2, 39]\n   *    math.cross([2, 3, 4],   [5, 6, 7]);       // Returns [-3, 6, -3]\n   *    math.cross([[1, 2, 3]], [[4], [5], [6]]); // Returns [[-3, 6, -3]]\n   *\n   * See also:\n   *\n   *    dot, multiply\n   *\n   * @param  {Array | Matrix} x   First vector\n   * @param  {Array | Matrix} y   Second vector\n   * @return {Array | Matrix}     Returns the cross product of `x` and `y`\n   */\n  var cross = typed('cross', {\n    'Matrix, Matrix': function (x, y) {\n      return matrix(_cross(x.toArray(), y.toArray()));\n    },\n\n    'Matrix, Array': function (x, y) {\n      return matrix(_cross(x.toArray(), y));\n    },\n\n    'Array, Matrix': function (x, y) {\n      return matrix(_cross(x, y.toArray()));\n    },\n\n    'Array, Array': _cross\n  });\n\n  cross.toTex = {\n    2: '\\\\left(${args[0]}\\\\right)\\\\times\\\\left(${args[1]}\\\\right)'\n  };\n\n  return cross;\n\n  /**\n   * Calculate the cross product for two arrays\n   * @param {Array} x  First vector\n   * @param {Array} y  Second vector\n   * @returns {Array} Returns the cross product of x and y\n   * @private\n   */\n  function _cross(x, y) {\n    var highestDimension = Math.max(array.size(x).length, array.size(y).length);\n\n    x = array.squeeze(x);\n    y = array.squeeze(y);\n\n    var xSize = array.size(x);\n    var ySize = array.size(y);\n\n    if (xSize.length != 1 || ySize.length != 1 || xSize[0] != 3 || ySize[0] != 3) {\n      throw new RangeError('Vectors with length 3 expected ' +\n      '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');\n    }\n\n    var product = [\n      subtract(multiply(x[1], y[2]), multiply(x[2], y[1])),\n      subtract(multiply(x[2], y[0]), multiply(x[0], y[2])),\n      subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))\n    ];\n\n    if (highestDimension > 1) {\n      return [product];\n    } else {\n      return product;\n    }\n  }\n}\n\nexports.name = 'cross';\nexports.factory = factory;\n","'use strict';\n\nvar util = require('../../utils/index');\nvar object = util.object;\nvar string = util.string;\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var add = load(require('../arithmetic/add'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var unaryMinus = load(require('../arithmetic/unaryMinus'));\n\n  /**\n   * Calculate the determinant of a matrix.\n   *\n   * Syntax:\n   *\n   *    math.det(x)\n   *\n   * Examples:\n   *\n   *    math.det([[1, 2], [3, 4]]); // returns -2\n   *\n   *    var A = [\n   *      [-2, 2, 3],\n   *      [-1, 1, 3],\n   *      [2, 0, -1]\n   *    ]\n   *    math.det(A); // returns 6\n   *\n   * See also:\n   *\n   *    inv\n   *\n   * @param {Array | Matrix} x  A matrix\n   * @return {number} The determinant of `x`\n   */\n  var det = typed('det', {\n    'any': function (x) {\n      return object.clone(x);\n    },\n\n    'Array | Matrix': function det (x) {\n      var size;\n      if (x && x.isMatrix === true) {\n        size = x.size();\n      }\n      else if (Array.isArray(x)) {\n        x = matrix(x);\n        size = x.size();\n      }\n      else {\n        // a scalar\n        size = [];\n      }\n\n      switch (size.length) {\n        case 0:\n          // scalar\n          return object.clone(x);\n\n        case 1:\n          // vector\n          if (size[0] == 1) {\n            return object.clone(x.valueOf()[0]);\n          }\n          else {\n            throw new RangeError('Matrix must be square ' +\n            '(size: ' + string.format(size) + ')');\n          }\n\n        case 2:\n          // two dimensional array\n          var rows = size[0];\n          var cols = size[1];\n          if (rows == cols) {\n            return _det(x.clone().valueOf(), rows, cols);\n          }\n          else {\n            throw new RangeError('Matrix must be square ' +\n            '(size: ' + string.format(size) + ')');\n          }\n\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' +\n          '(size: ' + string.format(size) + ')');\n      }\n    }\n  });\n\n  det.toTex = {1: '\\\\det\\\\left(${args[0]}\\\\right)'};\n\n  return det;\n\n  /**\n   * Calculate the determinant of a matrix\n   * @param {Array[]} matrix  A square, two dimensional matrix\n   * @param {number} rows     Number of rows of the matrix (zero-based)\n   * @param {number} cols     Number of columns of the matrix (zero-based)\n   * @returns {number} det\n   * @private\n   */\n  function _det (matrix, rows, cols) {\n    if (rows == 1) {\n      // this is a 1 x 1 matrix\n      return object.clone(matrix[0][0]);\n    }\n    else if (rows == 2) {\n      // this is a 2 x 2 matrix\n      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12\n      return subtract(\n          multiply(matrix[0][0], matrix[1][1]),\n          multiply(matrix[1][0], matrix[0][1])\n      );\n    }\n    else {\n      // this is an n x n matrix\n      var compute_mu = function (matrix) {\n        var i, j;\n\n        // Compute the matrix with zero lower triangle, same upper triangle,\n        // and diagonals given by the negated sum of the below diagonal\n        // elements.\n        var mu = new Array(matrix.length);\n        var sum = 0;\n        for (i = 1; i < matrix.length; i++) {\n          sum = add(sum, matrix[i][i]);\n        }\n\n        for (i = 0; i < matrix.length; i++) {\n          mu[i] = new Array(matrix.length);\n          mu[i][i] = unaryMinus(sum);\n\n          for (j = 0; j < i; j++) {\n            mu[i][j] = 0; // TODO: make bignumber 0 in case of bignumber computation\n          }\n\n          for (j = i + 1; j < matrix.length; j++) {\n            mu[i][j] = matrix[i][j];\n          }\n\n          if (i+1 < matrix.length) {\n            sum = subtract(sum, matrix[i + 1][i + 1]);\n          }\n        }\n\n        return mu;\n      };\n\n      var fa = matrix;\n      for (var i = 0; i < rows - 1; i++) {\n        fa = multiply(compute_mu(fa), matrix);\n      }\n\n      if (rows % 2 == 0) {\n        return unaryMinus(fa[0][0]);\n      } else {\n        return fa[0][0];\n      }\n    }\n  }\n}\n\nexports.name = 'det';\nexports.factory = factory;\n\n","'use strict';\n\nvar array     = require('../../utils/array');\nvar clone     = require('../../utils/object').clone;\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  \n  /**\n   * Create a diagonal matrix or retrieve the diagonal of a matrix\n   *\n   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.\n   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.\n   * When k is positive, the values are placed on the super diagonal.\n   * When k is negative, the values are placed on the sub diagonal.\n   *\n   * Syntax:\n   *\n   *     math.diag(X)\n   *     math.diag(X, format)\n   *     math.diag(X, k)\n   *     math.diag(X, k, format)\n   *\n   * Examples:\n   *\n   *     // create a diagonal matrix\n   *     math.diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n   *     math.diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]\n   *     math.diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]\n   *\n   *    // retrieve the diagonal from a matrix\n   *    var a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n   *    math.diag(a);   // returns [1, 5, 9]\n   *\n   * See also:\n   *\n   *     ones, zeros, eye\n   *\n   * @param {Matrix | Array} x          A two dimensional matrix or a vector\n   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled\n   *                                    in or retrieved.\n   * @param {string} [format='dense']   The matrix storage format.\n   *\n   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.\n   */\n  var diag = typed('diag', {\n    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments\n\n    'Array': function (x) {\n      return _diag(x, 0, array.size(x), null);\n    },\n\n    'Array, number': function (x, k) {\n      return _diag(x, k, array.size(x), null);\n    },\n    \n    'Array, BigNumber': function (x, k) {\n      return _diag(x, k.toNumber(), array.size(x), null);\n    },\n\n    'Array, string': function (x, format) {\n      return _diag(x, 0, array.size(x), format);\n    },\n\n    'Array, number, string': function (x, k, format) {\n      return _diag(x, k, array.size(x), format);\n    },\n\n    'Array, BigNumber, string': function (x, k, format) {\n      return _diag(x, k.toNumber(), array.size(x), format);\n    },\n\n    'Matrix': function (x) {\n      return _diag(x, 0, x.size(), x.storage());\n    },\n\n    'Matrix, number': function (x, k) {\n      return _diag(x, k, x.size(), x.storage());\n    },\n\n    'Matrix, BigNumber': function (x, k) {\n      return _diag(x, k.toNumber(), x.size(), x.storage());\n    },\n\n    'Matrix, string': function (x, format) {\n      return _diag(x, 0, x.size(), format);\n    },\n\n    'Matrix, number, string': function (x, k, format) {\n      return _diag(x, k, x.size(), format);\n    },\n\n    'Matrix, BigNumber, string': function (x, k, format) {\n      return _diag(x, k.toNumber(), x.size(), format);\n    }\n  });\n\n  diag.toTex = undefined; // use default template\n\n  return diag;\n\n  /**\n   * Creeate diagonal matrix from a vector or vice versa\n   * @param {Array | Matrix} x\n   * @param {number} k\n   * @param {string} format Storage format for matrix. If null,\n   *                          an Array is returned\n   * @returns {Array | Matrix}\n   * @private\n   */\n  function _diag (x, k, size, format) {\n    if (!isInteger(k)) {\n      throw new TypeError ('Second parameter in function diag must be an integer');\n    }\n    \n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // check dimensions\n    switch (size.length) {\n      case 1:\n        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);\n      case 2:\n        return _getDiagonal(x, k, format, size, kSub, kSuper);\n    }\n    throw new RangeError('Matrix for function diag must be 2 dimensional');\n  }\n  \n  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {\n    // matrix size\n    var ms = [l + kSub, l + kSuper];\n    // get matrix constructor\n    var F = type.Matrix.storage(format || 'dense');\n    // create diagonal matrix\n    var m = F.diagonal(ms, x, k);\n    // check we need to return a matrix\n    return format !== null ? m : m.valueOf();\n  }\n  \n  function _getDiagonal(x, k, format, s, kSub, kSuper) {\n    // check x is a Matrix\n    if (x && x.isMatrix === true) {\n      // get diagonal matrix\n      var dm = x.diagonal(k);\n      // check we need to return a matrix\n      if (format !== null) {\n        // check we need to change matrix format\n        if (format !== dm.storage())\n          return matrix(dm, format);\n        return dm;\n      }\n      return dm.valueOf();\n    }\n    // vector size\n    var n = Math.min(s[0] - kSub, s[1] - kSuper);\n    // diagonal values\n    var vector = [];\n    // loop diagonal\n    for (var i = 0; i < n; i++) {\n      vector[i] = x[i + kSub][i + kSuper];\n    }\n    // check we need to return a matrix\n    return format !== null ? matrix(vector) : vector;\n  }\n}\n\nexports.name = 'diag';\nexports.factory = factory;\n","'use strict';\n\nvar size = require('../../utils/array').size;\n\nfunction factory (type, config, load, typed) {\n  var add      = load(require('../arithmetic/add'));\n  var multiply = load(require('../arithmetic/multiply'));\n\n  /**\n   * Calculate the dot product of two vectors. The dot product of\n   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:\n   *\n   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn\n   *\n   * Syntax:\n   *\n   *    math.dot(x, y)\n   *\n   * Examples:\n   *\n   *    math.dot([2, 4, 1], [2, 2, 3]);       // returns number 15\n   *    math.multiply([2, 4, 1], [2, 2, 3]);  // returns number 15\n   *\n   * See also:\n   *\n   *    multiply, cross\n   *\n   * @param  {Array | Matrix} x     First vector\n   * @param  {Array | Matrix} y     Second vector\n   * @return {number}               Returns the dot product of `x` and `y`\n   */\n  var dot = typed('dot', {\n    'Matrix, Matrix': function (x, y) {\n      return _dot(x.toArray(), y.toArray());\n    },\n\n    'Matrix, Array': function (x, y) {\n      return _dot(x.toArray(), y);\n    },\n\n    'Array, Matrix': function (x, y) {\n      return _dot(x, y.toArray());\n    },\n\n    'Array, Array': _dot\n  });\n  \n  dot.toTex = {2: '\\\\left(${args[0]}\\\\cdot${args[1]}\\\\right)'};\n\n  return dot;\n\n  /**\n   * Calculate the dot product for two arrays\n   * @param {Array} x  First vector\n   * @param {Array} y  Second vector\n   * @returns {number} Returns the dot product of x and y\n   * @private\n   */\n  // TODO: double code with math.multiply\n  function _dot(x, y) {\n    var xSize= size(x);\n    var ySize = size(y);\n    var len = xSize[0];\n\n    if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message\n    if (xSize[0] != ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');\n    if (len == 0) throw new RangeError('Cannot calculate the dot product of empty vectors');\n\n    var prod = 0;\n    for (var i = 0; i < len; i++) {\n      prod = add(prod, multiply(x[i], y[i]));\n    }\n\n    return prod;\n  }\n}\n\nexports.name = 'dot';\nexports.factory = factory;\n","'use strict';\n\nvar array = require('../../utils/array');\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  \n  var matrix = load(require('../../type/matrix/function/matrix'));\n  \n  /**\n   * Create a 2-dimensional identity matrix with size m x n or n x n.\n   * The matrix has ones on the diagonal and zeros elsewhere.\n   *\n   * Syntax:\n   *\n   *    math.eye(n)\n   *    math.eye(n, format)\n   *    math.eye(m, n)\n   *    math.eye(m, n, format)\n   *    math.eye([m, n])\n   *    math.eye([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.eye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n   *    math.eye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]\n   *\n   *    var A = [[1, 2, 3], [4, 5, 6]];\n   *    math.eye(math.size(A));         // returns [[1, 0, 0], [0, 1, 0]]\n   *\n   * See also:\n   *\n   *    diag, ones, zeros, size, range\n   *\n   * @param {...number | Matrix | Array} size   The size for the matrix\n   * @param {string} [format]                   The Matrix storage format\n   *\n   * @return {Matrix | Array | number} A matrix with ones on the diagonal.\n   */\n  var eye = typed('eye', {\n    '': function () {\n      return (config.matrix === 'Matrix') ? matrix([]) : [];\n    },\n\n    'string': function (format) {\n      return matrix(format);\n    },\n\n    'number | BigNumber': function (rows) {\n      return _eye(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);\n    },\n    \n    'number | BigNumber, string': function (rows, format) {\n      return _eye(rows, rows, format);\n    },\n\n    'number | BigNumber, number | BigNumber': function (rows, cols) {\n      return _eye(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);\n    },\n    \n    'number | BigNumber, number | BigNumber, string': function (rows, cols, format) {\n      return _eye(rows, cols, format);\n    },\n\n    'Array':  function (size) {\n      return _eyeVector(size);\n    },\n    \n    'Array, string':  function (size, format) {\n      return _eyeVector(size, format);\n    },\n\n    'Matrix': function (size) {\n      return _eyeVector(size.valueOf(), size.storage());\n    },\n    \n    'Matrix, string': function (size, format) {\n      return _eyeVector(size.valueOf(), format);\n    }\n  });\n\n  eye.toTex = undefined; // use default template\n\n  return eye;\n\n  function _eyeVector (size, format) {\n    switch (size.length) {\n      case 0: return format ? matrix(format) : [];\n      case 1: return _eye(size[0], size[0], format);\n      case 2: return _eye(size[0], size[1], format);\n      default: throw new Error('Vector containing two values expected');\n    }\n  }\n\n  /**\n   * Create an identity matrix\n   * @param {number | BigNumber} rows\n   * @param {number | BigNumber} cols\n   * @param {string} [format]\n   * @returns {Matrix}\n   * @private\n   */\n  function _eye (rows, cols, format) {\n    // BigNumber constructor with the right precision\n    var Big = (rows && rows.isBigNumber === true)\n        ? type.BigNumber\n        : (cols && cols.isBigNumber === true)\n            ? type.BigNumber\n            : null;\n\n    if (rows && rows.isBigNumber === true) rows = rows.toNumber();\n    if (cols && cols.isBigNumber === true) cols = cols.toNumber();\n\n    if (!isInteger(rows) || rows < 1) {\n      throw new Error('Parameters in function eye must be positive integers');\n    }\n    if (!isInteger(cols) || cols < 1) {\n      throw new Error('Parameters in function eye must be positive integers');\n    }\n    \n    var one = Big ? new type.BigNumber(1) : 1;\n    var defaultValue = Big ? new Big(0) : 0;\n    var size = [rows, cols];\n    \n    // check we need to return a matrix\n    if (format) {\n      // get matrix storage constructor\n      var F = type.Matrix.storage(format);\n      // create diagonal matrix (use optimized implementation for storage format)\n      return F.diagonal(size, one, 0, defaultValue);\n    }\n    \n    // create and resize array\n    var res = array.resize([], size, defaultValue);\n    // fill in ones on the diagonal\n    var minimum = rows < cols ? rows : cols;\n    // fill diagonal\n    for (var d = 0; d < minimum; d++) {\n      res[d][d] = one;\n    }\n    return res;\n  }\n}\n\nexports.name = 'eye';\nexports.factory = factory;\n","'use strict';\n\nvar size = require('../../utils/array').size;\nvar maxArgumentCount = require('../../utils/function').maxArgumentCount;\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  \n  /**\n   * Filter the items in an array or one dimensional matrix.\n   *\n   * Syntax:\n   *\n   *    math.filter(x, test)\n   *\n   * Examples:\n   *\n   *    function isPositive (x) {\n   *      return x > 0;\n   *    }\n   *    math.filter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]\n   *\n   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/); // returns [\"23\", \"100\", \"55\"]\n   *\n   * See also:\n   *\n   *    forEach, map, sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to filter\n   * @param {Function | RegExp} test\n   *        A function or regular expression to test items.\n   *        All entries for which `test` returns true are returned.\n   *        When `test` is a function, it is invoked with three parameters:\n   *        the value of the element, the index of the element, and the\n   *        matrix/array being traversed. The function must return a boolean.\n   * @return {Matrix | Array} Returns the filtered matrix.\n   */\n  var filter = typed('filter', {\n    'Array, function': _filterCallback,\n\n    'Array, RegExp': _filterRegExp,\n\n    'Matrix, function': function (x, test) {\n      return matrix(_filterCallback(x.toArray(), test));\n    },\n\n    'Matrix, RegExp': function (x, test) {\n      return matrix(_filterRegExp(x.toArray(), test));\n    }\n  });\n\n  filter.toTex = undefined; // use default template\n\n  return filter;\n}\n\n/**\n * Filter values in a callback given a callback function\n * @param {Array} x\n * @param {Function} callback\n * @return {Array} Returns the filtered array\n * @private\n */\nfunction _filterCallback (x, callback) {\n  if (size(x).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  return x.filter(function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    if (args === 1) {\n      return callback(value);\n    }\n    else if (args === 2) {\n      return callback(value, [index]);\n    }\n    else { // 3 or -1\n      return callback(value, [index], array);\n    }\n  });\n}\n\n/**\n * Filter values in a callback given a regular expression\n * @param {Array} x\n * @param {Function} regexp\n * @return {Array} Returns the filtered array\n * @private\n */\nfunction _filterRegExp (x, regexp) {\n  if (size(x).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n\n  return x.filter(function (entry) {\n    return regexp.test(entry);\n  });\n}\n\nexports.name = 'filter';\nexports.factory = factory;\n","'use strict';\n\nvar clone = require('../../utils/object').clone;\nvar _flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Flatten a multi dimensional matrix into a single dimensional matrix.\n   *\n   * Syntax:\n   *\n   *    math.flatten(x)\n   *\n   * Examples:\n   *\n   *    math.flatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]\n   *\n   * See also:\n   *\n   *    concat, resize, size, squeeze\n   *\n   * @param {Matrix | Array} x   Matrix to be flattened\n   * @return {Matrix | Array} Returns the flattened matrix\n   */\n  var flatten = typed('flatten', {\n    'Array': function (x) {\n      return _flatten(clone(x));\n    },\n\n    'Matrix': function (x) {\n      var flat = _flatten(clone(x.toArray()));\n      // TODO: return the same matrix type as x\n      return matrix(flat);\n    }\n  });\n\n  flatten.toTex = undefined; // use default template\n\n  return flatten;\n}\n\nexports.name = 'flatten';\nexports.factory = factory;\n","'use strict';\n\nvar maxArgumentCount = require('../../utils/function').maxArgumentCount;\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Iterate over all elements of a matrix/array, and executes the given callback function.\n   *\n   * Syntax:\n   *\n   *    math.forEach(x, callback)\n   *\n   * Examples:\n   *\n   *    math.forEach([1, 2, 3], function(value) {\n   *      console.log(value);\n   *    });\n   *    // outputs 1, 2, 3\n   *\n   * See also:\n   *\n   *    filter, map, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix/array being traversed.\n   */\n  var forEach = typed('forEach', {\n    'Array, function': _forEach,\n\n    'Matrix, function': function (x, callback) {\n      return x.forEach(callback);\n    }\n  });\n\n  forEach.toTex = undefined; // use default template\n\n  return forEach;\n}\n\n/**\n * forEach for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @private\n */\nfunction _forEach (array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  var recurse = function (value, index) {\n    if (Array.isArray(value)) {\n      value.forEach(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        recurse(child, index.concat(i));\n      });\n    }\n    else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        callback(value);\n      }\n      else if (args === 2) {\n        callback(value, index);\n      }\n      else { // 3 or -1\n        callback(value, index, array);\n      }\n    }\n  };\n  recurse(array, []);\n}\n\nexports.name = 'forEach';\nexports.factory = factory;\n","module.exports = [\n  require('./concat'),\n  require('./cross'),\n  require('./det'),\n  require('./diag'),\n  require('./dot'),\n  require('./eye'),\n  require('./filter'),\n  require('./flatten'),\n  require('./forEach'),\n  require('./inv'),\n  require('./kron'),\n  require('./map'),\n  require('./ones'),\n  require('./partitionSelect'),\n  require('./range'),\n  require('./reshape'),\n  require('./resize'),\n  require('./size'),\n  require('./sort'),\n  require('./squeeze'),\n  require('./subset'),\n  require('./trace'),\n  require('./transpose'),\n  require('./zeros')\n];\n","'use strict';\n\nvar util = require('../../utils/index');\n\nfunction factory (type, config, load, typed) {\n  var matrix       = load(require('../../type/matrix/function/matrix'));\n  var divideScalar = load(require('../arithmetic/divideScalar'));\n  var addScalar    = load(require('../arithmetic/addScalar'));\n  var multiply     = load(require('../arithmetic/multiply'));\n  var unaryMinus   = load(require('../arithmetic/unaryMinus'));\n  var det          = load(require('../matrix/det'));\n  var eye          = load(require('./eye'));\n\n  /**\n   * Calculate the inverse of a square matrix.\n   *\n   * Syntax:\n   *\n   *     math.inv(x)\n   *\n   * Examples:\n   *\n   *     math.inv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]\n   *     math.inv(4);                 // returns 0.25\n   *     1 / 4;                       // returns 0.25\n   *\n   * See also:\n   *\n   *     det, transpose\n   *\n   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n   */\n  var inv = typed('inv', {\n    'Array | Matrix': function (x) {\n      var size = (x.isMatrix === true) ? x.size() : util.array.size(x);\n      switch (size.length) {\n        case 1:\n          // vector\n          if (size[0] == 1) {\n            if (x.isMatrix === true) {\n              return matrix([\n                divideScalar(1, x.valueOf()[0])\n              ]);\n            }\n            else {\n              return [\n                divideScalar(1, x[0])\n              ];\n            }\n          }\n          else {\n            throw new RangeError('Matrix must be square ' +\n            '(size: ' + util.string.format(size) + ')');\n          }\n\n        case 2:\n          // two dimensional array\n          var rows = size[0];\n          var cols = size[1];\n          if (rows == cols) {\n            if (x.isMatrix === true) {\n              return matrix(\n                  _inv(x.valueOf(), rows, cols),\n                  x.storage()\n              );\n            }\n            else {\n              // return an Array\n              return _inv(x, rows, cols);\n            }\n          }\n          else {\n            throw new RangeError('Matrix must be square ' +\n            '(size: ' + util.string.format(size) + ')');\n          }\n\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' +\n          '(size: ' + util.string.format(size) + ')');\n      }\n    },\n\n    'any': function (x) {\n      // scalar\n      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers\n    }\n  });\n\n  /**\n   * Calculate the inverse of a square matrix\n   * @param {Array[]} mat     A square matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns, must equal rows\n   * @return {Array[]} inv    Inverse matrix\n   * @private\n   */\n  function _inv (mat, rows, cols){\n    var r, s, f, value, temp;\n\n    if (rows == 1) {\n      // this is a 1 x 1 matrix\n      value = mat[0][0];\n      if (value == 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n      return [[\n        divideScalar(1, value)\n      ]];\n    }\n    else if (rows == 2) {\n      // this is a 2 x 2 matrix\n      var d = det(mat);\n      if (d == 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n      return [\n        [\n          divideScalar(mat[1][1], d),\n          divideScalar(unaryMinus(mat[0][1]), d)\n        ],\n        [\n          divideScalar(unaryMinus(mat[1][0]), d),\n          divideScalar(mat[0][0], d)\n        ]\n      ];\n    }\n    else {\n      // this is a matrix of 3 x 3 or larger\n      // calculate inverse using gauss-jordan elimination\n      //      http://en.wikipedia.org/wiki/Gaussian_elimination\n      //      http://mathworld.wolfram.com/MatrixInverse.html\n      //      http://math.uww.edu/~mcfarlat/inverse.htm\n\n      // make a copy of the matrix (only the arrays, not of the elements)\n      var A = mat.concat();\n      for (r = 0; r < rows; r++) {\n        A[r] = A[r].concat();\n      }\n\n      // create an identity matrix which in the end will contain the\n      // matrix inverse\n      var B = eye(rows).valueOf();\n\n      // loop over all columns, and perform row reductions\n      for (var c = 0; c < cols; c++) {\n        // element Acc should be non zero. if not, swap content\n        // with one of the lower rows\n        r = c;\n        while (r < rows && A[r][c] == 0) {\n          r++;\n        }\n        if (r == rows || A[r][c] == 0) {\n          // TODO: in case of zero det, just return a matrix wih Infinity values? (like octave)\n          throw Error('Cannot calculate inverse, determinant is zero');\n        }\n        if (r != c) {\n          temp = A[c]; A[c] = A[r]; A[r] = temp;\n          temp = B[c]; B[c] = B[r]; B[r] = temp;\n        }\n\n        // eliminate non-zero values on the other rows at column c\n        var Ac = A[c],\n            Bc = B[c];\n        for (r = 0; r < rows; r++) {\n          var Ar = A[r],\n              Br = B[r];\n          if(r != c) {\n            // eliminate value at column c and row r\n            if (Ar[c] != 0) {\n              f = divideScalar(unaryMinus(Ar[c]), Ac[c]);\n\n              // add (f * row c) to row r to eliminate the value\n              // at column c\n              for (s = c; s < cols; s++) {\n                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));\n              }\n              for (s = 0; s < cols; s++) {\n                Br[s] = addScalar(Br[s],  multiply(f, Bc[s]));\n              }\n            }\n          }\n          else {\n            // normalize value at Acc to 1,\n            // divide each value on row r with the value at Acc\n            f = Ac[c];\n            for (s = c; s < cols; s++) {\n              Ar[s] = divideScalar(Ar[s], f);\n            }\n            for (s = 0; s < cols; s++) {\n              Br[s] = divideScalar(Br[s], f);\n            }\n          }\n        }\n      }\n      return B;\n    }\n  }\n\n  inv.toTex = {1: '\\\\left(${args[0]}\\\\right)^{-1}'};\n\n  return inv;\n}\n\nexports.name = 'inv';\nexports.factory = factory;\n","'use strict';\n\nvar size = require('../../utils/array').size;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var multiplyScalar = load(require('../arithmetic/multiplyScalar'))\n    /**\n     * Calculates the kronecker product of 2 matrices or vectors.\n     *\n     * NOTE: If a one dimensional vector / matrix is given, it will be\n     * wrapped so its two dimensions.\n     * See the examples.\n     *\n     * Syntax:\n     *\n     *    math.kron(x, y)\n     *\n     * Examples:\n     *\n     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]]);\n     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]\n     *\n     *    math.kron([1,1], [2,3,4]);\n     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]\n     *\n     * See also:\n     *\n     *    multiply, dot, cross\n     *\n     * @param  {Array | Matrix} x     First vector\n     * @param  {Array | Matrix} y     Second vector\n     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`\n     */\n    var kron = typed('kron', {\n        'Matrix, Matrix': function(x, y) {\n            return matrix(_kron(x.toArray(), y.toArray()));\n        },\n\n        'Matrix, Array': function(x, y) {\n            return matrix(_kron(x.toArray(), y));\n        },\n\n        'Array, Matrix': function(x, y) {\n            return matrix(_kron(x, y.toArray()));\n        },\n\n        'Array, Array': _kron\n    });\n\n    return kron;\n\n    /**\n     * Calculate the kronecker product of two matrices / vectors\n     * @param {Array} a  First vector\n     * @param {Array} b  Second vector\n     * @returns {Array} Returns the kronecker product of x and y\n     * @private\n     */\n    function _kron(a, b) {\n        // Deal with the dimensions of the matricies.\n        if (size(a).length === 1) {\n          // Wrap it in a 2D Matrix\n          a = [a];\n        }\n        if (size(b).length === 1) {\n          // Wrap it in a 2D Matrix\n          b = [b]\n        }\n        if (size(a).length > 2 || size(b).length > 2) {\n            throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' +\n            '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');\n        }\n        var t = [];\n        var r = [];\n\n        return a.map(function(a) {\n            return b.map(function(b) {\n                return a.map(function(y) {\n                    return b.map(function(x) {\n                        return r.push(multiplyScalar(y, x));\n                    });\n                }, t.push(r = []));\n            });\n        }, t = []) && t;\n    }\n}\n\nexports.name = 'kron';\nexports.factory = factory;\n","'use strict';\n\nvar maxArgumentCount = require('../../utils/function').maxArgumentCount;\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a new matrix or array with the results of the callback function executed on\n   * each entry of the matrix/array.\n   *\n   * Syntax:\n   *\n   *    math.map(x, callback)\n   *\n   * Examples:\n   *\n   *    math.map([1, 2, 3], function(value) {\n   *      return value * value;\n   *    });  // returns [1, 4, 9]\n   *\n   * See also:\n   *\n   *    filter, forEach, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the matrix being traversed.\n   * @return {Matrix | array}     Transformed map of x\n   */\n  var map = typed('map', {\n    'Array, function': _map,\n\n    'Matrix, function': function (x, callback) {\n      return x.map(callback);\n    }\n  });\n\n  map.toTex = undefined; // use default template\n\n  return map;\n}\n\n/**\n * Map for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @return {Array}\n * @private\n */\nfunction _map (array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  var recurse = function (value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i));\n      });\n    }\n    else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        return callback(value);\n      }\n      else if (args === 2) {\n        return callback(value, index);\n      }\n      else { // 3 or -1\n        return callback(value, index, array);\n      }\n    }\n  };\n\n  return recurse(array, []);\n}\n\nexports.name = 'map';\nexports.factory = factory;\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar resize = require('../../utils/array').resize;\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Create a matrix filled with ones. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.ones(m)\n   *    math.ones(m, format)\n   *    math.ones(m, n)\n   *    math.ones(m, n, format)\n   *    math.ones([m, n])\n   *    math.ones([m, n], format)\n   *    math.ones([m, n, p, ...])\n   *    math.ones([m, n, p, ...], format)\n   *\n   * Examples:\n   *\n   *    math.ones(3);                   // returns [1, 1, 1]\n   *    math.ones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]\n   *    math.ones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n   *\n   *    var A = [[1, 2, 3], [4, 5, 6]];\n   *    math.ones(math.size(A));       // returns [[1, 1, 1], [1, 1, 1]]\n   *\n   * See also:\n   *\n   *    zeros, eye, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix | number}  A matrix filled with ones\n   */\n  var ones = typed('ones', {\n    '': function () {\n      return (config.matrix === 'Array')\n          ? _ones([])\n          : _ones([], 'default');\n    },\n\n    // math.ones(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function (size) {\n      var last = size[size.length - 1];\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _ones(size, format);\n      }\n      else if (config.matrix === 'Array') {\n        return _ones(size);\n      }\n      else {\n        return _ones(size, 'default');\n      }\n    },\n\n    'Array': _ones,\n\n    'Matrix': function (size) {\n      var format = size.storage();\n      return _ones(size.valueOf(), format);\n    },\n\n    'Array | Matrix, string': function (size, format) {\n      return _ones (size.valueOf(), format);\n    }\n  });\n\n  ones.toTex = undefined; // use default template\n\n  return ones;\n\n  /**\n   * Create an Array or Matrix with ones\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n  function _ones(size, format) {\n    var hasBigNumbers = _normalize(size);\n    var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n      return m;\n    }\n    else {\n      // return an Array\n      var arr = [];\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n      return arr;\n    }\n  }\n\n  // replace BigNumbers with numbers, returns true if size contained BigNumbers\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (value && value.isBigNumber === true) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  }\n\n  // validate arguments\n  function _validate (size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function ones must be positive integers');\n      }\n    });\n  }\n}\n\nexports.name = 'ones';\nexports.factory = factory;\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  var asc = load(require('../relational/compare'));\n  function desc(a, b) {\n    return -asc(a, b);\n  }\n\n  /**\n   * Partition-based selection of an array or 1D matrix.\n   * Will find the kth smallest value, and mutates the input array.\n   * Uses Quickselect.\n   *\n   * Syntax:\n   *\n   *    math.partitionSelect(x, k)\n   *    math.partitionSelect(x, k, compare)\n   *\n   * Examples:\n   *\n   *    math.partitionSelect([5, 10, 1], 2);           // returns 10\n   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'\n   *\n   *    function sortByLength (a, b) {\n   *      return a.length - b.length;\n   *    }\n   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'\n   *\n   * See also:\n   *\n   *    sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n   * @param {Number} k            The kth smallest value to be retrieved; zero-based index\n   * @param {Function | 'asc' | 'desc'} [compare='asc']\n   *        An optional comparator function. The function is called as\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n   *        and 0 when a == b.\n   * @return {*} Returns the kth lowest value.\n   */\n  return typed('partitionSelect', {\n    'Array | Matrix, number': function (x, k) {\n      return _partitionSelect(x, k, asc);\n    },\n\n    'Array | Matrix, number, string': function (x, k, compare) {\n      if (compare === 'asc') {\n        return _partitionSelect(x, k, asc);\n      }\n      else if (compare === 'desc') {\n        return _partitionSelect(x, k, desc);\n      }\n      else {\n        throw new Error('Compare string must be \"asc\" or \"desc\"');\n      }\n    },\n\n    'Array | Matrix, number, function': _partitionSelect\n  });\n\n  function _partitionSelect(x, k, compare) {\n    if (!isInteger(k) || k < 0) {\n      throw new Error('k must be a non-negative integer');\n    }\n\n    if (x && x.isMatrix) {\n      var size = x.size();\n      if (size.length > 1) {\n        throw new Error('Only one dimensional matrices supported');\n      }\n      return quickSelect(x.valueOf(), k, compare);\n    }\n\n    if (Array.isArray(x)) {\n      return quickSelect(x, k, compare);\n    }\n  }\n\n  /**\n   * Quickselect algorithm.\n   * Code adapted from:\n   * http://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html\n   *\n   * @param {Array} arr\n   * @param {Number} k\n   * @param {Function} compare\n   * @private\n   */\n  function quickSelect(arr, k, compare) {\n    if (k >= arr.length) {\n      throw new Error('k out of bounds');\n    }\n\n    var from = 0;\n    var to = arr.length - 1;\n\n    // if from == to we reached the kth element\n    while (from < to) {\n      var r = from;\n      var w = to;\n      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];\n\n      // stop if the reader and writer meets\n      while (r < w) {\n        // arr[r] >= pivot\n        if (compare(arr[r], pivot) >= 0) { // put the large values at the end\n          var tmp = arr[w];\n          arr[w] = arr[r];\n          arr[r] = tmp;\n          --w;\n        } else { // the value is smaller than the pivot, skip\n          ++r;\n        }\n      }\n\n      // if we stepped up (r++) we need to step one down (arr[r] > pivot)\n      if (compare(arr[r], pivot) > 0) {\n        --r;\n      }\n\n      // the r pointer is on the end of the first k elements\n      if (k <= r) {\n        to = r;\n      } else {\n        from = r + 1;\n      }\n    }\n\n    return arr[k];\n  }\n}\n\nexports.name = 'partitionSelect';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var ZERO = new type.BigNumber(0);\n  var ONE = new type.BigNumber(1);\n\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | BigNumber}`\n   *   Start of the range\n   * - `end: number | BigNumber`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | BigNumber`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6);        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1);   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6');     // [2, 3, 4, 5]\n   *     math.range(2, 6, true);  // [2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n  var range = typed('range', {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n\n    // TODO: a number or boolean should not be converted to string here\n    'string': _strRange,\n    'string, boolean': _strRange,\n\n    'number, number':  function (start, end) {\n      return _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number': function (start, end, step) {\n      return _out(_rangeEx(start, end, step));\n    },\n    'number, number, boolean': function (start, end, includeEnd) {\n      return includeEnd\n          ? _out(_rangeInc(start, end, 1))\n          : _out(_rangeEx(start, end, 1));\n    },\n    'number, number, number, boolean': function (start, end, step, includeEnd) {\n      return includeEnd\n          ? _out(_rangeInc(start, end, step))\n          : _out(_rangeEx(start, end, step));\n    },\n\n    'BigNumber, BigNumber':  function (start, end) {\n      return _out(_bigRangeEx(start, end, ONE));\n    },\n    'BigNumber, BigNumber, BigNumber': function (start, end, step) {\n      return _out(_bigRangeEx(start, end, step));\n    },\n    'BigNumber, BigNumber, boolean': function (start, end, includeEnd) {\n      return includeEnd\n          ? _out(_bigRangeInc(start, end, ONE))\n          : _out(_bigRangeEx(start, end, ONE));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function (start, end, step, includeEnd) {\n      return includeEnd\n          ? _out(_bigRangeInc(start, end, step))\n          : _out(_bigRangeEx(start, end, step));\n    }\n\n  });\n\n  range.toTex = undefined; // use default template\n\n  return range;\n\n  function _out(arr) {\n    return config.matrix === 'Array' ? arr : matrix(arr);\n  }\n\n  function _strRange (str, includeEnd) {\n    var r = _parse(str);\n    if (!r){\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n\n    var fn;\n    if (config.number === 'BigNumber') {\n      fn = includeEnd ? _bigRangeInc : _bigRangeEx;\n      return _out(fn(\n          new type.BigNumber(r.start),\n          new type.BigNumber(r.end),\n          new type.BigNumber(r.step)));\n    }\n    else {\n      fn = includeEnd ? _rangeInc : _rangeEx;\n      return _out(fn(r.start, r.end, r.step));\n    }\n  }\n\n  /**\n   * Create a range with numbers. End is excluded\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n  function _rangeEx (start, end, step) {\n    var array = [],\n        x = start;\n    if (step > 0) {\n      while (x < end) {\n        array.push(x);\n        x += step;\n      }\n    }\n    else if (step < 0) {\n      while (x > end) {\n        array.push(x);\n        x += step;\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * Create a range with numbers. End is included\n   * @param {number} start\n   * @param {number} end\n   * @param {number} step\n   * @returns {Array} range\n   * @private\n   */\n  function _rangeInc (start, end, step) {\n    var array = [],\n        x = start;\n    if (step > 0) {\n      while (x <= end) {\n        array.push(x);\n        x += step;\n      }\n    }\n    else if (step < 0) {\n      while (x >= end) {\n        array.push(x);\n        x += step;\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * Create a range with big numbers. End is excluded\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n  function _bigRangeEx (start, end, step) {\n    var array = [],\n        x = start;\n    if (step.gt(ZERO)) {\n      while (x.lt(end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n    else if (step.lt(ZERO)) {\n      while (x.gt(end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * Create a range with big numbers. End is included\n   * @param {BigNumber} start\n   * @param {BigNumber} end\n   * @param {BigNumber} step\n   * @returns {Array} range\n   * @private\n   */\n  function _bigRangeInc (start, end, step) {\n    var array = [],\n        x = start;\n    if (step.gt(ZERO)) {\n      while (x.lte(end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n    else if (step.lt(ZERO)) {\n      while (x.gte(end)) {\n        array.push(x);\n        x = x.plus(step);\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n  function _parse (str) {\n    var args = str.split(':');\n\n    // number\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if(invalid) {\n      return null;\n    }\n\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n\n      default:\n        return null;\n    }\n  }\n\n}\n\nexports.name = 'range';\nexports.factory = factory;\n","'use strict';\n\nvar DimensionError = require('../../error/DimensionError');\n\nvar isInteger = require('../../utils/number').isInteger;\nvar array = require('../../utils/array');\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Reshape a multi dimensional array to fit the specified dimensions\n   *\n   * Syntax:\n   *\n   *     math.reshape(x, sizes)\n   *\n   * Examples:\n   *\n   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3]);\n   *     // returns Array  [[1, 2, 3], [4, 5, 6]]\n   *\n   *     math.reshape([[1, 2], [3, 4]], [1, 4]);\n   *     // returns Array  [[1, 2, 3, 4]]\n   *\n   *     math.reshape([[1, 2], [3, 4]], [4]);\n   *     // returns Array [1, 2, 3, 4]\n   *\n   *     var x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8]);\n   *     math.reshape(x, [2, 2, 2]);\n   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n   *\n   * See also:\n   *\n   *     size, squeeze, resize\n   *\n   * @param {Array | Matrix | *} x  Matrix to be reshaped\n   * @param {number[]} sizes        One dimensional array with integral sizes for\n   *                                each dimension\n   *\n   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`\n   *\n   * @throws {TypeError}            If `sizes` does not contain solely integers\n   * @throws {DimensionError}       If the product of the new dimension sizes does\n   *                                not equal that of the old ones\n   */\n  var reshape = typed('reshape', {\n\n    'Matrix, Array': function (x, sizes) {\n      if(x.reshape) {\n        return x.reshape(sizes);\n      } else {\n        return matrix(array.reshape(x.valueOf(), sizes));\n      }\n    },\n\n    'Array, Array': function (x, sizes) {\n      sizes.forEach(function (size) {\n        if (!isInteger(size)) {\n          throw new TypeError('Invalid size for dimension: ' + size);\n        }\n      });\n      return array.reshape(x, sizes);\n    }\n\n  });\n\n  reshape.toTex = undefined; // use default template\n\n  return reshape;\n}\n\nexports.name = 'reshape';\nexports.factory = factory;\n","'use strict';\n\nvar DimensionError = require('../../error/DimensionError');\nvar ArgumentsError = require('../../error/ArgumentsError');\n\nvar isInteger = require('../../utils/number').isInteger;\nvar format = require('../../utils/string').format;\nvar clone = require('../../utils/object').clone;\nvar array = require('../../utils/array');\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Resize a matrix\n   *\n   * Syntax:\n   *\n   *     math.resize(x, size)\n   *     math.resize(x, size, defaultValue)\n   *\n   * Examples:\n   *\n   *     math.resize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]\n   *     math.resize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]\n   *     math.resize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]\n   *     math.resize(\"hello\", [8], \"!\");    // returns string 'hello!!!'\n   *\n   * See also:\n   *\n   *     size, squeeze, subset, reshape\n   *\n   * @param {Array | Matrix | *} x             Matrix to be resized\n   * @param {Array | Matrix} size              One dimensional array with numbers\n   * @param {number | string} [defaultValue=0] Zero by default, except in\n   *                                           case of a string, in that case\n   *                                           defaultValue = ' '\n   * @return {* | Array | Matrix} A resized clone of matrix `x`\n   */\n  // TODO: rework resize to a typed-function\n  var resize = function resize (x, size, defaultValue) {\n    if (arguments.length != 2 && arguments.length != 3) {\n      throw new ArgumentsError('resize', arguments.length, 2, 3);\n    }\n\n    if (size && size.isMatrix === true) {\n      size = size.valueOf(); // get Array\n    }\n\n    if (size.length && size[0] && size[0].isBigNumber === true) {\n      // convert bignumbers to numbers\n      size = size.map(function (value) {\n        return (value && value.isBigNumber === true) ? value.toNumber() : value;\n      });\n    }\n    \n    // check x is a Matrix\n    if (x && x.isMatrix === true) {\n      // use optimized matrix implementation, return copy\n      return x.resize(size, defaultValue, true);\n    }\n    \n    if (typeof x === 'string') {\n      // resize string\n      return _resizeString(x, size, defaultValue);\n    }\n    \n    // check result should be a matrix\n    var asMatrix = Array.isArray(x) ? false : (config.matrix !== 'Array');\n\n    if (size.length == 0) {\n      // output a scalar\n      while (Array.isArray(x)) {\n        x = x[0];\n      }\n\n      return clone(x);\n    }\n    else {\n      // output an array/matrix\n      if (!Array.isArray(x)) {\n        x = [x];\n      }\n      x = clone(x);\n\n      var res = array.resize(x, size, defaultValue);\n      return asMatrix ? matrix(res) : res;\n    }\n  };\n\n  resize.toTex = undefined; // use default template\n\n  return resize;\n\n  /**\n   * Resize a string\n   * @param {string} str\n   * @param {number[]} size\n   * @param {string} [defaultChar=' ']\n   * @private\n   */\n  function _resizeString(str, size, defaultChar) {\n    if (defaultChar !== undefined) {\n      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {\n        throw new TypeError('Single character expected as defaultValue');\n      }\n    }\n    else {\n      defaultChar = ' ';\n    }\n\n    if (size.length !== 1) {\n      throw new DimensionError(size.length, 1);\n    }\n    var len = size[0];\n    if (typeof len !== 'number' || !isInteger(len)) {\n      throw new TypeError('Invalid size, must contain positive integers ' +\n          '(size: ' + format(size) + ')');\n    }\n\n    if (str.length > len) {\n      return str.substring(0, len);\n    }\n    else if (str.length < len) {\n      var res = str;\n      for (var i = 0, ii = len - str.length; i < ii; i++) {\n        res += defaultChar;\n      }\n      return res;\n    }\n    else {\n      return str;\n    }\n  }\n}\n\nexports.name = 'resize';\nexports.factory = factory;\n","'use strict';\n\nvar array = require('../../utils/array');\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Calculate the size of a matrix or scalar.\n   *\n   * Syntax:\n   *\n   *     math.size(x)\n   *\n   * Examples:\n   *\n   *     math.size(2.3);                  // returns []\n   *     math.size('hello world');        // returns [11]\n   *\n   *     var A = [[1, 2, 3], [4, 5, 6]];\n   *     math.size(A);                    // returns [2, 3]\n   *     math.size(math.range(1,6));      // returns [5]\n   *\n   * See also:\n   *\n   *     resize, squeeze, subset\n   *\n   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix\n   * @return {Array | Matrix} A vector with size of `x`.\n   */\n  var size = typed('size', {\n    'Matrix': function (x) {\n      // TODO: return the same matrix type as the input\n      return matrix(x.size());\n    },\n\n    'Array': array.size,\n\n    'string': function (x) {\n      return (config.matrix === 'Array') ? [x.length] : matrix([x.length]);\n    },\n\n    'number | Complex | BigNumber | Unit | boolean | null': function (x) {\n      // scalar\n      return (config.matrix === 'Array') ? [] : matrix([]);\n    }\n  });\n\n  size.toTex = undefined; // use default template\n\n  return size;\n}\n\nexports.name = 'size';\nexports.factory = factory;\n","'use strict';\n\nvar size = require('../../utils/array').size;\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var compareAsc = load(require('../relational/compare'));\n  var compareDesc = function (a, b) {\n    return -compareAsc(a, b);\n  };\n  var compareNatural = load(require('../relational/compareNatural'));\n\n  /**\n   * Sort the items in a matrix.\n   *\n   * Syntax:\n   *\n   *    math.sort(x)\n   *    math.sort(x, compare)\n   *\n   * Examples:\n   *\n   *    math.sort([5, 10, 1]); // returns [1, 5, 10]\n   *    math.sort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']\n   *\n   *    function sortByLength (a, b) {\n   *      return a.length - b.length;\n   *    }\n   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']\n   *\n   * See also:\n   *\n   *    filter, forEach, map, compare, compareNatural\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']\n   *        An optional _comparator function or name. The function is called as\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n   *        and 0 when a == b.\n   * @return {Matrix | Array} Returns the sorted matrix.\n   */\n  var sort = typed('sort', {\n    'Array': function (x) {\n      _arrayIsVector(x);\n      return x.sort(compareAsc);\n    },\n\n    'Matrix': function (x) {\n      _matrixIsVector(x);\n      return matrix(x.toArray().sort(compareAsc), x.storage());\n    },\n\n    'Array, function': function (x, _comparator) {\n      _arrayIsVector(x);\n      return x.sort(_comparator);\n    },\n\n    'Matrix, function': function (x, _comparator) {\n      _matrixIsVector(x);\n      return matrix(x.toArray().sort(_comparator), x.storage());\n    },\n\n    'Array, string': function (x, order) {\n      _arrayIsVector(x);\n      return x.sort(_comparator(order));\n    },\n\n    'Matrix, string': function (x, order) {\n      _matrixIsVector(x);\n      return matrix(x.toArray().sort(_comparator(order)), x.storage());\n    }\n  });\n\n  sort.toTex = undefined; // use default template\n\n  /**\n   * Get the comparator for given order ('asc', 'desc', 'natural')\n   * @param {'asc' | 'desc' | 'natural'} order\n   * @return {Function} Returns a _comparator function\n   */\n  function _comparator (order) {\n    if (order === 'asc') {\n      return compareAsc;\n    }\n    else if (order === 'desc') {\n      return compareDesc;\n    }\n    else if (order === 'natural') {\n      return compareNatural;\n    }\n    else {\n      throw new Error('String \"asc\", \"desc\", or \"natural\" expected');\n    }\n  }\n\n  /**\n   * Validate whether an array is one dimensional\n   * Throws an error when this is not the case\n   * @param {Array} array\n   * @private\n   */\n  function _arrayIsVector (array) {\n    if (size(array).length !== 1) {\n      throw new Error('One dimensional array expected');\n    }\n  }\n\n  /**\n   * Validate whether a matrix is one dimensional\n   * Throws an error when this is not the case\n   * @param {Matrix} matrix\n   * @private\n   */\n  function _matrixIsVector (matrix) {\n    if (matrix.size().length !== 1) {\n      throw new Error('One dimensional matrix expected');\n    }\n  }\n\n  return sort;\n}\n\nexports.name = 'sort';\nexports.factory = factory;\n","'use strict';\n\nvar object = require('../../utils/object');\nvar array = require('../../utils/array');\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.\n   *\n   * Syntax:\n   *\n   *     math.squeeze(x)\n   *\n   * Examples:\n   *\n   *     math.squeeze([3]);           // returns 3\n   *     math.squeeze([[3]]);         // returns 3\n   *\n   *     var A = math.zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)\n   *     math.squeeze(A);             // returns [0, 0, 0] (size 3)\n   *\n   *     var B = math.zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)\n   *     math.squeeze(B);             // returns [0, 0, 0] (size 3)\n   *\n   *     // only inner and outer dimensions are removed\n   *     var C = math.zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n   *     math.squeeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n   *\n   * See also:\n   *\n   *     subset\n   *\n   * @param {Matrix | Array} x      Matrix to be squeezed\n   * @return {Matrix | Array} Squeezed matrix\n   */\n  var squeeze = typed('squeeze', {\n    'Array': function (x) {\n      return array.squeeze(object.clone(x));\n    },\n\n    'Matrix': function (x) {\n      var res = array.squeeze(x.toArray());\n      // FIXME: return the same type of matrix as the input\n      return Array.isArray(res) ? matrix(res) : res;\n    },\n\n    'any': function (x) {\n      // scalar\n      return object.clone(x);\n    }\n  });\n\n  squeeze.toTex = undefined; // use default template\n\n  return squeeze;\n}\n\nexports.name = 'squeeze';\nexports.factory = factory;\n","'use strict';\n\nvar clone = require('../../utils/object').clone;\nvar validateIndex = require('../../utils/array').validateIndex;\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\nvar DimensionError = require('../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     var d = [[1, 2], [3, 4]];\n   *     math.subset(d, math.index(1, 0));        // returns 3\n   *     math.subset(d, math.index([0, 2], 1));   // returns [[2], [4]]\n   *\n   *     // replace a subset\n   *     var e = [];\n   *     var f = math.subset(e, math.index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]\n   *     var g = math.subset(f, math.index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index                     An index containing ranges for each\n   *                                          dimension\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n  var subset = typed('subset', {\n    // get subset\n    'Array, Index': function (value, index) {\n      var m = matrix(value);\n      var subset = m.subset(index);       // returns a Matrix\n      return index.isScalar()\n          ? subset\n          : subset.valueOf();  // return an Array (like the input)\n    },\n\n    'Matrix, Index': function (value, index) {\n      return value.subset(index);\n    },\n\n    'Object, Index': _getObjectProperty,\n\n    'string, Index': _getSubstring,\n\n    // set subset\n    'Array, Index, any': function (value, index, replacement) {\n      return matrix(clone(value))\n          .subset(index, replacement, undefined)\n          .valueOf();\n    },\n\n    'Array, Index, any, any': function (value, index, replacement, defaultValue) {\n      return matrix(clone(value))\n          .subset(index, replacement, defaultValue)\n          .valueOf();\n    },\n\n    'Matrix, Index, any': function (value, index, replacement) {\n      return value.clone().subset(index, replacement);\n    },\n\n    'Matrix, Index, any, any': function (value, index, replacement, defaultValue) {\n      return value.clone().subset(index, replacement, defaultValue);\n    },\n\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n\n  subset.toTex = undefined; // use default template\n\n  return subset;\n\n  /**\n   * Retrieve a subset of a string\n   * @param {string} str            string from which to get a substring\n   * @param {Index} index           An index containing ranges for each dimension\n   * @returns {string} substring\n   * @private\n   */\n  function _getSubstring(str, index) {\n    if (!index || index.isIndex !== true) {\n      // TODO: better error message\n      throw new TypeError('Index expected');\n    }\n    if (index.size().length != 1) {\n      throw new DimensionError(index.size().length, 1);\n    }\n\n    // validate whether the range is out of range\n    var strLen = str.length;\n    validateIndex(index.min()[0], strLen);\n    validateIndex(index.max()[0], strLen);\n\n    var range = index.dimension(0);\n\n    var substr = '';\n    range.forEach(function (v) {\n      substr += str.charAt(v);\n    });\n\n    return substr;\n  }\n\n  /**\n   * Replace a substring in a string\n   * @param {string} str            string to be replaced\n   * @param {Index} index           An index containing ranges for each dimension\n   * @param {string} replacement    Replacement string\n   * @param {string} [defaultValue] Default value to be uses when resizing\n   *                                the string. is ' ' by default\n   * @returns {string} result\n   * @private\n   */\n  function _setSubstring(str, index, replacement, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      // TODO: better error message\n      throw new TypeError('Index expected');\n    }\n    if (index.size().length != 1) {\n      throw new DimensionError(index.size().length, 1);\n    }\n    if (defaultValue !== undefined) {\n      if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n        throw new TypeError('Single character expected as defaultValue');\n      }\n    }\n    else {\n      defaultValue = ' ';\n    }\n\n    var range = index.dimension(0);\n    var len = range.size()[0];\n\n    if (len != replacement.length) {\n      throw new DimensionError(range.size()[0], replacement.length);\n    }\n\n    // validate whether the range is out of range\n    var strLen = str.length;\n    validateIndex(index.min()[0]);\n    validateIndex(index.max()[0]);\n\n    // copy the string into an array with characters\n    var chars = [];\n    for (var i = 0; i < strLen; i++) {\n      chars[i] = str.charAt(i);\n    }\n\n    range.forEach(function (v, i) {\n      chars[v] = replacement.charAt(i[0]);\n    });\n\n    // initialize undefined characters with a space\n    if (chars.length > strLen) {\n      for (i = strLen - 1, len = chars.length; i < len; i++) {\n        if (!chars[i]) {\n          chars[i] = defaultValue;\n        }\n      }\n    }\n\n    return chars.join('');\n  }\n}\n\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\nfunction _getObjectProperty (object, index) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  return getSafeProperty(object, key);\n}\n\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\nfunction _setObjectProperty (object, index, replacement) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  // clone the object, and apply the property to the clone\n  var updated = clone(object);\n  setSafeProperty(updated, key, replacement);\n\n  return updated;\n}\n\nexports.name = 'subset';\nexports.factory = factory;\n","'use strict';\n\nvar clone = require('../../utils/object').clone;\nvar format = require('../../utils/string').format;\n\nfunction factory (type, config, load, typed) {\n  \n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var add = load(require('../arithmetic/add'));\n\n  /**\n   * Calculate the trace of a matrix: the sum of the elements on the main\n   * diagonal of a square matrix.\n   *\n   * Syntax:\n   *\n   *    math.trace(x)\n   *\n   * Examples:\n   *\n   *    math.trace([[1, 2], [3, 4]]); // returns 5\n   *\n   *    var A = [\n   *      [1, 2, 3],\n   *      [-1, 2, 3],\n   *      [2, 0, 3]\n   *    ]\n   *    math.trace(A); // returns 6\n   *\n   * See also:\n   *\n   *    diag\n   *\n   * @param {Array | Matrix} x  A matrix\n   *\n   * @return {number} The trace of `x`\n   */\n  var trace = typed('trace', {\n    \n    'Array': function (x) {\n      // use dense matrix implementation\n      return trace(matrix(x));\n    },\n\n    'Matrix': function (x) {\n      // result\n      var c;\n      // process storage format\n      switch (x.storage()) {\n        case 'dense':\n          c = _denseTrace(x);\n          break;\n        case 'sparse':\n          c = _sparseTrace(x);\n          break;\n      }\n      return c;\n    },\n    \n    'any': clone\n  });\n  \n  var _denseTrace = function (m) {\n    // matrix size & data\n    var size = m._size;\n    var data = m._data;\n    \n    // process dimensions\n    switch (size.length) {\n      case 1:\n        // vector\n        if (size[0] == 1) {\n          // return data[0]\n          return clone(data[0]);\n        }\n        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n      case 2:\n        // two dimensional\n        var rows = size[0];\n        var cols = size[1];\n        if (rows === cols) {\n          // calulate sum\n          var sum = 0;\n          // loop diagonal\n          for (var i = 0; i < rows; i++)\n            sum = add(sum, data[i][i]);\n          // return trace\n          return sum;\n        }\n        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');        \n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');\n    }\n  };\n  \n  var _sparseTrace = function (m) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    var size = m._size;\n    // check dimensions\n    var rows = size[0];\n    var columns = size[1];\n    // matrix must be square\n    if (rows === columns) {\n      // calulate sum\n      var sum = 0;\n      // check we have data (avoid looping columns)\n      if (values.length > 0) {\n        // loop columns\n        for (var j = 0; j < columns; j++) {\n          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n          var k0 = ptr[j];\n          var k1 = ptr[j + 1];\n          // loop k within [k0, k1[\n          for (var k = k0; k < k1; k++) {\n            // row index\n            var i = index[k];\n            // check row\n            if (i === j) {\n              // accumulate value\n              sum = add(sum, values[k]);\n              // exit loop\n              break;\n            }\n            if (i > j) {\n              // exit loop, no value on the diagonal for column j\n              break;\n            }\n          }\n        }\n      }\n      // return trace\n      return sum;\n    }\n    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');   \n  };\n\n  trace.toTex = {1: '\\\\mathrm{tr}\\\\left(${args[0]}\\\\right)'};\n  \n  return trace;\n}\n\nexports.name = 'trace';\nexports.factory = factory;\n","'use strict';\n\nvar clone = require('../../utils/object').clone;\nvar format = require('../../utils/string').format;\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var DenseMatrix = type.DenseMatrix,\n      SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Transpose a matrix. All values of the matrix are reflected over its\n   * main diagonal. Only applicable to two dimensional matrices containing\n   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional\n   * vectors and scalars return the input unchanged.\n   *\n   * Syntax:\n   *\n   *     math.transpose(x)\n   *\n   * Examples:\n   *\n   *     var A = [[1, 2, 3], [4, 5, 6]];\n   *     math.transpose(A);               // returns [[1, 4], [2, 5], [3, 6]]\n   *\n   * See also:\n   *\n   *     diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be transposed\n   * @return {Array | Matrix}   The transposed matrix\n   */\n  var transpose = typed('transpose', {\n\n    'Array': function (x) {\n      // use dense matrix implementation\n      return transpose(matrix(x)).valueOf();\n    },\n\n    'Matrix': function (x) {\n      // matrix size\n      var size = x.size();\n\n      // result\n      var c;\n      \n      // process dimensions\n      switch (size.length) {\n        case 1:\n          // vector\n          c = x.clone();\n          break;\n\n        case 2:\n          // rows and columns\n          var rows = size[0];\n          var columns = size[1];\n\n          // check columns\n          if (columns === 0) {\n            // throw exception\n            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');\n          }\n\n          // process storage format\n          switch (x.storage()) {\n            case 'dense':\n              c = _denseTranspose(x, rows, columns);\n              break;\n            case 'sparse':\n              c = _sparseTranspose(x, rows, columns);\n              break;\n          }\n          break;\n          \n        default:\n          // multi dimensional\n          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');\n      }\n      return c;\n    },\n\n    // scalars\n    'any': function (x) {\n      return clone(x);\n    }\n  });\n\n  var _denseTranspose = function (m, rows, columns) {\n    // matrix array\n    var data = m._data;\n    // transposed matrix data\n    var transposed = [];\n    var transposedRow;\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // initialize row\n      transposedRow = transposed[j] = [];\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // set data\n        transposedRow[i] = clone(data[i][j]);\n      }\n    }\n    // return matrix\n    return new DenseMatrix({\n      data: transposed,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  };\n\n  var _sparseTranspose = function (m, rows, columns) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // result matrices\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // row counts\n    var w = [];\n    for (var x = 0; x < rows; x++)\n      w[x] = 0;\n    // vars\n    var p, l, j;\n    // loop values in matrix\n    for (p = 0, l = index.length; p < l; p++) {\n      // number of values in row\n      w[index[p]]++;\n    }\n    // cumulative sum\n    var sum = 0;\n    // initialize cptr with the cummulative sum of row counts\n    for (var i = 0; i < rows; i++) {\n      // update cptr\n      cptr.push(sum);\n      // update sum\n      sum += w[i];\n      // update w\n      w[i] = cptr[i];\n    }\n    // update cptr\n    cptr.push(sum);\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // values & index in column\n      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {\n        // C values & index\n        var q = w[index[k]]++;\n        // C[j, i] = A[i, j]\n        cindex[q] = j;\n        // check we need to process values (pattern matrix)\n        if (values)\n          cvalues[q] = clone(values[k]);\n      }\n    }\n    // return matrix\n    return new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  };\n\n  transpose.toTex = {1: '\\\\left(${args[0]}\\\\right)' + latex.operators['transpose']};\n\n  return transpose;\n}\n\nexports.name = 'transpose';\nexports.factory = factory;\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar resize = require('../../utils/array').resize;\n\nfunction factory (type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  /**\n   * Create a matrix filled with zeros. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.zeros(m)\n   *    math.zeros(m, format)\n   *    math.zeros(m, n)\n   *    math.zeros(m, n, format)\n   *    math.zeros([m, n])\n   *    math.zeros([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.zeros(3);                  // returns [0, 0, 0]\n   *    math.zeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]\n   *    math.zeros(3, 'dense');         // returns [0, 0, 0]\n   *\n   *    var A = [[1, 2, 3], [4, 5, 6]];\n   *    math.zeros(math.size(A));       // returns [[0, 0, 0], [0, 0, 0]]\n   *\n   * See also:\n   *\n   *    ones, eye, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix}           A matrix filled with zeros\n   */\n  var zeros = typed('zeros', {\n    '': function () {\n      return (config.matrix === 'Array')\n          ? _zeros([])\n          : _zeros([], 'default');\n    },\n\n    // math.zeros(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function (size) {\n      var last = size[size.length - 1];\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _zeros(size, format);\n      }\n      else if (config.matrix === 'Array') {\n        return _zeros(size);\n      }\n      else {\n        return _zeros(size, 'default');\n      }\n    },\n\n    'Array': _zeros,\n\n    'Matrix': function (size) {\n      var format = size.storage();\n      return _zeros(size.valueOf(), format);\n    },\n\n    'Array | Matrix, string': function (size, format) {\n      return _zeros (size.valueOf(), format);\n    }\n  });\n\n  zeros.toTex = undefined; // use default template\n\n  return zeros;\n\n  /**\n   * Create an Array or Matrix with zeros\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n  function _zeros(size, format) {\n    var hasBigNumbers = _normalize(size);\n    var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n      return m;\n    }\n    else {\n      // return an Array\n      var arr = [];\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n      return arr;\n    }\n  }\n\n  // replace BigNumbers with numbers, returns true if size contained BigNumbers\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (value && value.isBigNumber === true) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  }\n\n  // validate arguments\n  function _validate (size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function zeros must be positive integers');\n      }\n    });\n  }\n}\n\n// TODO: zeros contains almost the same code as ones. Reuse this?\n\nexports.name = 'zeros';\nexports.factory = factory;\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities.\n   *\n   * Combinations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.combinations(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinations(7, 5); // returns 21\n   *\n   * See also:\n   *\n   *    permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations.\n   */\n  var combinations = typed('combinations', {\n    'number, number': function (n, k) {\n      var max, result, i;\n\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n      if (k > n) {\n        throw new TypeError('k must be less than or equal to n');\n      }\n\n      max = Math.max(k, n - k);\n      result = 1;\n      for (i = 1; i <= n - max; i++) {\n        result = result * (max + i) / i;\n      }\n\n      return result;\n    },\n\n    'BigNumber, BigNumber': function (n, k) {\n      var max, result, i, ii;\n      var one = new type.BigNumber(1);\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n      if (k.gt(n)) {\n        throw new TypeError('k must be less than n in function combinations');\n      }\n\n      max = n.minus(k);\n      if (k.lt(max)) max = k;\n      result = one;\n      for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {\n        result = result.times(max.plus(i)).dividedBy(i);\n      }\n\n      return result;\n    }\n\n    // TODO: implement support for collection in combinations\n  });\n\n  combinations.toTex = {2: '\\\\binom{${args[0]}}{${args[1]}}'};\n\n  return combinations;\n}\n\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}\n\nexports.name = 'combinations';\nexports.factory = factory;\n","'use strict';\n\nvar ArgumentsError = require('../../error/ArgumentsError');\nvar isCollection = require('../../utils/collection/isCollection');\nvar isNumber = require('../../utils/number').isNumber;\n\n// TODO: rethink math.distribution\n// TODO: rework to a typed function\nfunction factory (type, config, load, typed, math) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var array = require('../../utils/array');\n\n  // seeded pseudo random number generator\n  var rng = load(require('./seededRNG'));\n\n  /**\n   * Create a distribution object with a set of random functions for given\n   * random distribution.\n   *\n   * Syntax:\n   *\n   *     math.distribution(name)\n   *\n   * Examples:\n   *\n   *     var normalDist = math.distribution('normal'); // create a normal distribution\n   *     normalDist.random(0, 10);                     // get a random value between 0 and 10\n   *\n   * See also:\n   *\n   *     random, randomInt, pickRandom\n   *\n   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.\n   * @return {Object}       Returns a distribution object containing functions:\n   *                        `random([size] [, min] [, max])`,\n   *                        `randomInt([min] [, max])`,\n   *                        `pickRandom(array)`\n   */\n  function distribution(name) {\n    if (!distributions.hasOwnProperty(name))\n      throw new Error('Unknown distribution ' + name);\n\n    var args = Array.prototype.slice.call(arguments, 1),\n        distribution = distributions[name].apply(this, args);\n\n    return (function(distribution) {\n\n      // This is the public API for all distributions\n      var randFunctions = {\n\n        random: function(arg1, arg2, arg3) {\n          var size, min, max;\n\n          if (arguments.length > 3) {\n            throw new ArgumentsError('random', arguments.length, 0, 3);\n          } else if (arguments.length === 1) {\n            // `random(max)` or `random(size)`\n            if (isCollection(arg1)) {\n              size = arg1;\n            } else {\n              max = arg1;\n            }\n          } else if (arguments.length === 2) {\n            // `random(min, max)` or `random(size, max)`\n            if (isCollection(arg1)) {\n              size = arg1;\n              max = arg2;\n            } else {\n              min = arg1;\n              max = arg2;\n            }\n          } else {\n            // `random(size, min, max)`\n            size = arg1;\n            min = arg2;\n            max = arg3;\n          }\n\n          // TODO: validate type of size\n          if ((min !== undefined && !isNumber(min)) || (max !== undefined && !isNumber(max))) {\n            throw new TypeError('Invalid argument in function random');\n          }\n\n          if (max === undefined) max = 1;\n          if (min === undefined) min = 0;\n          if (size !== undefined) {\n            var res = _randomDataForMatrix(size.valueOf(), min, max, _random);\n            return (size && size.isMatrix === true) ? matrix(res) : res;\n          }\n          return _random(min, max);\n        },\n\n        randomInt: typed({\n          'number | Array': function(arg) {\n            var min = 0;\n\n            if (isCollection(arg)) {\n              var size = arg;\n              var max = 1;\n              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);\n              return (size && size.isMatrix === true) ? matrix(res) : res;\n            } else {\n              var max = arg;\n              return _randomInt(min, max);\n            }\n          },\n          'number | Array, number': function(arg1, arg2) {\n            if (isCollection(arg1)) {\n              var size = arg1;\n              var max = arg2;\n              var min = 0;\n              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);\n              return (size && size.isMatrix === true) ? matrix(res) : res;\n            }\n            else {\n              var min = arg1;\n              var max = arg2;\n              return _randomInt(min, max);\n            }\n          },\n          'Array, number, number': function(size, min, max) {\n            var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);\n            return (size && size.isMatrix === true) ? matrix(res) : res;\n          }\n        }),\n\n        pickRandom: typed({\n          'Array': function(possibles) {\n            return _pickRandom(possibles);\n          },\n          'Array, number | Array': function(possibles, arg2) {\n            var number, weights;\n\n            if (Array.isArray(arg2)) {\n              weights = arg2;\n            } else if (isNumber(arg2)) {\n              number = arg2;\n            } else {\n              throw new TypeError('Invalid argument in function pickRandom')\n            }\n\n            return _pickRandom(possibles, number, weights);\n          },\n          'Array, number | Array, Array | number': function(possibles, arg2, arg3) {\n            var number, weights;\n\n            if (Array.isArray(arg2)) {\n              weights = arg2;\n              number = arg3;\n            } else {\n              weights = arg3;\n              number = arg2;\n            }\n\n            if (!Array.isArray(weights) || !isNumber(number)) {\n              throw new TypeError('Invalid argument in function pickRandom');\n            }\n\n            return _pickRandom(possibles, number, weights);\n          }\n        })\n      }\n\n      var _pickRandom = function(possibles, number, weights) {\n        var single = (typeof number === 'undefined');\n\n        if (single) {\n          number = 1;\n        }\n\n        if (possibles && possibles.isMatrix === true) {\n          possibles = possibles.valueOf(); // get Array\n        } else if (!Array.isArray(possibles)) {\n          throw new TypeError('Unsupported type of value in function pickRandom');\n        }\n\n        if (array.size(possibles).length > 1) {\n          throw new Error('Only one dimensional vectors supported');\n        }\n\n        if (typeof weights !== 'undefined') {\n          if (weights.length != possibles.length) {\n            throw new Error('Weights must have the same length as possibles');\n          }\n\n          var totalWeights = 0;\n\n          for (var i = 0, len = weights.length; i < len; i++) {\n            if (!isNumber(weights[i]) || weights[i] < 0) {\n              throw new Error('Weights must be an array of positive numbers');\n            }\n\n            totalWeights += weights[i];\n          }\n        }\n\n        var length = possibles.length;\n\n        if (length == 0) {\n          return [];\n        } else if (number >= length) {\n          return possibles;\n        }\n\n        var result = [];\n        var pick;\n\n        while (result.length < number) {\n          if (typeof weights === 'undefined') {\n            pick = possibles[Math.floor(rng() * length)];\n          } else {\n            var randKey = rng() * totalWeights;\n\n            for (var i = 0, len = possibles.length; i < len; i++) {\n              randKey -= weights[i];\n\n              if (randKey < 0) {\n                pick = possibles[i];\n                break;\n              }\n            }\n          }\n\n          if (result.indexOf(pick) == -1) {\n            result.push(pick);\n          }\n        }\n\n        return single ? result[0] : result;\n\n        // TODO: add support for multi dimensional matrices\n      }\n\n      var _random = function(min, max) {\n        return min + distribution() * (max - min);\n      };\n\n      var _randomInt = function(min, max) {\n        return Math.floor(min + distribution() * (max - min));\n      };\n\n      // This is a function for generating a random matrix recursively.\n      var _randomDataForMatrix = function(size, min, max, randFunc) {\n        var data = [], length, i;\n        size = size.slice(0);\n\n        if (size.length > 1) {\n          for (var i = 0, length = size.shift(); i < length; i++) {\n            data.push(_randomDataForMatrix(size, min, max, randFunc));\n          }\n        } else {\n          for (var i = 0, length = size.shift(); i < length; i++) {\n            data.push(randFunc(min, max));\n          }\n        }\n\n        return data;\n      };\n\n      return randFunctions;\n\n    })(distribution);\n  }\n\n  // Each distribution is a function that takes no argument and when called returns\n  // a number between 0 and 1.\n  var distributions = {\n\n    uniform: function() {\n      return rng;\n    },\n\n    // Implementation of normal distribution using Box-Muller transform\n    // ref : http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform\n    // We take : mean = 0.5, standard deviation = 1/6\n    // so that 99.7% values are in [0, 1].\n    normal: function() {\n      return function() {\n        var u1, u2,\n            picked = -1;\n        // We reject values outside of the interval [0, 1]\n        // TODO: check if it is ok to do that?\n        while (picked < 0 || picked > 1) {\n          u1 = rng();\n          u2 = rng();\n          picked = 1/6 * Math.pow(-2 * Math.log(u1), 0.5) * Math.cos(2 * Math.PI * u2) + 0.5;\n        }\n        return picked;\n      }\n    }\n  };\n\n  distribution.toTex = undefined; // use default template\n\n  return distribution;\n}\n\nexports.name = 'distribution';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var gamma = load(require('./gamma'));\n  var latex = require('../../utils/latex');\n\n  /**\n   * Compute the factorial of a value\n   *\n   * Factorial only supports an integer value as argument.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.factorial(n)\n   *\n   * Examples:\n   *\n   *    math.factorial(5);    // returns 120\n   *    math.factorial(3);    // returns 6\n   *\n   * See also:\n   *\n   *    combinations, gamma, permutations\n   *\n   * @param {number | BigNumber | Array | Matrix} n   An integer number\n   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`\n   */\n  var factorial = typed('factorial', {\n    'number': function (n) {\n      if (n < 0) {\n        throw new Error('Value must be non-negative');\n      }\n\n      return gamma(n + 1);\n    },\n\n    'BigNumber': function (n) {\n      if (n.isNegative()) {\n        throw new Error('Value must be non-negative');\n      }\n\n      return gamma(n.plus(1));\n    },\n\n    'Array | Matrix': function (n) {\n      return deepMap(n, factorial);\n    }\n  });\n\n  factorial.toTex = {\n    1: '\\\\left(${args[0]}\\\\right)' + latex.operators['factorial']\n  };\n\n  return factorial;\n}\n\nexports.name = 'factorial';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  var multiply = load(require('../arithmetic/multiply'));\n  var pow = load(require('../arithmetic/pow'));\n\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5);       // returns 24\n   *    math.gamma(-0.5);    // returns -3.5449077018110335\n   *    math.gamma(math.i);  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | Array | Matrix} n   A real or complex number\n   * @return {number | Array | Matrix}    The gamma of `n`\n   */\n  var gamma = typed('gamma', {\n    'number': function (n) {\n      var t, x;\n\n      if (isInteger(n)) {\n        if (n <= 0) {\n          return isFinite(n) ? Infinity : NaN;\n        }\n\n        if (n > 171) {\n          return Infinity;                  // Will overflow\n        }\n\n        var value = n - 2;\n        var res = n - 1;\n        while (value > 1) {\n          res *= value;\n          value--;\n        }\n\n        if (res == 0) {\n          res = 1;                          // 0! is per definition 1\n        }\n\n        return res;\n      }\n\n      if (n < 0.5) {\n        return Math.PI / (Math.sin(Math.PI * n) * gamma(1-n));\n      }\n\n      if (n >= 171.35) {\n        return Infinity;                    // will overflow\n      }\n\n      if (n > 85.0) {                       // Extended Stirling Approx\n        var twoN = n*n;\n        var threeN = twoN*n;\n        var fourN = threeN*n;\n        var fiveN = fourN*n;\n        return Math.sqrt(2*Math.PI/n) * Math.pow((n/Math.E), n) *\n            (1 + 1/(12*n) + 1/(288*twoN) - 139/(51840*threeN) -\n            571/(2488320*fourN) + 163879/(209018880*fiveN) +\n            5246819/(75246796800*fiveN*n));\n      }\n\n      --n;\n      x = p[0];\n      for (var i = 1; i < p.length; ++i) {\n        x += p[i] / (n+i);\n      }\n\n      t = n + g + 0.5;\n      return Math.sqrt(2*Math.PI) * Math.pow(t, n+0.5) * Math.exp(-t) * x;\n    },\n\n    'Complex': function (n) {\n      var t, x;\n\n      if (n.im == 0) {\n        return gamma(n.re);\n      }\n\n      n = new type.Complex(n.re - 1, n.im);\n      x = new type.Complex(p[0], 0);\n      for (var i = 1; i < p.length; ++i) {\n        var real = n.re + i;                // x += p[i]/(n+i)\n        var den = real*real + n.im*n.im;\n        if (den != 0) {\n          x.re += p[i] * real / den;\n          x.im += -(p[i] * n.im) / den;\n        } else {\n          x.re = p[i] < 0\n              ? -Infinity\n              :  Infinity;\n        }\n      }\n\n      t = new type.Complex(n.re + g + 0.5, n.im);\n      var twoPiSqrt = Math.sqrt(2*Math.PI);\n\n      n.re += 0.5;\n      var result = pow(t, n);\n      if (result.im == 0) {                 // sqrt(2*PI)*result\n        result.re *= twoPiSqrt;\n      } else if (result.re == 0) {\n        result.im *= twoPiSqrt;\n      } else {\n        result.re *= twoPiSqrt;\n        result.im *= twoPiSqrt;\n      }\n\n      var r = Math.exp(-t.re);              // exp(-t)\n      t.re = r * Math.cos(-t.im);\n      t.im = r * Math.sin(-t.im);\n\n      return multiply(multiply(result, t), x);\n    },\n\n    'BigNumber': function (n) {\n      if (n.isInteger()) {\n        return (n.isNegative() || n.isZero())\n            ? new type.BigNumber(Infinity)\n            : bigFactorial(n.minus(1));\n      }\n\n      if (!n.isFinite()) {\n        return new type.BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n\n      throw new Error('Integer BigNumber expected');\n    },\n\n    'Array | Matrix': function (n) {\n      return deepMap(n, gamma);\n    }\n  });\n\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n  function bigFactorial(n) {\n    if (n.isZero()) {\n      return new type.BigNumber(1); // 0! is per definition 1\n    }\n\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n    var Big = type.BigNumber.clone({precision: precision});\n\n    var res = new Big(n);\n    var value = n.toNumber() - 1; // number\n    while (value > 1) {\n      res = res.times(value);\n      value--;\n    }\n\n    return new type.BigNumber(res.toPrecision(type.BigNumber.precision));\n  }\n\n  gamma.toTex = {1: '\\\\Gamma\\\\left(${args[0]}\\\\right)'};\n\n  return gamma;\n}\n\n// TODO: comment on the variables g and p\n\nvar g = 4.7421875;\n\nvar p = [\n  0.99999999999999709182,\n  57.156235665862923517,\n  -59.597960355475491248,\n  14.136097974741747174,\n  -0.49191381609762019978,\n  0.33994649984811888699e-4,\n  0.46523628927048575665e-4,\n  -0.98374475304879564677e-4,\n  0.15808870322491248884e-3,\n  -0.21026444172410488319e-3,\n  0.21743961811521264320e-3,\n  -0.16431810653676389022e-3,\n  0.84418223983852743293e-4,\n  -0.26190838401581408670e-4,\n  0.36899182659531622704e-5\n];\n\nexports.name = 'gamma';\nexports.factory = factory;\n","module.exports = [\n  //require('./distribution'), // TODO: rethink math.distribution\n  require('./combinations'),\n  require('./factorial'),\n  require('./gamma'),\n  require('./kldivergence'),\n  require('./multinomial'),\n  require('./permutations'),\n  require('./pickRandom'),\n  require('./random'),\n  require('./randomInt')\n];\n","'use strict';\n\n\nfunction factory(type, config, load, typed) {\n    var matrix = load(require('../../type/matrix/function/matrix'));\n    var divide = load(require('../arithmetic/divide'));\n    var sum = load(require('../statistics/sum'));\n    var multiply = load(require('../arithmetic/multiply'));\n    var dotDivide = load(require('../arithmetic/dotDivide'));\n    var log = load(require('../arithmetic/log'));\n    var isNumeric = load(require('../utils/isNumeric'));\n\n    /**\n     * Calculate the Kullback-Leibler (KL) divergence  between two distributions\n     *\n     * Syntax:\n     *\n     *     math.kldivergence(x, y)\n     *\n     * Examples:\n     *\n     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5]);   //returns 0.24376698773121153\n     *\n     *\n     * @param  {Array | Matrix} q    First vector\n     * @param  {Array | Matrix} p    Second vector\n     * @return {number}              Returns distance between q and p\n     */\n    var kldivergence = typed('kldivergence', {\n        'Array, Array': function(q, p) {\n            return _kldiv(matrix(q), matrix(p));\n        },\n\n        'Matrix, Array': function(q, p) {\n            return _kldiv(q, matrix(p));\n        },\n\n        'Array, Matrix': function(q, p){\n            return _kldiv(matrix(q), p);\n        },\n\n        'Matrix, Matrix': function(q, p){\n            return _kldiv(q, p);\n        }\n\n    });\n\n    function _kldiv(q, p) {\n        var plength = p.size().length;\n        var qlength = q.size().length;\n        if (plength > 1) {\n            throw new Error('first object must be one dimensional');\n        }\n        \n        if (qlength > 1) {\n            throw new Error('second object must be one dimensional');\n        }\n        \n        if(plength !== qlength){\n            throw new Error(\"Length of two vectors must be equal\");\n        }\n        \n        //Before calculation, apply normalization\n        var sumq = sum(q);\n        if (sumq === 0) {\n            throw new Error(\"Sum of elements in first object must be non zero\");\n        }\n\n        var sump = sum(p);\n        if (sump === 0) {\n            throw new Error(\"Sum of elements in second object must be non zero\");\n        }\n        var qnorm = divide(q, sum(q));\n        var pnorm = divide(p, sum(p));\n\n        var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));\n        if (isNumeric(result)) {\n            return result;\n        }\n        else {\n            return Number.NaN;\n        }\n    }\n\n    return kldivergence;\n}\n\n\nexports.name = 'kldivergence';\nexports.factory = factory;\n \n","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var divide = load(require('../arithmetic/divide'));\n  var factorial = load(require('../probability/factorial'));\n  var isInteger = load(require('../utils/isInteger'));\n  var isPositive = load(require('../utils/isPositive'));\n\n  /**\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n   *\n   * multinomial takes one array of integers as an argument.\n   * The following condition must be enforced: every ai <= 0\n   *\n   * Syntax:\n   *\n   *     math.multinomial(a) // a is an array type\n   *\n   * Examples:\n   *\n   *    math.multinomial([1,2,1]); // returns 12\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n   * @return {Number | BigNumber}         Multinomial coefficient.\n   */\n  return typed('multinomial', {\n    'Array | Matrix': function (a) {\n      var sum = 0;\n      var denom = 1;\n\n      deepForEach(a, function(ai) {\n        if(!isInteger(ai) || !isPositive(ai)) {\n          throw new TypeError('Positive integer value expected in function multinomial');\n        }\n        sum = add(sum, ai);\n        denom = multiply(denom, factorial(ai));\n      });\n\n      return divide(factorial(sum), denom);\n    }\n  });\n}\n\nexports.name = 'multinomial';\nexports.factory = factory;\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type, config, load, typed) {\n  var factorial = load(require('./factorial'));\n\n  /**\n   * Compute the number of ways of obtaining an ordered subset of `k` elements\n   * from a set of `n` elements.\n   *\n   * Permutations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.permutations(n)\n   *     math.permutations(n, k)\n   *\n   * Examples:\n   *\n   *    math.permutations(5);     // 120\n   *    math.permutations(5, 3);  // 60\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number | BigNumber} n   The number of objects in total\n   * @param {number | BigNumber} [k] The number of objects in the subset\n   * @return {number | BigNumber}    The number of permutations\n   */\n  var permutations = typed('permutations', {\n    'number | BigNumber': factorial,\n\n    'number, number': function (n, k) {\n      var result, i;\n\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k > n) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n\n      // Permute n objects, k at a time\n      result = 1;\n      for (i = n - k + 1; i <= n; i++) {\n        result = result * i;\n      }\n\n      return result;\n    },\n\n    'BigNumber, BigNumber': function (n, k) {\n      var result, i;\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k.gt(n)) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n\n      result = new type.BigNumber(1);\n      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {\n        result = result.times(i);\n      }\n\n      return result;\n    }\n\n    // TODO: implement support for collection in permutations\n  });\n\n  permutations.toTex = undefined; // use default template\n\n  return permutations;\n}\n\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}\n\nexports.name = 'permutations';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var distribution = load(require('./distribution'));\n\n  /**\n   * Random pick one or more values from a one dimensional array.\n   * Array elements are picked using a random function with uniform or weighted distribution.\n   *\n   * Syntax:\n   *\n   *     math.pickRandom(array)\n   *     math.pickRandom(array, number)\n   *     math.pickRandom(array, weights)\n   *     math.pickRandom(array, number, weights)\n   *     math.pickRandom(array, weights, number)\n   *\n   * Examples:\n   *\n   *     math.pickRandom([3, 6, 12, 2]);                  // returns one of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], 2);               // returns an array of two of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1]);    // returns one of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]); // returns an array of two of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2); // returns an array of two of the values in the array with weighted distribution\n   *\n   * See also:\n   *\n   *     random, randomInt\n   *\n   * @param {Array} array     A one dimensional array\n   * @param {Int} number      An int or float\n   * @param {Array} weights   An array of ints or floats\n   * @return {number} One of the elements of the provided input array\n   * @return {array} An array of elements of the provided input array\n   */\n  // TODO: rework pickRandom to a typed-function\n  var pickRandom =  distribution('uniform').pickRandom;\n\n  pickRandom.toTex = undefined; // use default template\n\n  return pickRandom;\n}\n\nexports.name = 'pickRandom';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var distribution = load(require('./distribution'));\n\n  /**\n   * Return a random number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.random()                // generate a random number between 0 and 1\n   *     math.random(max)             // generate a random number between 0 and max\n   *     math.random(min, max)        // generate a random number between min and max\n   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\n   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\n   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\n   *\n   * Examples:\n   *\n   *     math.random();       // returns a random number between 0 and 1\n   *     math.random(100);    // returns a random number between 0 and 100\n   *     math.random(30, 40); // returns a random number between 30 and 40\n   *     math.random([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1\n   *\n   * See also:\n   *\n   *     randomInt, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random number\n   */\n  // TODO: rework random to a typed-function\n  var random = distribution('uniform').random;\n\n  random.toTex = undefined; // use default template\n\n  return random;\n}\n\nexports.name = 'random';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var distribution = load(require('./distribution'));\n\n  /**\n   * Return a random integer number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.randomInt(max)             // generate a random integer between 0 and max\n   *     math.randomInt(min, max)        // generate a random integer between min and max\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n   *\n   * Examples:\n   *\n   *     math.randomInt(100);    // returns a random integer between 0 and 100\n   *     math.randomInt(30, 40); // returns a random integer between 30 and 40\n   *     math.randomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1\n   *\n   * See also:\n   *\n   *     random, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random integer value\n   */\n  // TODO: rework randomInt to a typed-function\n  var randomInt = distribution('uniform').randomInt;\n\n  randomInt.toTex = undefined; // use default template\n\n  return randomInt;\n}\n\nexports.name = 'randomInt';\nexports.factory = factory;\n","'use strict';\n\nvar seedrandom = require('seed-random');\n\n// create a random seed here to prevent an infinite loop from seed-random\n// inside the factory. Reason is that math.random is defined as a getter/setter\n// and seed-random generates a seed from the local entropy by reading every\n// defined object including `math` itself. That means that whilst getting\n// math.random, it tries to get math.random, etc... an infinite loop.\n// See https://github.com/ForbesLindesay/seed-random/issues/6\nvar singletonRandom = seedrandom();\n\nfunction factory (type, config, load, typed, math) {\n  var random;\n\n  // create a new random generator with given seed\n  function setSeed (seed) {\n    random = seed === null ? singletonRandom : seedrandom(String(seed));\n  }\n\n  // initialize a seeded pseudo random number generator with config's random seed\n  setSeed(config.randomSeed)\n\n  // wrapper function so the rng can be updated via generator\n  function rng() {\n      return random();\n  }\n\n  // updates generator with a new instance of a seeded pseudo random number generator\n  math.on('config', function (curr, prev, changes) {\n    // if the user specified a randomSeed\n    if(changes.randomSeed !== undefined) {\n      // update generator with a new instance of a seeded pseudo random number generator\n      setSeed(curr.randomSeed)\n    }\n  });\n\n  return rng;\n}\n\nexports.factory = factory;\nexports.math = true;\n","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  \n  /**\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * x and y are considered equal when the relative difference between x and y\n   * is smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.compare(x, y)\n   *\n   * Examples:\n   *\n   *    math.compare(6, 1);           // returns 1\n   *    math.compare(2, 3);           // returns -1\n   *    math.compare(7, 7);           // returns 0\n   *\n   *    var a = math.unit('5 cm');\n   *    var b = math.unit('40 mm');\n   *    math.compare(a, b);           // returns 1\n   *\n   *    math.compare(2, [1, 2, 3]);   // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural\n   *\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison: 1, 0 or -1.\n   */\n  var compare = typed('compare', {\n\n    'boolean, boolean': function (x, y) {\n      return x === y ? 0 : (x > y ? 1 : -1);\n    },\n\n    'number, number': function (x, y) {\n      return (x === y || nearlyEqual(x, y, config.epsilon))\n          ? 0\n          : (x > y ? 1 : -1);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return (x.eq(y) || bigNearlyEqual(x, y, config.epsilon))\n          ? new type.BigNumber(0)\n          : new type.BigNumber(x.cmp(y));\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return new type.Fraction(x.compare(y));\n    },\n\n    'Complex, Complex': function () {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return compare(x.value, y.value);\n    },\n\n    'string, string': function (x, y) {\n      return x === y ? 0 : (x > y ? 1 : -1);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm05(x, y, compare);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, compare, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, compare, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, compare);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return compare(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return compare(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return compare(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, compare, false);\n          break;\n        default:\n          c = algorithm14(x, y, compare, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, compare, true);\n          break;\n        default:\n          c = algorithm14(y, x, compare, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, compare, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, compare, true).valueOf();\n    }\n  });\n\n  compare.toTex = undefined; // use default template\n\n  return compare;\n}\n\nexports.name = 'compare';\nexports.factory = factory;\n","'use strict';\n\nvar naturalSort = require('javascript-natural-sort');\n\nfunction factory (type, config, load, typed) {\n  var getTypeOf = load(require('../utils/typeof'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var compare = load(require('./compare'));\n\n  var compareBooleans = compare.signatures['boolean,boolean']\n\n  /**\n   * Compare two values of any type in a deterministic, natural way.\n   *\n   * For numeric values, the function works the same as `math.compare`.\n   * For types of values that can't be compared mathematically,\n   * the function compares in a natural way.\n   *\n   * For numeric values, x and y are considered equal when the relative\n   * difference between x and y is smaller than the configured epsilon.\n   * The function cannot be used to compare values smaller than\n   * approximately 2.22e-16.\n   *\n   * For Complex numbers, first the real parts are compared. If equal,\n   * the imaginary parts are compared.\n   *\n   * Arrays and Matrices are compared value by value until there is an\n   * unequal pair of values encountered. Objects are compared by sorted\n   * keys until the keys or their values are unequal.\n   *\n   * Syntax:\n   *\n   *    math.compareNatural(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareNatural(6, 1);              // returns 1\n   *    math.compareNatural(2, 3);              // returns -1\n   *    math.compareNatural(7, 7);              // returns 0\n   *\n   *    math.compareNatural('10', '2');         // returns 1\n   *\n   *    var a = math.unit('5 cm');\n   *    var b = math.unit('40 mm');\n   *    math.compareNatural(a, b);              // returns 1\n   *\n   *    var c = math.complex('2 + 3i');\n   *    var d = math.complex('2 + 4i');\n   *    math.compareNatural(c, d);              // returns -1\n   *\n   *    math.compareNatural([1, 2, 4], [1, 2, 3]); // returns 1\n   *    math.compareNatural([1, 2, 3], [1, 2]);    // returns 1\n   *    math.compareNatural([1, 5], [1, 2, 3]);    // returns 1\n   *    math.compareNatural([1, 2], [1, 2]);       // returns 0\n   *\n   *    math.compareNatural({a: 2}, {a: 4});       // returns -1\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compare\n   *\n   * @param  {*} x First value to compare\n   * @param  {*} y Second value to compare\n   * @return {number} Returns the result of the comparison: 1, 0 or -1.\n   */\n  var compareNatural = typed('compareNatural', {\n    'any, any': function (x, y) {\n      var typeX = getTypeOf(x);\n      var typeY = getTypeOf(y);\n      var c;\n\n      // numeric types\n      if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') &&\n          (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {\n        c = compare(x, y);\n        if (c.toString() !== '0') {\n          // c can be number, BigNumber, or Fraction\n          return c > 0 ? 1 : -1; // return a number\n        }\n        else {\n          return naturalSort(typeX, typeY);\n        }\n      }\n\n      // matrix types\n      if (typeX === 'Array' || typeX === 'Matrix' ||\n          typeY === 'Array' || typeY === 'Matrix') {\n        c = compareMatricesAndArrays (x, y);\n        if (c !== 0) {\n          return c;\n        }\n        else {\n          return naturalSort(typeX, typeY);\n        }\n      }\n\n      // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'\n      if (typeX !== typeY) {\n        return naturalSort(typeX, typeY);\n      }\n\n      if (typeX === 'Complex') {\n        return compareComplexNumbers(x, y);\n      }\n\n      if (typeX === 'Unit') {\n        if (x.equalBase(y)) {\n          return compareNatural(x.value, y.value);\n        }\n\n        // compare by units\n        return compareArrays(x.formatUnits(), y.formatUnits());\n      }\n\n      if (typeX === 'boolean') {\n        return compareBooleans(x, y);\n      }\n\n      if (typeX === 'string') {\n        return naturalSort(x, y);\n      }\n\n      if (typeX === 'Object') {\n        return compareObjects(x, y);\n      }\n\n      if (typeX === 'null') {\n        return 0;\n      }\n\n      if (typeX === 'undefined') {\n        return 0;\n      }\n\n      // this should not occur...\n      throw new TypeError('Unsupported type of value \"' + typeX + '\"');\n    }\n  });\n\n  compareNatural.toTex = undefined; // use default template\n\n  /**\n   * Compare mixed matrix/array types, by converting to same-shaped array.\n   * This comparator is non-deterministic regarding input types.\n   * @param {Array | SparseMatrix | DenseMatrix | *} x\n   * @param {Array | SparseMatrix | DenseMatrix | *} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  function compareMatricesAndArrays (x, y) {\n    if (x && x.isSparseMatrix && y && y.isSparseMatrix) {\n      return compareArrays(x.toJSON().values, y.toJSON().values);\n    }\n    if (x && x.isSparseMatrix) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(x.toArray(), y);\n    }\n    if (y && y.isSparseMatrix) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(x, y.toArray());\n    }\n\n    // convert DenseArray into Array\n    if (x && x.isDenseMatrix) {\n      return compareMatricesAndArrays(x.toJSON().data, y);\n    }\n    if (y && y.isDenseMatrix) {\n      return compareMatricesAndArrays(x, y.toJSON().data);\n    }\n\n    // convert scalars to array\n    if (!Array.isArray(x)) {\n      return compareMatricesAndArrays([x], y);\n    }\n    if (!Array.isArray(y)) {\n      return compareMatricesAndArrays(x, [y]);\n    }\n\n    return compareArrays(x, y);\n  }\n\n  /**\n   * Compare two Arrays\n   *\n   * - First, compares value by value\n   * - Next, if all corresponding values are equal,\n   *   look at the length: longest array will be considered largest\n   *\n   * @param {Array} x\n   * @param {Array} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  function compareArrays (x, y) {\n    // compare each value\n    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {\n      var v = compareNatural(x[i], y[i]);\n      if (v !== 0) {\n        return v;\n      }\n    }\n\n    // compare the size of the arrays\n    if (x.length > y.length) { return 1; }\n    if (x.length < y.length) { return -1; }\n\n    // both Arrays have equal size and content\n    return 0;\n  }\n\n  /**\n   * Compare two objects\n   *\n   * - First, compare sorted property names\n   * - Next, compare the property values\n   *\n   * @param {Object} x\n   * @param {Object} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  function compareObjects (x, y) {\n    var keysX = Object.keys(x);\n    var keysY = Object.keys(y);\n\n    // compare keys\n    keysX.sort(naturalSort)\n    keysY.sort(naturalSort)\n    var c = compareArrays(keysX, keysY);\n    if (c !== 0) {\n      return c;\n    }\n\n    // compare values\n    for (var i = 0; i < keysX.length; i++) {\n      var v = compareNatural(x[keysX[i]], y[keysY[i]]);\n      if (v !== 0) {\n        return v;\n      }\n    }\n\n    return 0;\n  }\n\n  return compareNatural;\n}\n\n/**\n * Compare two complex numbers, `x` and `y`:\n *\n * - First, compare the real values of `x` and `y`\n * - If equal, compare the imaginary values of `x` and `y`\n * \n * @params {Complex} x\n * @params {Complex} y\n * @returns {number} Returns the comparison result: -1, 0, or 1\n */\nfunction compareComplexNumbers (x, y) {\n  if (x.re > y.re) { return 1; }\n  if (x.re < y.re) { return -1; }\n\n  if (x.im > y.im) { return 1; }\n  if (x.im < y.im) { return -1; }\n\n  return 0;\n}\n\nexports.name = 'compareNatural';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var equal = load(require('./equal'));\n\n  /**\n   * Test element wise whether two matrices are equal.\n   * The function accepts both matrices and scalar values.\n   *\n   * Syntax:\n   *\n   *    math.deepEqual(x, y)\n   *\n   * Examples:\n   *\n   *    math.deepEqual(2, 4);   // returns false\n   *\n   *    a = [2, 5, 1];\n   *    b = [2, 7, 1];\n   *\n   *    math.deepEqual(a, b);   // returns false\n   *    math.equal(a, b);       // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    equal, unequal\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns true when the input matrices have the same size and each of their elements is equal.\n   */\n  var deepEqual = typed('deepEqual', {\n    'any, any': function (x, y) {\n      return _deepEqual(x.valueOf(), y.valueOf());\n    }\n  });\n\n  deepEqual.toTex = undefined; // use default template\n\n  return deepEqual;\n\n  /**\n   * Test whether two arrays have the same size and all elements are equal\n   * @param {Array | *} x\n   * @param {Array | *} y\n   * @return {boolean} Returns true if both arrays are deep equal\n   */\n  function _deepEqual(x, y) {\n    if (Array.isArray(x)) {\n      if (Array.isArray(y)) {\n        var len = x.length;\n        if (len !== y.length) {\n          return false;\n        }\n\n        for (var i = 0; i < len; i++) {\n          if (!_deepEqual(x[i], y[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n    else {\n      if (Array.isArray(y)) {\n        return false;\n      }\n      else {\n        return equal(x, y);\n      }\n    }\n  }\n}\n\nexports.name = 'deepEqual';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  \n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('./equalScalar'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n\n  /**\n   * Test whether two values are equal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is only\n   * equal to `null` and nothing else, and `undefined` is only equal to\n   * `undefined` and nothing else.\n   *\n   * Syntax:\n   *\n   *    math.equal(x, y)\n   *\n   * Examples:\n   *\n   *    math.equal(2 + 2, 3);         // returns false\n   *    math.equal(2 + 2, 4);         // returns true\n   *\n   *    var a = math.unit('50 cm');\n   *    var b = math.unit('5 m');\n   *    math.equal(a, b);             // returns true\n   *\n   *    var c = [2, 5, 1];\n   *    var d = [2, 7, 1];\n   *\n   *    math.equal(c, d);             // returns [true, false, true]\n   *    math.deepEqual(c, d);         // returns false\n   *\n   *    math.equal(0, null);          // returns false\n   *\n   * See also:\n   *\n   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual\n   *\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false\n   */\n  var equal = typed('equal', {\n    \n    'any, any': function (x, y) {\n      // strict equality for null and undefined?\n      if (x === null) { return y === null; }\n      if (y === null) { return x === null; }\n      if (x === undefined) { return y === undefined; }\n      if (y === undefined) { return x === undefined; }\n\n      return equalScalar(x, y);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, equalScalar);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, equalScalar, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, equalScalar, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, equalScalar);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n    \n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return equal(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return equal(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return equal(x, matrix(y));\n    },\n    \n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, equalScalar, false);\n          break;\n        default:\n          c = algorithm14(x, y, equalScalar, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, equalScalar, true);\n          break;\n        default:\n          c = algorithm14(y, x, equalScalar, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, equalScalar, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, equalScalar, true).valueOf();\n    }\n  });\n\n  equal.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['equal'] + '${args[1]}\\\\right)'\n  };\n\n  return equal;\n}\n\nexports.name = 'equal';\nexports.factory = factory;\n","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory (type, config, load, typed) {\n  \n  /**\n   * Test whether two values are equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  var equalScalar = typed('equalScalar', {\n\n    'boolean, boolean': function (x, y) {\n      return x === y;\n    },\n\n    'number, number': function (x, y) {\n      return x === y || nearlyEqual(x, y, config.epsilon);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.equals(y);\n    },\n\n    'Complex, Complex': function (x, y) {\n      return x.equals(y);\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return equalScalar(x.value, y.value);\n    },\n\n    'string, string': function (x, y) {\n      return x === y;\n    }\n  });\n  \n  return equalScalar;\n}\n\nexports.factory = factory;\n","module.exports = [\n  require('./compare'),\n  require('./compareNatural'),\n  require('./deepEqual'),\n  require('./equal'),\n  require('./larger'),\n  require('./largerEq'),\n  require('./smaller'),\n  require('./smallerEq'),\n  require('./unequal')\n];\n","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory (type, config, load, typed) {\n  \n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n\n  /**\n   * Test whether value x is larger than y.\n   *\n   * The function returns true when x is larger than y and the relative\n   * difference between x and y is larger than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.larger(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 3);             // returns false\n   *    math.larger(5, 2 + 2);         // returns true\n   *\n   *    var a = math.unit('5 cm');\n   *    var b = math.unit('2 inch');\n   *    math.larger(a, b);             // returns false\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false\n   */\n  var larger = typed('larger', {\n\n    'boolean, boolean': function (x, y) {\n      return x > y;\n    },\n\n    'number, number': function (x, y) {\n      return x > y && !nearlyEqual(x, y, config.epsilon);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.compare(y) === 1;\n    },\n\n    'Complex, Complex': function () {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return larger(x.value, y.value);\n    },\n\n    'string, string': function (x, y) {\n      return x > y;\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, larger);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, larger, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, larger, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, larger);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return larger(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return larger(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return larger(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, larger, false);\n          break;\n        default:\n          c = algorithm14(x, y, larger, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, larger, true);\n          break;\n        default:\n          c = algorithm14(y, x, larger, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, larger, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, larger, true).valueOf();\n    }\n  });\n\n  larger.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['larger'] + '${args[1]}\\\\right)'\n  };\n\n  return larger;\n}\n\nexports.name = 'larger';\nexports.factory = factory;\n","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory (type, config, load, typed) {\n  \n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n\n  /**\n   * Test whether value x is larger or equal to y.\n   *\n   * The function returns true when x is larger than y or the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.largerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 1 + 1);         // returns false\n   *    math.largerEq(2, 1 + 1);       // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false\n   */\n  var largerEq = typed('largerEq', {\n\n    'boolean, boolean': function (x, y) {\n      return x >= y;\n    },\n\n    'number, number': function (x, y) {\n      return x >= y || nearlyEqual(x, y, config.epsilon);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.compare(y) !== -1;\n    },\n\n    'Complex, Complex': function () {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return largerEq(x.value, y.value);\n    },\n\n    'string, string': function (x, y) {\n      return x >= y;\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, largerEq);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, largerEq, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, largerEq, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, largerEq);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return largerEq(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return largerEq(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return largerEq(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, largerEq, false);\n          break;\n        default:\n          c = algorithm14(x, y, largerEq, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, largerEq, true);\n          break;\n        default:\n          c = algorithm14(y, x, largerEq, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, largerEq, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, largerEq, true).valueOf();\n    }\n  });\n\n  largerEq.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['largerEq'] + '${args[1]}\\\\right)'\n  };\n\n  return largerEq;\n}\n\nexports.name = 'largerEq';\nexports.factory = factory;\n","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3);            // returns true\n   *    math.smaller(5, 2 * 2);        // returns false\n   *\n   *    var a = math.unit('5 cm');\n   *    var b = math.unit('2 inch');\n   *    math.smaller(a, b);            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n  var smaller = typed('smaller', {\n\n    'boolean, boolean': function (x, y) {\n      return x < y;\n    },\n\n    'number, number': function (x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.compare(y) === -1;\n    },\n\n    'Complex, Complex': function (x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return smaller(x.value, y.value);\n    },\n\n    'string, string': function (x, y) {\n      return x < y;\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, smaller);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, smaller, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, smaller, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, smaller);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return smaller(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, smaller, false);\n          break;\n        default:\n          c = algorithm14(x, y, smaller, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, smaller, true);\n          break;\n        default:\n          c = algorithm14(y, x, smaller, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, smaller, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, smaller, true).valueOf();\n    }\n  });\n\n  smaller.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['smaller'] + '${args[1]}\\\\right)'\n  };\n\n  return smaller;\n}\n\nexports.name = 'smaller';\nexports.factory = factory;\n","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n\n  /**\n   * Test whether value x is smaller or equal to y.\n   *\n   * The function returns true when x is smaller than y or the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.smallerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(1 + 2, 3);        // returns false\n   *    math.smallerEq(1 + 2, 3);      // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n  var smallerEq = typed('smallerEq', {\n\n    'boolean, boolean': function (x, y) {\n      return x <= y;\n    },\n\n    'number, number': function (x, y) {\n      return x <= y || nearlyEqual(x, y, config.epsilon);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return x.lte(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return x.compare(y) !== 1;\n    },\n\n    'Complex, Complex': function () {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return smallerEq(x.value, y.value);\n    },\n\n    'string, string': function (x, y) {\n      return x <= y;\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, smallerEq);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, smallerEq, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, smallerEq, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, smallerEq);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return smallerEq(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return smallerEq(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return smallerEq(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, smallerEq, false);\n          break;\n        default:\n          c = algorithm14(x, y, smallerEq, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, smallerEq, true);\n          break;\n        default:\n          c = algorithm14(y, x, smallerEq, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, smallerEq, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, smallerEq, true).valueOf();\n    }\n  });\n\n  smallerEq.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['smallerEq'] + '${args[1]}\\\\right)'\n  };\n\n  return smallerEq;\n}\n\nexports.name = 'smallerEq';\nexports.factory = factory;\n","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n\n  /**\n   * Test whether two values are unequal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * larger than the configured epsilon. The function cannot be used to compare\n   * values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\n   * with everything except `null`, and `undefined` is unequal with everying\n   * except. `undefined`.\n   *\n   * Syntax:\n   *\n   *    math.unequal(x, y)\n   *\n   * Examples:\n   *\n   *    math.unequal(2 + 2, 3);       // returns true\n   *    math.unequal(2 + 2, 4);       // returns false\n   *\n   *    var a = math.unit('50 cm');\n   *    var b = math.unit('5 m');\n   *    math.unequal(a, b);           // returns false\n   *\n   *    var c = [2, 5, 1];\n   *    var d = [2, 7, 1];\n   *\n   *    math.unequal(c, d);           // returns [false, true, false]\n   *    math.deepEqual(c, d);         // returns false\n   *\n   *    math.unequal(0, null);        // returns true\n   * See also:\n   *\n   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false\n   */\n  var unequal = typed('unequal', {\n    \n    'any, any': function (x, y) {\n      // strict equality for null and undefined?\n      if (x === null) { return y !== null; }\n      if (y === null) { return x !== null; }\n      if (x === undefined) { return y !== undefined; }\n      if (y === undefined) { return x !== undefined; }\n\n      return _unequal(x, y);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse + sparse\n              c = algorithm07(x, y, _unequal);\n              break;\n            default:\n              // sparse + dense\n              c = algorithm03(y, x, _unequal, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense + sparse\n              c = algorithm03(x, y, _unequal, false);\n              break;\n            default:\n              // dense + dense\n              c = algorithm13(x, y, _unequal);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return unequal(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return unequal(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return unequal(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm12(x, y, _unequal, false);\n          break;\n        default:\n          c = algorithm14(x, y, _unequal, false);\n          break;\n      }\n      return c;\n    },\n\n    'any, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, _unequal, true);\n          break;\n        default:\n          c = algorithm14(y, x, _unequal, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, _unequal, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, _unequal, true).valueOf();\n    }\n  });\n\n  var _unequal = typed('_unequal', {\n\n    'boolean, boolean': function (x, y) {\n      return x !== y;\n    },\n\n    'number, number': function (x, y) {\n      return !nearlyEqual(x, y, config.epsilon);\n    },\n\n    'BigNumber, BigNumber': function (x, y) {\n      return !bigNearlyEqual(x, y, config.epsilon);\n    },\n\n    'Fraction, Fraction': function (x, y) {\n      return !x.equals(y);\n    },\n\n    'Complex, Complex': function (x, y) {\n      return !x.equals(y);\n    },\n\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return unequal(x.value, y.value);\n    },\n\n    'string, string': function (x, y) {\n      return x !== y;\n    }\n  });\n\n  unequal.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['unequal'] + '${args[1]}\\\\right)'\n  };\n\n  return unequal;\n}\n\nexports.name = 'unequal';\nexports.factory = factory;\n","module.exports = [\n  require('./setCartesian'),\n  require('./setDifference'),\n  require('./setDistinct'),\n  require('./setIntersect'),\n  require('./setIsSubset'),\n  require('./setMultiplicity'),\n  require('./setPowerset'),\n  require('./setSize'),\n  require('./setSymDifference'),\n  require('./setUnion')\n];\n","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var matrix = load(require('../../type/matrix/DenseMatrix'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  var compareNatural = load(require('../relational/compareNatural'));\n  \n  /**\n   * Create the cartesian product of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setCartesian(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setCartesian([1, 2], [3, 4]);        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference, setPowerset\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The cartesian product of two (multi)sets\n   */\n  var setCartesian = typed('setCartesian', {\n    'Array | Matrix, Array | Matrix': function (a1, a2) {\n      if (subset(size(a1), new index(0)) === 0 || subset(size(a2), new index(0)) === 0) { // if any of them is empty, return empty\n        var result = [];\n      }\n      else {\n        var b1 = flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);\n        var b2 = flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);\n        var result = [];\n        for (var i=0; i<b1.length; i++) {\n          for (var j=0; j<b2.length; j++) {\n            result.push([b1[i], b2[j]]);\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return result;\n      }\n      // return a matrix otherwise\n      return new matrix(result);\n    }\n  });\n\n  return setCartesian;\n}\n\nexports.name = 'setCartesian';\nexports.factory = factory;\n","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\nvar identify = require('../../utils/array').identify;\nvar generalize = require('../../utils/array').generalize;\n\nfunction factory (type, config, load, typed) {\n  var equal = load(require('../relational/equal'));\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var matrix = load(require('../../type/matrix/DenseMatrix'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  var compareNatural = load(require('../relational/compareNatural'));\n  \n  /**\n   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6]);            // returns [1, 2]\n   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]]);    // returns [1, 2]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setSymDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The difference of two (multi)sets\n   */\n  var setDifference = typed('setDifference', {\n    'Array | Matrix, Array | Matrix': function (a1, a2) {\n      if (subset(size(a1), new index(0)) === 0) { // empty-anything=empty\n        var result = [];\n      }\n      else if (subset(size(a2), new index(0)) === 0) { // anything-empty=anything\n        return flatten(a1.toArray());\n      }\n      else {\n        var b1 = identify(flatten(Array.isArray(a1) ? a1: a1.toArray()).sort(compareNatural));\n        var b2 = identify(flatten(Array.isArray(a2) ? a2: a2.toArray()).sort(compareNatural));\n        var result = [];\n        var inb2;\n        for (var i=0; i<b1.length; i++) {\n          inb2 = false;\n          for (var j=0; j<b2.length; j++) {\n            if (equal(b1[i].value, b2[j].value) && b1[i].identifier === b2[j].identifier) { // the identifier is always a decimal int\n              inb2 = true;\n              break;\n            }\n          }\n          if (!inb2) {\n            result.push(b1[i]);\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return generalize(result);\n      }\n      // return a matrix otherwise\n      return new matrix(generalize(result));\n    }\n  });\n\n  return setDifference;\n}\n\nexports.name = 'setDifference';\nexports.factory = factory;\n","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var equal = load(require('../relational/equal'));\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var matrix = load(require('../../type/matrix/DenseMatrix'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  var compareNatural = load(require('../relational/compareNatural'));\n  \n  /**\n   * Collect the distinct elements of a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDistinct(set)\n   *\n   * Examples:\n   *\n   *    math.setDistinct([1, 1, 1, 2, 2, 3]);        // returns [1, 2, 3]\n   *\n   * See also:\n   *\n   *    setMultiplicity\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {Array | Matrix}    A set containing the distinc elements of the multiset\n   */\n  var setDistinct = typed('setDistinct', {\n    'Array | Matrix': function (a) {\n      if (subset(size(a), new index(0)) === 0) { // if empty, return empty\n        var result = [];\n      }\n      else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        var result = [];\n        result.push(b[0]);\n        for (var i=1; i<b.length; i++) {\n          if (!equal(b[i], b[i-1])) {\n            result.push(b[i]);\n          }\n        }\n      }\n      // return an array, if the input was an array\n      if (Array.isArray(a)) {\n        return result;\n      }\n      // return a matrix otherwise\n      return new matrix(result);\n    }\n  });\n\n  return setDistinct;\n}\n\nexports.name = 'setDistinct';\nexports.factory = factory;\n","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\nvar identify = require('../../utils/array').identify;\nvar generalize = require('../../utils/array').generalize;\n\nfunction factory (type, config, load, typed) {\n  var equal = load(require('../relational/equal'));\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var matrix = load(require('../../type/matrix/DenseMatrix'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  var compareNatural = load(require('../relational/compareNatural'));\n  \n  /**\n   * Create the intersection of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIntersect(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6]);            // returns [3, 4]\n   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]]);    // returns [3, 4]\n   *\n   * See also:\n   *\n   *    setUnion, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The intersection of two (multi)sets\n   */\n  var setIntersect = typed('setIntersect', {\n    'Array | Matrix, Array | Matrix': function (a1, a2) {\n      if (subset(size(a1), new index(0)) === 0 || subset(size(a2), new index(0)) === 0) { // of any of them is empty, return empty\n        var result = [];\n      }\n      else {\n        var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        var result = [];\n        for (var i=0; i<b1.length; i++) {\n          for (var j=0; j<b2.length; j++) {\n              if (equal(b1[i].value, b2[j].value) && b1[i].identifier === b2[j].identifier) { // the identifier is always a decimal int\n                result.push(b1[i]);\n                break;\n              }\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return generalize(result);\n      }\n      // return a matrix otherwise\n      return new matrix(generalize(result));\n    }\n  });\n\n  return setIntersect;\n}\n\nexports.name = 'setIntersect';\nexports.factory = factory;\n","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\nvar identify = require('../../utils/array').identify;\n\nfunction factory (type, config, load, typed) {\n  var equal = load(require('../relational/equal'));\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  var compareNatural = load(require('../relational/compareNatural'));\n  \n  /**\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIsSubset(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6]);        // returns false\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6]);        // returns true\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {boolean}            true | false\n   */\n  var setIsSubset = typed('setIsSubset', {\n    'Array | Matrix, Array | Matrix': function (a1, a2) {\n      if (subset(size(a1), new index(0)) === 0) { // empty is a subset of anything\n        return true;\n      }\n      else if (subset(size(a2), new index(0)) === 0) { // anything is not a subset of empty\n        return false;\n      }\n      var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n      var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n      var inb2;\n      for (var i=0; i<b1.length; i++) {\n        inb2 = false;\n        for (var j=0; j<b2.length; j++) {\n          if (equal(b1[i].value, b2[j].value) && b1[i].identifier === b2[j].identifier) { // the identifier is always a decimal int\n            inb2 = true;\n            break;\n          }\n        }\n        if (inb2 === false) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n\n  return setIsSubset;\n}\n\nexports.name = 'setIsSubset';\nexports.factory = factory;\n","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var equal = load(require('../relational/equal'));\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  \n  /**\n   * Count the multiplicity of an element in a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setMultiplicity(element, set)\n   *\n   * Examples:\n   *\n   *    math.setMultiplicity(1, [1, 2, 2, 4]);    // returns 1\n   *    math.setMultiplicity(2, [1, 2, 2, 4]);    // returns 2\n   *\n   * See also:\n   *\n   *    setDistinct, setSize\n   *\n   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset\n   * @param {Array | Matrix}     a  A multiset\n   * @return {number}            The number of how many times the multiset contains the element\n   */\n  var setMultiplicity = typed('setMultiplicity', {\n    'number | BigNumber | Fraction | Complex, Array | Matrix': function (e, a) {\n      if (subset(size(a), new index(0)) === 0) { // if empty, return 0\n        return 0;\n      }\n      var b = flatten(Array.isArray(a) ? a : a.toArray());\n      var count = 0;\n      for (var i=0; i<b.length; i++) {\n        if (equal(b[i], e)) {\n          count++;\n        }\n      }\n      return count;\n    }\n  });\n\n  return setMultiplicity;\n}\n\nexports.name = 'setMultiplicity';\nexports.factory = factory;\n","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  var compareNatural = load(require('../relational/compareNatural'));\n  \n  /**\n   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setPowerset(set)\n   *\n   * Examples:\n   *\n   *    math.setPowerset([1, 2, 3]);        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n   *\n   * See also:\n   *\n   *    setCartesian\n   *\n   * @param {Array | Matrix}    a  A (multi)set\n   * @return {Array}    The powerset of the (multi)set\n   */\n  var setPowerset = typed('setPowerset', {\n    'Array | Matrix': function (a) {\n      if (subset(size(a), new index(0)) === 0) { // if empty, return empty\n        return [];\n      }\n      var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n      var result = [];\n      var number = 0;\n      while (number.toString(2).length <= b.length) {\n        result.push(_subset(b, number.toString(2).split(\"\").reverse()));\n        number++;\n      }\n      // can not return a matrix, because of the different size of the subarrays\n      return _sort(result);\n    }\n  });\n\n  return setPowerset;\n  \n  // create subset\n  function _subset(array, bitarray) {\n    var result = [];\n    for (var i=0; i<bitarray.length; i++) {\n      if (bitarray[i] === \"1\") {\n        result.push(array[i]);\n      }\n    }\n    return result;\n  }\n  \n  // sort subsests by length\n  function _sort(array) {\n    var temp = [];\n    for (var i=array.length-1; i>0; i--) {\n      for (var j=0; j<i; j++) {\n        if (array[j].length > array[j+1].length) {\n          temp = array[j];\n          array[j] = array[j+1];\n          array[j+1] = temp;\n        }\n      }\n    }\n    return array;\n  }\n}\n\nexports.name = 'setPowerset';\nexports.factory = factory;\n","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var equal = load(require('../relational/equal'));\n  var compareNatural = load(require('../relational/compareNatural'));\n  \n  /**\n   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSize(set)\n   *    math.setSize(set, unique)\n   *\n   * Examples:\n   *\n   *    math.setSize([1, 2, 2, 4]);          // returns 4\n   *    math.setSize([1, 2, 2, 4], true);    // returns 3\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a  A multiset\n   * @return {number}            The number of elements of the (multi)set\n   */\n  var setSize = typed('setSize', {\n    'Array | Matrix': function (a) {\n      return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n    },\n    'Array | Matrix, boolean': function (a, unique) {\n      if (unique === false || a.length === 0) {\n        return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;\n      }\n      else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        var count = 1;\n        for (var i=1; i<b.length; i++) {\n          if (!equal(b[i], b[i-1])) {\n            count++;\n          }\n        }\n        return count;\n      }\n    }\n  });\n\n  return setSize;\n}\n\nexports.name = 'setSize';\nexports.factory = factory;\n","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var concat = load(require('../matrix/concat'));\n  var size = load(require('../matrix/size'));\n  var sort = load(require('../matrix/sort'));\n  var subset = load(require('../matrix/subset'));\n  var setDifference = load(require('../set/setDifference'));\n  \n  /**\n   * Create the symmetric difference of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setSymDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6]);            // returns [1, 2, 5, 6]\n   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]]);    // returns [1, 2, 5, 6]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The symmetric difference of two (multi)sets\n   */\n  var setSymDifference = typed('setSymDifference', {\n    'Array | Matrix, Array | Matrix': function (a1, a2) {\n      if (subset(size(a1), new index(0)) === 0) { // if any of them is empty, return the other one\n        return flatten(a2);\n      }\n      else if (subset(size(a2), new index(0)) === 0) {\n        return flatten(a1);\n      }\n      var b1 = flatten(a1);\n      var b2 = flatten(a2);\n      return concat(setDifference(b1, b2), setDifference(b2, b1));\n    }\n  });\n\n  return setSymDifference;\n}\n\nexports.name = 'setSymDifference';\nexports.factory = factory;\n","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var index = load(require('../../type/matrix/MatrixIndex'));\n  var concat = load(require('../matrix/concat'));\n  var size = load(require('../matrix/size'));\n  var subset = load(require('../matrix/subset'));\n  var setIntersect = load(require('../set/setIntersect'));\n  var setSymDifference = load(require('../set/setSymDifference'));\n  \n  /**\n   * Create the union of two (multi)sets.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setUnion(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6]);            // returns [1, 2, 3, 4, 5, 6]\n   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]]);    // returns [1, 2, 3, 4, 5, 6]\n   *\n   * See also:\n   *\n   *    setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The union of two (multi)sets\n   */\n  var setUnion = typed('setUnion', {\n    'Array | Matrix, Array | Matrix': function (a1, a2) {\n      if (subset(size(a1), new index(0)) === 0) { // if any of them is empty, return the other one\n        return flatten(a2);\n      }\n      else if (subset(size(a2), new index(0)) === 0) {\n        return flatten(a1);\n      }\n      var b1 = flatten(a1);\n      var b2 = flatten(a2);\n      return concat(setSymDifference(b1, b2), setIntersect(b1, b2));\n    }\n  });\n\n  return setUnion;\n}\n\nexports.name = 'setUnion';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar sign = require('../../utils/number').sign;\n\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Compute the erf function of a value using a rational Chebyshev\n   * approximations for different intervals of x.\n   *\n   * This is a translation of W. J. Cody's Fortran implementation from 1987\n   * ( http://www.netlib.org/specfun/erf ). See the AMS publication\n   * \"Rational Chebyshev Approximations for the Error Function\" by W. J. Cody\n   * for an explanation of this process.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.erf(x)\n   *\n   * Examples:\n   *\n   *    math.erf(0.2);    // returns 0.22270258921047847\n   *    math.erf(-0.5);   // returns -0.5204998778130465\n   *    math.erf(4);      // returns 0.9999999845827421\n   *\n   * @param {number | Array | Matrix} x   A real number\n   * @return {number | Array | Matrix}    The erf of `x`\n   */\n  var erf = typed('erf', {\n    'number': function (x) {\n      var y = Math.abs(x);\n\n      if (y >= MAX_NUM) {\n        return sign(x);\n      }\n      if (y <= THRESH) {\n        return sign(x) * erf1(y);\n      }\n      if (y <= 4.0) {\n        return sign(x) * (1 - erfc2(y));\n      }\n      return sign(x) * (1 - erfc3(y));\n    },\n\n    // TODO: Not sure if there's a way to guarantee some degree of accuracy here.\n    //  Perhaps it would be best to set the precision of the number to that which\n    //  is guaranteed by erf()\n    'BigNumber': function (n) {\n      return new type.BigNumber(erf(n.toNumber()));\n    },\n\n    'Array | Matrix': function (n) {\n      return deepMap(n, erf);\n    }\n\n    // TODO: For complex numbers, use the approximation for the Faddeeva function\n    //  from \"More Efficient Computation of the Complex Error Function\" (AMS)\n\n  });\n\n  /**\n   * Approximates the error function erf() for x <= 0.46875 using this function:\n   *               n\n   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))\n   *              j=0\n   */\n  function erf1(y) {\n    var ysq = y * y;\n    var xnum = P[0][4]*ysq;\n    var xden = ysq;\n    var i;\n\n    for (i = 0; i < 3; i += 1) {\n      xnum = (xnum + P[0][i]) * ysq;\n      xden = (xden + Q[0][i]) * ysq;\n    }\n    return y * (xnum + P[0][3]) / (xden + Q[0][3]);\n  }\n\n  /**\n   * Approximates the complement of the error function erfc() for\n   * 0.46875 <= x <= 4.0 using this function:\n   *                       n\n   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)\n   *                      j=0\n   */\n  function erfc2(y) {\n    var xnum = P[1][8] * y;\n    var xden = y;\n    var i;\n\n    for (i = 0; i < 7; i += 1) {\n      xnum = (xnum + P[1][i]) * y;\n      xden = (xden + Q[1][i]) * y;\n    }\n    var result = (xnum + P[1][7]) / (xden + Q[1][7]);\n    var ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq*ysq) * Math.exp(-del) * result;\n  }\n\n  /**\n   * Approximates the complement of the error function erfc() for x > 4.0 using\n   * this function:\n   *\n   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +\n   *               n\n   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]\n   *              j=0\n   */\n  function erfc3(y) {\n    var ysq = 1 / (y * y);\n    var xnum = P[2][5] * ysq;\n    var xden = ysq;\n    var i;\n\n    for (i = 0; i < 4; i += 1) {\n      xnum = (xnum + P[2][i]) * ysq;\n      xden = (xden + Q[2][i]) * ysq;\n    }\n    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);\n    result = (SQRPI - result) / y;\n    ysq = parseInt(y * 16) / 16;\n    var del = (y - ysq) * (y + ysq);\n    return Math.exp(-ysq*ysq) * Math.exp(-del) * result;\n  }\n\n  erf.toTex = {1: 'erf\\\\left(${args[0]}\\\\right)'};\n\n  return erf;\n}\n\n/**\n * Upper bound for the first approximation interval, 0 <= x <= THRESH\n * @constant\n */\nvar THRESH = 0.46875;\n\n/**\n * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)\n * @constant\n */\nvar SQRPI = 5.6418958354775628695e-1;\n\n/**\n * Coefficients for each term of the numerator sum (p_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\nvar P = [[\n  3.16112374387056560e00, 1.13864154151050156e02,\n  3.77485237685302021e02, 3.20937758913846947e03,\n  1.85777706184603153e-1\n], [\n  5.64188496988670089e-1, 8.88314979438837594e00,\n  6.61191906371416295e01, 2.98635138197400131e02,\n  8.81952221241769090e02, 1.71204761263407058e03,\n  2.05107837782607147e03, 1.23033935479799725e03,\n  2.15311535474403846e-8\n], [\n  3.05326634961232344e-1, 3.60344899949804439e-1,\n  1.25781726111229246e-1, 1.60837851487422766e-2,\n  6.58749161529837803e-4, 1.63153871373020978e-2\n]];\n\n/**\n * Coefficients for each term of the denominator sum (q_j) for each approximation\n * interval (see W. J. Cody's paper for more details)\n * @constant\n */\nvar Q = [[\n  2.36012909523441209e01, 2.44024637934444173e02,\n  1.28261652607737228e03, 2.84423683343917062e03\n], [\n  1.57449261107098347e01, 1.17693950891312499e02,\n  5.37181101862009858e02, 1.62138957456669019e03,\n  3.29079923573345963e03, 4.36261909014324716e03,\n  3.43936767414372164e03, 1.23033935480374942e03\n], [\n  2.56852019228982242e00, 1.87295284992346047e00,\n  5.27905102951428412e-1, 6.05183413124413191e-2,\n  2.33520497626869185e-3\n]];\n\n/**\n * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is\n * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will\n * return 1\n */\nvar MAX_NUM = Math.pow(2, 53);\n\n\nexports.name = 'erf';\nexports.factory = factory;\n","module.exports = [\n  require('./erf')\n];\n","module.exports = [\n  require('./mad'),\n  require('./max'),\n  require('./mean'),\n  require('./median'),\n  require('./min'),\n  require('./mode'),\n  require('./prod'),\n  require('./quantileSeq'),\n  require('./std'),\n  require('./sum'),\n  require('./var')\n];\n","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n  var abs      = load(require('../arithmetic/abs'));\n  var map      = load(require('../matrix/map'));\n  var median   = load(require('../statistics/median'));\n  var subtract = load(require('../arithmetic/subtract'));\n\n  /**\n   * Compute the median absolute deviation of a matrix or a list with values.\n   * The median absolute deviation is defined as the median of the absolute\n   * deviations from the median.\n   *\n   * Syntax:\n   *\n   *     math.mad(a, b, c, ...)\n   *     math.mad(A)\n   *\n   * Examples:\n   *\n   *     math.mad(10, 20, 30);             // returns 10\n   *     math.mad([1, 2, 3]);              // returns 1\n   *     math.mad([[1, 2, 3], [4, 5, 6]]); // returns 1.5\n   *\n   * See also:\n   *\n   *     median, mean, std, abs\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or multiple scalar values.\n   * @return {*} The median absolute deviation.\n   */\n  var mad = typed('mad', {\n    // mad([a, b, c, d, ...])\n    'Array | Matrix': _mad,\n\n    // mad(a, b, c, d, ...)\n    '...': function (args) {\n      return _mad(args);\n    }\n  });\n\n  mad.toTex = undefined; // use default template\n\n  return mad;\n\n  function _mad(array) {\n    array = flatten(array.valueOf());\n\n    if (array.length === 0) {\n      throw new Error('Cannot calculate median absolute deviation of an empty array');\n    }\n\n    var med = median(array);\n    return median(map(array, function (value) {\n      return abs(subtract(value, med));\n    }));\n  }\n}\n\nexports.name = 'mad';\nexports.factory = factory;\n","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\nvar reduce = require('../../utils/collection/reduce');\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory (type, config, load, typed) {\n  var larger = load(require('../relational/larger'));\n\n  /**\n   * Compute the maximum value of a matrix or a  list with values.\n   * In case of a multi dimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.max(a, b, c, ...)\n   *     math.max(A)\n   *     math.max(A, dim)\n   *\n   * Examples:\n   *\n   *     math.max(2, 1, 4, 3);                  // returns 4\n   *     math.max([2, 1, 4, 3]);                // returns 4\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]\n   *     math.max([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, min, prod, std, sum, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The maximum value\n   */\n  var max = typed('max', {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function (array, dim) {\n      return reduce(array, dim.valueOf(), _largest);\n    },\n\n    // max(a, b, c, d, ...)\n    '...': function (args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n\n      return _max(args);\n    }\n  });\n\n  max.toTex = '\\\\max\\\\left(${args}\\\\right)';\n\n  return max;\n\n  /**\n   * Return the largest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is largest, or y when y is largest\n   * @private\n   */\n  function _largest(x, y){\n    return larger(x, y) ? x : y;\n  }\n\n  /**\n   * Recursively calculate the maximum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} max\n   * @private\n   */\n  function _max(array) {\n    var max = undefined;\n\n    deepForEach(array, function (value) {\n      if (max === undefined || larger(value, max)) {\n        max = value;\n      }\n    });\n\n    if (max === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    }\n\n    return max;\n  }\n}\n\nexports.name = 'max';\nexports.factory = factory;\n","'use strict';\n\nvar size = require('../../utils/array').size;\nvar deepForEach = require('../../utils/collection/deepForEach');\nvar reduce = require('../../utils/collection/reduce');\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var divide = load(require('../arithmetic/divide'));\n\n  /**\n   * Compute the mean value of matrix or a list with values.\n   * In case of a multi dimensional array, the mean of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.mean(a, b, c, ...)\n   *     math.mean(A)\n   *     math.mean(A, dim)\n   *\n   * Examples:\n   *\n   *     math.mean(2, 1, 4, 3);                     // returns 2.5\n   *     math.mean([1, 2.7, 3.2, 4]);               // returns 2.725\n   *\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]\n   *\n   * See also:\n   *\n   *     median, min, max, sum, prod, std, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The mean of all values\n   */\n  var mean = typed('mean', {\n      // mean([a, b, c, d, ...])\n    'Array | Matrix': _mean,\n\n      // mean([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nmean,\n\n    // mean(a, b, c, d, ...)\n    '...': function (args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function mean');\n      }\n\n      return _mean(args);\n    }\n  });\n\n  mean.toTex = undefined; // use default template\n\n  return mean;\n\n  /**\n   * Calculate the mean value in an n-dimensional array, returning a\n   * n-1 dimensional array\n   * @param {Array} array\n   * @param {number} dim\n   * @return {number} mean\n   * @private\n   */\n  function _nmean(array, dim){\n    var sum = reduce(array, dim, add);\n    var s = Array.isArray(array) ? size(array) : array.size();\n    return divide(sum, s[dim]);\n  }\n\n  /**\n   * Recursively calculate the mean value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} mean\n   * @private\n   */\n  function _mean(array) {\n    var sum = 0;\n    var num = 0;\n\n    deepForEach(array, function (value) {\n      sum = add(sum, value);\n      num++;\n    });\n\n    if (num === 0) {\n      throw new Error('Cannot calculate mean of an empty array');\n    }\n\n    return divide(sum, num);\n  }\n}\n\nexports.name = 'mean';\nexports.factory = factory;\n","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\nvar reduce = require('../../utils/collection/reduce');\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/addScalar'));\n  var divide = load(require('../arithmetic/divideScalar'));\n  var compare = load(require('../relational/compare'));\n  var partitionSelect = load(require('../matrix/partitionSelect'));\n\n  /**\n   * Compute the median of a matrix or a list with values. The values are\n   * sorted and the middle value is returned. In case of an even number of\n   * values, the average of the two middle values is returned.\n   * Supported types of values are: Number, BigNumber, Unit\n   *\n   * In case of a (multi dimensional) array or matrix, the median of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.median(a, b, c, ...)\n   *     math.median(A)\n   *\n   * Examples:\n   *\n   *     math.median(5, 2, 7);        // returns 5\n   *     math.median([3, -1, 5, 7]);  // returns 4\n   *\n   * See also:\n   *\n   *     mean, min, max, sum, prod, std, var, quantileSeq\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The median\n   */\n  var median = typed('median', {\n    // median([a, b, c, d, ...])\n    'Array | Matrix': _median,\n\n    // median([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function (array, dim) {\n      // TODO: implement median(A, dim)\n      throw new Error('median(A, dim) is not yet supported');\n      //return reduce(arguments[0], arguments[1], ...);\n    },\n\n    // median(a, b, c, d, ...)\n    '...': function (args) {\n      if (containsCollections(args)) {\n          throw new TypeError('Scalar values expected in function median');\n      }\n\n      return _median(args);\n    }\n  });\n\n\n  /**\n   * Recursively calculate the median of an n-dimensional array\n   * @param {Array} array\n   * @return {Number} median\n   * @private\n   */\n  function _median(array) {\n    array = flatten(array.valueOf());\n\n    var num = array.length;\n    if (num == 0) {\n      throw new Error('Cannot calculate median of an empty array');\n    }\n\n    if (num % 2 == 0) {\n      // even: return the average of the two middle values\n      var mid = num / 2 - 1;\n      var right = partitionSelect(array, mid + 1);\n\n      // array now partitioned at mid + 1, take max of left part\n      var left = array[mid];\n      for (var i = 0; i < mid; ++i) {\n        if (compare(array[i], left) > 0) {\n          left = array[i];\n        }\n      }\n\n      return middle2(left, right);\n    }\n    else {\n      // odd: return the middle value\n      var m = partitionSelect(array, (num - 1) / 2);\n\n      return middle(m);\n    }\n  }\n\n  // helper function to type check the middle value of the array\n  var middle = typed({\n    'number | BigNumber | Complex | Unit': function (value) {\n      return value;\n    }\n  });\n\n  // helper function to type check the two middle value of the array\n  var middle2 = typed({\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function (left, right) {\n      return divide(add(left, right), 2);\n    }\n  });\n\n  median.toTex = undefined; // use default template\n\n  return median;\n}\n\nexports.name = 'median';\nexports.factory = factory;\n","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\nvar reduce = require('../../utils/collection/reduce');\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory (type, config, load, typed) {\n  var smaller = load(require('../relational/smaller'));\n  \n  /**\n   * Compute the maximum value of a matrix or a  list of values.\n   * In case of a multi dimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.min(a, b, c, ...)\n   *     math.min(A)\n   *     math.min(A, dim)\n   *\n   * Examples:\n   *\n   *     math.min(2, 1, 4, 3);                  // returns 1\n   *     math.min([2, 1, 4, 3]);                // returns 1\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.min([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]\n   *     math.min([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, max, prod, std, sum, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The minimum value\n   */\n  var min = typed('min', {\n    // min([a, b, c, d, ...])\n    'Array | Matrix': _min,\n\n    // min([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function (array, dim) {\n      return reduce(array, dim.valueOf(), _smallest);\n    },\n\n    // min(a, b, c, d, ...)\n    '...': function (args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function min');\n      }\n\n      return _min(args);\n    }\n  });\n\n  min.toTex = '\\\\min\\\\left(${args}\\\\right)';\n\n  return min;\n\n  /**\n   * Return the smallest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is smallest, or y when y is smallest\n   * @private\n   */\n  function _smallest(x, y) {\n    return smaller(x, y) ? x : y;\n  }\n\n  /**\n   * Recursively calculate the minimum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} min\n   * @private\n   */\n  function _min(array) {\n    var min = undefined;\n\n    deepForEach(array, function (value) {\n      if (min === undefined || smaller(value, min)) {\n        min = value;\n      }\n    });\n\n    if (min === undefined) {\n      throw new Error('Cannot calculate min of an empty array');\n    }\n\n    return min;\n  }\n}\n\nexports.name = 'min';\nexports.factory = factory;\n","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory (type, config, load, typed) {\n\n  /**\n  * Computes the mode of a set of numbers or a list with values(numbers or characters).\n  * If there are more than one modes, it returns a list of those values.\n  *\n  * Syntax:\n  *\n  *     math.mode(a, b, c, ...)\n  *     math.mode(A)\n  *\n  * Examples:\n  *\n  *     math.mode(2, 1, 4, 3, 1);                            // returns [1]\n  *     math.mode([1, 2.7, 3.2, 4, 2.7]);                    // returns [2.7]\n  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\n  *     math.mode('a','a','b','c')                           // returns [\"a\"]\n  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\n  *\n  * See also:\n  *\n  *     median,\n  *     mean\n  *\n  * @param {... *} args  A single matrix\n  * @return {*} The mode of all values\n  */\n\n  var mode = typed('mode', {\n    'Array | Matrix' : _mode,\n    \n    '...': function (args) {\n      return _mode(args);\n    }\n  });\n  \n  return mode;\n\n  /**\n   * Calculates the mode in an 1-dimensional array\n   * @param {Array} values\n   * @return {number} mode\n   * @private\n   */\n  function _mode(values) {\n    values = flatten(values.valueOf());\n    var num = values.length;\n    if (num == 0) {\n      throw new Error('Cannot calculate mode of an empty array');\n    }\n    \n    var count = {},\n        mode = [],\n        max = 0;\n    for (var i in values) {\n      if (!(values[i] in count)){\n        count[values[i]] = 0;\n      }\n      count[values[i]]++;\n      if (count[values[i]] == max){\n        mode.push(values[i]);\n      }\n      else if (count[values[i]] > max) {\n        max = count[values[i]];\n        mode = [values[i]];\n      }\n    }\n    return mode; \n  };\n}\n\nexports.name = 'mode';\nexports.factory = factory;","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nfunction factory (type, config, load, typed) {\n  var multiply = load(require('../arithmetic/multiplyScalar'));\n\n  /**\n   * Compute the product of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.prod(a, b, c, ...)\n   *     math.prod(A)\n   *\n   * Examples:\n   *\n   *     math.multiply(2, 3);           // returns 6\n   *     math.prod(2, 3);               // returns 6\n   *     math.prod(2, 3, 4);            // returns 24\n   *     math.prod([2, 3, 4]);          // returns 24\n   *     math.prod([[2, 5], [4, 3]]);   // returns 120\n   *\n   * See also:\n   *\n   *    mean, median, min, max, sum, std, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The product of all values\n   */\n  var prod = typed('prod', {\n    // prod([a, b, c, d, ...])\n    'Array | Matrix': _prod,\n\n    // prod([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function (array, dim) {\n      // TODO: implement prod(A, dim)\n      throw new Error('prod(A, dim) is not yet supported');\n      //return reduce(arguments[0], arguments[1], math.prod);\n    },\n\n    // prod(a, b, c, d, ...)\n    '...': function (args) {\n      return _prod(args);\n    }\n  });\n\n  prod.toTex = undefined; // use default template\n\n  return prod;\n\n  /**\n   * Recursively calculate the product of an n-dimensional array\n   * @param {Array} array\n   * @return {number} prod\n   * @private\n   */\n  function _prod(array) {\n    var prod = undefined;\n\n    deepForEach(array, function (value) {\n      prod = (prod === undefined) ? value : multiply(prod, value);\n    });\n\n    if (prod === undefined) {\n      throw new Error('Cannot calculate prod of an empty array');\n    }\n\n    return prod;\n  }\n}\n\nexports.name = 'prod';\nexports.factory = factory;\n","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\nvar isNumber = require('../../utils/number').isNumber;\nvar flatten = require('../../utils/array').flatten;\nvar isCollection = require('../../utils/collection/isCollection');\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var partitionSelect = load(require('../matrix/partitionSelect'));\n  var compare = load(require('../relational/compare'));\n\n  /**\n   * Compute the prob order quantile of a matrix or a list with values.\n   * The sequence is sorted and the middle value is returned.\n   * Supported types of sequence values are: Number, BigNumber, Unit\n   * Supported types of probability are: Number, BigNumber\n   *\n   * In case of a (multi dimensional) array or matrix, the prob order quantile\n   * of all elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.quantileSeq(A, prob[, sorted])\n   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])\n   *     math.quantileSeq(A, N[, sorted])\n   *\n   * Examples:\n   *\n   *     math.quantileSeq([3, -1, 5, 7], 0.5);         // returns 4\n   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]\n   *     math.quantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]\n   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4\n   *\n   * See also:\n   *\n   *     median, mean, min, max, sum, prod, std, var\n   *\n   * @param {Array, Matrix} data                A single matrix or Array\n   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is\n   *                                            the amount of evenly distributed steps of\n   *                                            probabilities; only one of these options can\n   *                                            be provided\n   * @param {Boolean} sorted=false              is data sorted in ascending order\n   * @return {Number, BigNumber, Unit, Array}   Quantile(s)\n   */\n  function quantileSeq(data, probOrN, sorted) {\n    var probArr, dataArr, one;\n\n    if (arguments.length < 2 || arguments.length > 3) {\n      throw new SyntaxError('Function quantileSeq requires two or three parameters');\n    }\n\n    if (isCollection(data)) {\n      sorted = sorted || false;\n      if (typeof sorted === 'boolean') {\n        dataArr = data.valueOf();\n        if (isNumber(probOrN)) {\n          if (probOrN < 0) {\n            throw new Error('N/prob must be non-negative');\n          }\n\n          if (probOrN <= 1) {\n            // quantileSeq([a, b, c, d, ...], prob[,sorted])\n            return _quantileSeq(dataArr, probOrN, sorted);\n          }\n\n          if (probOrN > 1) {\n            // quantileSeq([a, b, c, d, ...], N[,sorted])\n            if (!isInteger(probOrN)) {\n              throw new Error('N must be a positive integer');\n            }\n\n            var nPlusOne = probOrN + 1;\n            probArr = new Array(probOrN);\n            for (var i = 0; i < probOrN;) {\n              probArr[i] = _quantileSeq(dataArr, (++i) / nPlusOne, sorted);\n            }\n            return probArr;\n          }\n        }\n\n        if (probOrN && probOrN.isBigNumber) {\n          if (probOrN.isNegative()) {\n            throw new Error('N/prob must be non-negative');\n          }\n\n          one = new probOrN.constructor(1);\n\n          if (probOrN.lte(one)) {\n            // quantileSeq([a, b, c, d, ...], prob[,sorted])\n            return _quantileSeq(dataArr, probOrN, sorted);\n          }\n\n          if (probOrN.gt(one)) {\n            // quantileSeq([a, b, c, d, ...], N[,sorted])\n            if (!probOrN.isInteger()) {\n              throw new Error('N must be a positive integer');\n            }\n\n            // largest possible Array length is 2^32-1;\n            // 2^32 < 10^15, thus safe conversion guaranteed\n            var intN = probOrN.toNumber();\n            if (intN > 4294967295) {\n              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');\n            }\n\n            var nPlusOne = new type.BigNumber(intN + 1);\n            probArr = new Array(intN);\n            for (var i = 0; i < intN;) {\n              probArr[i] = _quantileSeq(dataArr, new type.BigNumber(++i).div(nPlusOne), sorted);\n            }\n            return probArr;\n          }\n        }\n\n        if (Array.isArray(probOrN)) {\n          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])\n          probArr = new Array(probOrN.length);\n          for (var i = 0; i < probArr.length; ++i) {\n            var currProb = probOrN[i];\n            if (isNumber(currProb)) {\n              if (currProb < 0 || currProb > 1) {\n                throw new Error('Probability must be between 0 and 1, inclusive');\n              }\n            } else if (currProb && currProb.isBigNumber) {\n              one = new currProb.constructor(1);\n              if (currProb.isNegative() || currProb.gt(one)) {\n                throw new Error('Probability must be between 0 and 1, inclusive');\n              }\n            } else {\n              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n            }\n\n            probArr[i] = _quantileSeq(dataArr, currProb, sorted);\n          }\n          return probArr;\n        }\n\n        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n      }\n\n      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n    }\n\n    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function\n  }\n\n  /**\n   * Calculate the prob order quantile of an n-dimensional array.\n   * \n   * @param {Array} array\n   * @param {Number, BigNumber} prob\n   * @param {Boolean} sorted\n   * @return {Number, BigNumber, Unit} prob order quantile\n   * @private\n   */\n  function _quantileSeq(array, prob, sorted) {\n    var flat = flatten(array);\n    var len = flat.length;\n    if (len === 0) {\n      throw new Error('Cannot calculate quantile of an empty sequence');\n    }\n\n    if (isNumber(prob)) {\n      var index = prob * (len-1);\n      var fracPart = index % 1;\n      if (fracPart === 0) {\n        var value = sorted ? flat[index] : partitionSelect(flat, index);\n\n        validate(value);\n\n        return value;\n      }\n\n      var integerPart = Math.floor(index);\n\n      var left, right;\n      if (sorted) {\n        left = flat[integerPart];\n        right = flat[integerPart+1];\n      } else {\n        right = partitionSelect(flat, integerPart+1);\n\n        // max of partition is kth largest\n        left = flat[integerPart];\n        for (var i = 0; i < integerPart; ++i) {\n          if (compare(flat[i], left) > 0) {\n            left = flat[i];\n          }\n        }\n      }\n\n      validate(left);\n      validate(right);\n\n      // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]\n      return add(multiply(left, 1 - fracPart), multiply(right, fracPart));\n    }\n\n    // If prob is a BigNumber\n    var index = prob.times(len-1);\n    if (index.isInteger()) {\n      index = index.toNumber();\n      var value = sorted ? flat[index] : partitionSelect(flat, index);\n\n      validate(value);\n\n      return value;\n    }\n\n    var integerPart = index.floor();\n    var fracPart = index.minus(integerPart);\n    var integerPartNumber = integerPart.toNumber();\n\n    var left, right;\n    if (sorted) {\n      left = flat[integerPartNumber];\n      right = flat[integerPartNumber+1];\n    } else {\n      right = partitionSelect(flat, integerPartNumber+1);\n\n      // max of partition is kth largest\n      left = flat[integerPartNumber];\n      for (var i = 0; i < integerPartNumber; ++i) {\n        if (compare(flat[i], left) > 0) {\n          left = flat[i];\n        }\n      }\n    }\n\n    validate(left);\n    validate(right);\n\n    // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]\n    var one = new fracPart.constructor(1);\n    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));\n  }\n\n  /**\n   * Check if array value types are valid, throw error otherwise.\n   * @param {number | BigNumber | Unit} x\n   * @param {number | BigNumber | Unit} x\n   * @private\n   */\n  var validate = typed({\n    'number | BigNumber | Unit': function (x) {\n      return x;\n    }\n  });\n\n  return quantileSeq;\n}\n\nexports.name = 'quantileSeq';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var sqrt       = load(require('../arithmetic/sqrt'));\n  var variance   = load(require('../statistics/var'));\n\n  /**\n   * Compute the standard deviation of a matrix or a  list with values.\n   * The standard deviations is defined as the square root of the variance:\n   * `std(A) = sqrt(var(A))`.\n   * In case of a (multi dimensional) array or matrix, the standard deviation\n   * over all elements will be calculated.\n   *\n   * Optionally, the type of normalization can be specified as second\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   * Syntax:\n   *\n   *     math.std(a, b, c, ...)\n   *     math.std(A)\n   *     math.std(A, normalization)\n   *\n   * Examples:\n   *\n   *     math.std(2, 4, 6);                     // returns 2\n   *     math.std([2, 4, 6, 8]);                // returns 2.581988897471611\n   *     math.std([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979\n   *     math.std([2, 4, 6, 8], 'biased');      // returns 2\n   *\n   *     math.std([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, sum, var\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @return {*} The standard deviation\n   */\n  var std = typed('std', {\n    // std([a, b, c, d, ...])\n    'Array | Matrix': _std,\n\n    // std([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _std,\n\n    // std(a, b, c, d, ...)\n    '...': function (args) {\n      return _std(args);\n    }\n  });\n  \n  std.toTex = undefined; // use default template\n\n  return std;\n\n  function _std(array, normalization) {\n    if (array.length == 0) {\n      throw new SyntaxError('Function std requires one or more parameters (0 provided)');\n    }\n\n    return sqrt(variance.apply(null, arguments));\n  }\n}\n\nexports.name = 'std';\nexports.factory = factory;\n","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/addScalar'));\n\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3);               // returns 10\n   *     math.sum([2, 1, 4, 3]);             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]); // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The sum of all values\n   */\n  var sum = typed('sum', {\n    'Array | Matrix': function (args) {\n      // sum([a, b, c, d, ...])\n      return _sum(args);\n    },\n\n    'Array | Matrix, number | BigNumber': function () {\n      // sum([a, b, c, d, ...], dim)\n      // TODO: implement sum(A, dim)\n      throw new Error('sum(A, dim) is not yet supported');\n    },\n\n    '...': function (args) {\n      // sum(a, b, c, d, ...)\n      return _sum(args);\n    }\n  });\n\n  sum.toTex = undefined; // use default template\n\n  return sum;\n\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array} array\n   * @return {number} sum\n   * @private\n   */\n  function _sum(array) {\n    var sum = undefined;\n\n    deepForEach(array, function (value) {\n      sum = (sum === undefined) ? value : add(sum, value);\n    });\n\n    if (sum === undefined) {\n      switch (config.number) {\n        case 'number':\n          return 0;\n        case 'BigNumber':\n          return new type.BigNumber(0);\n        case 'Fraction':\n          return new type.Fraction(0);\n        default:\n          return 0;\n      }\n    }\n\n    return sum;\n  }\n}\n\nexports.name = 'sum';\nexports.factory = factory;\n","'use strict';\n\nvar DEFAULT_NORMALIZATION = 'unbiased';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nfunction factory (type, config, load, typed) {\n  var add = load(require('../arithmetic/addScalar'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var multiply = load(require('../arithmetic/multiplyScalar'));\n  var divide = load(require('../arithmetic/divideScalar'));\n\n  /**\n   * Compute the variance of a matrix or a  list with values.\n   * In case of a (multi dimensional) array or matrix, the variance over all\n   * elements will be calculated.\n   *\n   * Optionally, the type of normalization can be specified as second\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   * Note that older browser may not like the variable name `var`. In that\n   * case, the function can be called as `math['var'](...)` instead of\n   * `math.var(...)`.\n   *\n   * Syntax:\n   *\n   *     math.var(a, b, c, ...)\n   *     math.var(A)\n   *     math.var(A, normalization)\n   *\n   * Examples:\n   *\n   *     math.var(2, 4, 6);                     // returns 4\n   *     math.var([2, 4, 6, 8]);                // returns 6.666666666666667\n   *     math.var([2, 4, 6, 8], 'uncorrected'); // returns 5\n   *     math.var([2, 4, 6, 8], 'biased');      // returns 4\n   *\n   *     math.var([[1, 2, 3], [4, 5, 6]]);      // returns 3.5\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, std, sum\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @return {*} The variance\n   */\n  var variance = typed('variance', {\n    // var([a, b, c, d, ...])\n    'Array | Matrix': function (array) {\n      return _var(array, DEFAULT_NORMALIZATION);\n    },\n\n    // var([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _var,\n\n    // var(a, b, c, d, ...)\n    '...': function (args) {\n      return _var(args, DEFAULT_NORMALIZATION);\n    }\n  });\n\n  variance.toTex = '\\\\mathrm{Var}\\\\left(${args}\\\\right)';\n\n  return variance;\n\n  /**\n   * Recursively calculate the variance of an n-dimensional array\n   * @param {Array} array\n   * @param {string} normalization\n   *                        Determines how to normalize the variance:\n   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)\n   *                        - 'uncorrected' The sum of squared errors is divided by n\n   *                        - 'biased'      The sum of squared errors is divided by (n + 1)\n   * @return {number | BigNumber} variance\n   * @private\n   */\n  function _var(array, normalization) {\n    var sum = 0;\n    var num = 0;\n\n    if (array.length == 0) {\n      throw new SyntaxError('Function var requires one or more parameters (0 provided)');\n    }\n\n    // calculate the mean and number of elements\n    deepForEach(array, function (value) {\n      sum = add(sum, value);\n      num++;\n    });\n    if (num === 0) throw new Error('Cannot calculate var of an empty array');\n\n    var mean = divide(sum, num);\n\n    // calculate the variance\n    sum = 0;\n    deepForEach(array, function (value) {\n      var diff = subtract(value, mean);\n      sum = add(sum, multiply(diff, diff));\n    });\n\n    switch (normalization) {\n      case 'uncorrected':\n        return divide(sum, num);\n\n      case 'biased':\n        return divide(sum, num + 1);\n\n      case 'unbiased':\n        var zero = (sum && sum.isBigNumber === true) ? new type.BigNumber(0) : 0;\n        return (num == 1) ? zero : divide(sum, num - 1);\n\n      default:\n        throw new Error('Unknown normalization \"' + normalization + '\". ' +\n        'Choose \"unbiased\" (default), \"uncorrected\", or \"biased\".');\n    }\n  }\n}\n\nexports.name = 'var';\nexports.factory = factory;\n","'use strict';\n\nvar string = require('../../utils/string');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Format a value of any type into a string.\n   *\n   * Syntax:\n   *\n   *    math.format(value)\n   *    math.format(value, options)\n   *    math.format(value, precision)\n   *    math.format(value, callback)\n   *\n   * Where:\n   *\n   *  - `value: *`\n   *    The value to be formatted\n   *  - `options: Object`\n   *    An object with formatting options. Available options:\n   *    - `notation: string`\n   *      Number notation. Choose from:\n   *      - 'fixed'\n   *        Always use regular number notation.\n   *        For example '123.40' and '14000000'\n   *      - 'exponential'\n   *        Always use exponential notation.\n   *        For example '1.234e+2' and '1.4e+7'\n   *      - 'engineering'\n   *        Always use engineering notation.\n   *        For example '123.4e+0' and '14.0e+6'\n   *      - 'auto' (default)\n   *        Regular number notation for numbers having an absolute value between\n   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.\n   *        Lower bound is included, upper bound is excluded.\n   *        For example '123.4' and '1.4e7'.\n   *    - `precision: number`\n   *      A number between 0 and 16 to round the digits of the number. In case\n   *      of notations 'exponential' and 'auto', `precision` defines the total\n   *      number of significant digits returned and is undefined by default.\n   *      In case of notation 'fixed', `precision` defines the number of\n   *      significant digits after the decimal point, and is 0 by default.\n   *    - `exponential: Object`\n   *      An object containing two parameters, {number} lower and {number} upper,\n   *      used by notation 'auto' to determine when to return exponential\n   *      notation. Default values are `lower=1e-3` and `upper=1e5`. Only\n   *      applicable for notation `auto`.\n   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.\n   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is\n   *      configured, and will output `0.(3)` when 'decimal' is configured.\n   * - `callback: function`\n   *   A custom formatting function, invoked for all numeric elements in `value`,\n   *   for example all elements of a matrix, or the real and imaginary\n   *   parts of a complex number. This callback can be used to override the\n   *   built-in numeric notation with any type of formatting. Function `callback`\n   *   is called with `value` as parameter and must return a string.\n   *\n   * When `value` is an Object:\n   *\n   * - When the object contains a property `format` being a function, this function\n   *   is invoked as `value.format(options)` and the result is returned.\n   * - When the object has its own `toString` method, this method is invoked\n   *   and the result is returned.\n   * - In other cases the function will loop over all object properties and\n   *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n   *\n   * When value is a function:\n   *\n   * - When the function has a property `syntax`, it returns this\n   *   syntax description.\n   * - In other cases, a string `'function'` is returned.\n   *\n   * Examples:\n   *\n   *    math.format(6.4);                                        // returns '6.4'\n   *    math.format(1240000);                                    // returns '1.24e6'\n   *    math.format(1/3);                                        // returns '0.3333333333333333'\n   *    math.format(1/3, 3);                                     // returns '0.333'\n   *    math.format(21385, 2);                                   // returns '21000'\n   *    math.format(12.071, {notation: 'fixed'});                // returns '12'\n   *    math.format(2.3,    {notation: 'fixed', precision: 2});  // returns '2.30'\n   *    math.format(52.8,   {notation: 'exponential'});          // returns '5.28e+1'\n   *    math.format(12400,  {notation: 'engineering'});         // returns '12.400e+3'\n   *\n   *    function formatCurrency(value) {\n   *      // return currency notation with two digits:\n   *      return '$' + value.toFixed(2);\n   *\n   *      // you could also use math.format inside the callback:\n   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2});\n   *    }\n   *    math.format([2.1, 3, 0.016], formatCurrency};            // returns '[$2.10, $3.00, $0.02]'\n   *\n   * See also:\n   *\n   *    print\n   *\n   * @param {*} value                               Value to be stringified\n   * @param {Object | Function | number} [options]  Formatting options\n   * @return {string} The formatted value\n   */\n  var format = typed('format', {\n    'any': string.format,\n    'any, Object | function | number': string.format\n  });\n\n  format.toTex = undefined; // use default template\n\n  return format;\n}\n\nexports.name = 'format';\nexports.factory = factory;\n","module.exports = [\n  require('./format'),\n  require('./print')\n];\n","'use strict';\n\nvar isString = require('../../utils/string').isString;\nvar format = require('../../utils/string').format;\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Interpolate values into a string template.\n   *\n   * Syntax:\n   *\n   *     math.print(template, values)\n   *     math.print(template, values, precision)\n   *     math.print(template, values, options)\n   *\n   * Example usage:\n   *\n   *     // the following outputs: 'Lucy is 5 years old'\n   *     math.print('Lucy is $age years old', {age: 5});\n   *\n   *     // the following outputs: 'The value of pi is 3.141592654'\n   *     math.print('The value of pi is $pi', {pi: math.pi}, 10);\n   *\n   *     // the following outputs: 'hello Mary! The date is 2013-03-23'\n   *     math.print('Hello $user.name! The date is $date', {\n   *       user: {\n   *         name: 'Mary',\n   *       },\n   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)\n   *     });\n   *\n   * See also:\n   *\n   *     format\n   *\n   * @param {string} template     A string containing variable placeholders.\n   * @param {Object} values       An object containing variables which will\n   *                              be filled in in the template.\n   * @param {number | Object} [options]  Formatting options,\n   *                              or the number of digits to format numbers.\n   *                              See function math.format for a description\n   *                              of all options.\n   * @return {string} Interpolated string\n   */\n  var print = typed ('print', {\n    'string, Object': _print,\n    'string, Object, number | Object': _print\n  });\n\n  print.toTex = undefined; // use default template\n\n  return print;\n}\n\n/**\n * Interpolate values into a string template.\n * @param {string} template\n * @param {Object} values\n * @param {number | Object} [options]\n * @returns {string} Interpolated string\n * @private\n */\nfunction _print(template, values, options) {\n  return template.replace(/\\$([\\w\\.]+)/g, function (original, key) {\n        var keys = key.split('.');\n        var value = values[keys.shift()];\n        while (keys.length && value !== undefined) {\n          var k = keys.shift();\n          value = k ? value[k] : value + '.';\n        }\n\n        if (value !== undefined) {\n          if (!isString(value)) {\n            return format(value, options);\n          }\n          else {\n            return value;\n          }\n        }\n\n        return original;\n      }\n  );\n}\n\nexports.name = 'print';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the inverse cosine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acos(x)\n   *\n   * Examples:\n   *\n   *    math.acos(0.5);           // returns number 1.0471975511965979\n   *    math.acos(math.cos(1.5)); // returns number 1.5\n   *\n   *    math.acos(2);             // returns Complex 0 + 1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    cos, atan, asin\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x\n   */\n  var acos = typed('acos', {\n    'number': function (x) {\n      if ((x >= -1 && x <= 1) || config.predictable) {\n        return Math.acos(x);\n      }\n      else {\n        return new type.Complex(x, 0).acos();\n      }\n    },\n\n    'Complex': function (x) {\n      return x.acos();\n    },\n\n    'BigNumber': function (x) {\n      return x.acos();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, acos);\n    }\n  });\n\n  acos.toTex = {1: '\\\\cos^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return acos;\n}\n\nexports.name = 'acos';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the hyperbolic arccos of a value,\n   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acosh(x)\n   *\n   * Examples:\n   *\n   *    math.acosh(1.5);       // returns 0.9624236501192069\n   *\n   * See also:\n   *\n   *    cosh, asinh, atanh\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x\n   */\n  var acosh = typed('acosh', {\n    'number': function (x) {\n      if (x >= 1 || config.predictable) {\n        return _acosh(x);\n      }\n      if (x <= -1) {\n        return new type.Complex(Math.log(Math.sqrt(x*x - 1) - x), Math.PI);\n      }\n      return new type.Complex(x, 0).acosh();\n    },\n\n    'Complex': function (x) {\n      return x.acosh();\n    },\n\n    'BigNumber': function (x) {\n      return x.acosh();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, acosh);\n    }\n  });\n\n  acosh.toTex = {1: '\\\\cosh^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return acosh;\n}\n\n/**\n * Calculate the hyperbolic arccos of a number\n * @param {number} x\n * @return {number}\n * @private\n */\nvar _acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x*x - 1) + x)\n};\n\nexports.name = 'acosh';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acot(x)\n   *\n   * Examples:\n   *\n   *    math.acot(0.5);           // returns number 0.4636476090008061\n   *    math.acot(math.cot(1.5)); // returns number 1.5\n   *\n   *    math.acot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    cot, atan\n   *\n   * @param {number | Complex | Array | Matrix} x   Function input\n   * @return {number | Complex | Array | Matrix} The arc cotangent of x\n   */\n  var acot = typed('acot', {\n    'number': function (x) {\n      return Math.atan(1 / x);\n    },\n\n    'Complex': function (x) {\n      return x.acot();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x).atan();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, acot);\n    }\n  });\n\n  acot.toTex = {1: '\\\\cot^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return acot;\n}\n\nexports.name = 'acot';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the hyperbolic arccotangent of a value,\n   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acoth(x)\n   *\n   * Examples:\n   *\n   *    math.acoth(0.5);       // returns 0.8047189562170503\n   *\n   * See also:\n   *\n   *    acsch, asech\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x\n   */\n  var acoth = typed('acoth', {\n    'number': function (x) {\n      if (x >= 1 || x <= -1 || config.predictable) {\n        return isFinite(x) ? (Math.log((x+1)/x) + Math.log(x/(x-1))) / 2 : 0;\n      }\n      return new type.Complex(x, 0).acoth();\n    },\n\n    'Complex': function (x) {\n      return x.acoth();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x).atanh();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, acoth);\n    }\n  });\n\n  acoth.toTex = {1: '\\\\coth^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return acoth;\n}\n\nexports.name = 'acoth';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acsc(x)\n   *\n   * Examples:\n   *\n   *    math.acsc(0.5);           // returns number 0.5235987755982989\n   *    math.acsc(math.csc(1.5)); // returns number ~1.5\n   *\n   *    math.acsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    csc, asin, asec\n   *\n   * @param {number | Complex | Array | Matrix} x   Function input\n   * @return {number | Complex | Array | Matrix} The arc cosecant of x\n   */\n  var acsc = typed('acsc', {\n    'number': function (x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return Math.asin(1 / x);\n      }\n      return new type.Complex(x, 0).acsc();\n    },\n\n    'Complex': function (x) {\n      return x.acsc();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x).asin();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, acsc);\n    }\n  });\n\n  acsc.toTex = {1: '\\\\csc^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return acsc;\n}\n\nexports.name = 'acsc';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the hyperbolic arccosecant of a value,\n   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acsch(x)\n   *\n   * Examples:\n   *\n   *    math.acsch(0.5);       // returns 1.4436354751788103\n   *\n   * See also:\n   *\n   *    asech, acoth\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x\n   */\n  var acsch = typed('acsch', {\n    'number': function (x) {\n      x = 1 / x;\n      return Math.log(x + Math.sqrt(x*x + 1));\n    },\n\n    'Complex': function (x) {\n      return x.acsch();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x).asinh();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, acsch);\n    }\n  });\n\n  acsch.toTex = {1: '\\\\mathrm{csch}^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return acsch;\n}\n\nexports.name = 'acsch';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asec(x)\n   *\n   * Examples:\n   *\n   *    math.asec(0.5);           // returns 1.0471975511965979\n   *    math.asec(math.sec(1.5)); // returns 1.5\n   *\n   *    math.asec(2);             // returns 0 + 1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    acos, acot, acsc\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} The arc secant of x\n   */\n  var asec = typed('asec', {\n    'number': function (x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return Math.acos(1 / x);\n      }\n      return new type.Complex(x, 0).asec();\n    },\n\n    'Complex': function (x) {\n      return x.asec();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x).acos();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, asec);\n    }\n  });\n\n  asec.toTex = {1: '\\\\sec^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return asec;\n}\n\nexports.name = 'asec';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var acosh = typed.find(load(require('./acosh')), ['Complex']);\n\n  /**\n   * Calculate the hyperbolic arcsecant of a value,\n   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asech(x)\n   *\n   * Examples:\n   *\n   *    math.asech(0.5);       // returns 1.3169578969248166\n   *\n   * See also:\n   *\n   *    acsch, acoth\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x\n   */\n  var asech = typed('asech', {\n    'number': function (x) {\n      if ((x <= 1 && x >= -1) || config.predictable) {\n        x = 1 / x;\n\n        var ret = Math.sqrt(x*x - 1);\n        if (x > 0 || config.predictable) {\n          return Math.log(ret + x);\n        }\n\n        return new type.Complex(Math.log(ret - x), Math.PI);\n      }\n\n      return new type.Complex(x, 0).asech();\n    },\n\n    'Complex': function (x) {\n      return x.asech()\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x).acosh();\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, asech);\n    }\n  });\n\n  asech.toTex = {1: '\\\\mathrm{sech}^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return asech;\n}\n\nexports.name = 'asech';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the inverse sine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asin(x)\n   *\n   * Examples:\n   *\n   *    math.asin(0.5);           // returns number 0.5235987755982989\n   *    math.asin(math.sin(1.5)); // returns number ~1.5\n   *\n   *    math.asin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    sin, atan, acos\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x\n   */\n  var asin = typed('asin', {\n    'number': function (x) {\n      if ((x >= -1 && x <= 1) || config.predictable) {\n        return Math.asin(x);\n      }\n      else {\n        return new type.Complex(x, 0).asin();\n      }\n    },\n\n    'Complex': function (x) {\n      return x.asin();\n    },\n\n    'BigNumber': function (x) {\n      return x.asin();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since asin(0) = 0\n      return deepMap(x, asin, true);\n    }\n  });\n\n  asin.toTex = {1: '\\\\sin^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return asin;\n}\n\nexports.name = 'asin';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the hyperbolic arcsine of a value,\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asinh(x)\n   *\n   * Examples:\n   *\n   *    math.asinh(0.5);       // returns 0.48121182505960347\n   *\n   * See also:\n   *\n   *    acosh, atanh\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x\n   */\n  var asinh = typed('asinh', {\n    'number': Math.asinh || function (x) {\n      return Math.log(Math.sqrt(x*x + 1) + x);\n    },\n\n    'Complex': function (x) {\n        return x.asinh();\n    },\n\n    'BigNumber': function (x) {\n      return x.asinh();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since asinh(0) = 0\n      return deepMap(x, asinh, true);\n    }\n  });\n\n  asinh.toTex = {1: '\\\\sinh^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return asinh;\n}\n\nexports.name = 'asinh';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the inverse tangent of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atan(x)\n   *\n   * Examples:\n   *\n   *    math.atan(0.5);           // returns number 0.4636476090008061\n   *    math.atan(math.tan(1.5)); // returns number 1.5\n   *\n   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    tan, asin, acos\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x\n   */\n  var atan = typed('atan', {\n    'number': function (x) {\n      return Math.atan(x);\n    },\n\n    'Complex': function (x) {\n      return x.atan();\n    },\n\n    'BigNumber': function (x) {\n      return x.atan();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since atan(0) = 0\n      return deepMap(x, atan, true);\n    }\n  });\n\n  atan.toTex = {1: '\\\\tan^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return atan;\n}\n\nexports.name = 'atan';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm09 = load(require('../../type/matrix/utils/algorithm09'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Calculate the inverse tangent function with two arguments, y/x.\n   * By providing two arguments, the right quadrant of the computed angle can be\n   * determined.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atan2(y, x)\n   *\n   * Examples:\n   *\n   *    math.atan2(2, 2) / math.pi;       // returns number 0.25\n   *\n   *    var angle = math.unit(60, 'deg'); // returns Unit 60 deg\n   *    var x = math.cos(angle);\n   *    var y = math.sin(angle);\n   *\n   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    tan, atan, sin, cos\n   *\n   * @param {number | Array | Matrix} y  Second dimension\n   * @param {number | Array | Matrix} x  First dimension\n   * @return {number | Array | Matrix} Four-quadrant inverse tangent\n   */\n  var atan2 = typed('atan2', {\n\n    'number, number': Math.atan2,\n\n    // Complex numbers doesn't seem to have a reasonable implementation of\n    // atan2(). Even Matlab removed the support, after they only calculated\n    // the atan only on base of the real part of the numbers and ignored the imaginary.\n\n    'BigNumber, BigNumber': function (y, x) {\n      return type.BigNumber.atan2(y, x);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // result\n      var c;\n\n      // process matrix storage\n      switch (x.storage()) {\n        case 'sparse':\n          switch (y.storage()) {\n            case 'sparse':\n              // sparse .* sparse\n              c = algorithm09(x, y, atan2, false);\n              break;\n            default:\n              // sparse .* dense\n              c = algorithm02(y, x, atan2, true);\n              break;\n          }\n          break;\n        default:\n          switch (y.storage()) {\n            case 'sparse':\n              // dense .* sparse\n              c = algorithm03(x, y, atan2, false);\n              break;\n            default:\n              // dense .* dense\n              c = algorithm13(x, y, atan2);\n              break;\n          }\n          break;\n      }\n      return c;\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return atan2(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return atan2(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return atan2(x, matrix(y));\n    },\n\n    'Matrix, number | BigNumber': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (x.storage()) {\n        case 'sparse':\n          c = algorithm11(x, y, atan2, false);\n          break;\n        default:\n          c = algorithm14(x, y, atan2, false);\n          break;\n      }\n      return c;\n    },\n\n    'number | BigNumber, Matrix': function (x, y) {\n      // result\n      var c;\n      // check storage format\n      switch (y.storage()) {\n        case 'sparse':\n          c = algorithm12(y, x, atan2, true);\n          break;\n        default:\n          c = algorithm14(y, x, atan2, true);\n          break;\n      }\n      return c;\n    },\n\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, atan2, false).valueOf();\n    },\n\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, atan2, true).valueOf();\n    }\n  });\n\n  atan2.toTex = {2: '\\\\mathrm{atan2}\\\\left(${args}\\\\right)'};\n\n  return atan2;\n}\n\nexports.name = 'atan2';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the hyperbolic arctangent of a value,\n   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atanh(x)\n   *\n   * Examples:\n   *\n   *    math.atanh(0.5);       // returns 0.5493061443340549\n   *\n   * See also:\n   *\n   *    acosh, asinh\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x\n   */\n  var atanh = typed('atanh', {\n    'number': function (x) {\n      if ((x <= 1 && x >= -1) || config.predictable) {\n        return _atanh(x);\n      }\n      return new type.Complex(x, 0).atanh();\n    },\n\n    'Complex': function (x) {\n      return x.atanh();\n    },\n\n    'BigNumber': function (x) {\n      return x.atanh();\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since atanh(0) = 0\n      return deepMap(x, atanh, true);\n    }\n  });\n\n  atanh.toTex = {1: '\\\\tanh^{-1}\\\\left(${args[0]}\\\\right)'};\n\n  return atanh;\n}\n\n/**\n * Calculate the hyperbolic arctangent of a number\n * @param {number} x\n * @return {number}\n * @private\n */\nvar _atanh = Math.atanh || function (x) {\n  return Math.log((1 + x)/(1 - x)) / 2\n};\n\nexports.name = 'atanh';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the cosine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cos(x)\n   *\n   * Examples:\n   *\n   *    math.cos(2);                      // returns number -0.4161468365471422\n   *    math.cos(math.pi / 4);            // returns number  0.7071067811865475\n   *    math.cos(math.unit(180, 'deg'));  // returns number -1\n   *    math.cos(math.unit(60, 'deg'));   // returns number  0.5\n   *\n   *    var angle = 0.2;\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x\n   */\n  var cos = typed('cos', {\n    'number': Math.cos,\n\n    'Complex': function (x) {\n      return x.cos();\n    },\n\n    'BigNumber': function (x) {\n      return x.cos();\n    },\n\n    'Unit': function (x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError ('Unit in function cos is no angle');\n      }\n      return cos(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, cos);\n    }\n  });\n\n  cos.toTex = {1: '\\\\cos\\\\left(${args[0]}\\\\right)'};\n\n  return cos;\n}\n\nexports.name = 'cos';\nexports.factory = factory;\n","'use strict';\r\n\r\nvar deepMap = require('../../utils/collection/deepMap');\r\n\r\nfunction factory (type, config, load, typed) {\r\n  /**\r\n   * Calculate the hyperbolic cosine of a value,\r\n   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.cosh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.cosh(0.5);       // returns number 1.1276259652063807\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, tanh\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x\r\n   */\r\n  var cosh = typed('cosh', {\r\n    'number': _cosh,\r\n\r\n    'Complex': function (x) {\r\n      return x.cosh();\r\n    },\r\n\r\n    'BigNumber': function (x) {\r\n      return x.cosh();\r\n    },\r\n\r\n    'Unit': function (x) {\r\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n        throw new TypeError ('Unit in function cosh is no angle');\r\n      }\r\n      return cosh(x.value);\r\n    },\r\n\r\n    'Array | Matrix': function (x) {\r\n      return deepMap(x, cosh);\r\n    }\r\n  });\r\n\r\n  cosh.toTex = {1: '\\\\cosh\\\\left(${args[0]}\\\\right)'};\r\n\r\n  return cosh;\r\n}\r\n\r\n/**\r\n * Calculate the hyperbolic cosine of a number\r\n * @param {number} x\r\n * @returns {number}\r\n * @private\r\n */\r\nvar _cosh = Math.cosh || function (x) {\r\n  return (Math.exp(x) + Math.exp(-x)) / 2;\r\n};\r\n\r\nexports.name = 'cosh';\r\nexports.factory = factory;\r\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cot(x)\n   *\n   * Examples:\n   *\n   *    math.cot(2);      // returns number -0.45765755436028577\n   *    1 / math.tan(2);  // returns number -0.45765755436028577\n   *\n   * See also:\n   *\n   *    tan, sec, csc\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Cotangent of x\n   */\n  var cot = typed('cot', {\n    'number': function (x) {\n      return 1 / Math.tan(x);\n    },\n\n    'Complex': function (x) {\n      return x.cot();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x.tan());\n    },\n\n    'Unit': function (x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError ('Unit in function cot is no angle');\n      }\n      return cot(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, cot);\n    }\n  });\n\n  cot.toTex = {1: '\\\\cot\\\\left(${args[0]}\\\\right)'};\n\n  return cot;\n}\n\nexports.name = 'cot';\nexports.factory = factory;\n","'use strict';\r\n\r\nvar deepMap = require('../../utils/collection/deepMap');\r\n\r\nfunction factory (type, config, load, typed) {\r\n  /**\r\n   * Calculate the hyperbolic cotangent of a value,\r\n   * defined as `coth(x) = 1 / tanh(x)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.coth(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // coth(x) = 1 / tanh(x)\r\n   *    math.coth(2);         // returns 1.0373147207275482\r\n   *    1 / math.tanh(2);     // returns 1.0373147207275482\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, tanh, cosh\r\n   *\r\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x\r\n   */\r\n  var coth = typed('coth', {\r\n    'number': _coth,\r\n\r\n    'Complex': function (x) {\r\n      return x.coth();\r\n    },\r\n\r\n    'BigNumber': function (x) {\r\n      return new type.BigNumber(1).div(x.tanh());\r\n    },\r\n\r\n    'Unit': function (x) {\r\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n        throw new TypeError ('Unit in function coth is no angle');\r\n      }\r\n      return coth(x.value);\r\n    },\r\n\r\n    'Array | Matrix': function (x) {\r\n      return deepMap(x, coth);\r\n    }\r\n  });\r\n\r\n  coth.toTex = {1: '\\\\coth\\\\left(${args[0]}\\\\right)'};\r\n\r\n  return coth;\r\n}\r\n\r\n/**\r\n * Calculate the hyperbolic cosine of a number\r\n * @param {number} x\r\n * @returns {number}\r\n * @private\r\n */\r\nfunction _coth(x) {\r\n  var e = Math.exp(2 * x);\r\n  return (e + 1) / (e - 1);\r\n}\r\n\r\nexports.name = 'coth';\r\nexports.factory = factory;\r\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.csc(x)\n   *\n   * Examples:\n   *\n   *    math.csc(2);      // returns number 1.099750170294617\n   *    1 / math.sin(2);  // returns number 1.099750170294617\n   *\n   * See also:\n   *\n   *    sin, sec, cot\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Cosecant of x\n   */\n  var csc = typed('csc', {\n    'number': function (x) {\n      return 1 / Math.sin(x);\n    },\n\n    'Complex': function (x) {\n      return x.csc();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x.sin());\n    },\n\n    'Unit': function (x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError ('Unit in function csc is no angle');\n      }\n      return csc(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, csc);\n    }\n  });\n\n  csc.toTex = {1: '\\\\csc\\\\left(${args[0]}\\\\right)'};\n\n  return csc;\n}\n\nexports.name = 'csc';\nexports.factory = factory;\n","'use strict';\r\n\r\nvar deepMap = require('../../utils/collection/deepMap');\r\nvar sign = require('../../utils/number').sign;\r\n\r\nfunction factory (type, config, load, typed) {\r\n  /**\r\n   * Calculate the hyperbolic cosecant of a value,\r\n   * defined as `csch(x) = 1 / sinh(x)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.csch(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // csch(x) = 1/ sinh(x)\r\n   *    math.csch(0.5);       // returns 1.9190347513349437\r\n   *    1 / math.sinh(0.5);   // returns 1.9190347513349437\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, sech, coth\r\n   *\r\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x\r\n   */\r\n  var csch = typed('csch', {\r\n    'number': _csch,\r\n\r\n    'Complex': function (x) {\r\n      return x.csch();\r\n    },\r\n\r\n    'BigNumber': function (x) {\r\n      return new type.BigNumber(1).div(x.sinh());\r\n    },\r\n\r\n    'Unit': function (x) {\r\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n        throw new TypeError ('Unit in function csch is no angle');\r\n      }\r\n      return csch(x.value);\r\n    },\r\n\r\n    'Array | Matrix': function (x) {\r\n      return deepMap(x, csch);\r\n    }\r\n  });\r\n\r\n  csch.toTex = {1: '\\\\mathrm{csch}\\\\left(${args[0]}\\\\right)'};\r\n\r\n  return csch;\r\n}\r\n\r\n/**\r\n * Calculate the hyperbolic cosecant of a number\r\n * @param {number} x\r\n * @returns {number}\r\n * @private\r\n */\r\nfunction _csch(x) {\r\n  // consider values close to zero (+/-)\r\n  if (x == 0) {\r\n    return Number.POSITIVE_INFINITY;\r\n  }\r\n  else {\r\n    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);\r\n  }\r\n}\r\n\r\nexports.name = 'csch';\r\nexports.factory = factory;\r\n","module.exports = [\n  require('./acos'),\n  require('./acosh'),\n  require('./acot'),\n  require('./acoth'),\n  require('./acsc'),\n  require('./acsch'),\n  require('./asec'),\n  require('./asech'),\n  require('./asin'),\n  require('./asinh'),\n  require('./atan'),\n  require('./atan2'),\n  require('./atanh'),\n  require('./cos'),\n  require('./cosh'),\n  require('./cot'),\n  require('./coth'),\n  require('./csc'),\n  require('./csch'),\n  require('./sec'),\n  require('./sech'),\n  require('./sin'),\n  require('./sinh'),\n  require('./tan'),\n  require('./tanh')\n];\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sec(x)\n   *\n   * Examples:\n   *\n   *    math.sec(2);      // returns number -2.4029979617223822\n   *    1 / math.cos(2);  // returns number -2.4029979617223822\n   *\n   * See also:\n   *\n   *    cos, csc, cot\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Secant of x\n   */\n  var sec = typed('sec', {\n    'number': function (x) {\n      return 1 / Math.cos(x);\n    },\n\n    'Complex': function (x) {\n      return x.sec();\n    },\n\n    'BigNumber': function (x) {\n      return new type.BigNumber(1).div(x.cos());\n    },\n\n    'Unit': function (x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError ('Unit in function sec is no angle');\n      }\n      return sec(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, sec);\n    }\n  });\n\n  sec.toTex = {1: '\\\\sec\\\\left(${args[0]}\\\\right)'};\n\n  return sec;\n}\n\nexports.name = 'sec';\nexports.factory = factory;\n","'use strict';\r\n\r\nvar deepMap = require('../../utils/collection/deepMap');\r\n\r\nfunction factory (type, config, load, typed) {\r\n  /**\r\n   * Calculate the hyperbolic secant of a value,\r\n   * defined as `sech(x) = 1 / cosh(x)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sech(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // sech(x) = 1/ cosh(x)\r\n   *    math.sech(0.5);       // returns 0.886818883970074\r\n   *    1 / math.cosh(0.5);   // returns 0.886818883970074\r\n   *\r\n   * See also:\r\n   *\r\n   *    cosh, csch, coth\r\n   *\r\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x\r\n   */\r\n  var sech = typed('sech', {\r\n    'number': _sech,\r\n\r\n    'Complex': function (x) {\r\n      return x.sech();\r\n    },\r\n\r\n    'BigNumber': function (x) {\r\n      return new type.BigNumber(1).div(x.cosh());\r\n    },\r\n\r\n    'Unit': function (x) {\r\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n        throw new TypeError ('Unit in function sech is no angle');\r\n      }\r\n      return sech(x.value);\r\n    },\r\n\r\n    'Array | Matrix': function (x) {\r\n      return deepMap(x, sech);\r\n    }\r\n  });\r\n\r\n  sech.toTex = {1: '\\\\mathrm{sech}\\\\left(${args[0]}\\\\right)'};\r\n\r\n  return sech;\r\n}\r\n\r\n/**\r\n * Calculate the hyperbolic secant of a number\r\n * @param {number} x\r\n * @returns {number}\r\n * @private\r\n */\r\nfunction _sech(x) {\r\n  return 2 / (Math.exp(x) + Math.exp(-x));\r\n}\r\n\r\nexports.name = 'sech';\r\nexports.factory = factory;\r\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Calculate the sine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sin(x)\n   *\n   * Examples:\n   *\n   *    math.sin(2);                      // returns number 0.9092974268256813\n   *    math.sin(math.pi / 4);            // returns number 0.7071067811865475\n   *    math.sin(math.unit(90, 'deg'));   // returns number 1\n   *    math.sin(math.unit(30, 'deg'));   // returns number 0.5\n   *\n   *    var angle = 0.2;\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x\n   */\n  var sin = typed('sin', {\n    'number': Math.sin,\n\n    'Complex': function (x) {\n      return x.sin();\n    },\n\n    'BigNumber': function (x) {\n      return x.sin();\n    },\n\n    'Unit': function (x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError ('Unit in function sin is no angle');\n      }\n      return sin(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since sin(0) = 0\n      return deepMap(x, sin, true);\n    }\n  });\n\n  sin.toTex = {1: '\\\\sin\\\\left(${args[0]}\\\\right)'};\n\n  return sin;\n}\n\nexports.name = 'sin';\nexports.factory = factory;\n","'use strict';\r\n\r\nvar deepMap = require('../../utils/collection/deepMap');\r\n\r\nfunction factory (type, config, load, typed) {\r\n  /**\r\n   * Calculate the hyperbolic sine of a value,\r\n   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sinh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sinh(0.5);       // returns number 0.5210953054937474\r\n   *\r\n   * See also:\r\n   *\r\n   *    cosh, tanh\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x\r\n   */\r\n  var sinh = typed('sinh', {\r\n    'number': _sinh,\r\n\r\n    'Complex': function (x) {\r\n      return x.sinh();\r\n    },\r\n\r\n    'BigNumber': function (x) {\r\n      return x.sinh();\r\n    },\r\n\r\n    'Unit': function (x) {\r\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n        throw new TypeError ('Unit in function sinh is no angle');\r\n      }\r\n      return sinh(x.value);\r\n    },\r\n\r\n    'Array | Matrix': function (x) {\r\n      // deep map collection, skip zeros since sinh(0) = 0\r\n      return deepMap(x, sinh, true);\r\n    }\r\n  });\r\n\r\n  sinh.toTex = {1: '\\\\sinh\\\\left(${args[0]}\\\\right)'};\r\n\r\n  return sinh;\r\n}\r\n\r\n/**\r\n * Calculate the hyperbolic sine of a number\r\n * @param {number} x\r\n * @returns {number}\r\n * @private\r\n */\r\nvar _sinh = Math.sinh || function (x) {\r\n  return (Math.exp(x) - Math.exp(-x)) / 2;\r\n};\r\n\r\nexports.name = 'sinh';\r\nexports.factory = factory;\r\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.tan(x)\n   *\n   * Examples:\n   *\n   *    math.tan(0.5);                    // returns number 0.5463024898437905\n   *    math.sin(0.5) / math.cos(0.5);    // returns number 0.5463024898437905\n   *    math.tan(math.pi / 4);            // returns number 1\n   *    math.tan(math.unit(45, 'deg'));   // returns number 1\n   *\n   * See also:\n   *\n   *    atan, sin, cos\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x\n   */\n  var tan = typed('tan', {\n    'number': Math.tan,\n\n    'Complex': function (x) {\n        return x.tan();\n    },\n\n    'BigNumber': function (x) {\n      return x.tan();\n    },\n\n    'Unit': function (x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError ('Unit in function tan is no angle');\n      }\n      return tan(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since tan(0) = 0\n      return deepMap(x, tan, true);\n    }\n  });\n\n  tan.toTex = {1: '\\\\tan\\\\left(${args[0]}\\\\right)'};\n\n  return tan;\n}\n\nexports.name = 'tan';\nexports.factory = factory;\n","'use strict';\r\n\r\nvar deepMap = require('../../utils/collection/deepMap');\r\n\r\nfunction factory (type, config, load, typed) {\r\n  /**\r\n   * Calculate the hyperbolic tangent of a value,\r\n   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.tanh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\r\n   *    math.tanh(0.5);                   // returns 0.46211715726000974\r\n   *    math.sinh(0.5) / math.cosh(0.5);  // returns 0.46211715726000974\r\n   *    1 / math.coth(0.5);               // returns 0.46211715726000974\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, cosh, coth\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\r\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x\r\n   */\r\n  var tanh = typed('tanh', {\r\n    'number': _tanh,\r\n\r\n    'Complex': function (x) {\r\n        return x.tanh();\r\n    },\r\n\r\n    'BigNumber': function (x) {\r\n      return x.tanh();\r\n    },\r\n\r\n    'Unit': function (x) {\r\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\r\n        throw new TypeError ('Unit in function tanh is no angle');\r\n      }\r\n      return tanh(x.value);\r\n    },\r\n\r\n    'Array | Matrix': function (x) {\r\n      // deep map collection, skip zeros since tanh(0) = 0\r\n      return deepMap(x, tanh, true);\r\n    }\r\n  });\r\n\r\n  tanh.toTex = {1: '\\\\tanh\\\\left(${args[0]}\\\\right)'};\r\n\r\n  return tanh;\r\n}\r\n\r\n/**\r\n * Calculate the hyperbolic tangent of a number\r\n * @param {number} x\r\n * @returns {number}\r\n * @private\r\n */\r\nvar _tanh = Math.tanh || function (x) {\r\n  var e = Math.exp(2 * x);\r\n  return (e - 1) / (e + 1);\r\n};\r\n\r\nexports.name = 'tanh';\r\nexports.factory = factory;\r\n","module.exports = [\n  require('./to')\n];","'use strict';\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm');                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'));  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits');              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n  var to = typed('to', {\n\n    'Unit, Unit | string': function (x, unit) {\n      return x.to(unit);\n    },\n\n    'Matrix, Matrix': function (x, y) {\n      // SparseMatrix does not support Units\n      return algorithm13(x, y, to);\n    },\n\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return to(matrix(x), matrix(y)).valueOf();\n    },\n\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return to(matrix(x), y);\n    },\n\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return to(x, matrix(y));\n    },\n\n    'Matrix, any': function (x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(x, y, to, false);\n    },\n\n    'any, Matrix': function (x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(y, x, to, true);\n    },\n\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, to, false).valueOf();\n    },\n\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, to, true).valueOf();\n    }\n  });\n\n  to.toTex = {\n    2: '\\\\left(${args[0]}' + latex.operators['to'] + '${args[1]}\\\\right)'\n  };\n\n  return to;\n}\n\nexports.name = 'to';\nexports.factory = factory;\n","'use strict';\n\nvar object= require('../../utils/object');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Clone an object.\n   *\n   * Syntax:\n   *\n   *     math.clone(x)\n   *\n   * Examples:\n   *\n   *    math.clone(3.5);                   // returns number 3.5\n   *    math.clone(math.complex('2-4i'); // returns Complex 2 - 4i\n   *    math.clone(math.unit(45, 'deg'));  // returns Unit 45 deg\n   *    math.clone([[1, 2], [3, 4]]);      // returns Array [[1, 2], [3, 4]]\n   *    math.clone(\"hello world\");         // returns string \"hello world\"\n   *\n   * @param {*} x   Object to be cloned\n   * @return {*} A clone of object x\n   */\n  var clone = typed('clone', {\n    'any': object.clone\n  });\n\n  clone.toTex = undefined; // use default template\n\n  return clone;\n}\n\nexports.name = 'clone';\nexports.factory = factory;\n","module.exports = [\n  require('./clone'),\n  require('./isInteger'),\n  require('./isNegative'),\n  require('./isNumeric'),\n  require('./isPositive'),\n  require('./isPrime'),\n  require('./isZero'),\n  require('./isNaN'),\n  require('./typeof')\n];\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar number = require('../../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2);                     // returns true\n   *    math.isInteger(0);                     // returns true\n   *    math.isInteger(0.5);                   // returns false\n   *    math.isInteger(math.bignumber(500));   // returns true\n   *    math.isInteger(math.fraction(4));      // returns true\n   *    math.isInteger('3');                   // returns true\n   *    math.isInteger([3, 0.5, -2]);          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i');   // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isInteger = typed('isInteger', {\n    'number': number.isInteger, // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n\n    'BigNumber': function (x) {\n      return x.isInt();\n    },\n\n    'Fraction': function (x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, isInteger);\n    }\n  });\n\n  return isInteger;\n}\n\nexports.name = 'isInteger';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar number = require('../../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Test whether a value is NaN (not a number).\n   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNaN(x)\n   *\n   * Examples:\n   *\n   *    math.isNaN(3);                     // returns false\n   *    math.isNaN(NaN);                   // returns true\n   *    math.isNaN(0);                     // returns false\n   *    math.isNaN(math.bignumber(NaN));   // returns true\n   *    math.isNaN(math.bignumber(0));     // returns false\n   *    math.isNaN(math.fraction(-2, 5));  // returns false\n   *    math.isNaN('-2');                  // returns false\n   *    math.isNaN([2, 0, -3, NaN]');      // returns [false, false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isNegative, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is NaN.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isNaN = typed('isNaN', {\n    'number': function (x) {\n      return Number.isNaN(x);\n    },\n\n    'BigNumber': function (x) {\n      return x.isNaN();\n    },\n\n    'Fraction': function (x) {\n      return false;\n    },\n\n    'Complex': function (x) {\n      return Number.isNaN(x.re) && Number.isNaN(x.im);\n    },\n\n    'Unit': function (x) {\n      return Number.isNaN(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, Number.isNaN);\n    }\n  });\n\n  return isNaN;\n}\n\nexports.name = 'isNaN';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar number = require('../../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Test whether a value is negative: smaller than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNegative(x)\n   *\n   * Examples:\n   *\n   *    math.isNegative(3);                     // returns false\n   *    math.isNegative(-2);                    // returns true\n   *    math.isNegative(0);                     // returns false\n   *    math.isNegative(-0);                    // returns false\n   *    math.isNegative(math.bignumber(2));     // returns false\n   *    math.isNegative(math.fraction(-2, 5));  // returns true\n   *    math.isNegative('-2');                  // returns true\n   *    math.isNegative([2, 0, -3]');           // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isNegative = typed('isNegative', {\n    'number': function (x) {\n      return x < 0;\n    },\n\n    'BigNumber': function (x) {\n      return x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n\n    'Fraction': function (x) {\n      return x.s < 0; // It's enough to decide on the sign\n    },\n\n    'Unit': function (x) {\n      return isNegative(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, isNegative);\n    }\n  });\n\n  return isNegative;\n}\n\nexports.name = 'isNegative';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar number = require('../../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Test whether a value is an numeric value.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNumeric(x)\n   *\n   * Examples:\n   *\n   *    math.isNumeric(2);                     // returns true\n   *    math.isNumeric(0);                     // returns true\n   *    math.isNumeric(math.bignumber(500));   // returns true\n   *    math.isNumeric(math.fraction(4));      // returns true\n   *    math.isNumeric(math.complex('2-4i');   // returns false\n   *    math.isNumeric('3');                   // returns false\n   *    math.isNumeric([2.3, 'foo', false]);   // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    isZero, isPositive, isNegative, isInteger\n   *\n   * @param {*} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n   *                    `Fraction`, or `boolean`. Returns false for other types.\n   *                    Throws an error in case of unknown types.\n   */\n  var isNumeric = typed('isNumeric', {\n    'number | BigNumber | Fraction | boolean': function () {\n      return true;\n    },\n\n    'Complex | Unit | string': function () {\n      return false;\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, isNumeric);\n    }\n  });\n\n  return isNumeric;\n}\n\nexports.name = 'isNumeric';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar number = require('../../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Test whether a value is positive: larger than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPositive(x)\n   *\n   * Examples:\n   *\n   *    math.isPositive(3);                     // returns true\n   *    math.isPositive(-2);                    // returns false\n   *    math.isPositive(0);                     // returns false\n   *    math.isPositive(-0);                    // returns false\n   *    math.isPositive(0.5);                   // returns true\n   *    math.isPositive(math.bignumber(2));     // returns true\n   *    math.isPositive(math.fraction(-2, 5));  // returns false\n   *    math.isPositive(math.fraction(1,3));    // returns false\n   *    math.isPositive('2');                   // returns true\n   *    math.isPositive([2, 0, -3]');           // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isPositive = typed('isPositive', {\n    'number': function (x) {\n      return x > 0;\n    },\n\n    'BigNumber': function (x) {\n      return !x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n\n    'Fraction': function (x) {\n      return x.s > 0 && x.n > 0;\n    },\n\n    'Unit': function (x) {\n      return isPositive(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, isPositive);\n    }\n  });\n\n  return isPositive;\n}\n\nexports.name = 'isPositive';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Test whether a value is prime: has no divisors other than itself and one.\n   * The function supports type `number`, `bignumber`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPrime(x)\n   *\n   * Examples:\n   *\n   *    math.isPrime(3);                     // returns true\n   *    math.isPrime(-2);                    // returns false\n   *    math.isPrime(0);                     // returns false\n   *    math.isPrime(-0);                    // returns false\n   *    math.isPrime(0.5);                   // returns false\n   *    math.isPrime('2');                   // returns true\n   *    math.isPrime([2, 17, 100]');           // returns [true, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isPrime = typed('isPrime', {\n    'number': function (x) {\n      if (x < 2){\n        return false;\n      }\n      if (x == 2){\n        return true;\n      }\n      if (x % 2 == 0){ \n        return false;\n      }\n      for (var i = 3; i * i <= x; i += 2){\n        if (x % i == 0){\n          return false;\n        }\n      }\n      return true;\n    },\n\n    'BigNumber': function (x) {\n      if (x.lt(2)){\n        return false;\n      }\n      if (x.equals(2)){\n        return true;\n      }\n      if (x.mod(2).isZero()){\n        return false;\n      }\n      for(var i = type.BigNumber(3); i.times(i).lte(x); i = i.plus(1)){\n        if (x.mod(i).isZero()){\n          return false;\n        }\n      }\n      return true;\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, isPrime);\n    }\n  });\n\n  return isPrime;\n}\n\nexports.name = 'isPrime';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\nvar number = require('../../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Test whether a value is zero.\n   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\n   * `Complex`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isZero(x)\n   *\n   * Examples:\n   *\n   *    math.isZero(0);                     // returns true\n   *    math.isZero(2);                     // returns false\n   *    math.isZero(0.5);                   // returns false\n   *    math.isZero(math.bignumber(0));     // returns true\n   *    math.isZero(math.fraction(0));      // returns true\n   *    math.isZero(math.fraction(1,3));    // returns false\n   *    math.isZero(math.complex('2 - 4i'); // returns false\n   *    math.isZero(math.complex('0i');     // returns true\n   *    math.isZero('0');                   // returns true\n   *    math.isZero('2');                   // returns false\n   *    math.isZero([2, 0, -3]');           // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isZero = typed('isZero', {\n    'number': function (x) {\n      return x === 0;\n    },\n\n    'BigNumber': function (x) {\n      return x.isZero();\n    },\n\n    'Complex': function (x) {\n      return x.re === 0 && x.im === 0;\n    },\n\n    'Fraction': function (x) {\n      return x.d === 1 && x.n === 0;\n    },\n\n    'Unit': function (x) {\n      return isZero(x.value);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, isZero);\n    }\n  });\n\n  return isZero;\n}\n\nexports.name = 'isZero';\nexports.factory = factory;\n","'use strict';\n\nvar types = require('../../utils/types');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Determine the type of a variable.\n   *\n   * Function `typeof` recognizes the following types of objects:\n   *\n   * Object                 | Returns       | Example\n   * ---------------------- | ------------- | ------------------------------------------\n   * null                   | `'null'`      | `math.typeof(null)`\n   * number                 | `'number'`    | `math.typeof(3.5)`\n   * boolean                | `'boolean'`   | `math.typeof (true)`\n   * string                 | `'string'`    | `math.typeof ('hello world')`\n   * Array                  | `'Array'`     | `math.typeof ([1, 2, 3])`\n   * Date                   | `'Date'`      | `math.typeof (new Date())`\n   * Function               | `'Function'`  | `math.typeof (function () {})`\n   * Object                 | `'Object'`    | `math.typeof ({a: 2, b: 3})`\n   * RegExp                 | `'RegExp'`    | `math.typeof (/a regexp/)`\n   * undefined              | `'undefined'` | `math.typeof(undefined)`\n   * math.type.BigNumber    | `'BigNumber'` | `math.typeof (math.bignumber('2.3e500'))`\n   * math.type.Chain        | `'Chain'`     | `math.typeof (math.chain(2))`\n   * math.type.Complex      | `'Complex'`   | `math.typeof (math.complex(2, 3))`\n   * math.type.Fraction     | `'Fraction'`  | `math.typeof (math.fraction(1, 3))`\n   * math.type.Help         | `'Help'`      | `math.typeof (math.help('sqrt'))`\n   * math.type.Index        | `'Index'`     | `math.typeof (math.index(1, 3))`\n   * math.type.Matrix       | `'Matrix'`    | `math.typeof (math.matrix([[1,2], [3, 4]]))`\n   * math.type.Range        | `'Range'`     | `math.typeof (math.range(0, 10))`\n   * math.type.Unit         | `'Unit'`      | `math.typeof (math.unit('45 deg'))`\n   *\n   * Syntax:\n   *\n   *    math.typeof(x)\n   *\n   * Examples:\n   *\n   *    math.typeof(3.5);                     // returns 'number'\n   *    math.typeof(math.complex('2-4i'));    // returns 'Complex'\n   *    math.typeof(math.unit('45 deg'));     // returns 'Unit'\n   *    math.typeof('hello world');           // returns 'string'\n   *\n   * @param {*} x     The variable for which to test the type.\n   * @return {string} Returns the name of the type. Primitive types are lower case,\n   *                  non-primitive types are upper-camel-case.\n   *                  For example 'number', 'string', 'Array', 'Date'.\n   */\n  var _typeof = typed('_typeof', {\n    'any': function (x) {\n      // JavaScript types\n      var t = types.type(x);\n\n      // math.js types\n      if (t === 'Object') {\n        if (x.isBigNumber === true) return 'BigNumber';\n        if (x.isComplex === true)   return 'Complex';\n        if (x.isFraction === true)  return 'Fraction';\n        if (x.isMatrix === true)    return 'Matrix';\n        if (x.isUnit === true)      return 'Unit';\n        if (x.isIndex === true)     return 'Index';\n        if (x.isRange === true)     return 'Range';\n        if (x.isChain === true)     return 'Chain';\n        if (x.isHelp === true)      return 'Help';\n      }\n\n      return t;\n    }\n  });\n\n  _typeof.toTex = undefined; // use default template\n\n  return _typeof;\n}\n\nexports.name = 'typeof';\nexports.factory = factory;\n","module.exports = [\n  require('./reviver')\n];\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Instantiate mathjs data types from their JSON representation\n   * @param {string} key\n   * @param {*} value\n   * @returns {*} Returns the revived object\n   */\n  return function reviver(key, value) {\n    var constructor = type[value && value.mathjs];\n    if (constructor && typeof constructor.fromJSON === 'function') {\n      return constructor.fromJSON(value);\n    }\n\n    return value;\n  }\n}\n\nexports.name = 'reviver';\nexports.path = 'json';\nexports.factory = factory;\n","var Decimal = require('decimal.js/decimal.js'); // make sure to pick the es5 version\n\nfunction factory (type, config, load, typed, math) {\n  var BigNumber = Decimal.clone({precision: config.precision});\n\n  /**\n   * Attach type information\n   */\n  BigNumber.prototype.type = 'BigNumber';\n  BigNumber.prototype.isBigNumber = true;\n\n  /**\n   * Get a JSON representation of a BigNumber containing\n   * type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   */\n  BigNumber.prototype.toJSON = function () {\n    return {\n      mathjs: 'BigNumber',\n      value: this.toString()\n    };\n  };\n\n  /**\n   * Instantiate a BigNumber from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   * @return {BigNumber}\n   */\n  BigNumber.fromJSON = function (json) {\n    return new BigNumber(json.value);\n  };\n\n  // listen for changed in the configuration, automatically apply changed precision\n  math.on('config', function (curr, prev) {\n    if (curr.precision !== prev.precision) {\n      BigNumber.config({ precision: curr.precision });\n    }\n  });\n\n  return BigNumber;\n}\n\nexports.name = 'BigNumber';\nexports.path = 'type';\nexports.factory = factory;\nexports.math = true; // request access to the math namespace","'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2;                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2);  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500;                                    // returns number Infinity\n   *    math.bignumber('7.2e500');                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  var bignumber = typed('bignumber', {\n    '': function () {\n      return new type.BigNumber(0);\n    },\n\n    'number': function (x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new type.BigNumber(x + '');\n    },\n\n    'string': function (x) {\n      return new type.BigNumber(x);\n    },\n\n    'BigNumber': function (x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n\n    'Fraction': function (x) {\n      return new type.BigNumber(x.n).div(x.d);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, bignumber);\n    }\n  });\n\n  bignumber.toTex = {\n    0: '0',\n    1: '\\\\left(${args[0]}\\\\right)'\n  };\n\n  return bignumber;\n}\n\nexports.name = 'bignumber';\nexports.factory = factory;\n","module.exports = [\n  // type\n  require('./BigNumber'),\n\n  // construction function\n  require('./function/bignumber')\n];\n","'use strict';\n\nvar deepMap = require('./../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a boolean or convert a string or number to a boolean.\n   * In case of a number, `true` is returned for non-zero numbers, and `false` in\n   * case of zero.\n   * Strings can be `'true'` or `'false'`, or can contain a number.\n   * When value is a matrix, all elements will be converted to boolean.\n   *\n   * Syntax:\n   *\n   *    math.boolean(x)\n   *\n   * Examples:\n   *\n   *    math.boolean(0);     // returns false\n   *    math.boolean(1);     // returns true\n   *    math.boolean(-3);     // returns true\n   *    math.boolean('true');     // returns true\n   *    math.boolean('false');     // returns false\n   *    math.boolean([1, 0, 1, 1]);     // returns [true, false, true, true]\n   *\n   * See also:\n   *\n   *    bignumber, complex, index, matrix, string, unit\n   *\n   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\n   * @return {boolean | Array | Matrix} The boolean value\n   */\n  var bool = typed('bool', {\n    '': function () {\n      return false;\n    },\n\n    'boolean': function (x) {\n      return x;\n    },\n\n    'number': function (x) {\n      return !!x;\n    },\n\n    'BigNumber': function (x) {\n      return !x.isZero();\n    },\n\n    'string': function (x) {\n      // try case insensitive\n      var lcase = x.toLowerCase();\n      if (lcase === 'true') {\n        return true;\n      }\n      else if (lcase === 'false') {\n        return false;\n      }\n\n      // test whether value is a valid number\n      var num = Number(x);\n      if (x != '' && !isNaN(num)) {\n        return !!num;\n      }\n\n      throw new Error('Cannot convert \"' + x + '\" to a boolean');\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, bool);\n    }\n  });\n\n  return bool;\n}\n\nexports.name = 'boolean';\nexports.factory = factory;\n","'use strict';\n\nvar format = require('../../utils/string').format;\nvar lazy = require('../../utils/object').lazy;\n\nfunction factory (type, config, load, typed, math) {\n  /**\n   * @constructor Chain\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing chain.done(), which will return\n   * the final value.\n   *\n   * The Chain has a number of special functions:\n   * - done()             Finalize the chained operation and return the\n   *                      chain's value.\n   * - valueOf()          The same as done()\n   * - toString()         Returns a string representation of the chain's value.\n   *\n   * @param {*} [value]\n   */\n  function Chain (value) {\n    if (!(this instanceof Chain)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (value && value.isChain) {\n      this.value = value.value;\n    }\n    else {\n      this.value = value;\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Chain.prototype.type = 'Chain';\n  Chain.prototype.isChain = true;\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method valueOf()\n   * @returns {*} value\n   */\n  Chain.prototype.done = function () {\n    return this.value;\n  };\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method done()\n   * @returns {*} value\n   */\n  Chain.prototype.valueOf = function () {\n    return this.value;\n  };\n\n  /**\n   * Get a string representation of the value in the chain\n   * @returns {string}\n   */\n  Chain.prototype.toString = function () {\n    return format(this.value);\n  };\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {Function} fn      The function to be proxied\n   *                           If fn is no function, it is silently ignored.\n   * @private\n   */\n  function createProxy(name, fn) {\n    if (typeof fn === 'function') {\n      Chain.prototype[name] = chainify(fn);\n    }\n  }\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {function} resolver   The function resolving with the\n   *                              function to be proxied\n   * @private\n   */\n  function createLazyProxy(name, resolver) {\n    lazy(Chain.prototype, name, function outerResolver() {\n      var fn = resolver();\n      if (typeof fn === 'function') {\n        return chainify(fn);\n      }\n\n      return undefined; // if not a function, ignore\n    });\n  }\n\n  /**\n   * Make a function chainable\n   * @param {function} fn\n   * @return {Function} chain function\n   * @private\n   */\n  function chainify (fn) {\n    return function () {\n      var args = [this.value];  // `this` will be the context of a Chain instance\n      for (var i = 0; i < arguments.length; i++) {\n        args[i + 1] = arguments[i];\n      }\n\n      return new Chain(fn.apply(fn, args));\n    }\n  }\n\n  /**\n   * Create a proxy for a single method, or an object with multiple methods.\n   * Example usage:\n   *\n   *   Chain.createProxy('add', function add (x, y) {...});\n   *   Chain.createProxy({\n   *     add:      function add (x, y) {...},\n   *     subtract: function subtract (x, y) {...}\n   *   }\n   *\n   * @param {string | Object} arg0   A name (string), or an object with\n   *                                 functions\n   * @param {*} [arg1]               A function, when arg0 is a name\n   */\n  Chain.createProxy = function (arg0, arg1) {\n    if (typeof arg0 === 'string') {\n      // createProxy(name, value)\n      createProxy(arg0, arg1);\n    }\n    else {\n      // createProxy(values)\n      for (var prop in arg0) {\n        if (arg0.hasOwnProperty(prop)) {\n          createProxy(prop, arg0[prop]);\n        }\n      }\n    }\n  };\n\n  // create proxy for everything that is in math.js\n  Chain.createProxy(math);\n\n  // register on the import event, automatically add a proxy for every imported function.\n  math.on('import', function (name, resolver, path) {\n    if (path === undefined) {\n      // an imported function (not a data type or something special)\n      createLazyProxy(name, resolver);\n    }\n  });\n\n  return Chain;\n}\n\nexports.name = 'Chain';\nexports.path = 'type';\nexports.factory = factory;\nexports.math = true;  // require providing the math namespace as 5th argument\nexports.lazy = false; // we need to register a listener on the import events, so no lazy loading\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing `chain.done()`, which returns\n   * the final value.\n   *\n   * The chain has a number of special functions:\n   *\n   * - `done()`     Finalize the chain and return the chain's value.\n   * - `valueOf()`  The same as `done()`\n   * - `toString()` Executes `math.format()` onto the chain's value, returning\n   *                a string representation of the value.\n   *\n   * Syntax:\n   *\n   *    math.chain(value)\n   *\n   * Examples:\n   *\n   *     math.chain(3)\n   *         .add(4)\n   *         .subtract(2)\n   *         .done();     // 5\n   *\n   *     math.chain( [[1, 2], [3, 4]] )\n   *         .subset(math.index(0, 0), 8)\n   *         .multiply(3)\n   *         .done();     // [[24, 6], [9, 12]]\n   *\n   * @param {*} [value]   A value of any type on which to start a chained operation.\n   * @return {math.type.Chain} The created chain\n   */\n  return typed('chain', {\n    '': function() {\n      return new type.Chain();\n    },\n\n    'any': function(value) {\n      return new type.Chain(value);\n    }\n  });\n}\n\nexports.name = 'chain';\nexports.factory = factory;\n","module.exports = [\n  // type\n  require('./Chain'),\n\n  // construction function\n  require('./function/chain')\n];\n","var Complex = require('complex.js');\nvar format = require('../../utils/number').format;\nvar isNumber = require('../../utils/number').isNumber;\n\nfunction factory (type, config, load, typed, math) {\n\n  /**\n   * Attach type information\n   */\n  Complex.prototype.type = 'Complex';\n  Complex.prototype.isComplex = true;\n\n\n  /**\n   * Get a JSON representation of the complex number\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\n   */\n  Complex.prototype.toJSON = function () {\n    return {\n      mathjs: 'Complex',\n      re: this.re,\n      im: this.im\n    };\n  };\n\n  /*\n   * Return the value of the complex number in polar notation\n   * The angle phi will be set in the interval of [-pi, pi].\n   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\n   */\n  Complex.prototype.toPolar = function () {\n    return {\n      r: this.abs(),\n      phi: this.arg()\n    };\n  };\n\n  /**\n   * Get a string representation of the complex number,\n   * with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string} str\n   */\n  Complex.prototype.format = function (options) {\n    var str = '';\n    var im = this.im;\n    var re = this.re;\n    var strRe = format(this.re, options);\n    var strIm = format(this.im, options);\n\n    // round either re or im when smaller than the configured precision\n    var precision = isNumber(options) ? options : options ? options.precision : null;\n    if (precision !== null) {\n      var epsilon = Math.pow(10, -precision);\n      if (Math.abs(re / im) < epsilon) {\n        re = 0;\n      }\n      if (Math.abs(im / re) < epsilon) {\n        im = 0;\n      }\n    }\n\n    if (im == 0) {\n      // real value\n      str = strRe;\n    } else if (re == 0) {\n      // purely complex value\n      if (im == 1) {\n        str = 'i';\n      } else if (im == -1) {\n        str = '-i';\n      } else {\n        str = strIm + 'i';\n      }\n    } else {\n      // complex value\n      if (im < 0) {\n        if (im == -1) {\n          str = strRe + ' - i';\n        } else {\n          str = strRe + ' - ' + (/[\\d-.]/.test(strIm.charAt(0)) ? strIm.substring(1) : strIm) + 'i';\n        }\n      } else {\n        if (im == 1) {\n          str = strRe + ' + i';\n        } else {\n          str = strRe + ' + ' + strIm + 'i';\n        }\n      }\n    }\n    return str;\n  };\n\n  /**\n   * Create a complex number from polar coordinates\n   *\n   * Usage:\n   *\n   *     Complex.fromPolar(r: number, phi: number) : Complex\n   *     Complex.fromPolar({r: number, phi: number}) : Complex\n   *\n   * @param {*} args...\n   * @return {Complex}\n   */\n  Complex.fromPolar = function (args) {\n    switch (arguments.length) {\n      case 1:\n        var arg = arguments[0];\n        if (typeof arg === 'object') {\n          return Complex(arg);\n        }\n        throw new TypeError('Input has to be an object with r and phi keys.');\n\n      case 2:\n        var r = arguments[0],\n            phi = arguments[1];\n        if (isNumber(r)) {\n          if (phi && phi.isUnit && phi.hasBase('ANGLE')) {\n            // convert unit to a number in radians\n            phi = phi.toNumber('rad');\n          }\n\n          if (isNumber(phi)) {\n            return new Complex({r: r, phi: phi});\n          }\n\n          throw new TypeError('Phi is not a number nor an angle unit.');\n        } else {\n          throw new TypeError('Radius r is not a number.');\n        }\n\n      default:\n        throw new SyntaxError('Wrong number of arguments in function fromPolar');\n    }\n  };\n\n\n  Complex.prototype.valueOf = Complex.prototype.toString;\n\n  /**\n   * Create a Complex number from a JSON object\n   * @param {Object} json  A JSON Object structured as\n   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n   *                       All properties are optional, default values\n   *                       for `re` and `im` are 0.\n   * @return {Complex} Returns a new Complex number\n   */\n  Complex.fromJSON = function (json) {\n    return new Complex(json);\n  };\n\n  // apply the current epsilon\n  Complex.EPSILON = config.epsilon;\n\n  // listen for changed in the configuration, automatically apply changed epsilon\n  math.on('config', function (curr, prev) {\n    if (curr.epsilon !== prev.epsilon) {\n      Complex.EPSILON = curr.epsilon;\n    }\n  });\n\n  /**\n   * Compare two complex numbers, `a` and `b`:\n   *\n   * - Returns 1 when the real part of `a` is larger than the real part of `b`\n   * - Returns -1 when the real part of `a` is smaller than the real part of `b`\n   * - Returns 1 when the real parts are equal\n   *   and the imaginary part of `a` is larger than the imaginary part of `b`\n   * - Returns -1 when the real parts are equal\n   *   and the imaginary part of `a` is smaller than the imaginary part of `b`\n   * - Returns 0 when both real and imaginary parts are equal.\n   *\n   * @params {Complex} a\n   * @params {Complex} b\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  Complex.compare = function (a, b) {\n    if (a.re > b.re) { return 1; }\n    if (a.re < b.re) { return -1; }\n\n    if (a.im > b.im) { return 1; }\n    if (a.im < b.im) { return -1; }\n\n    return 0;\n  }\n\n  return Complex;\n}\n\nexports.name = 'Complex';\nexports.path = 'type';\nexports.factory = factory;\nexports.math = true; // request access to the math namespace\n","'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  var latex = require('../../../utils/latex');\n\n  /**\n   * Create a complex value or convert a value to a complex value.\n   *\n   * Syntax:\n   *\n   *     math.complex()                           // creates a complex value with zero\n   *                                              // as real and imaginary part.\n   *     math.complex(re : number, im : string)   // creates a complex value with provided\n   *                                              // values for real and imaginary part.\n   *     math.complex(re : number)                // creates a complex value with provided\n   *                                              // real value and zero imaginary part.\n   *     math.complex(complex : Complex)          // clones the provided complex value.\n   *     math.complex(arg : string)               // parses a string into a complex value.\n   *     math.complex(array : Array)              // converts the elements of the array\n   *                                              // or matrix element wise into a\n   *                                              // complex value.\n   *     math.complex({re: number, im: number})   // creates a complex value with provided\n   *                                              // values for real an imaginary part.\n   *     math.complex({r: number, phi: number})   // creates a complex value with provided\n   *                                              // polar coordinates\n   *\n   * Examples:\n   *\n   *    var a = math.complex(3, -4);     // a = Complex 3 - 4i\n   *    a.re = 5;                        // a = Complex 5 - 4i\n   *    var i = a.im;                    // Number -4;\n   *    var b = math.complex('2 + 6i');  // Complex 2 + 6i\n   *    var c = math.complex();          // Complex 0 + 0i\n   *    var d = math.add(a, b);          // Complex 5 + 2i\n   *\n   * See also:\n   *\n   *    bignumber, boolean, index, matrix, number, string, unit\n   *\n   * @param {* | Array | Matrix} [args]\n   *            Arguments specifying the real and imaginary part of the complex number\n   * @return {Complex | Array | Matrix} Returns a complex value\n   */\n  var complex = typed('complex', {\n    '': function () {\n      return type.Complex.ZERO;\n    },\n\n    'number': function (x) {\n      return new type.Complex(x, 0);\n    },\n\n    'number, number': function (re, im) {\n      return new type.Complex(re, im);\n    },\n\n    // TODO: this signature should be redundant\n    'BigNumber, BigNumber': function (re, im) {\n      return new type.Complex(re.toNumber(), im.toNumber());\n    },\n\n    'Complex': function (x) {\n      return x.clone();\n    },\n\n    'string': function (x) {\n      return type.Complex(x); // for example '2 + 3i'\n    },\n\n    'Object': function (x) {\n      if('re' in x && 'im' in x) {\n        return new type.Complex(x.re, x.im);\n      }\n\n      if ('r' in x && 'phi' in x) {\n        return new type.Complex(x);\n      }\n\n      throw new Error('Expected object with either properties re and im, or properties r and phi.');\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, complex);\n    }\n  });\n\n  complex.toTex = {\n    0: '0',\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(\\\\left(${args[0]}\\\\right)+'\n      + latex.symbols['i'] + '\\\\cdot\\\\left(${args[1]}\\\\right)\\\\right)'\n  };\n\n  return complex;\n}\n\nexports.name = 'complex';\nexports.factory = factory;\n","module.exports = [\n  // type\n  require('./Complex'),\n\n  // construction function\n  require('./function/complex')\n];\n","var Fraction = require('fraction.js');\n\n/**\n * Attach type information\n */\nFraction.prototype.type = 'Fraction';\nFraction.prototype.isFraction = true;\n\n/**\n * Get a JSON representation of a Fraction containing type information\n * @returns {Object} Returns a JSON object structured as:\n *                   `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`\n */\nFraction.prototype.toJSON = function () {\n  return {\n    mathjs: 'Fraction',\n    n: this.s * this.n,\n    d: this.d\n  };\n};\n\n/**\n * Instantiate a Fraction from a JSON object\n * @param {Object} json  a JSON object structured as:\n *                       `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`\n * @return {BigNumber}\n */\nFraction.fromJSON = function (json) {\n  return new Fraction(json);\n};\n\n\nfunction factory (type, config, load, typed) {\n  return Fraction;\n}\n\nexports.name = 'Fraction';\nexports.path = 'type';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a fraction convert a value to a fraction.\n   *\n   * Syntax:\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n   *                                                   into fractions\n   *\n   * Examples:\n   *\n   *     math.fraction(1, 3);\n   *     math.fraction('2/3');\n   *     math.fraction({n: 2, d: 3});\n   *     math.fraction([0.2, 0.25, 1.25]);\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  var fraction = typed('fraction', {\n    'number': function (x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n\n      return new type.Fraction(x);\n    },\n\n    'string': function (x) {\n      return new type.Fraction(x);\n    },\n\n    'number, number': function (numerator, denominator) {\n      return new type.Fraction(numerator, denominator);\n    },\n\n    'BigNumber': function (x) {\n      return new type.Fraction(x.toString());\n    },\n\n    'Fraction': function (x) {\n      return x; // fractions are immutable\n    },\n\n    'Object': function (x) {\n      return new type.Fraction(x);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, fraction);\n    }\n  });\n\n  return fraction;\n}\n\nexports.name = 'fraction';\nexports.factory = factory;\n","module.exports = [\n  // type\n  require('./Fraction'),\n\n  // construction function\n  require('./function/fraction')\n];\n","module.exports = [\n  require('./bignumber'),\n  require('./boolean'),\n  require('./chain'),\n  require('./complex'),\n  require('./fraction'),\n  require('./matrix'),\n  require('./number'),\n  require('./resultset'),\n  require('./string'),\n  require('./unit')\n];\n","'use strict';\n\nvar util = require('../../utils/index');\nvar DimensionError = require('../../error/DimensionError');\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\n\nvar string = util.string;\nvar array = util.array;\nvar object = util.object;\nvar number = util.number;\n\nvar isArray = Array.isArray;\nvar isNumber = number.isNumber;\nvar isInteger = number.isInteger;\nvar isString = string.isString;\n\nvar validateIndex = array.validateIndex;\n\nfunction factory (type, config, load, typed) {\n  var Matrix = load(require('./Matrix')); // force loading Matrix (do not use via type.Matrix)\n\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   */\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix))\n      throw new SyntaxError('Constructor must be called with the new operator');\n    if (datatype && !isString(datatype))\n      throw new Error('Invalid datatype: ' + datatype);\n\n    if (data && data.isMatrix === true) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = object.clone(data._data);\n        this._size = object.clone(data._size);\n        this._datatype = datatype || data._datatype;\n      }\n      else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    }\n    else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    }\n    else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data);\n      // get the dimensions of the array\n      this._size = array.size(this._data);\n      // verify the dimensions of the array, TODO: compute size while processing array\n      array.validate(this._data, this._size);\n      // data type unknown\n      this._datatype = datatype;\n    }\n    else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n    }\n    else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n  \n  DenseMatrix.prototype = new Matrix();\n\n  /**\n   * Attach type information\n   */\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     var format = matrix.storage()                   // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     var format = matrix.datatype()                   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     var subset = matrix.subset(index)               // retrieve subset\n   *     var value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | DenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n\n        // intentional fall through\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  \n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  DenseMatrix.prototype.get = function (index) {\n    if (!isArray(index))\n      throw new TypeError('Array expected');\n    if (index.length != this._size.length)\n      throw new DimensionError(index.length, this._size.length);\n\n    // check index\n    for (var x = 0; x < index.length; x++)\n      validateIndex(index[x], this._size[x]);\n\n    var data = this._data;\n    for (var i = 0, ii = index.length; i < ii; i++) {\n      var index_i = index[i];\n      validateIndex(index_i, data.length);\n      data = data[index_i];\n    }\n\n    return data;\n  };\n  \n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index))\n      throw new TypeError('Array expected');\n    if (index.length < this._size.length)\n      throw new DimensionError(index.length, this._size.length, '<');\n\n    var i, ii, index_i;\n\n    // enlarge matrix when needed\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n    _fit(this, size, defaultValue);\n\n    // traverse over the dimensions\n    var data = this._data;\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      index_i = index[i];\n      validateIndex(index_i, data.length);\n      data = data[index_i];\n    }\n\n    // set new value\n    index_i = index[index.length - 1];\n    validateIndex(index_i, data.length);\n    data[index_i] = value;\n\n    return this;\n  };\n  \n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n  function _get (matrix, index) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    var isScalar = index.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    }\n    else {\n      // validate dimensions\n      var size = index.size();\n      if (size.length != matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      }\n\n      // validate if any of the ranges in the index is out of range\n      var min = index.min();\n      var max = index.max();\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      }\n\n      // retrieve submatrix\n      // TODO: more efficient when creating an empty matrix and setting _data and _size manually\n      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);\n    }\n  }\n  \n  /**\n   * Recursively get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim    Current dimension\n   * @return {Array} submatrix\n   * @private\n   */\n  function _getSubmatrix (data, index, dims, dim) {\n    var last = (dim === dims - 1);\n    var range = index.dimension(dim);\n\n    if (last) {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        return data[i];\n      }).valueOf();\n    }\n    else {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        var child = data[i];\n        return _getSubmatrix(child, index, dims, dim + 1);\n      }).valueOf();\n    }\n  }\n  \n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n  function _set (matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size(),\n        isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (submatrix && submatrix.isMatrix === true) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    }\n    else {\n      sSize = array.size(submatrix);\n    }\n\n    if (isScalar) {\n      // set a scalar\n\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n\n      matrix.set(index.min(), submatrix, defaultValue);\n    }\n    else {\n      // set a submatrix\n\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n\n        // unsqueeze both outer and inner dimensions\n        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!object.deepEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // enlarge matrix when needed\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n      _fit(matrix, size, defaultValue);\n\n      // insert the sub matrix\n      var dims = iSize.length,\n          dim = 0;\n      _setSubmatrix (matrix._data, index, submatrix, dims, dim);\n    }\n\n    return matrix;\n  }\n  \n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim\n   * @private\n   */\n  function _setSubmatrix (data, index, submatrix, dims, dim) {\n    var last = (dim === dims - 1),\n        range = index.dimension(dim);\n\n    if (last) {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        data[dataIndex] = submatrix[subIndex[0]];\n      });\n    }\n    else {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);\n      });\n    }\n  }\n  \n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isArray(size))\n      throw new TypeError('Array expected');\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, size, defaultValue);\n  };\n  \n  var _resize = function (matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data;\n      // go deep\n      while (isArray(v)) {\n        v = v[0];\n      }\n      return v;\n    }\n    // resize matrix\n    matrix._size = size.slice(0); // copy the array\n    matrix._data = array.resize(matrix._data, matrix._size, defaultValue);\n    // return matrix\n    return matrix;\n  };\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n\n    m._data = array.reshape(m._data, size);\n    m._size = size.slice(0);\n    return m;\n  };\n  \n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n  function _fit(matrix, size, defaultValue) {\n    var newSize = matrix._size.slice(0), // copy the array\n        changed = false;\n\n    // add dimensions when needed\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    }\n\n    // enlarge size when needed\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n  \n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: object.clone(this._data),\n      size: object.clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n  \n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n  DenseMatrix.prototype.size = function() {\n    return this._size.slice(0); // return a clone of _size\n  };\n  \n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   *\n   * @return {DenseMatrix} matrix\n   */\n  DenseMatrix.prototype.map = function (callback) {\n    // matrix instance\n    var me = this;\n    var recurse = function (value, index) {\n      if (isArray(value)) {\n        return value.map(function (child, i) {\n          return recurse(child, index.concat(i));\n        });\n      }\n      else {\n        return callback(value, index, me);\n      }\n    };\n    // return dense format\n    return new DenseMatrix({\n      data: recurse(this._data, []),\n      size: object.clone(this._size),\n      datatype: this._datatype\n    });\n  };\n  \n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n  DenseMatrix.prototype.forEach = function (callback) {\n    // matrix instance\n    var me = this;\n    var recurse = function (value, index) {\n      if (isArray(value)) {\n        value.forEach(function (child, i) {\n          recurse(child, index.concat(i));\n        });\n      }\n      else {\n        callback(value, index, me);\n      }\n    };\n    recurse(this._data, []);\n  };\n  \n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.toArray = function () {\n    return object.clone(this._data);\n  };\n  \n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n  \n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.format = function (options) {\n    return string.format(this._data, options);\n  };\n  \n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.toString = function () {\n    return string.format(this._data);\n  };\n  \n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  \n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Array}                      The array vector with the diagonal values.\n   */\n  DenseMatrix.prototype.diagonal = function(k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (k.isBigNumber === true)\n        k = k.toNumber();\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError ('The parameter k must be an integer number');\n      }\n    }\n    else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns -  kSuper);\n    \n    // x is a matrix get diagonal from matrix\n    var data = [];\n    \n    // loop rows\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data: data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n  \n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                   The matrix size.\n   * @param {number | Array} value          The values for the diagonal.\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]        The default value for non-diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!isArray(size))\n      throw new TypeError('Array expected, size parameter');\n    if (size.length !== 2)\n      throw new Error('Only two dimensions matrix are supported');\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (s && s.isBigNumber === true) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      } \n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (k && k.isBigNumber === true)\n        k = k.toNumber();\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError ('The parameter k must be an integer number');\n      }\n    }\n    else {\n      // default value\n      k = 0;\n    }\n    \n    if (defaultValue && isString(datatype)) {\n      // convert defaultValue to the same datatype\n      defaultValue = typed.convert(defaultValue, datatype);\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n    \n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns -  kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function (i) {\n        // return value @ i\n        return value[i];\n      };      \n    }\n    else if (value && value.isMatrix === true) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function (i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    }\n    else {\n      // define function\n      _value = function () {\n        // return value\n        return value;\n      };\n    }\n    \n    // discover default value if needed\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = (_value(0) && _value(0).isBigNumber === true) ? new type.BigNumber(0) : 0;\n    }\n\n    // empty array\n    var data = [];\n\n    // check we need to resize array\n    if (size.length > 0) {\n      // resize array\n      data = array.resize(data, size, defaultValue);\n      // fill diagonal\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    }\n    \n    // create DenseMatrix\n    return new DenseMatrix({\n      data: data,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n  \n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    DenseMatrix._swapRows(i, j, this._data);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   */\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @return {Array} data\n   */\n  function preprocess(data) {\n    for (var i = 0, ii = data.length; i < ii; i++) {\n      var elem = data[i];\n      if (isArray(elem)) {\n        data[i] = preprocess(elem);\n      }\n      else if (elem && elem.isMatrix === true) {\n        data[i] = preprocess(elem.valueOf());\n      }\n    }\n\n    return data;\n  }\n\n  // register this type in the base class Matrix\n  type.Matrix._storage.dense = DenseMatrix;\n  type.Matrix._storage['default'] = DenseMatrix;\n\n  // exports\n  return DenseMatrix;\n}\n\nexports.name = 'DenseMatrix';\nexports.path = 'type';\nexports.factory = factory;\nexports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  \n  var smaller = load(require('../../function/relational/smaller'));\n  var larger = load(require('../../function/relational/larger'));\n  \n  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n  \n  /**\n   * Fibonacci Heap implementation, used interally for Matrix math.\n   * @class FibonacciHeap\n   * @constructor FibonacciHeap\n   */\n  function FibonacciHeap() {\n    if (!(this instanceof FibonacciHeap))\n      throw new SyntaxError('Constructor must be called with the new operator');\n\n    // initialize fields\n    this._minimum = null;\n    this._size = 0;\n  }\n\n  /**\n   * Attach type information\n   */\n  FibonacciHeap.prototype.type = 'FibonacciHeap';\n  FibonacciHeap.prototype.isFibonacciHeap = true;\n\n  /**\n   * Inserts a new data element into the heap. No heap consolidation is\n   * performed at this time, the new node is simply inserted into the root\n   * list of this heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.insert = function (key, value) {\n    // create node\n    var node = {\n      key: key,\n      value: value,\n      degree: 0\n    };\n    // check we have a node in the minimum\n    if (this._minimum) {\n      // minimum node\n      var minimum = this._minimum;\n      // update left & right of node\n      node.left = minimum;\n      node.right = minimum.right;\n      minimum.right = node;\n      node.right.left = node;\n      // update minimum node in heap if needed\n      if (smaller(key, minimum.key)) {\n        // node has a smaller key, use it as minimum\n        this._minimum = node;\n      }\n    }\n    else {\n      // set left & right\n      node.left = node;\n      node.right = node;\n      // this is the first node\n      this._minimum = node;\n    }\n    // increment number of nodes in heap\n    this._size++;\n    // return node\n    return node;\n  };\n\n  /**\n   * Returns the number of nodes in heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.size = function () {\n    return this._size;\n  };\n\n  /**\n   * Removes all elements from this heap.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.clear = function () {\n    this._minimum = null;\n    this._size = 0;\n  };\n\n  /**\n   * Returns true if the heap is empty, otherwise false.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.isEmpty = function () {\n    return !!this._minimum;\n  };\n  \n  /**\n   * Extracts the node with minimum key from heap. Amortized running \n   * time: O(log n).\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.extractMinimum = function () {\n    // node to remove\n    var node = this._minimum;\n    // check we have a minimum\n    if (node === null)\n      return node;\n    // current minimum\n    var minimum = this._minimum;\n    // get number of children\n    var numberOfChildren = node.degree;\n    // pointer to the first child\n    var x = node.child;\n    // for each child of node do...\n    while (numberOfChildren > 0) {\n      // store node in right side\n      var tempRight = x.right;\n      // remove x from child list\n      x.left.right = x.right;\n      x.right.left = x.left;\n      // add x to root list of heap\n      x.left = minimum;\n      x.right = minimum.right;\n      minimum.right = x;\n      x.right.left = x;\n      // set Parent[x] to null\n      x.parent = null;\n      x = tempRight;\n      numberOfChildren--;\n    }\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // update minimum\n    if (node == node.right) {\n      // empty\n      minimum = null;\n    }\n    else {\n      // update minimum\n      minimum = node.right;\n      // we need to update the pointer to the root with minimum key\n      minimum = _findMinimumNode(minimum, this._size);\n    }\n    // decrement size of heap\n    this._size--;\n    // update minimum\n    this._minimum = minimum;\n    // return node\n    return node;\n  };\n  \n  /**\n   * Removes a node from the heap given the reference to the node. The trees\n   * in the heap will be consolidated, if necessary. This operation may fail\n   * to remove the correct element if there are nodes with key value -Infinity.\n   * Running time: O(log n) amortized.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.remove = function (node) {\n    // decrease key value\n    this._minimum = _decreaseKey(this._minimum, node, -1);\n    // remove the smallest\n    this.extractMinimum();\n  };\n  \n  /**\n   * Decreases the key value for a heap node, given the new value to take on.\n   * The structure of the heap may be changed and will not be consolidated. \n   * Running time: O(1) amortized.\n   * @memberof FibonacciHeap\n   */\n  var _decreaseKey = function (minimum, node, key) {\n    // set node key\n    node.key = key;\n    // get parent node\n    var parent = node.parent;\n    if (parent && smaller(node.key, parent.key)) {\n      // remove node from parent\n      _cut(minimum, node, parent);\n      // remove all nodes from parent to the root parent\n      _cascadingCut(minimum, parent);\n    }\n    // update minimum node if needed\n    if (smaller(node.key, minimum.key))\n      minimum = node;\n    // return minimum\n    return minimum;\n  };\n  \n  /**\n   * The reverse of the link operation: removes node from the child list of parent.\n   * This method assumes that min is non-null. Running time: O(1).\n   * @memberof FibonacciHeap\n   */\n  var _cut = function (minimum, node, parent) {\n    // remove node from parent children and decrement Degree[parent]\n    node.left.right = node.right;\n    node.right.left = node.left;\n    parent.degree--;\n    // reset y.child if necessary\n    if (parent.child == node)\n      parent.child = node.right;\n    // remove child if degree is 0\n    if (parent.degree === 0)\n      parent.child = null;\n    // add node to root list of heap\n    node.left = minimum;\n    node.right = minimum.right;\n    minimum.right = node;\n    node.right.left = node;\n    // set parent[node] to null\n    node.parent = null;\n    // set mark[node] to false\n    node.mark = false;\n  };\n  \n  /**\n   * Performs a cascading cut operation. This cuts node from its parent and then\n   * does the same for its parent, and so on up the tree.\n   * Running time: O(log n); O(1) excluding the recursion.\n   * @memberof FibonacciHeap\n   */\n  var _cascadingCut= function (minimum, node) {\n    // store parent node\n    var parent = node.parent;\n    // if there's a parent...\n    if (!parent)\n      return;\n    // if node is unmarked, set it marked\n    if (!node.mark) {\n      node.mark = true;\n    }\n    else {\n      // it's marked, cut it from parent\n      _cut(minimum, node, parent);\n      // cut its parent as well\n      _cascadingCut(parent);\n    }\n  };\n  \n  /**\n   * Make the first node a child of the second one. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  var _linkNodes = function (node, parent) {\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // make node a Child of parent\n    node.parent = parent;\n    if (!parent.child) {\n      parent.child = node;\n      node.right = node;\n      node.left = node;\n    }\n    else {\n      node.left = parent.child;\n      node.right = parent.child.right;\n      parent.child.right = node;\n      node.right.left = node;\n    }\n    // increase degree[parent]\n    parent.degree++;\n    // set mark[node] false\n    node.mark = false;\n  };\n  \n  var _findMinimumNode = function (minimum, size) {\n    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree\n    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;\n    // create list with initial capacity\n    var array = new Array(arraySize);\n    // find the number of root nodes.\n    var numRoots = 0;\n    var x = minimum;\n    if (x) {\n      numRoots++;\n      x = x.right;\n      while (x !== minimum) {\n        numRoots++;\n        x = x.right;\n      }\n    }\n    // vars\n    var y;\n    // For each node in root list do...\n    while (numRoots > 0) {\n      // access this node's degree..\n      var d = x.degree;\n      // get next node\n      var next = x.right;\n      // check if there is a node already in array with the same degree\n      while (true) {\n        // get node with the same degree is any\n        y = array[d];\n        if (!y)\n          break;\n        // make one node with the same degree a child of the other, do this based on the key value.\n        if (larger(x.key, y.key)) {\n          var temp = y;\n          y = x;\n          x = temp;\n        }\n        // make y a child of x\n        _linkNodes(y, x);\n        // we have handled this degree, go to next one.\n        array[d] = null;\n        d++;\n      }\n      // save this node for later when we might encounter another of the same degree.\n      array[d] = x;\n      // move forward through list.\n      x = next;\n      numRoots--;\n    }\n    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].\n    minimum = null;\n    // loop nodes in array\n    for (var i = 0; i < arraySize; i++) {\n      // get current node\n      y = array[i];\n      if (!y)\n        continue;\n      // check if we have a linked list\n      if (minimum) {\n        // First remove node from root list.\n        y.left.right = y.right;\n        y.right.left = y.left;\n        // now add to root list, again.\n        y.left = minimum;\n        y.right = minimum.right;\n        minimum.right = y;\n        y.right.left = y;\n        // check if this is a new min.\n        if (smaller(y.key, minimum.key))\n          minimum = y;\n      }\n      else\n        minimum = y;\n    }\n    return minimum;\n  };\n  \n  return FibonacciHeap;\n}\n\nexports.name = 'FibonacciHeap';\nexports.path = 'type';\nexports.factory = factory;\n","'use strict';\n\nvar util = require('../../utils/index');\n\nvar string = util.string;\nvar object = util.object;\n\nvar isArray = Array.isArray;\nvar isString = string.isString;\n\nfunction factory (type, config, load) {\n\n  var DenseMatrix = load(require('./DenseMatrix'));\n\n  var smaller = load(require('../../function/relational/smaller'));\n\n  function ImmutableDenseMatrix(data, datatype) {\n    if (!(this instanceof ImmutableDenseMatrix))\n      throw new SyntaxError('Constructor must be called with the new operator');\n    if (datatype && !isString(datatype))\n      throw new Error('Invalid datatype: ' + datatype);\n\n    if ((data && data.isMatrix === true) || isArray(data)) {\n      // use DenseMatrix implementation\n      var matrix = new DenseMatrix(data, datatype);\n      // internal structures\n      this._data = matrix._data;\n      this._size = matrix._size;\n      this._datatype = matrix._datatype;\n      this._min = null;\n      this._max = null;\n    }\n    else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = data.datatype;\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\n    }\n    else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n    }\n    else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n      this._min = null;\n      this._max = null;\n    }\n  }\n\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n\n  /**\n   * Attach type information\n   */\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     var subset = matrix.subset(index)               // retrieve subset\n   *     var value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  ImmutableDenseMatrix.prototype.subset = function (index) {\n    switch (arguments.length) {\n      case 1:\n        // use base implementation\n        var m = DenseMatrix.prototype.subset.call(this, index);\n        // check result is a matrix\n        if (m.isMatrix) {\n          // return immutable matrix\n          return new ImmutableDenseMatrix({\n            data: m._data,\n            size: m._size,\n            datatype: m._datatype\n          });\n        }\n        return m;\n        \n        // intentional fall through\n      case 2:\n      case 3:\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @param {Number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {ImmutableDenseMatrix} self\n   */\n  ImmutableDenseMatrix.prototype.set = function () {\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\n  };\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {Number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  ImmutableDenseMatrix.prototype.resize = function () {\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\n  };\n\n  /**\n   * Disallows reshaping in favor of immutability.\n   *\n   * @throws {Error} Operation not allowed\n   */\n  ImmutableDenseMatrix.prototype.reshape = function () {\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @return {ImmutableDenseMatrix} clone\n   */\n  ImmutableDenseMatrix.prototype.clone = function () {\n    var m = new ImmutableDenseMatrix({\n      data: object.clone(this._data),\n      size: object.clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @returns {Object}\n   */\n  ImmutableDenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'ImmutableDenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {ImmutableDenseMatrix}\n   */\n  ImmutableDenseMatrix.fromJSON = function (json) {\n    return new ImmutableDenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @param {Number} i       Matrix row index 1\n   * @param {Number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  ImmutableDenseMatrix.prototype.swapRows = function () {\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\n  };\n\n  /**\n   * Calculate the minimum value in the set\n   * @return {Number | undefined} min\n   */\n  ImmutableDenseMatrix.prototype.min = function () {\n    // check min has been calculated before\n    if (this._min === null) {\n      // minimum\n      var m = null;\n      // compute min\n      this.forEach(function (v) {\n        if (m === null || smaller(v, m))\n          m = v;\n      });\n      this._min = m !== null ? m : undefined;\n    }\n    return this._min;\n  };\n\n  /**\n   * Calculate the maximum value in the set\n   * @return {Number | undefined} max\n   */\n  ImmutableDenseMatrix.prototype.max = function () {\n    // check max has been calculated before\n    if (this._max === null) {\n      // maximum\n      var m = null;\n      // compute max\n      this.forEach(function (v) {\n        if (m === null || smaller(m, v))\n          m = v;\n      });\n      this._max = m !== null ? m : undefined;\n    }\n    return this._max;\n  };\n\n  // exports\n  return ImmutableDenseMatrix;\n}\n\nexports.name = 'ImmutableDenseMatrix';\nexports.path = 'type';\nexports.factory = factory;\n","'use strict';\n\nvar util = require('../../utils/index');\n\nvar string = util.string;\n\nvar isString = string.isString;\n\nfunction factory (type, config, load, typed) {\n  /**\n   * @constructor Matrix\n   *\n   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n   * array. A matrix can be constructed as:\n   *     var matrix = math.matrix(data)\n   *\n   * Matrix contains the functions to resize, get and set values, get the size,\n   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n   * Furthermore, one can iterate over the matrix using map and forEach.\n   * The internal Array of the Matrix can be accessed using the function valueOf.\n   *\n   * Example usage:\n   *     var matrix = math.matrix([[1, 2], [3, 4]]);\n   *     matix.size();              // [2, 2]\n   *     matrix.resize([3, 2], 5);\n   *     matrix.valueOf();          // [[1, 2], [3, 4], [5, 5]]\n   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n   *\n   */\n  function Matrix() {\n    if (!(this instanceof Matrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Matrix.prototype.type = 'Matrix';\n  Matrix.prototype.isMatrix = true;\n\n  /**\n   * Get the Matrix storage constructor for the given format.\n   *\n   * @param {string} format       The Matrix storage format.\n   *\n   * @return {Function}           The Matrix storage constructor.\n   */\n  Matrix.storage = function (format) {\n    // check storage format is a string\n    if (!isString(format)) {\n      throw new TypeError('format must be a string value');\n    }\n\n    // get storage format constructor\n    var constructor = Matrix._storage[format];\n    if (!constructor) {\n      throw new SyntaxError('Unsupported matrix storage format: ' + format);\n    }\n\n    // return storage constructor\n    return constructor;\n  };\n\n  // a map with all constructors for all storage types\n  Matrix._storage = {};\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     var format = matrix.storage()                   // retrieve storage format\n   *\n   * @return {string}           The storage format.\n   */\n  Matrix.prototype.storage = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke storage on a Matrix interface');\n  };\n  \n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     var format = matrix.datatype()                   // retrieve matrix datatype\n   *\n   * @return {string}           The datatype.\n   */\n  Matrix.prototype.datatype = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke datatype on a Matrix interface');\n  };\n\n  /**\n   * Create a new Matrix With the type of the current matrix instance\n   * @param {Array | Object} data\n   * @param {string} [datatype]\n   */\n  Matrix.prototype.create = function (data, datatype) {\n    throw new Error('Cannot invoke create on a Matrix interface');\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     var subset = matrix.subset(index)               // retrieve subset\n   *     var value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  Matrix.prototype.subset = function (index, replacement, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke subset on a Matrix interface');\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  Matrix.prototype.get = function (index) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke get on a Matrix interface');\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {Matrix} self\n   */\n  Matrix.prototype.set = function (index, value, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke set on a Matrix interface');\n  };\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when \n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  Matrix.prototype.resize = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke resize on a Matrix interface');\n  };\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  Matrix.prototype.reshape = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke reshape on a Matrix interface');\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @return {Matrix} clone\n   */\n  Matrix.prototype.clone = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke clone on a Matrix interface');\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @returns {number[]} size\n   */\n  Matrix.prototype.size = function() {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke size on a Matrix interface');\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {Matrix} matrix\n   */\n  Matrix.prototype.map = function (callback, skipZeros) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke map on a Matrix interface');\n  };\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n  Matrix.prototype.forEach = function (callback) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke forEach on a Matrix interface');\n  };\n\n  /**\n   * Create an Array with a copy of the data of the Matrix\n   * @returns {Array} array\n   */\n  Matrix.prototype.toArray = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toArray on a Matrix interface');\n  };\n\n  /**\n   * Get the primitive value of the Matrix: a multidimensional array\n   * @returns {Array} array\n   */\n  Matrix.prototype.valueOf = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke valueOf on a Matrix interface');\n  };\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  Matrix.prototype.format = function (options) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke format on a Matrix interface');\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @returns {string} str\n   */\n  Matrix.prototype.toString = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toString on a Matrix interface');\n  };\n   \n  // exports\n  return Matrix;\n}\n\nexports.name = 'Matrix';\nexports.path = 'type';\nexports.factory = factory;\n","'use strict';\n\nvar clone = require('../../utils/object').clone;\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory (type) {\n  \n  /**\n   * Create an index. An Index can store ranges and sets for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Usage:\n   *     var index = new Index(range1, range2, matrix1, array1, ...);\n   *\n   * Where each parameter can be any of:\n   *     A number\n   *     A string (containing a name of an object property)\n   *     An instance of Range\n   *     An Array with the Set values\n   *     A Matrix with the Set values\n   *\n   * The parameters start, end, and step must be integer numbers.\n   *\n   * @class Index\n   * @Constructor Index\n   * @param {...*} ranges\n   */\n  function Index(ranges) {\n    if (!(this instanceof Index)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this._dimensions = [];\n    this._isScalar = true;\n\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n\n      if (arg && (arg.isRange === true)) {\n        this._dimensions.push(arg);\n        this._isScalar = false;\n      }\n      else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {\n        // create matrix\n        var m = _createImmutableMatrix(arg.valueOf());\n        this._dimensions.push(m);\n        // size\n        var size = m.size();\n        // scalar\n        if (size.length !== 1 || size[0] !== 1) {\n          this._isScalar = false;\n        }\n      }\n      else if (typeof arg === 'number') {\n        this._dimensions.push(_createImmutableMatrix([arg]));\n      }\n      else if (typeof arg === 'string') {\n        // object property (arguments.count should be 1)\n        this._dimensions.push(arg);\n      }\n      // TODO: implement support for wildcard '*'\n      else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Index.prototype.type = 'Index';\n  Index.prototype.isIndex = true;\n\n  function _createImmutableMatrix(arg) {\n    // loop array elements\n    for (var i = 0, l = arg.length; i < l; i++) {\n      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {\n        throw new TypeError('Index parameters must be positive integer numbers');\n      }\n    }\n    // create matrix\n    return new type.ImmutableDenseMatrix(arg);\n  }\n\n  /**\n   * Create a clone of the index\n   * @memberof Index\n   * @return {Index} clone\n   */\n  Index.prototype.clone = function () {\n    var index = new Index();\n    index._dimensions = clone(this._dimensions);\n    index._isScalar = this._isScalar;\n    return index;\n  };\n\n  /**\n   * Create an index from an array with ranges/numbers\n   * @memberof Index\n   * @param {Array.<Array | number>} ranges\n   * @return {Index} index\n   * @private\n   */\n  Index.create = function (ranges) {\n    var index = new Index();\n    Index.apply(index, ranges);\n    return index;\n  };\n\n  /**\n   * Retrieve the size of the index, the number of elements for each dimension.\n   * @memberof Index\n   * @returns {number[]} size\n   */\n  Index.prototype.size = function () {\n    var size = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var d = this._dimensions[i];\n      size[i] = (typeof d === 'string') ? 1 : d.size()[0];\n    }\n\n    return size;\n  };\n\n  /**\n   * Get the maximum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} max\n   */\n  Index.prototype.max = function () {\n    var values = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = (typeof range === 'string') ? range : range.max();\n    }\n\n    return values;\n  };\n\n  /**\n   * Get the minimum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} min\n   */\n  Index.prototype.min = function () {\n    var values = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = (typeof range === 'string') ? range : range.min();\n    }\n\n    return values;\n  };\n\n  /**\n   * Loop over each of the ranges of the index\n   * @memberof Index\n   * @param {Function} callback   Called for each range with a Range as first\n   *                              argument, the dimension as second, and the\n   *                              index object as third.\n   */\n  Index.prototype.forEach = function (callback) {\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      callback(this._dimensions[i], i, this);\n    }\n  };\n\n  /**\n   * Retrieve the dimension for the given index\n   * @memberof Index\n   * @param {Number} dim                  Number of the dimension\n   * @returns {Range | null} range\n   */\n  Index.prototype.dimension = function (dim) {\n    return this._dimensions[dim] || null;\n  };\n\n  /**\n   * Test whether this index contains an object property\n   * @returns {boolean} Returns true if the index is an object property\n   */\n  Index.prototype.isObjectProperty = function () {\n    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';\n  };\n\n  /**\n   * Returns the object property name when the Index holds a single object property,\n   * else returns null\n   * @returns {string | null}\n   */\n  Index.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this._dimensions[0] : null;\n  };\n\n  /**\n   * Test whether this index contains only a single value.\n   *\n   * This is the case when the index is created with only scalar values as ranges,\n   * not for ranges resolving into a single value.\n   * @memberof Index\n   * @return {boolean} isScalar\n   */\n  Index.prototype.isScalar = function () {\n    return this._isScalar;\n  };\n\n  /**\n   * Expand the Index into an array.\n   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.toArray = function () {\n    var array = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      array.push((typeof dimension === 'string') ? dimension : dimension.toArray());\n    }\n    return array;\n  };\n\n  /**\n   * Get the primitive value of the Index, a two dimensional array.\n   * Equivalent to Index.toArray().\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.valueOf = Index.prototype.toArray;\n\n  /**\n   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'\n   * @memberof Index\n   * @returns {String} str\n   */\n  Index.prototype.toString = function () {\n    var strings = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      if (typeof dimension === 'string') {\n        strings.push(JSON.stringify(dimension));\n      }\n      else {\n        strings.push(dimension.toString());\n      }\n    }\n\n    return '[' + strings.join(', ') + ']';\n  };\n\n  /**\n   * Get a JSON representation of the Index\n   * @memberof Index\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   */\n  Index.prototype.toJSON = function () {\n    return {\n      mathjs: 'Index',\n      dimensions: this._dimensions\n    };\n  };\n\n  /**\n   * Instantiate an Index from a JSON object\n   * @memberof Index\n   * @param {Object} json A JSON object structured as:\n   *                     `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   * @return {Index}\n   */\n  Index.fromJSON = function (json) {\n    return Index.create(json.dimensions);\n  };\n\n  return Index;\n}\n\nexports.name = 'Index';\nexports.path = 'type';\nexports.factory = factory;\n","'use strict';\n\nvar number = require('../../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a range. A range has a start, step, and end, and contains functions\n   * to iterate over the range.\n   *\n   * A range can be constructed as:\n   *     var range = new Range(start, end);\n   *     var range = new Range(start, end, step);\n   *\n   * To get the result of the range:\n   *     range.forEach(function (x) {\n   *         console.log(x);\n   *     });\n   *     range.map(function (x) {\n   *         return math.sin(x);\n   *     });\n   *     range.toArray();\n   *\n   * Example usage:\n   *     var c = new Range(2, 6);         // 2:1:5\n   *     c.toArray();                     // [2, 3, 4, 5]\n   *     var d = new Range(2, -3, -1);    // 2:-1:-2\n   *     d.toArray();                     // [2, 1, 0, -1, -2]\n   *\n   * @class Range\n   * @constructor Range\n   * @param {number} start  included lower bound\n   * @param {number} end    excluded upper bound\n   * @param {number} [step] step size, default value is 1\n   */\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (start != null) {\n      if (start.isBigNumber === true)\n        start = start.toNumber();\n      else if (typeof start !== 'number')\n        throw new TypeError('Parameter start must be a number');\n    }\n    if (end != null) {\n      if (end.isBigNumber === true)\n        end = end.toNumber();\n      else if (typeof end !== 'number')\n        throw new TypeError('Parameter end must be a number');\n    }\n    if (step != null) {\n      if (step.isBigNumber === true)\n        step = step.toNumber();\n      else if (typeof step !== 'number')\n        throw new TypeError('Parameter step must be a number');\n    }\n\n    this.start = (start != null) ? parseFloat(start) : 0;\n    this.end   = (end != null)   ? parseFloat(end)   : 0;\n    this.step  = (step != null)  ? parseFloat(step)  : 1;\n  }\n\n  /**\n   * Attach type information\n   */\n  Range.prototype.type = 'Range';\n  Range.prototype.isRange = true;\n\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @memberof Range\n   * @param {string} str\n   * @return {Range | null} range\n   */\n  Range.parse = function (str) {\n    if (typeof str !== 'string') {\n      return null;\n    }\n\n    var args = str.split(':');\n    var nums = args.map(function (arg) {\n      return parseFloat(arg);\n    });\n\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if (invalid) {\n      return null;\n    }\n\n    switch (nums.length) {\n      case 2:\n        return new Range(nums[0], nums[1]);\n      case 3:\n        return new Range(nums[0], nums[2], nums[1]);\n      default:\n        return null;\n    }\n  };\n\n  /**\n   * Create a clone of the range\n   * @return {Range} clone\n   */\n  Range.prototype.clone = function () {\n    return new Range(this.start, this.end, this.step);\n  };\n\n  /**\n   * Retrieve the size of the range.\n   * Returns an array containing one number, the number of elements in the range.\n   * @memberof Range\n   * @returns {number[]} size\n   */\n  Range.prototype.size = function () {\n    var len = 0,\n        start = this.start,\n        step = this.step,\n        end = this.end,\n        diff = end - start;\n\n    if (number.sign(step) == number.sign(diff)) {\n      len = Math.ceil((diff) / step);\n    }\n    else if (diff == 0) {\n      len = 0;\n    }\n\n    if (isNaN(len)) {\n      len = 0;\n    }\n    return [len];\n  };\n\n  /**\n   * Calculate the minimum value in the range\n   * @memberof Range\n   * @return {number | undefined} min\n   */\n  Range.prototype.min = function () {\n    var size = this.size()[0];\n\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start;\n      }\n      else {\n        // negative step\n        return this.start + (size - 1) * this.step;\n      }\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  /**\n   * Calculate the maximum value in the range\n   * @memberof Range\n   * @return {number | undefined} max\n   */\n  Range.prototype.max = function () {\n    var size = this.size()[0];\n\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start + (size - 1) * this.step;\n      }\n      else {\n        // negative step\n        return this.start;\n      }\n    }\n    else {\n      return undefined;\n    }\n  };\n\n\n  /**\n   * Execute a callback function for each value in the range.\n   * @memberof Range\n   * @param {function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Range being traversed.\n   */\n  Range.prototype.forEach = function (callback) {\n    var x = this.start;\n    var step = this.step;\n    var end = this.end;\n    var i = 0;\n\n    if (step > 0) {\n      while (x < end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    }\n    else if (step < 0) {\n      while (x > end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    }\n  };\n\n  /**\n   * Execute a callback function for each value in the Range, and return the\n   * results as an array\n   * @memberof Range\n   * @param {function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @returns {Array} array\n   */\n  Range.prototype.map = function (callback) {\n    var array = [];\n    this.forEach(function (value, index, obj) {\n      array[index[0]] = callback(value, index, obj);\n    });\n    return array;\n  };\n\n  /**\n   * Create an Array with a copy of the Ranges data\n   * @memberof Range\n   * @returns {Array} array\n   */\n  Range.prototype.toArray = function () {\n    var array = [];\n    this.forEach(function (value, index) {\n      array[index[0]] = value;\n    });\n    return array;\n  };\n\n  /**\n   * Get the primitive value of the Range, a one dimensional array\n   * @memberof Range\n   * @returns {Array} array\n   */\n  Range.prototype.valueOf = function () {\n    // TODO: implement a caching mechanism for range.valueOf()\n    return this.toArray();\n  };\n\n  /**\n   * Get a string representation of the range, with optional formatting options.\n   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'\n   * @memberof Range\n   * @param {Object | number | function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  Range.prototype.format = function (options) {\n    var str = number.format(this.start, options);\n\n    if (this.step != 1) {\n      str += ':' + number.format(this.step, options);\n    }\n    str += ':' + number.format(this.end, options);\n    return str;\n  };\n\n  /**\n   * Get a string representation of the range.\n   * @memberof Range\n   * @returns {string}\n   */\n  Range.prototype.toString = function () {\n    return this.format();\n  };\n\n  /**\n   * Get a JSON representation of the range\n   * @memberof Range\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n   */\n  Range.prototype.toJSON = function () {\n    return {\n      mathjs: 'Range',\n      start: this.start,\n      end: this.end,\n      step: this.step\n    };\n  };\n\n  /**\n   * Instantiate a Range from a JSON object\n   * @memberof Range\n   * @param {Object} json A JSON object structured as:\n   *                      `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n   * @return {Range}\n   */\n  Range.fromJSON = function (json) {\n    return new Range(json.start, json.end, json.step);\n  };\n\n  return Range;\n}\n\nexports.name = 'Range';\nexports.path = 'type';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load) {\n  \n  var add = load(require('../../function/arithmetic/add'));\n  var equalScalar = load(require('../../function/relational/equalScalar'));\n  \n  /**\n   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array \n   * of the vector elements and an ordered list of non-zero elements.\n   */\n  function Spa() {\n    if (!(this instanceof Spa))\n      throw new SyntaxError('Constructor must be called with the new operator');\n    \n    // allocate vector, TODO use typed arrays\n    this._values = [];\n    this._heap = new type.FibonacciHeap();\n  }\n\n  /**\n   * Attach type information\n   */\n  Spa.prototype.type = 'Spa';\n  Spa.prototype.isSpa = true;\n\n  /**\n   * Set the value for index i.\n   *\n   * @param {number} i                       The index\n   * @param {number | BigNumber | Complex}   The value at index i\n   */\n  Spa.prototype.set = function (i, v) {\n    // check we have a value @ i\n    if (!this._values[i]) {\n      // insert in heap\n      var node = this._heap.insert(i, v);\n      // set the value @ i\n      this._values[i] = node;\n    }\n    else {\n      // update the value @ i\n      this._values[i].value = v;\n    }\n  };\n  \n  Spa.prototype.get = function (i) {\n    var node = this._values[i];\n    if (node)\n      return node.value;\n    return 0;\n  };\n  \n  Spa.prototype.accumulate = function (i, v) {\n    // node @ i\n    var node = this._values[i];\n    if (!node) {\n      // insert in heap\n      node = this._heap.insert(i, v);\n      // initialize value\n      this._values[i] = node;\n    }\n    else {\n      // accumulate value\n      node.value = add(node.value, v);\n    }\n  };\n  \n  Spa.prototype.forEach = function (from, to, callback) {\n    // references\n    var heap = this._heap;\n    var values = this._values;\n    // nodes\n    var nodes = [];\n    // node with minimum key, save it\n    var node = heap.extractMinimum();\n    if (node)\n      nodes.push(node);\n    // extract nodes from heap (ordered)\n    while (node && node.key <= to) {\n      // check it is in range\n      if (node.key >= from) {\n        // check value is not zero\n        if (!equalScalar(node.value, 0)) {\n          // invoke callback\n          callback(node.key, node.value, this);\n        }\n      }\n      // extract next node, save it\n      node = heap.extractMinimum();\n      if (node)\n        nodes.push(node);\n    }\n    // reinsert all nodes in heap\n    for (var i = 0; i < nodes.length; i++) {\n      // current node\n      var n = nodes[i];\n      // insert node in heap\n      node = heap.insert(n.key, n.value);\n      // update values\n      values[node.key] = node;\n    }\n  };\n  \n  Spa.prototype.swap = function (i, j) {\n    // node @ i and j\n    var nodei = this._values[i];\n    var nodej = this._values[j];\n    // check we need to insert indeces\n    if (!nodei && nodej) {\n      // insert in heap\n      nodei = this._heap.insert(i, nodej.value);\n      // remove from heap\n      this._heap.remove(nodej);\n      // set values\n      this._values[i] = nodei;\n      this._values[j] = undefined;\n    }\n    else if (nodei && !nodej) {\n      // insert in heap\n      nodej = this._heap.insert(j, nodei.value);\n      // remove from heap\n      this._heap.remove(nodei);\n      // set values\n      this._values[j] = nodej;\n      this._values[i] = undefined;\n    }\n    else if (nodei && nodej) {\n      // swap values\n      var v = nodei.value;\n      nodei.value = nodej.value;\n      nodej.value = v;\n    }\n  };\n  \n  return Spa;\n}\n\nexports.name = 'Spa';\nexports.path = 'type';\nexports.factory = factory;\n","'use strict';\n\nvar util = require('../../utils/index');\nvar DimensionError = require('../../error/DimensionError');\n\nvar array = util.array;\nvar object = util.object;\nvar string = util.string;\nvar number = util.number;\n\nvar isArray = Array.isArray;\nvar isNumber = number.isNumber;\nvar isInteger = number.isInteger;\nvar isString = string.isString;\n\nvar validateIndex = array.validateIndex;\n\nfunction factory (type, config, load, typed) {\n  var Matrix = load(require('./Matrix')); // force loading Matrix (do not use via type.Matrix)\n  var equalScalar = load(require('../../function/relational/equalScalar'));\n\n  /**\n   * Sparse Matrix implementation. This type implements a Compressed Column Storage format\n   * for sparse matrices.\n   * @class SparseMatrix\n   */\n  function SparseMatrix(data, datatype) {\n    if (!(this instanceof SparseMatrix))\n      throw new SyntaxError('Constructor must be called with the new operator');\n    if (datatype && !isString(datatype))\n      throw new Error('Invalid datatype: ' + datatype);\n    \n    if (data && data.isMatrix === true) {\n      // create from matrix\n      _createFromMatrix(this, data, datatype);\n    }\n    else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {\n      // initialize fields\n      this._values = data.values;\n      this._index = data.index;\n      this._ptr = data.ptr;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    }\n    else if (isArray(data)) {\n      // create from array\n      _createFromArray(this, data, datatype);\n    }\n    else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n    }\n    else {\n      // nothing provided\n      this._values = [];\n      this._index = [];\n      this._ptr = [0];\n      this._size = [0, 0];\n      this._datatype = datatype;\n    }\n  }\n  \n  var _createFromMatrix = function (matrix, source, datatype) {\n    // check matrix type\n    if (source.type === 'SparseMatrix') {\n      // clone arrays\n      matrix._values = source._values ? object.clone(source._values) : undefined;\n      matrix._index = object.clone(source._index);\n      matrix._ptr = object.clone(source._ptr);\n      matrix._size = object.clone(source._size);\n      matrix._datatype = datatype || source._datatype;\n    }\n    else {\n      // build from matrix data\n      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);\n    }\n  };\n  \n  var _createFromArray = function (matrix, data, datatype) {\n    // initialize fields\n    matrix._values = [];\n    matrix._index = [];\n    matrix._ptr = [];\n    matrix._datatype = datatype;\n    // discover rows & columns, do not use math.size() to avoid looping array twice\n    var rows = data.length;\n    var columns = 0;\n    \n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    \n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, datatype);\n    }\n\n    // check we have rows (empty array)\n    if (rows > 0) {\n      // column index\n      var j = 0;\n      do {\n        // store pointer to values index\n        matrix._ptr.push(matrix._index.length);\n        // loop rows\n        for (var i = 0; i < rows; i++) {\n          // current row\n          var row = data[i];\n          // check row is an array\n          if (isArray(row)) {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < row.length)\n              columns = row.length;\n            // check row has column\n            if (j < row.length) {\n              // value\n              var v = row[j];\n              // check value != 0\n              if (!eq(v, zero)) {\n                // store value\n                matrix._values.push(v);\n                // index\n                matrix._index.push(i);\n              }\n            }\n          }\n          else {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < 1)\n              columns = 1;\n            // check value != 0 (row is a scalar)\n            if (!eq(row, zero)) {\n              // store value\n              matrix._values.push(row);\n              // index\n              matrix._index.push(i);\n            }\n          }\n        }\n        // increment index\n        j++;      \n      }\n      while (j < columns);\n    }\n    // store number of values in ptr\n    matrix._ptr.push(matrix._index.length);\n    // size\n    matrix._size = [rows, columns];\n  };\n  \n  SparseMatrix.prototype = new Matrix();\n\n  /**\n   * Attach type information\n   */\n  SparseMatrix.prototype.type = 'SparseMatrix';\n  SparseMatrix.prototype.isSparseMatrix = true;\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     var format = matrix.storage()                   // retrieve storage format\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The storage format.\n   */\n  SparseMatrix.prototype.storage = function () {\n    return 'sparse';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     var format = matrix.datatype()                   // retrieve matrix datatype\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The datatype.\n   */\n  SparseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new SparseMatrix\n   * @memberof SparseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  SparseMatrix.prototype.create = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n\n  /**\n   * Get the matrix density.\n   *\n   * Usage:\n   *     var density = matrix.density()                   // retrieve matrix density\n   *\n   * @memberof SparseMatrix\n   * @return {number}           The matrix density.\n   */\n  SparseMatrix.prototype.density = function () {\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // calculate density\n    return rows !== 0 && columns !== 0 ? (this._index.length / (rows * columns)) : 0;\n  };\n  \n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     var subset = matrix.subset(index)               // retrieve subset\n   *     var value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof SparseMatrix\n   * @param {Index} index\n   * @param {Array | Maytrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) { // check it is a pattern matrix\n    if (!this._values)\n      throw new Error('Cannot invoke subset on a Pattern only matrix');\n\n    // check arguments\n    switch (arguments.length) {\n      case 1:\n        return _getsubset(this, index);\n\n        // intentional fall through\n      case 2:\n      case 3:\n        return _setsubset(this, index, replacement, defaultValue);\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  \n  var _getsubset = function (matrix, idx) {\n    // check idx\n    if (!idx || idx.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    var isScalar = idx.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(idx.min());\n    }\n    // validate dimensions\n    var size = idx.size();\n    if (size.length != matrix._size.length) {\n      throw new DimensionError(size.length, matrix._size.length);\n    }\n\n    // vars\n    var i, ii, k, kk;\n    \n    // validate if any of the ranges in the index is out of range\n    var min = idx.min();\n    var max = idx.max();\n    for (i = 0, ii = matrix._size.length; i < ii; i++) {\n      validateIndex(min[i], matrix._size[i]);\n      validateIndex(max[i], matrix._size[i]);\n    }\n    \n    // matrix arrays\n    var mvalues = matrix._values;\n    var mindex = matrix._index;\n    var mptr = matrix._ptr;\n        \n    // rows & columns dimensions for result matrix\n    var rows = idx.dimension(0);\n    var columns = idx.dimension(1);\n    \n    // workspace & permutation vector\n    var w = [];\n    var pv = [];\n    \n    // loop rows in resulting matrix\n    rows.forEach(function (i, r) {\n      // update permutation vector\n      pv[i] = r[0];  \n      // mark i in workspace\n      w[i] = true;\n    });\n\n    // result matrix arrays\n    var values = mvalues ? [] : undefined;\n    var index = [];\n    var ptr = [];\n        \n    // loop columns in result matrix\n    columns.forEach(function (j) {\n      // update ptr\n      ptr.push(index.length);\n      // loop values in column j\n      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {\n        // row\n        i = mindex[k];\n        // check row is in result matrix\n        if (w[i] === true) {\n          // push index\n          index.push(pv[i]);\n          // check we need to process values\n          if (values)\n            values.push(mvalues[k]);\n        }\n      }\n    });\n    // update ptr\n    ptr.push(index.length);\n    \n    // return matrix\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: size,\n      datatype: matrix._datatype\n    });\n  };\n  \n  var _setsubset = function (matrix, index, submatrix, defaultValue) {\n    // check index\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n    \n    // get index size and check whether the index contains a single value\n    var iSize = index.size(),\n        isScalar = index.isScalar();\n    \n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (submatrix && submatrix.isMatrix === true) {\n      // submatrix size\n      sSize = submatrix.size();\n      // use array representation\n      submatrix = submatrix.toArray();\n    }\n    else {\n      // get submatrix size (array, scalar)\n      sSize = array.size(submatrix);\n    }\n    \n    // check index is a scalar\n    if (isScalar) {\n      // verify submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      // set value\n      matrix.set(index.min(), submatrix, defaultValue);\n    }\n    else {\n      // validate dimensions, index size must be one or two dimensions\n      if (iSize.length !== 1 && iSize.length !== 2) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n      \n      // check submatrix and index have the same dimensions\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n        // unsqueeze both outer and inner dimensions\n        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n      \n      // check whether the size of the submatrix matches the index size\n      if (!object.deepEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n      \n      // offsets\n      var x0 = index.min()[0];\n      var y0 = index.min()[1];      \n      \n      // submatrix rows and columns\n      var m = sSize[0];\n      var n = sSize[1];\n\n      // loop submatrix\n      for (var x = 0; x < m; x++) {\n        // loop columns\n        for (var y = 0; y < n; y++) {\n          // value at i, j\n          var v = submatrix[x][y];\n          // invoke set (zero value will remove entry from matrix)\n          matrix.set([x + x0, y + y0], v, defaultValue);\n        }\n      }\n    }\n    return matrix;\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  SparseMatrix.prototype.get = function (index) {\n    if (!isArray(index))\n      throw new TypeError('Array expected');\n    if (index.length != this._size.length)\n      throw new DimensionError(index.length, this._size.length);\n\n    // check it is a pattern matrix\n    if (!this._values)\n      throw new Error('Cannot invoke get on a Pattern only matrix');\n\n    // row and column\n    var i = index[0];\n    var j = index[1];\n\n    // check i, j are valid\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[1]);\n\n    // find value index\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n    // check k is prior to next column k and it is in the correct row\n    if (k < this._ptr[j + 1] && this._index[k] === i)\n      return this._values[k];\n\n    return 0;\n  };\n  \n  /**\n   * Replace a single element in the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be set to zero.\n   * @return {SparseMatrix} self\n   */\n  SparseMatrix.prototype.set = function (index, v, defaultValue) {\n    if (!isArray(index))\n      throw new TypeError('Array expected');\n    if (index.length != this._size.length)\n      throw new DimensionError(index.length, this._size.length);\n\n    // check it is a pattern matrix\n    if (!this._values)\n      throw new Error('Cannot invoke set on a Pattern only matrix');\n      \n    // row and column\n    var i = index[0];\n    var j = index[1];\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    \n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    if (isString(this._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, this._datatype);\n    }\n\n    // check we need to resize matrix\n    if (i > rows - 1 || j > columns - 1) {\n      // resize matrix\n      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);\n      // update rows & columns\n      rows = this._size[0];\n      columns = this._size[1];\n    }\n\n    // check i, j are valid\n    validateIndex(i, rows);\n    validateIndex(j, columns);\n\n    // find value index\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n    // check k is prior to next column k and it is in the correct row\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      // check value != 0\n      if (!eq(v, zero)) {\n        // update value\n        this._values[k] = v;\n      }\n      else {\n        // remove value from matrix\n        _remove(k, j, this._values, this._index, this._ptr);\n      }\n    }\n    else {\n      // insert value @ (i, j)\n      _insert(k, i, j, v, this._values, this._index, this._ptr);\n    }\n\n    return this;\n  };\n  \n  var _getValueIndex = function(i, top, bottom, index) {\n    // check row is on the bottom side\n    if (bottom - top === 0)\n      return bottom;\n    // loop rows [top, bottom[\n    for (var r = top; r < bottom; r++) {\n      // check we found value index\n      if (index[r] === i)\n        return r;\n    }\n    // we did not find row\n    return top;\n  };\n\n  var _remove = function (k, j, values, index, ptr) {\n    // remove value @ k\n    values.splice(k, 1);\n    index.splice(k, 1);\n    // update pointers\n    for (var x = j + 1; x < ptr.length; x++)\n      ptr[x]--;\n  };\n\n  var _insert = function (k, i, j, v, values, index, ptr) {\n    // insert value\n    values.splice(k, 0, v);\n    // update row for k\n    index.splice(k, 0, i);\n    // update column pointers\n    for (var x = j + 1; x < ptr.length; x++)\n      ptr[x]++;\n  };\n  \n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when \n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof SparseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {    \n    // validate arguments\n    if (!isArray(size))\n      throw new TypeError('Array expected');\n    if (size.length !== 2)\n      throw new Error('Only two dimensions matrix are supported');\n\n    // check sizes\n    size.forEach(function (value) {\n      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {\n        throw new TypeError('Invalid size, must contain positive integers ' +\n                            '(size: ' + string.format(size) + ')');\n      }\n    });\n    \n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, size[0], size[1], defaultValue);\n  };\n  \n  var _resize = function (matrix, rows, columns, defaultValue) {\n    // value to insert at the time of growing matrix\n    var value = defaultValue || 0;\n    \n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, matrix._datatype);\n      // convert value to the same datatype\n      value = typed.convert(value, matrix._datatype);\n    }\n    \n    // should we insert the value?\n    var ins = !eq(value, zero);\n\n    // old columns and rows\n    var r = matrix._size[0];\n    var c = matrix._size[1];\n\n    var i, j, k;\n\n    // check we need to increase columns\n    if (columns > c) {\n      // loop new columns\n      for (j = c; j < columns; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._values.length;\n        // check we need to insert matrix._values\n        if (ins) {\n          // loop rows\n          for (i = 0; i < r; i++) {\n            // add new matrix._values\n            matrix._values.push(value);\n            // update matrix._index\n            matrix._index.push(i);\n          }\n        }        \n      }\n      // store number of matrix._values in matrix._ptr\n      matrix._ptr[columns] = matrix._values.length;\n    }\n    else if (columns < c) {\n      // truncate matrix._ptr\n      matrix._ptr.splice(columns + 1, c - columns);\n      // truncate matrix._values and matrix._index\n      matrix._values.splice(matrix._ptr[columns], matrix._values.length);\n      matrix._index.splice(matrix._ptr[columns], matrix._index.length);\n    }\n    // update columns\n    c = columns;\n\n    // check we need to increase rows\n    if (rows > r) {\n      // check we have to insert values\n      if (ins) {\n        // inserts\n        var n = 0;\n        // loop columns\n        for (j = 0; j < c; j++) {\n          // update matrix._ptr for current column\n          matrix._ptr[j] = matrix._ptr[j] + n;\n          // where to insert matrix._values\n          k = matrix._ptr[j + 1] + n;\n          // pointer\n          var p = 0;\n          // loop new rows, initialize pointer\n          for (i = r; i < rows; i++, p++) {\n            // add value\n            matrix._values.splice(k + p, 0, value);\n            // update matrix._index\n            matrix._index.splice(k + p, 0, i);\n            // increment inserts\n            n++;\n          }\n        }\n        // store number of matrix._values in matrix._ptr\n        matrix._ptr[c] = matrix._values.length;\n      }\n    }\n    else if (rows < r) {\n      // deletes\n      var d = 0;\n      // loop columns\n      for (j = 0; j < c; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._ptr[j] - d;\n        // where matrix._values start for next column\n        var k0 = matrix._ptr[j];\n        var k1 = matrix._ptr[j + 1] - d;\n        // loop matrix._index\n        for (k = k0; k < k1; k++) {\n          // row\n          i = matrix._index[k];\n          // check we need to delete value and matrix._index\n          if (i > rows - 1) {\n            // remove value\n            matrix._values.splice(k, 1);\n            // remove item from matrix._index\n            matrix._index.splice(k, 1);\n            // increase deletes\n            d++;\n          }\n        }\n      }\n      // update matrix._ptr for current column\n      matrix._ptr[j] = matrix._values.length;\n    }\n    // update matrix._size\n    matrix._size[0] = rows;\n    matrix._size[1] = columns;\n    // return matrix\n    return matrix;\n  };\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof SparseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  SparseMatrix.prototype.reshape = function (size, copy) {\n\n    // validate arguments\n    if (!isArray(size))\n      throw new TypeError('Array expected');\n    if (size.length !== 2)\n      throw new Error('Sparse matrices can only be reshaped in two dimensions');\n\n    // check sizes\n    size.forEach(function (value) {\n      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {\n        throw new TypeError('Invalid size, must contain positive integers ' +\n                            '(size: ' + string.format(size) + ')');\n      }\n    });\n\n    // m * n must not change\n    if(this._size[0] * this._size[1] !== size[0] * size[1]) {\n      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');\n    }\n\n    // matrix to reshape\n    var m = copy ? this.clone() : this;\n\n    // return unchanged if the same shape\n    if(this._size[0] === size[0] && this._size[1] === size[1]) {\n      return m;\n    }\n\n    // Convert to COO format (generate a column index)\n    var colIndex = [];\n    for(var i=0; i<m._ptr.length; i++) {\n      for(var j=0; j<m._ptr[i+1]-m._ptr[i]; j++) {\n        colIndex.push(i);\n      }\n    }\n\n    // Clone the values array\n    var values = m._values.slice();\n\n    // Clone the row index array\n    var rowIndex = m._index.slice();\n\n    // Transform the (row, column) indices\n    for(var i=0; i<m._index.length; i++) {\n      var r1 = rowIndex[i];\n      var c1 = colIndex[i];\n      var flat = r1 * m._size[1] + c1;\n      colIndex[i] = flat % size[1];\n      rowIndex[i] = Math.floor(flat / size[1]);\n    }\n\n    // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored\n    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,\n    // sorting several arrays based on some other array.\n\n    // OR, we could easily just:\n\n    // 1. Remove all values from the matrix\n    m._values.length = 0;\n    m._index.length = 0;\n    m._ptr.length = size[1] + 1;\n    m._size = size.slice();\n    for(var i=0; i<m._ptr.length; i++) {\n      m._ptr[i] = 0;\n    }\n\n    // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)\n    // This step is probably the most time-consuming\n    for(var h=0; h<values.length; h++) {\n      var i = rowIndex[h];\n      var j = colIndex[h];\n      var v = values[h];\n      var k = _getValueIndex(i, m._ptr[j], m._ptr[j + 1], m._index);\n      _insert(k, i, j, v, m._values, m._index, m._ptr);\n    }\n\n    // The value indices are inserted out of order, but apparently that's... still OK?\n\n    return m;\n  }\n  \n  /**\n   * Create a clone of the matrix\n   * @memberof SparseMatrix\n   * @return {SparseMatrix} clone\n   */\n  SparseMatrix.prototype.clone = function () {\n    var m = new SparseMatrix({\n      values: this._values ? object.clone(this._values) : undefined,\n      index: object.clone(this._index),\n      ptr: object.clone(this._ptr),\n      size: object.clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n  \n  /**\n   * Retrieve the size of the matrix.\n   * @memberof SparseMatrix\n   * @returns {number[]} size\n   */\n  SparseMatrix.prototype.size = function() {\n    return this._size.slice(0); // copy the Array\n  };\n  \n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {SparseMatrix} matrix\n   */\n  SparseMatrix.prototype.map = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values)\n      throw new Error('Cannot invoke map on a Pattern only matrix');\n    // matrix instance\n    var me = this;\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // invoke callback\n    var invoke = function (v, i, j) {\n      // invoke callback\n      return callback(v, [i, j], me);\n    };\n    // invoke _map\n    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on the interval\n   * [minRow..maxRow, minColumn..maxColumn].\n   */\n  var _map = function (matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {\n    // result arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n    \n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, matrix._datatype);\n    }\n    \n    // invoke callback\n    var invoke = function (v, x, y) {\n      // invoke callback\n      v = callback(v, x, y);\n      // check value != 0\n      if (!eq(v, zero)) {\n        // store value\n        values.push(v);\n        // index\n        index.push(x);\n      }\n    };\n    // loop columns\n    for (var j = minColumn; j <= maxColumn; j++) {\n      // store pointer to values index\n      ptr.push(values.length);\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = matrix._ptr[j];\n      var k1 = matrix._ptr[j + 1];\n      // row pointer\n      var p = minRow;\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = matrix._index[k];\n        // check i is in range\n        if (i >= minRow && i <= maxRow) {\n          // zero values\n          if (!skipZeros) {\n           for (var x = p; x < i; x++)\n             invoke(0, x - minRow, j - minColumn);\n          }\n          // value @ k\n          invoke(matrix._values[k], i - minRow, j - minColumn);\n        }\n        // update pointer\n        p = i + 1;\n      }\n      // zero values\n      if (!skipZeros) {\n        for (var y = p; y <= maxRow; y++)\n          invoke(0, y - minRow, j - minColumn);\n      }\n    }\n    // store number of values in ptr\n    ptr.push(values.length);\n    // return sparse matrix\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]\n    });\n  };\n  \n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   */\n  SparseMatrix.prototype.forEach = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values)\n      throw new Error('Cannot invoke forEach on a Pattern only matrix');\n    // matrix instance\n    var me = this;\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // column pointer\n      var p = 0;\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        // check we need to process zeros\n        if (!skipZeros) {\n          // zero values\n          for (var x = p; x < i; x++)\n            callback(0, [x, j], me);\n        }\n        // value @ k\n        callback(this._values[k], [i, j], me);\n        // update pointer\n        p = i + 1;\n      }\n      // check we need to process zeros\n      if (!skipZeros) {\n        // zero values\n        for (var y = p; y < rows; y++)\n          callback(0, [y, j], me);\n      }\n    }\n  };\n  \n  /**\n   * Create an Array with a copy of the data of the SparseMatrix\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n  SparseMatrix.prototype.toArray = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, true);\n  };\n\n  /**\n   * Get the primitive value of the SparseMatrix: a two dimensions array\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n  SparseMatrix.prototype.valueOf = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, false);\n  };\n  \n  var _toArray = function (values, index, ptr, size, copy) {    \n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n    // result\n    var a = [];\n    // vars\n    var i, j;\n    // initialize array\n    for (i = 0; i < rows; i++) {\n      a[i] = [];\n      for (j = 0; j < columns; j++)\n        a[i][j] = 0;\n    }\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        i = index[k];\n        // set value (use one for pattern matrix)\n        a[i][j] = values ? (copy ? object.clone(values[k]) : values[k]) : 1;\n      }\n    }\n    return a;\n  };\n  \n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof SparseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  SparseMatrix.prototype.format = function (options) {\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // density\n    var density = this.density();\n    // rows & columns\n    var str = 'Sparse Matrix [' + string.format(rows, options) + ' x ' + string.format(columns, options) + '] density: ' + string.format(density, options) + '\\n';\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        // append value\n        str += '\\n    (' + string.format(i, options) + ', ' + string.format(j, options) + ') ==> ' + (this._values ? string.format(this._values[k], options) : 'X');\n      }\n    }\n    return str;\n  };\n  \n  /**\n   * Get a string representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {string} str\n   */\n  SparseMatrix.prototype.toString = function () {\n    return string.format(this.toArray());\n  };\n  \n  /**\n   * Get a JSON representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {Object}\n   */\n  SparseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'SparseMatrix',\n      values: this._values,\n      index: this._index,\n      ptr: this._ptr,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof SparseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix vector with the diagonal values.\n   */\n  SparseMatrix.prototype.diagonal = function(k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (k.isBigNumber === true)\n        k = k.toNumber();\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError ('The parameter k must be an integer number');\n      }\n    }\n    else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n    \n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    \n    // number diagonal values\n    var n = Math.min(rows - kSub, columns -  kSuper);\n    \n    // diagonal arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n    // initial ptr value\n    ptr[0] = 0;\n    // loop columns\n    for (var j = kSuper; j < columns && values.length < n; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // loop x within [k0, k1[\n      for (var x = k0; x < k1; x++) {\n        // row index\n        var i = this._index[x];\n        // check row\n        if (i === j - kSuper + kSub) {\n          // value on this column\n          values.push(this._values[x]);\n          // store row\n          index[values.length - 1] = i - kSub;\n          // exit loop\n          break;\n        }\n      }\n    }\n    // close ptr\n    ptr.push(values.length);\n    // return matrix\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: [n, 1]\n    });\n  };\n  \n  /**\n   * Generate a matrix from a JSON object\n   * @memberof SparseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,\n   *                       where mathjs is optional\n   * @returns {SparseMatrix}\n   */\n  SparseMatrix.fromJSON = function (json) {\n    return new SparseMatrix(json);\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {Array} size                       The matrix size.\n   * @param {number | Array | Matrix } value   The values for the diagonal.\n   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.\n   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.\n   *\n   * @returns {SparseMatrix}\n   */\n  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!isArray(size))\n      throw new TypeError('Array expected, size parameter');\n    if (size.length !== 2)\n      throw new Error('Only two dimensions matrix are supported');\n    \n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (s && s.isBigNumber === true) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      } \n      return s;\n    });\n    \n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (k.isBigNumber === true)\n        k = k.toNumber();\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError ('The parameter k must be an integer number');\n      }\n    }\n    else {\n      // default value\n      k = 0;\n    }\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, datatype);\n    }\n    \n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n    \n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n    \n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns -  kSuper);\n    \n    // value extraction function\n    var _value;\n      \n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function (i) {\n        // return value @ i\n        return value[i];\n      };\n    }\n    else if (value && value.isMatrix === true) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function (i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    }\n    else {\n      // define function\n      _value = function () {\n        // return value\n        return value;\n      };\n    }\n    \n    // create arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n    \n    // loop items\n    for (var j = 0; j < columns; j++) {\n      // number of rows with value\n      ptr.push(values.length);\n      // diagonal index\n      var i = j - kSuper;      \n      // check we need to set diagonal value\n      if (i >= 0 && i < n) {\n        // get value @ i\n        var v = _value(i);\n        // check for zero\n        if (!eq(v, zero)) {\n          // column\n          index.push(i + kSub);\n          // add value\n          values.push(v);\n        }\n      }\n    }\n    // last value should be number of values\n    ptr.push(values.length);\n    // create SparseMatrix\n    return new SparseMatrix({\n      values: values,\n      index: index,\n      ptr: ptr,\n      size: [rows, columns]\n    });\n  };\n  \n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  SparseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n    \n    // swap rows\n    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);\n    // return current instance\n    return this;\n  };\n  \n  /**\n   * Loop rows with data in column j.\n   *\n   * @param {number} j            Column\n   * @param {Array} values        Matrix values\n   * @param {Array} index         Matrix row indeces\n   * @param {Array} ptr           Matrix column pointers\n   * @param {Function} callback   Callback function invoked for every row in column j\n   */\n  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {\n    // indeces for column j\n    var k0 = ptr[j];\n    var k1 = ptr[j + 1];\n    // loop\n    for (var k = k0; k < k1; k++) {\n      // invoke callback\n      callback(index[k], values[k]);\n    }\n  };\n  \n  /**\n   * Swap rows x and y in Sparse Matrix data structures.\n   *\n   * @param {number} x         Matrix row index 1\n   * @param {number} y         Matrix row index 2\n   * @param {number} columns   Number of columns in matrix\n   * @param {Array} values     Matrix values\n   * @param {Array} index      Matrix row indeces\n   * @param {Array} ptr        Matrix column pointers\n   */\n  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // find value index @ x\n      var kx = _getValueIndex(x, k0, k1, index);\n      // find value index @ x\n      var ky = _getValueIndex(y, k0, k1, index);\n      // check both rows exist in matrix\n      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {\n        // swap values (check for pattern matrix)\n        if (values) {\n          var v = values[kx];\n          values[kx] = values[ky];\n          values[ky] = v;\n        }\n        // next column\n        continue;\n      }\n      // check x row exist & no y row\n      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {\n        // value @ x (check for pattern matrix)\n        var vx = values ? values[kx] : undefined;\n        // insert value @ y\n        index.splice(ky, 0, y);\n        if (values)\n          values.splice(ky, 0, vx);        \n        // remove value @ x (adjust array index if needed)\n        index.splice(ky <= kx ? kx + 1 : kx, 1);\n        if (values)\n          values.splice(ky <= kx ? kx + 1 : kx, 1);\n        // next column\n        continue;\n      }\n      // check y row exist & no x row\n      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {\n        // value @ y (check for pattern matrix)\n        var vy = values ? values[ky] : undefined;\n        // insert value @ x\n        index.splice(kx, 0, x);\n        if (values)\n          values.splice(kx, 0, vy);\n        // remove value @ y (adjust array index if needed)\n        index.splice(kx <= ky ? ky + 1 : ky, 1);\n        if (values)\n          values.splice(kx <= ky ? ky + 1 : ky, 1);\n      }\n    }\n  };\n\n  // register this type in the base class Matrix\n  type.Matrix._storage.sparse = SparseMatrix;\n\n  return SparseMatrix;\n}\n\nexports.name = 'SparseMatrix';\nexports.path = 'type';\nexports.factory = factory;\nexports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create an index. An Index can store ranges having start, step, and end\n   * for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Syntax:\n   *\n   *     math.index(range1, range2, ...)\n   *\n   * Where each range can be any of:\n   *\n   * - A number\n   * - A string for getting/setting an object property\n   * - An instance of `Range`\n   * - A one-dimensional Array or a Matrix with numbers\n   *\n   * Indexes must be zero-based, integer numbers.\n   *\n   * Examples:\n   *\n   *    var math = math.js\n   *\n   *    var b = [1, 2, 3, 4, 5];\n   *    math.subset(b, math.index([1, 2, 3]));     // returns [2, 3, 4]\n   *\n   *    var a = math.matrix([[1, 2], [3, 4]]);\n   *    a.subset(math.index(0, 1));             // returns 2\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, matrix, number, string, unit\n   *\n   * @param {...*} ranges   Zero or more ranges or numbers.\n   * @return {Index}        Returns the created index\n   */\n  return typed('index', {\n    '...number | string | BigNumber | Range | Array | Matrix': function (args) {\n      var ranges = args.map(function (arg) {\n        if (arg && arg.isBigNumber === true) {\n          return arg.toNumber(); // convert BigNumber to Number\n        }\n        else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {\n          return arg.map(function (elem) {\n            // convert BigNumber to Number\n            return (elem && elem.isBigNumber === true) ? elem.toNumber() : elem;\n          });\n        }\n        else {\n          return arg;\n        }\n      });\n\n      var res = new type.Index();\n      type.Index.apply(res, ranges);\n      return res;\n    }\n  });\n}\n\nexports.name = 'index';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a Matrix. The function creates a new `math.type.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Supported storage formats are 'dense' and 'sparse'.\n   *\n   * Syntax:\n   *\n   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n   *\n   * Examples:\n   *\n   *    var m = math.matrix([[1, 2], [3, 4]]);\n   *    m.size();                        // Array [2, 2]\n   *    m.resize([3, 2], 5);\n   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, sparse\n   *\n   * @param {Array | Matrix} [data]    A multi dimensional array\n   * @param {string} [format]          The Matrix storage format\n   *\n   * @return {Matrix} The created matrix\n   */\n  var matrix = typed('matrix', {\n    '': function () {\n      return _create([]);\n    },\n\n    'string': function (format) {\n      return _create([], format);\n    },\n    \n    'string, string': function (format, datatype) {\n      return _create([], format, datatype);\n    },\n\n    'Array': function (data) {\n      return _create(data);\n    },\n      \n    'Matrix': function (data) {\n      return _create(data, data.storage());\n    },\n    \n    'Array | Matrix, string': _create,\n    \n    'Array | Matrix, string, string': _create\n  });\n\n  matrix.toTex = {\n    0: '\\\\begin{bmatrix}\\\\end{bmatrix}',\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(${args[0]}\\\\right)'\n  };\n\n  return matrix;\n\n  /**\n   * Create a new Matrix with given storage format\n   * @param {Array} data\n   * @param {string} [format]\n   * @param {string} [datatype]\n   * @returns {Matrix} Returns a new Matrix\n   * @private\n   */\n  function _create(data, format, datatype) {\n    // get storage format constructor\n    var M = type.Matrix.storage(format || 'default');\n\n    // create instance\n    return new M(data, datatype);\n  }\n}\n\nexports.name = 'matrix';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   *\n   * Syntax:\n   *\n   *    math.sparse()               // creates an empty sparse matrix.\n   *    math.sparse(data)           // creates a sparse matrix with initial data.\n   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n   *\n   * Examples:\n   *\n   *    var m = math.sparse([[1, 2], [3, 4]]);\n   *    m.size();                        // Array [2, 2]\n   *    m.resize([3, 2], 5);\n   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, matrix\n   *\n   * @param {Array | Matrix} [data]    A two dimensional array\n   *\n   * @return {Matrix} The created matrix\n   */\n  var sparse = typed('sparse', {\n    '': function () {\n      return new SparseMatrix([]);\n    },\n    \n    'string': function (datatype) {\n      return new SparseMatrix([], datatype);\n    },\n\n    'Array | Matrix': function (data) {\n      return new SparseMatrix(data);\n    },\n    \n    'Array | Matrix, string': function (data, datatype) {\n      return new SparseMatrix(data, datatype);\n    }\n  });\n\n  sparse.toTex = {\n    0: '\\\\begin{bsparse}\\\\end{bsparse}',\n    1: '\\\\left(${args[0]}\\\\right)'\n  };\n\n  return sparse;\n}\n\nexports.name = 'sparse';\nexports.factory = factory;\n","module.exports = [\n  // types\n  require('./Matrix'),\n  require('./DenseMatrix'),\n  require('./SparseMatrix'),\n  require('./Spa'),\n  require('./FibonacciHeap'),\n  require('./ImmutableDenseMatrix'),\n  require('./MatrixIndex'),\n  require('./Range'),\n\n  // construction functions\n  require('./function/index'),\n  require('./function/matrix'),\n  require('./function/sparse')\n];\n","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). \n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  Dij          ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  var algorithm01 = function (denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype;\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues)\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // process data types\n    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;\n    // callback function\n    var cf = dt ? typed.find(callback, [dt, dt]) : callback;\n\n    // vars\n    var i, j;\n    \n    // result (DenseMatrix)\n    var cdata = [];\n    // initialize c\n    for (i = 0; i < rows; i++)\n      cdata[i] = [];      \n    \n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns in b\n    for (j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // update workspace\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        // mark i as updated\n        w[i] = mark;\n      }\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // check row is in workspace\n        if (w[i] === mark) {\n          // c[i][j] was already calculated\n          cdata[i][j] = x[i];\n        }\n        else {\n          // item does not exist in S\n          cdata[i][j] = adata[i][j];\n        }\n      }\n    }\n\n    // return dense matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n  \n  return algorithm01;\n}\n\nexports.name = 'algorithm01';\nexports.factory = factory;\n","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). \n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  var algorithm02 = function (denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype;\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues)\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n    \n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result (SparseMatrix)\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // loop columns in b\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k];\n        // update C(i,j)\n        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        // check for nonzero\n        if (!eq(cij, zero)) {\n          // push i & v\n          cindex.push(i);\n          cvalues.push(cij);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n  \n  return algorithm02;\n}\n\nexports.name = 'algorithm02';\nexports.factory = factory;\n","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked M*N times.\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(Dij, 0)    ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  var algorithm03 = function (denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype;\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues)\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result (DenseMatrix)\n    var cdata = [];\n\n    // initialize dense matrix\n    for (var z = 0; z < rows; z++) {\n      // initialize row\n      cdata[z] = [];\n    }\n\n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns in b\n    for (var j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k];\n        // update workspace\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        w[i] = mark;\n      }\n      // process workspace\n      for (var y = 0; y < rows; y++) {\n        // check we have a calculated value for current row\n        if (w[y] === mark) {\n          // use calculated value\n          cdata[y][j] = x[y];\n        }\n        else {\n          // calculate value\n          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);\n        }\n      }\n    }\n\n    // return dense matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n  \n  return algorithm03;\n}\n\nexports.name = 'algorithm03';\nexports.factory = factory;\n","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n   *          └  B(i,j)       ; B(i,j) !== 0\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  var algorithm04 = function (a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // matrix\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspace\n    var xa = avalues && bvalues ? [] : undefined;\n    var xb = avalues && bvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // vars \n    var i, j, k, k0, k1;\n    \n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop A(:,j)\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // update c\n        cindex.push(i);\n        // update workspace\n        wa[i] = mark;\n        // check we need to process values\n        if (xa)\n          xa[i] = avalues[k];\n      }\n      // loop B(:,j)\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check row exists in A\n        if (wa[i] === mark) {\n          // update record in xa @ i\n          if (xa) {\n            // invoke callback\n            var v = cf(xa[i], bvalues[k]);\n            // check for zero\n            if (!eq(v, zero)) {\n              // update workspace\n              xa[i] = v;              \n            }\n            else {\n              // remove mark (index will be removed later)\n              wa[i] = null;\n            }\n          }\n        }\n        else {\n          // update c\n          cindex.push(i);\n          // update workspace\n          wb[i] = mark;\n          // check we need to process values\n          if (xb)\n            xb[i] = bvalues[k];\n        }\n      }\n      // check we need to process values (non pattern matrix)\n      if (xa && xb) {\n        // initialize first index in j\n        k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          i = cindex[k];\n          // check workspace has value @ i\n          if (wa[i] === mark) {\n            // push value (Aij != 0 || (Aij != 0 && Bij != 0))\n            cvalues[k] = xa[i];\n            // increment pointer\n            k++;\n          }\n          else if (wb[i] === mark) {\n            // push value (bij != 0)\n            cvalues[k] = xb[i];\n            // increment pointer\n            k++;\n          }\n          else {\n            // remove index @ k\n            cindex.splice(k, 1);\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n  \n  return algorithm04;\n}\n\nexports.name = 'algorithm04';\nexports.factory = factory;\n","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  \n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n   * C(i,j) = ┤  \n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  var algorithm05 = function (a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // matrix\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspaces\n    var xa = cvalues ? [] : undefined;\n    var xb = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // vars\n    var i, j, k, k1;\n    \n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop values A(:,j)\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // push index\n        cindex.push(i);\n        // update workspace\n        wa[i] = mark;\n        // check we need to process values\n        if (xa)\n          xa[i] = avalues[k];\n      }\n      // loop values B(:,j)\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check row existed in A\n        if (wa[i] !== mark) {\n          // push index\n          cindex.push(i);\n        }\n        // update workspace\n        wb[i] = mark;\n        // check we need to process values\n        if (xb)\n          xb[i] = bvalues[k];\n      }\n      // check we need to process values (non pattern matrix)\n      if (cvalues) {\n        // initialize first index in j\n        k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          i = cindex[k];\n          // marks\n          var wai = wa[i];\n          var wbi = wb[i];\n          // check Aij or Bij are nonzero\n          if (wai === mark || wbi === mark) {\n            // matrix values @ i,j\n            var va = wai === mark ? xa[i] : zero;\n            var vb = wbi === mark ? xb[i] : zero;\n            // Cij\n            var vc = cf(va, vb);\n            // check for zero\n            if (!eq(vc, zero)) {\n              // push value\n              cvalues.push(vc);\n              // increment pointer\n              k++;\n            }\n            else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n\n  return algorithm05;\n}\n\nexports.name = 'algorithm05';\nexports.factory = factory;\n","'use strict';\n\nvar scatter = require('./../../../utils/collection/scatter');\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  \n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  var algorithm06 = function (a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // matrix\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspaces\n    var x = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var w = [];\n    // marks indicating value in a given row has been updated\n    var u = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // scatter the values of A(:,j) into workspace\n      scatter(a, j, w, x, u, mark, c, cf);\n      // scatter the values of B(:,j) into workspace\n      scatter(b, j, w, x, u, mark, c, cf);\n      // check we need to process values (non pattern matrix)\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k];\n          // check function was invoked on current row (Aij !=0 && Bij != 0)\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i];\n            // check for zero value\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v);\n              // increment pointer\n              k++;\n            }\n            else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n          else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      }\n      else {\n        // initialize first index in j\n        var p = cptr[j];\n        // loop index in j\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p];\n          // check function was invoked on current row (Aij !=0 && Bij != 0)\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          }\n          else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n  \n  return algorithm06;\n}\n\nexports.name = 'algorithm06';\nexports.factory = factory;\n","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij). \n   * Callback function invoked MxN times.\n   *\n   * C(i,j) = f(Aij, Bij)\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  var algorithm07 = function (a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // vars\n    var i, j;\n    \n    // result arrays\n    var cdata = [];\n    // initialize c\n    for (i = 0; i < rows; i++)\n      cdata[i] = [];\n\n    // matrix\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspaces\n    var xa = [];\n    var xb = [];\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // scatter the values of A(:,j) into workspace\n      _scatter(a, j, wa, xa, mark);\n      // scatter the values of B(:,j) into workspace\n      _scatter(b, j, wb, xb, mark);\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero;\n        // invoke callback\n        cdata[i][j] = cf(va, vb);\n      }          \n    }\n\n    // return sparse matrix\n    return c;\n  };\n  \n  var _scatter = function (m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // loop values in column j\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k];\n      // update workspace\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  };\n  \n  return algorithm07;\n}\n\nexports.name = 'algorithm07';\nexports.factory = factory;\n","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). \n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  var algorithm08 = function (a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues || !bvalues)\n      throw new Error('Cannot perform operation on Pattern Sparse Matrices');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // matrix\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // vars\n    var k, k0, k1, i;\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop values in a\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // mark workspace\n        w[i] = mark;\n        // set value\n        x[i] = avalues[k];\n        // add index\n        cindex.push(i);\n      }\n      // loop values in b\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check value exists in workspace\n        if (w[i] === mark) {\n          // evaluate callback\n          x[i] = cf(x[i], bvalues[k]);\n        }\n      }\n      // initialize first index in j\n      k = cptr[j];\n      // loop index in j\n      while (k < cindex.length) {\n        // row\n        i = cindex[k];\n        // value @ i\n        var v = x[i];\n        // check for zero value\n        if (!eq(v, zero)) {\n          // push value\n          cvalues.push(v);\n          // increment pointer\n          k++;\n        }\n        else {\n          // remove value @ i, do not increment pointer\n          cindex.splice(k, 1);\n        }\n      }      \n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n\n  return algorithm08;\n}\n\nexports.name = 'algorithm08';\nexports.factory = factory;\n","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory (type, config, load, typed) {\n\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij). \n   * Callback function invoked NZA times, number of nonzero elements in A.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\n   * C(i,j) = ┤  \n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  var algorithm09 = function (a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // matrix\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspaces\n    var x = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // vars\n    var i, j, k, k0, k1;\n    \n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // column mark\n      var mark = j + 1;\n      // check we need to process values\n      if (x) {\n        // loop B(:,j)\n        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n          // row\n          i = bindex[k];\n          // update workspace\n          w[i] = mark;\n          x[i] = bvalues[k];\n        }\n      }\n      // loop A(:,j)\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // check we need to process values\n        if (x) {\n          // b value @ i,j\n          var vb = w[i] === mark ? x[i] : zero;\n          // invoke f\n          var vc = cf(avalues[k], vb);\n          // check zero value\n          if (!eq(vc, zero)) {\n            // push index\n            cindex.push(i);\n            // push value\n            cvalues.push(vc);\n          }\n        }\n        else {\n          // push index\n          cindex.push(i);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n\n  return algorithm09;\n}\n\nexports.name = 'algorithm09';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤  \n   *          └  b          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  var algorithm10 = function (s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues)\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cdata = [];\n    // matrix\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspaces\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k];\n        // update workspace\n        x[r] = avalues[k];\n        w[r] = mark;\n      }\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        }\n        // check sparse matrix has a value @ i,j\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        }\n        else {\n          // dense matrix value @ i, j\n          cdata[i][j] = b;\n        }\n      }\n    }\n\n    // return sparse matrix\n    return c;\n  };\n\n  return algorithm10;\n}\n\nexports.name = 'algorithm10';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n\n  var SparseMatrix = type.SparseMatrix;\n\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤  \n   *          └  0          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  var algorithm11 = function (s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues)\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // matrix\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k];\n        // invoke callback\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);\n        // check value is zero\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    }\n    // update ptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  };\n\n  return algorithm11;\n}\n\nexports.name = 'algorithm11';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). \n   * Callback function invoked MxN times.\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤  \n   *          └  f(0, b)    ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  var algorithm12 = function (s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues)\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n    \n    // result arrays\n    var cdata = [];\n    // matrix\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n\n    // workspaces\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k];\n        // update workspace\n        x[r] = avalues[k];\n        w[r] = mark;\n      }\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        }\n        // check sparse matrix has a value @ i,j\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        }\n        else {\n          // dense matrix value @ i, j\n          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);\n        }\n      }\n    }\n\n    // return sparse matrix\n    return c;\n  };\n  \n  return algorithm12;\n}\n\nexports.name = 'algorithm12';\nexports.factory = factory;\n","'use strict';\n\nvar util = require('../../../utils/index');\nvar DimensionError = require('../../../error/DimensionError');\n\nvar string = util.string,\n    isString = string.isString;\n\nfunction factory (type, config, load, typed) {\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z). \n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, Bij..z)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Matrix}   b                 The DenseMatrix instance (B)\n   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658\n   */\n  var algorithm13 = function (a, b, callback) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b arrays\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // c arrays\n    var csize = [];\n\n    // validate dimensions\n    if (asize.length !== bsize.length)\n      throw new DimensionError(asize.length, bsize.length);\n\n    // validate each one of the dimension sizes\n    for (var s = 0; s < asize.length; s++) {\n      // must match\n      if (asize[s] !== bsize[s])\n        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n      // update dimension in c\n      csize[s] = asize[s];\n    }\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // populate cdata, iterate through dimensions\n    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];\n    \n    // c matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: csize,\n      datatype: dt\n    });\n  };\n  \n  // recursive function\n  var _iterate = function (f, level, s, n, av, bv) {\n    // initialize array for this level\n    var cv = [];\n    // check we reach the last level\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = f(av[i], bv[i]);\n      }\n    }\n    else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);\n      }\n    }\n    return cv;\n  };\n  \n  return algorithm13;\n}\n\nexports.name = 'algorithm13';\nexports.factory = factory;\n","'use strict';\n\nvar clone = require('../../../utils/object').clone;\n\nfunction factory (type, config, load, typed) {\n\n  var DenseMatrix = type.DenseMatrix;\n\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b). \n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, b)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042\n   */\n  var algorithm14 = function (a, b, callback, inverse) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    \n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n    \n    // populate cdata, iterate through dimensions\n    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];\n\n    // c matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: clone(asize),\n      datatype: dt\n    });\n  };\n  \n  // recursive function\n  var _iterate = function (f, level, s, n, av, bv, inverse) {\n    // initialize array for this level\n    var cv = [];\n    // check we reach the last level\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);\n      }\n    }\n    else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);\n      }\n    }\n    return cv;\n  };\n\n  return algorithm14;\n}\n\nexports.name = 'algorithm14';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('./../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2);                         // returns number 2\n   *    math.number('7.2');                     // returns number 7.2\n   *    math.number(true);                      // returns number 1\n   *    math.number([true, false, true, true]); // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm');    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function () {\n      return 0;\n    },\n\n    'number': function (x) {\n      return x;\n    },\n\n    'string': function (x) {\n      var num = Number(x);\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n      return num;\n    },\n\n    'BigNumber': function (x) {\n      return x.toNumber();\n    },\n\n    'Fraction': function (x) {\n      return x.valueOf();\n    },\n\n    'Unit': function (x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n\n    'Unit, string | Unit': function (unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, number);\n    }\n  });\n\n  number.toTex = {\n    0: '0',\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)'\n  };\n\n  return number;\n}\n\nexports.name = 'number';\nexports.factory = factory;\n","'use strict';\n\nfunction factory (type, config, load, typed) {\n  /**\n   * A ResultSet contains a list or results\n   * @class ResultSet\n   * @param {Array} entries\n   * @constructor ResultSet\n   */\n  function ResultSet(entries) {\n    if (!(this instanceof ResultSet)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.entries = entries || [];\n  }\n\n  /**\n   * Attach type information\n   */\n  ResultSet.prototype.type = 'ResultSet';\n  ResultSet.prototype.isResultSet = true;\n\n  /**\n   * Returns the array with results hold by this ResultSet\n   * @memberof ResultSet\n   * @returns {Array} entries\n   */\n  ResultSet.prototype.valueOf = function () {\n    return this.entries;\n  };\n\n  /**\n   * Returns the stringified results of the ResultSet\n   * @memberof ResultSet\n   * @returns {string} string\n   */\n  ResultSet.prototype.toString = function () {\n    return '[' + this.entries.join(', ') + ']';\n  };\n\n  /**\n   * Get a JSON representation of the ResultSet\n   * @memberof ResultSet\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   */\n  ResultSet.prototype.toJSON = function () {\n    return {\n      mathjs: 'ResultSet',\n      entries: this.entries\n    };\n  };\n\n  /**\n   * Instantiate a ResultSet from a JSON object\n   * @memberof ResultSet\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   * @return {ResultSet}\n   */\n  ResultSet.fromJSON = function (json) {\n    return new ResultSet(json.entries);\n  };\n\n  return ResultSet;\n}\n\nexports.name = 'ResultSet';\nexports.path = 'type';\nexports.factory = factory;\n","module.exports = [\n  // type\n  require('./ResultSet')\n];\n","'use strict';\n\nvar deepMap = require('./../utils/collection/deepMap');\nvar number = require('../utils/number');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a string or convert any object into a string.\n   * Elements of Arrays and Matrices are processed element wise.\n   *\n   * Syntax:\n   *\n   *    math.string(value)\n   *\n   * Examples:\n   *\n   *    math.string(4.2);               // returns string '4.2'\n   *    math.string(math.complex(3, 2); // returns string '3 + 2i'\n   *\n   *    var u = math.unit(5, 'km');\n   *    math.string(u.to('m'));         // returns string '5000 m'\n   *\n   *    math.string([true, false]);     // returns ['true', 'false']\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, unit\n   *\n   * @param {* | Array | Matrix | null} [value]  A value to convert to a string\n   * @return {string | Array | Matrix} The created string\n   */\n  var string = typed('string', {\n    '': function () {\n      return '';\n    },\n\n    'number': number.format,\n\n    'null': function (x) {\n      return 'null';\n    },\n\n    'boolean': function (x) {\n      return x + '';\n    },\n\n    'string': function (x) {\n      return x;\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, string);\n    },\n\n    'any': function (x) {\n      return String(x);\n    }\n  });\n\n  string.toTex = {\n    0: '\\\\mathtt{\"\"}',\n    1: '\\\\mathrm{string}\\\\left(${args[0]}\\\\right)'\n  };\n\n  return string;\n}\n\nexports.name = 'string';\nexports.factory = factory;\n","'use strict';\n\nvar endsWith = require('../../utils/string').endsWith;\nvar clone = require('../../utils/object').clone;\nvar constants = require('../../utils/bignumber/constants');\n\nfunction factory (type, config, load, typed, math) {\n  var add       = load(require('../../function/arithmetic/addScalar'));\n  var subtract  = load(require('../../function/arithmetic/subtract'));\n  var multiply  = load(require('../../function/arithmetic/multiplyScalar'));\n  var divide    = load(require('../../function/arithmetic/divideScalar'));\n  var pow       = load(require('../../function/arithmetic/pow'));\n  var abs       = load(require('../../function/arithmetic/abs'));\n  var fix       = load(require('../../function/arithmetic/fix'));\n  var round     = load(require('../../function/arithmetic/round'));\n  var equal     = load(require('../../function/relational/equal'));\n  var isNumeric = load(require('../../function/utils/isNumeric'));\n  var format    = load(require('../../function/string/format'));\n  var getTypeOf = load(require('../../function/utils/typeof'));\n  var toNumber  = load(require('../../type/number'));\n  var Complex   = load(require('../../type/complex/Complex'));\n\n  /**\n   * A unit can be constructed in the following ways:\n   *     var a = new Unit(value, name);\n   *     var b = new Unit(null, name);\n   *     var c = Unit.parse(str);\n   *\n   * Example usage:\n   *     var a = new Unit(5, 'cm');               // 50 mm\n   *     var b = Unit.parse('23 kg');             // 23 kg\n   *     var c = math.in(a, new Unit(null, 'm');  // 0.05 m\n   *     var d = new Unit(9.81, \"m/s^2\");         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.\n   */\n  function Unit(value, name) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n\n    if (!(value == undefined || isNumeric(value) || value.isComplex)) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n    if (name != undefined && (typeof name !== 'string' || name == '')) {\n      throw new TypeError('Second parameter in Unit constructor must be a string');\n    }\n\n    if (name != undefined) {\n      var u = Unit.parse(name);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    }\n    else {\n      this.units = [\n        {\n          unit: UNIT_NONE,\n          prefix: PREFIXES.NONE,  // link to a list with supported prefixes\n          power: 0\n        }\n      ];\n      this.dimensions = []; \n      for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n        this.dimensions[i] = 0;\n      }\n    }\n\n    this.value = (value != undefined) ? this._normalize(value) : null;\n\n    this.fixPrefix = false; // if true, function format will not search for the\n                            // best prefix but leave it as initially provided.\n                            // fixPrefix is set true by the method Unit.to\n\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as he supplied.\n    this.isUnitListSimplified = true;\n\n  }\n\n  /**\n   * Attach type information\n   */\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true;\n\n  // private variables and functions for the Unit parser\n  var text, index, c;\n\n  function skipWhitespace() {\n    while (c == ' ' || c == '\\t') {\n      next();\n    }\n  }\n\n  function isDigitDot(c) {\n    return ((c >= '0' && c <= '9') || c == '.');\n  }\n\n  function isDigit(c) {\n    return ((c >= '0' && c <= '9'));\n  }\n\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n\n  function parseNumber() {\n    var number = '';\n    var oldIndex;\n    oldIndex = index;\n\n    if (c == '+') {\n      next();\n    }\n    else if (c == '-') {\n      number += c;\n      next();\n    }\n\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    }\n\n    // get number, can have a single dot\n    if (c == '.') {\n      number += c;\n      next();\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    }\n    else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n      if (c == '.') {\n        number += c;\n        next();\n      }\n    }\n    while (isDigit(c)) {\n      number += c;\n      next();\n    }\n\n    // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n    if (c == 'E' || c == 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n\n      tentativeNumber += c;\n      next();\n\n      if (c == '+' || c == '-') {\n        tentativeNumber += c;\n        next();\n      }\n\n      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      }\n      \n      // We can now safely say that this is scientific notation.\n      number = number + tentativeNumber;\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n\n    return number;\n  }\n\n  function parseUnit() {\n    var unitName = '';\n\n    // Alphanumeric characters only; matches [a-zA-Z0-9]\n    var code = text.charCodeAt(index);\n    while ( (code >= 48 && code <= 57) ||\n            (code >= 65 && code <= 90) ||\n            (code >= 97 && code <= 122)) {\n      unitName += c;\n      next();\n      code = text.charCodeAt(index);\n    }\n\n    // Must begin with [a-zA-Z]\n    code = unitName.charCodeAt(0);\n    if ((code >= 65 && code <= 90) ||\n        (code >= 97 && code <= 122)) {\n        return unitName || null;\n    } \n    else {\n      return null;\n    }\n  }\n\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    }\n    else {\n      return null;\n    }\n  }\n\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n\n    var unit = new Unit();\n    unit.units = [];\n\n    // A unit should follow this pattern:\n    // [number]unit[^number] [unit[^number]]...[/unit[^number] [unit[^number]]]\n\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace();\n    // Optional number at the start of the string\n    var valueStr = parseNumber();\n    var value = null;\n    if(valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new type.BigNumber(valueStr);\n      }\n      else if (config.number === 'Fraction') {\n        value = new type.Fraction(valueStr);\n      }\n      else { // number\n        value = parseFloat(valueStr);\n      }\n    }\n    skipWhitespace();    // Whitespace is not required here\n\n    // Next, we read any number of unit[^number]\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false;\n\n    // Stack to keep track of powerMultipliers applied to each parentheses group\n    var powerMultiplierStack = [];\n\n    // Running product of all elements in powerMultiplierStack\n    var powerMultiplierStackProduct = 1;\n\n    while (true) {\n      skipWhitespace();\n\n      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      }\n\n      // Is there something here?\n      if(c) {\n        var oldC = c;\n        var uStr = parseUnit();\n        if(uStr == null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      }\n      else {\n        // End of input.\n        break;\n      }\n\n      // Verify the unit exists and get the prefix (if any)\n      var res = _findUnit(uStr);\n      if(res == null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct;\n      // Is there a \"^ number\"?\n      skipWhitespace();\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n        if(p == null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n        power *= p;\n      }\n\n      // Add the unit to the list\n      unit.units.push( {\n        unit: res.unit,\n        prefix: res.prefix,\n        power: power\n      });\n      for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      }\n\n      // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n      skipWhitespace();\n      while (c === ')') {\n        if(powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      }\n\n      // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n      expectingUnit = false;\n\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      }\n      else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n      else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      }\n\n      // Replace the unit into the auto unit system\n      if(res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    }\n    \n    // Has the string been entirely consumed?\n    skipWhitespace();\n    if(c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    }\n\n    // Is there a trailing slash?\n    if(expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    }\n\n    // Is the parentheses stack empty?\n    if(powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    }\n\n    // Are there any units at all?\n    if(unit.units.length == 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n\n    unit.value = (value != undefined) ? unit._normalize(value) : null;\n    return unit;\n  };\n\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n\n    unit.fixPrefix = this.fixPrefix;\n    unit.isUnitListSimplified = this.isUnitListSimplified;\n\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n    for(var i = 0; i < this.units.length; i++) {\n      unit.units[i] = { };\n      for (var p in this.units[i]) {\n        if (this.units[i].hasOwnProperty(p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n\n    return unit;\n  };\n\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n  Unit.prototype._isDerived = function() {\n    if(this.units.length === 0) {\n      return false;\n    }\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n  Unit.prototype._normalize = function (value) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value == null || this.units.length === 0) {\n      return value;\n    }\n    else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      var res = value;\n      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for(var i=0; i < this.units.length; i++) {\n        unitValue       = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower       = convert(this.units[i].power);\n        res = multiply(res, pow(multiply(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    }\n    else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue       = convert(this.units[0].unit.value);\n      unitOffset      = convert(this.units[0].unit.offset);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n\n      return multiply(add(value, unitOffset), multiply(unitValue, unitPrefixValue));\n    }\n  };\n\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    var unitValue, unitOffset, unitPower, unitPrefixValue;\n    var convert;\n\n    if (value == null || this.units.length === 0) {\n      return value;\n    }\n    else if (this._isDerived()) {\n      // This is a derived unit, so do not apply offsets.\n      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.\n      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.\n      var res = value;\n      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed\n\n      for (var i = 0; i < this.units.length; i++) {\n        unitValue       = convert(this.units[i].unit.value);\n        unitPrefixValue = convert(this.units[i].prefix.value);\n        unitPower       = convert(this.units[i].power);\n        res = divide(res, pow(multiply(unitValue, unitPrefixValue), unitPower));\n      }\n\n      return res;\n    }\n    else {\n      // This is a single unit of power 1, like kg or degC\n      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed\n\n      unitValue       = convert(this.units[0].unit.value);\n      unitPrefixValue = convert(this.units[0].prefix.value);\n      unitOffset      = convert(this.units[0].unit.offset);\n\n      if (prefixValue == undefined) {\n        return subtract(divide(divide(value, unitValue), unitPrefixValue), unitOffset);\n      }\n      else {\n        return subtract(divide(divide(value, unitValue), prefixValue), unitOffset);\n      }\n    }\n  };\n\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n  function _findUnit(str) {\n  \n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if(UNITS.hasOwnProperty(str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit: unit,\n        prefix: prefix\n      }\n    }\n\n    for (var name in UNITS) {\n      if (UNITS.hasOwnProperty(name)) {\n        if (endsWith(str, name)) {\n          var unit = UNITS[name];\n          var prefixLen = (str.length - name.length);\n          var prefixName = str.substring(0, prefixLen);\n          var prefix = unit.prefixes.hasOwnProperty(prefixName)\n              ? unit.prefixes[prefixName]\n              : undefined;\n          if (prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: unit,\n              prefix: prefix\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n  Unit.isValuelessUnit = function (name) {\n    return (_findUnit(name) != null);\n  };\n\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n  Unit.prototype.hasBase = function (base) {\n\n    if(typeof(base) === \"string\") {\n      base = BASE_UNITS[base];\n    }\n\n    if(!base)\n      return false;\n\n\n    // All dimensions must be the same\n    for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n\n  };\n\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n  Unit.prototype.equals = function (other) {\n    return (this.equalBase(other) && equal(this.value, other.value));\n  };\n\n  /**\n   * Multiply this unit with another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n  Unit.prototype.multiply = function (other) {\n    var res = this.clone();\n    \n    for(var i = 0; i<BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    }\n\n    // Append other's units list onto res (simplify later in Unit.prototype.format)\n    for(var i=0; i<other.units.length; i++) {\n      // Make a deep copy\n      var inverted = {};\n      for(var key in other.units[i]) {\n        inverted[key] = other.units[i][key];\n      }\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, then the result should also have a value\n    if(this.value != null || other.value != null) {\n      var valThis = this.value == null ? this._normalize(1) : this.value;\n      var valOther = other.value == null ? other._normalize(1) : other.value;\n      res.value = multiply(valThis, valOther);\n    }\n    else {\n      res.value = null;\n    }\n\n    // Trigger simplification of the unit list at some future time\n    res.isUnitListSimplified = false;\n\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n  Unit.prototype.divide = function (other) {\n    var res = this.clone();\n    \n    for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    }\n\n    // Invert and append other's units list onto res (simplify later in Unit.prototype.format)\n    for(var i=0; i<other.units.length; i++) {\n      // Make a deep copy\n      var inverted = {};\n      for(var key in other.units[i]) {\n        inverted[key] = other.units[i][key];\n      }\n      inverted.power = -inverted.power;\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, the result should have a value\n    if (this.value != null || other.value != null) {\n      var valThis = this.value == null ? this._normalize(1) : this.value;\n      var valOther = other.value == null ? other._normalize(1) : other.value;\n      res.value = divide(valThis, valOther);\n    }\n    else {\n      res.value = null;\n    }\n\n    // Trigger simplification of the unit list at some future time\n    res.isUnitListSimplified = false;\n\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n    \n    for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    }\n\n    // Adjust the power of each unit in the list\n    for(var i=0; i<res.units.length; i++) {\n      res.units[i].power *= p;\n    }\n\n    if(res.value != null) {\n      res.value = pow(res.value, p);\n\n      // only allow numeric output, we don't want to return a Complex number\n      //if (!isNumeric(res.value)) {\n      //  res.value = NaN;\n      //}\n      // Update: Complex supported now\n    }\n    else {\n      res.value = null;\n    }\n\n    // Trigger lazy evaluation of the unit list\n    res.isUnitListSimplified = false;\n\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n  var getNumericIfUnitless = function(unit) {\n    if(unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    }\n    else {\n      return unit;\n    }\n  }\n    \n\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n  Unit.prototype.abs = function () {\n    // This gives correct, but unexpected, results for units with an offset.\n    // For example, abs(-283.15 degC) = -263.15 degC !!!\n    var ret = this.clone();\n    ret.value = abs(ret.value);\n\n    for(var i in ret.units) {\n      if(ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS[\"W\"];\n      }\n    }\n\n    return ret;\n  };\n\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n  Unit.prototype.to = function (valuelessUnit) {\n    var other;\n    var value = this.value == null ? this._normalize(1) : this.value;\n    if (typeof valuelessUnit === 'string') {\n      //other = new Unit(null, valuelessUnit);\n      other = Unit.parse(valuelessUnit);\n      if (!this.equalBase(other)) {\n        throw new Error('Units do not match');\n      }\n      if (other.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.isUnitListSimplified = true;\n      return other;\n    }\n    else if (valuelessUnit && valuelessUnit.isUnit) {\n      if (!this.equalBase(valuelessUnit)) {\n        throw new Error('Units do not match');\n      }\n      if (valuelessUnit.value !== null) {\n        throw new Error('Cannot convert to a unit with a value');\n      }\n      other = valuelessUnit.clone();\n      other.value = clone(value);\n      other.fixPrefix = true;\n      other.isUnitListSimplified = true;\n      return other;\n    }\n    else {\n      throw new Error('String or Unit expected as parameter');\n    }\n  };\n\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other = this;\n    if(valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    }\n\n    if(other._isDerived()) {\n      return other._denormalize(other.value);\n    }\n    else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.valueOf = Unit.prototype.toString;\n\n  /**\n   * Attempt to simplify the list of units for this unit according to the dimensions array and the current unit system. After the call, this Unit will contain a list of the \"best\" units for formatting.\n   * Intended to be evaluated lazily. You must set isUnitListSimplified = false before the call! After the call, isUnitListSimplified will be set to true.\n   */\n  Unit.prototype.simplifyUnitListLazy = function() {\n\n    if (this.isUnitListSimplified || this.value == null) {\n      return;\n    }\n\n    var proposedUnitList = [];\n\n    // Search for a matching base\n    var matchingBase;\n    for(var key in currentUnitSystem) {\n      if(this.hasBase(BASE_UNITS[key])) {\n        matchingBase = key;\n        break;\n      }\n    }\n\n    if(matchingBase === 'NONE')\n    {\n      this.units = [];\n    }\n    else {\n      var matchingUnit;\n      if(matchingBase) {\n        // Does the unit system have a matching unit?\n        if(currentUnitSystem.hasOwnProperty(matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n      var value;\n      var str;\n      if(matchingUnit) {\n        this.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      }\n      else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n        for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n          if(Math.abs(this.dimensions[i] || 0) > 1e-12) {\n            if(currentUnitSystem.hasOwnProperty(baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: this.dimensions[i] || 0\n              });\n            }\n            else {\n              missingBaseDim = true;\n            }\n          }\n        }\n\n        // Is the proposed unit list \"simpler\" than the existing one?\n        if(proposedUnitList.length < this.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          this.units = proposedUnitList;\n        }\n      }\n    }\n\n    this.isUnitListSimplified = true;\n  };\n\n  Unit.prototype.toSI = function() {\n\n    var ret = this.clone();\n\n    var proposedUnitList = [];\n\n    // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n    var missingBaseDim = false;\n    for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n      if(Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if(UNIT_SYSTEMS[\"si\"].hasOwnProperty(baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS[\"si\"][baseDim].unit,\n            prefix: UNIT_SYSTEMS[\"si\"][baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        }\n        else {\n          throw new Error(\"Cannot express custom unit \" + baseDim + \" in SI units\");\n        }\n      }\n    }\n\n    // Replace this unit list with the proposed list\n    ret.units = proposedUnitList;\n\n    ret.isUnitListSimplified = true;\n\n    return ret;\n  }\n\n  /**\n   * Get a string representation of the units of this Unit, without the value.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.formatUnits = function () {\n\n    // Lazy evaluation of the unit list\n    this.simplifyUnitListLazy();\n\n    var strNum = \"\";\n    var strDen = \"\";\n    var nNum = 0;\n    var nDen = 0;\n\n    for(var i=0; i<this.units.length; i++) {\n      if(this.units[i].power > 0) {\n        nNum++;\n        strNum += \" \" + this.units[i].prefix.name + this.units[i].unit.name;\n        if(Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += \"^\" + this.units[i].power;\n        }\n      }\n      else if(this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n\n    if(nDen > 0) {\n      for(var i=0; i<this.units.length; i++) {\n        if(this.units[i].power < 0) {\n          if(nNum > 0) {\n            strDen += \" \" + this.units[i].prefix.name + this.units[i].unit.name;\n            if(Math.abs(this.units[i].power + 1.0) > 1e-15) {\n              strDen += \"^\" + (-this.units[i].power);\n            }\n          }\n          else {\n            strDen += \" \" + this.units[i].prefix.name + this.units[i].unit.name;\n            strDen += \"^\" + (this.units[i].power);\n          }\n        }\n      }\n    }\n    // Remove leading \" \"\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1);\n\n    // Add parans for better copy/paste back into the eval, for example, or for better pretty print formatting\n    if(nNum > 1 && nDen > 0) {\n      strNum = \"(\" + strNum + \")\";\n    }\n    if(nDen > 1 && nNum > 0) {\n      strDen = \"(\" + strDen + \")\";\n    }\n\n    var str = strNum;\n    if(nNum > 0 && nDen > 0) {\n      str += \" / \";\n    }\n    str += strDen;\n\n    return str;\n  };\n\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n  Unit.prototype.format = function (options) {\n\n    // Simplfy the unit list, if necessary\n    this.simplifyUnitListLazy();\n\n    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n    var isImaginary = false;\n    var isReal = true;\n    if(typeof(this.value) !== 'undefined' && this.value !== null && this.value.isComplex) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(this.value.re) < 1e-14;\n      isReal = Math.abs(this.value.im) < 1e-14;\n    }\n    \n    for(var i in this.units) {\n      if(this.units[i].unit) {\n        if(this.units[i].unit.name === 'VA' && isImaginary) {\n          this.units[i].unit = UNITS[\"VAR\"];\n        }\n        else if(this.units[i].unit.name === 'VAR' && !isImaginary) {\n          this.units[i].unit = UNITS[\"VA\"];\n        }\n      }\n    }\n\n\n    // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n    if (this.units.length === 1 && !this.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        this.units[0].prefix = this._bestPrefix();\n      }\n    }\n\n\n    var value = this._denormalize(this.value);\n    var str = (this.value !== null) ? format(value, options || {}) : '';\n    var unitStr = this.formatUnits();\n    if(this.value && this.value.isComplex) {\n      str = \"(\" + str + \")\";    // Surround complex values with ( ) to enable better parsing \n    }\n    if(unitStr.length > 0 && str.length > 0) {\n      str += \" \";\n    }\n    str += unitStr;\n\n    return str;\n  };\n\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error(\"Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!\");\n    }\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error(\"Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!\");\n    }\n\n    // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n    var absValue = abs(this.value);\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if(bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix;    // Allow the original prefix\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n    for (var p in prefixes) {\n      if (prefixes.hasOwnProperty(p)) {\n        var prefix = prefixes[p];\n        if (prefix.scientific) {\n\n          var diff = Math.abs(\n              Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n\n          if (diff < bestDiff\n              || (diff === bestDiff && prefix.name.length < bestPrefix.name.length)) {\n                // choose the prefix with the smallest diff, or if equal, choose the one\n                // with the shortest name (can happen with SHORTLONG for example)\n                bestPrefix = prefix;\n                bestDiff = diff;\n          }\n        }\n      }\n    }\n\n    return bestPrefix;\n  };\n\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units. \n   *\n   *   Example:\n   *\n   *   var u = new Unit(1, 'm');\n   *   u.splitUnit(['feet', 'inch']);\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n  Unit.prototype.splitUnit = function(parts) {\n\n    var x = this.clone();\n    var ret = [];\n    for(var i=0; i<parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if(i==parts.length-1) break;\n\n      // Get the numeric value of this unit\n      var xNumeric = x.toNumeric();\n\n      // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n      var xRounded = round(xNumeric);\n      var xFixed;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      }\n      else {\n        xFixed = fix(x.toNumeric());\n      }\n\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    }\n\n    // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n    var testSum = 0;\n    for(var i=0; i<ret.length; i++) {\n      testSum = add(testSum, ret[i].value);\n    }\n    if(equal(testSum, this.value)) {\n      x.value = 0;\n    }\n\n    ret.push(x);\n\n    return ret;\n  };\n\n  var PREFIXES = {\n    NONE: {\n      '': {name: '', value: 1, scientific: true}\n    },\n    SHORT: {\n      '': {name: '', value: 1, scientific: true},\n\n      'da': {name: 'da', value: 1e1, scientific: false},\n      'h': {name: 'h', value: 1e2, scientific: false},\n      'k': {name: 'k', value: 1e3, scientific: true},\n      'M': {name: 'M', value: 1e6, scientific: true},\n      'G': {name: 'G', value: 1e9, scientific: true},\n      'T': {name: 'T', value: 1e12, scientific: true},\n      'P': {name: 'P', value: 1e15, scientific: true},\n      'E': {name: 'E', value: 1e18, scientific: true},\n      'Z': {name: 'Z', value: 1e21, scientific: true},\n      'Y': {name: 'Y', value: 1e24, scientific: true},\n\n      'd': {name: 'd', value: 1e-1, scientific: false},\n      'c': {name: 'c', value: 1e-2, scientific: false},\n      'm': {name: 'm', value: 1e-3, scientific: true},\n      'u': {name: 'u', value: 1e-6, scientific: true},\n      'n': {name: 'n', value: 1e-9, scientific: true},\n      'p': {name: 'p', value: 1e-12, scientific: true},\n      'f': {name: 'f', value: 1e-15, scientific: true},\n      'a': {name: 'a', value: 1e-18, scientific: true},\n      'z': {name: 'z', value: 1e-21, scientific: true},\n      'y': {name: 'y', value: 1e-24, scientific: true}\n    },\n    LONG: {\n      '': {name: '', value: 1, scientific: true},\n\n      'deca': {name: 'deca', value: 1e1, scientific: false},\n      'hecto': {name: 'hecto', value: 1e2, scientific: false},\n      'kilo': {name: 'kilo', value: 1e3, scientific: true},\n      'mega': {name: 'mega', value: 1e6, scientific: true},\n      'giga': {name: 'giga', value: 1e9, scientific: true},\n      'tera': {name: 'tera', value: 1e12, scientific: true},\n      'peta': {name: 'peta', value: 1e15, scientific: true},\n      'exa': {name: 'exa', value: 1e18, scientific: true},\n      'zetta': {name: 'zetta', value: 1e21, scientific: true},\n      'yotta': {name: 'yotta', value: 1e24, scientific: true},\n\n      'deci': {name: 'deci', value: 1e-1, scientific: false},\n      'centi': {name: 'centi', value: 1e-2, scientific: false},\n      'milli': {name: 'milli', value: 1e-3, scientific: true},\n      'micro': {name: 'micro', value: 1e-6, scientific: true},\n      'nano': {name: 'nano', value: 1e-9, scientific: true},\n      'pico': {name: 'pico', value: 1e-12, scientific: true},\n      'femto': {name: 'femto', value: 1e-15, scientific: true},\n      'atto': {name: 'atto', value: 1e-18, scientific: true},\n      'zepto': {name: 'zepto', value: 1e-21, scientific: true},\n      'yocto': {name: 'yocto', value: 1e-24, scientific: true}\n    },\n    SQUARED: {\n      '': {name: '', value: 1, scientific: true},\n\n      'da': {name: 'da', value: 1e2, scientific: false},\n      'h': {name: 'h', value: 1e4, scientific: false},\n      'k': {name: 'k', value: 1e6, scientific: true},\n      'M': {name: 'M', value: 1e12, scientific: true},\n      'G': {name: 'G', value: 1e18, scientific: true},\n      'T': {name: 'T', value: 1e24, scientific: true},\n      'P': {name: 'P', value: 1e30, scientific: true},\n      'E': {name: 'E', value: 1e36, scientific: true},\n      'Z': {name: 'Z', value: 1e42, scientific: true},\n      'Y': {name: 'Y', value: 1e48, scientific: true},\n\n      'd': {name: 'd', value: 1e-2, scientific: false},\n      'c': {name: 'c', value: 1e-4, scientific: false},\n      'm': {name: 'm', value: 1e-6, scientific: true},\n      'u': {name: 'u', value: 1e-12, scientific: true},\n      'n': {name: 'n', value: 1e-18, scientific: true},\n      'p': {name: 'p', value: 1e-24, scientific: true},\n      'f': {name: 'f', value: 1e-30, scientific: true},\n      'a': {name: 'a', value: 1e-36, scientific: true},\n      'z': {name: 'z', value: 1e-42, scientific: true},\n      'y': {name: 'y', value: 1e-48, scientific: true}\n    },\n    CUBIC: {\n      '': {name: '', value: 1, scientific: true},\n\n      'da': {name: 'da', value: 1e3, scientific: false},\n      'h': {name: 'h', value: 1e6, scientific: false},\n      'k': {name: 'k', value: 1e9, scientific: true},\n      'M': {name: 'M', value: 1e18, scientific: true},\n      'G': {name: 'G', value: 1e27, scientific: true},\n      'T': {name: 'T', value: 1e36, scientific: true},\n      'P': {name: 'P', value: 1e45, scientific: true},\n      'E': {name: 'E', value: 1e54, scientific: true},\n      'Z': {name: 'Z', value: 1e63, scientific: true},\n      'Y': {name: 'Y', value: 1e72, scientific: true},\n\n      'd': {name: 'd', value: 1e-3, scientific: false},\n      'c': {name: 'c', value: 1e-6, scientific: false},\n      'm': {name: 'm', value: 1e-9, scientific: true},\n      'u': {name: 'u', value: 1e-18, scientific: true},\n      'n': {name: 'n', value: 1e-27, scientific: true},\n      'p': {name: 'p', value: 1e-36, scientific: true},\n      'f': {name: 'f', value: 1e-45, scientific: true},\n      'a': {name: 'a', value: 1e-54, scientific: true},\n      'z': {name: 'z', value: 1e-63, scientific: true},\n      'y': {name: 'y', value: 1e-72, scientific: true}\n    },\n    BINARY_SHORT: {\n      '': {name: '', value: 1, scientific: true},\n      'k': {name: 'k', value: 1e3, scientific: true},\n      'M': {name: 'M', value: 1e6, scientific: true},\n      'G': {name: 'G', value: 1e9, scientific: true},\n      'T': {name: 'T', value: 1e12, scientific: true},\n      'P': {name: 'P', value: 1e15, scientific: true},\n      'E': {name: 'E', value: 1e18, scientific: true},\n      'Z': {name: 'Z', value: 1e21, scientific: true},\n      'Y': {name: 'Y', value: 1e24, scientific: true},\n\n      'Ki': {name: 'Ki', value: 1024, scientific: true},\n      'Mi': {name: 'Mi', value: Math.pow(1024, 2), scientific: true},\n      'Gi': {name: 'Gi', value: Math.pow(1024, 3), scientific: true},\n      'Ti': {name: 'Ti', value: Math.pow(1024, 4), scientific: true},\n      'Pi': {name: 'Pi', value: Math.pow(1024, 5), scientific: true},\n      'Ei': {name: 'Ei', value: Math.pow(1024, 6), scientific: true},\n      'Zi': {name: 'Zi', value: Math.pow(1024, 7), scientific: true},\n      'Yi': {name: 'Yi', value: Math.pow(1024, 8), scientific: true}\n    },\n    BINARY_LONG: {\n      '': {name: '', value: 1, scientific: true},\n      'kilo': {name: 'kilo', value: 1e3, scientific: true},\n      'mega': {name: 'mega', value: 1e6, scientific: true},\n      'giga': {name: 'giga', value: 1e9, scientific: true},\n      'tera': {name: 'tera', value: 1e12, scientific: true},\n      'peta': {name: 'peta', value: 1e15, scientific: true},\n      'exa': {name: 'exa', value: 1e18, scientific: true},\n      'zetta': {name: 'zetta', value: 1e21, scientific: true},\n      'yotta': {name: 'yotta', value: 1e24, scientific: true},\n\n      'kibi': {name: 'kibi', value: 1024, scientific: true},\n      'mebi': {name: 'mebi', value: Math.pow(1024, 2), scientific: true},\n      'gibi': {name: 'gibi', value: Math.pow(1024, 3), scientific: true},\n      'tebi': {name: 'tebi', value: Math.pow(1024, 4), scientific: true},\n      'pebi': {name: 'pebi', value: Math.pow(1024, 5), scientific: true},\n      'exi': {name: 'exi', value: Math.pow(1024, 6), scientific: true},\n      'zebi': {name: 'zebi', value: Math.pow(1024, 7), scientific: true},\n      'yobi': {name: 'yobi', value: Math.pow(1024, 8), scientific: true}\n    },\n    BTU: {\n      '':   {name: '',   value: 1,   scientific: true},\n      'MM': {name: 'MM', value: 1e6, scientific: true}\n    }\n  };\n\n  // Add a prefix list for both short and long prefixes (for ohm in particular, since Mohm and megaohm are both acceptable):\n  PREFIXES.SHORTLONG = {};\n  for (var key in PREFIXES.SHORT) {\n    if(PREFIXES.SHORT.hasOwnProperty(key)) {\n      PREFIXES.SHORTLONG[key] = PREFIXES.SHORT[key];\n    }\n  }\n  for (var key in PREFIXES.LONG) {\n    if(PREFIXES.LONG.hasOwnProperty(key)) {\n      PREFIXES.SHORTLONG[key] = PREFIXES.LONG[key];\n    }\n  }\n\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = [\"MASS\", \"LENGTH\", \"TIME\", \"CURRENT\", \"TEMPERATURE\", \"LUMINOUS_INTENSITY\", \"AMOUNT_OF_SUBSTANCE\", \"ANGLE\", \"BIT\"];\n\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n\n  for(var key in BASE_UNITS) {\n    BASE_UNITS[key].key = key;\n  }\n\n  var BASE_UNIT_NONE = {};\n\n  var UNIT_NONE = {name: '', base: BASE_UNIT_NONE, value: 1, offset: 0, dimensions: [0,0,0,0,0,0,0,0,0]};\n\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    'in': {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    }, // 1/1000 inch\n\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    }, // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    }, // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    }, // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    }, // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    }, // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    }, // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    }, // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    }, // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    }, // 10000 m2\n\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    }, // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    }, // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    }, // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    }, // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    }, // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    }, // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    }, // 15 mL\n    //{name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },  // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },  // 0.05 mL = 5e-8 m3\n\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    }, // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },  // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    }, // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    }, // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    }, // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    }, // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    }, // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    }, // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    }, // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    }, // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    }, // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    }, // 238.4810 L\n\n    //{name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },  // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    }, // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    }, // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    }, // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    }, // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    }, // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    }, // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    }, // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    }, // 158.9873 L\n    //{name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7*86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800, //1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600, //Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000, //Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000, //Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000, //Julian millennium\n      offset: 0\n    },\n\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null, // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null, // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null, // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null, // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null, // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    \n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) / 1.8\n    // K(R) = °R / 1.8\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.NONE,\n      value: 1 / 1.8,\n      offset: 0\n    },\n\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.NONE,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    //{name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    //{name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n\t\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.NONE,\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n\n\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    \n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,    // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  };\n\n  // aliases (formerly plurals)\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n\t\n    kips: 'kip',\n\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n\n    hertz: 'hertz',\n\n    radians: 'rad',\n    degree: 'deg',\n    degrees: 'deg',\n    gradian: 'grad',\n    gradians: 'grad',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n\n    amperes: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole'\n\n  };\n\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n  function calculateAngleValues (config) {\n    if (config.number === 'BigNumber') {\n      var pi = constants.pi(type.BigNumber);\n      UNITS.rad.value = new type.BigNumber(1);\n      UNITS.deg.value = pi.div(180);        // 2 * pi / 360;\n      UNITS.grad.value = pi.div(200);       // 2 * pi / 400;\n      UNITS.cycle.value = pi.times(2);      // 2 * pi\n      UNITS.arcsec.value = pi.div(648000);  // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = pi.div(10800);   // 2 * pi / 360 / 60\n    }\n    else { // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180;        // 2 * pi / 360;\n      UNITS.grad.value = Math.PI / 200;       // 2 * pi / 400;\n      UNITS.cycle.value = Math.PI * 2;        // 2 * pi\n      UNITS.arcsec.value = Math.PI / 648000;  // 2 * pi / 360 / 3600;\n      UNITS.arcmin.value = Math.PI / 10800;   // 2 * pi / 360 / 60;\n    }\n  }\n\n  // apply the angle values now\n  calculateAngleValues(config);\n\n  // recalculate the values on change of configuration\n  math.on('config', function (curr, prev) {\n    if (curr.number !== prev.number) {\n      calculateAngleValues(curr);\n    }\n  });\n\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE:                  {unit: UNIT_NONE, prefix: PREFIXES.NONE['']},\n      LENGTH:                {unit: UNITS.m,   prefix: PREFIXES.SHORT['']},\n      MASS:                  {unit: UNITS.g,   prefix: PREFIXES.SHORT['k']}, \n      TIME:                  {unit: UNITS.s,   prefix: PREFIXES.SHORT['']}, \n      CURRENT:               {unit: UNITS.A,   prefix: PREFIXES.SHORT['']}, \n      TEMPERATURE:           {unit: UNITS.K,   prefix: PREFIXES.SHORT['']}, \n      LUMINOUS_INTENSITY:    {unit: UNITS.cd,  prefix: PREFIXES.SHORT['']}, \n      AMOUNT_OF_SUBSTANCE:   {unit: UNITS.mol, prefix: PREFIXES.SHORT['']}, \n      ANGLE:                 {unit: UNITS.rad, prefix: PREFIXES.SHORT['']}, \n      BIT:                   {unit: UNITS.bit, prefix: PREFIXES.SHORT['']}, \n\n      // Derived units\n      FORCE:                 {unit: UNITS.N,   prefix: PREFIXES.SHORT['']}, \n      ENERGY:                {unit: UNITS.J,   prefix: PREFIXES.SHORT['']},\n      POWER:                 {unit: UNITS.W,   prefix: PREFIXES.SHORT['']},\n      PRESSURE:              {unit: UNITS.Pa,  prefix: PREFIXES.SHORT['']},\n      ELECTRIC_CHARGE:       {unit: UNITS.C,   prefix: PREFIXES.SHORT['']},\n      ELECTRIC_CAPACITANCE:  {unit: UNITS.F,   prefix: PREFIXES.SHORT['']},\n      ELECTRIC_POTENTIAL:    {unit: UNITS.V,   prefix: PREFIXES.SHORT['']},\n      ELECTRIC_RESISTANCE:   {unit: UNITS.ohm, prefix: PREFIXES.SHORT['']},\n      ELECTRIC_INDUCTANCE:   {unit: UNITS.H,   prefix: PREFIXES.SHORT['']},\n      ELECTRIC_CONDUCTANCE:  {unit: UNITS.S,   prefix: PREFIXES.SHORT['']},\n      MAGNETIC_FLUX:         {unit: UNITS.Wb,  prefix: PREFIXES.SHORT['']},\n      MAGNETIC_FLUX_DENSITY: {unit: UNITS.T,   prefix: PREFIXES.SHORT['']},\n      FREQUENCY:             {unit: UNITS.Hz,  prefix: PREFIXES.SHORT['']}\n    }\n  };\n\n  // Clone to create the other unit systems\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {unit: UNITS.m,   prefix: PREFIXES.SHORT['c']};\n  UNIT_SYSTEMS.cgs.MASS =   {unit: UNITS.g,   prefix: PREFIXES.SHORT['']};\n  UNIT_SYSTEMS.cgs.FORCE =  {unit: UNITS.dyn, prefix: PREFIXES.SHORT['']};\n  UNIT_SYSTEMS.cgs.ENERGY = {unit: UNITS.erg, prefix: PREFIXES.NONE['']};\n  // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n  \n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH =      {unit: UNITS.ft,   prefix: PREFIXES.NONE['']};\n  UNIT_SYSTEMS.us.MASS =        {unit: UNITS.lbm,  prefix: PREFIXES.NONE['']};\n  UNIT_SYSTEMS.us.TEMPERATURE = {unit: UNITS.degF, prefix: PREFIXES.NONE['']};\n  UNIT_SYSTEMS.us.FORCE =       {unit: UNITS.lbf,  prefix: PREFIXES.NONE['']};\n  UNIT_SYSTEMS.us.ENERGY =      {unit: UNITS.BTU,  prefix: PREFIXES.BTU['']};\n  UNIT_SYSTEMS.us.POWER =       {unit: UNITS.hp,   prefix: PREFIXES.NONE['']};\n  UNIT_SYSTEMS.us.PRESSURE =    {unit: UNITS.psi,  prefix: PREFIXES.NONE['']};\n\n  // Add additional unit systems here.\n\n\n\n  // Choose a unit system to seed the auto unit system.\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n\n  // Set the current unit system\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n  Unit.setUnitSystem = function(name) {\n    if(UNIT_SYSTEMS.hasOwnProperty(name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    }\n    else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n  Unit.getUnitSystem = function() {\n    for(var key in UNIT_SYSTEMS) {\n      if(UNIT_SYSTEMS[key] === currentUnitSystem) {\n        return key;\n      }\n    }\n  };\n\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n  Unit.typeConverters = {\n    BigNumber: function (x) {\n      return new type.BigNumber(x + ''); // stringify to prevent constructor error\n    },\n\n    Fraction: function (x) {\n      return new type.Fraction(x);\n    },\n\n    Complex: function (x) {\n      return x;\n    },\n\n    number: function (x) {\n      return x;\n    }\n  };\n\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n\n    return Unit.typeConverters[type];\n  };\n\n  // Add dimensions to each built-in unit\n  for (var key in UNITS) {\n    var unit = UNITS[key];\n    unit.dimensions = unit.base.dimensions;\n  }    \n\n  // Create aliases\n  for (var name in ALIASES) {\n    if(ALIASES.hasOwnProperty(name)) {\n      var unit = UNITS[ALIASES[name]];\n      var alias = {};\n      for(var key in unit) {\n        if(unit.hasOwnProperty(key)) {\n          alias[key] = unit[key];\n        }\n      }\n      alias.name = name;\n      UNITS[name] = alias;\n    }\n  }\n\n  function assertUnitNameIsValid(name) {\n    for(var i=0; i<name.length; i++) {\n      var c = name.charAt(i);\n       \n      var isValidAlpha = function (p) {\n        return /^[a-zA-Z]$/.test(p);\n      };\n\n      var isDigit = function (c) {\n        return (c >= '0' && c <= '9');\n      }\n\n      if(i === 0 && !isValidAlpha(c))\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n\n      if(i > 0 && !( isValidAlpha(c)\n                  || isDigit(c)))\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n\n    }\n  }\n\n  /**\n   * Wrapper around createUnitSingle.\n   * Example: \n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  }, \n   *  {\n   *    override: true;\n   *  });\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n  Unit.createUnit = function(obj, options) {\n    \n    if(typeof(obj) !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    }\n\n    // Remove all units and aliases we are overriding\n    if(options && options.override) {\n      for(var key in obj) {\n        if(obj.hasOwnProperty(key)) {\n          Unit.deleteUnit(key);\n        }\n        if(obj[key].aliases) {\n          for(var i=0; i<obj[key].aliases.length; i++) {\n            Unit.deleteUnit(obj[key].aliases[i]);\n          }\n        }\n      }\n    }\n\n    // TODO: traverse multiple times until all units have been added\n    var lastUnit;\n    for(var key in obj) {\n      if(obj.hasOwnProperty(key)) {\n        lastUnit = Unit.createUnitSingle(key, obj[key]);\n      }\n    }\n    return lastUnit;\n  };\n\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example: \n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\n   * @param {Object} options   (optional) An object containing any of the following properties:\n   *     prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15 and the offset for farhenheit is 459.67. Default is 0.\n   *\n   * @return {Unit} \n   */\n  Unit.createUnitSingle = function(name, obj, options) {\n\n    if(typeof(obj) === 'undefined' || obj === null) {\n      obj = {};\n    }\n    \n    if(typeof(name) !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    }\n   \n    // Check collisions with existing units\n    if(UNITS.hasOwnProperty(name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    }\n\n    // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n    assertUnitNameIsValid(name);\n\n    var defUnit = null;   // The Unit from which the new unit will be created.\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    if(obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    }\n    else if(typeof(obj) === 'string') {\n      if(obj !== '') {\n        definition = obj;\n      }\n    }\n    else if(typeof(obj) === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes; \n      offset = obj.offset;\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    }\n    else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n\n    if(aliases) {\n      for (var i=0; i<aliases.length; i++) {\n        if(UNITS.hasOwnProperty(aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n\n    if(definition && typeof(definition) === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {allowNoUnits: true});\n      }\n      catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw(ex);\n      }\n    }\n    else if(definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n\n    aliases = aliases || [];\n    offset = offset || 0;\n    if(prefixes && prefixes.toUpperCase) \n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    else\n      prefixes = PREFIXES.NONE;\n\n\n    // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n    var newUnit = {};\n    if(!defUnit) {\n      // Add a new base dimension\n      var baseName = name + \"_STUFF\";   // foo --> foo_STUFF, or the essence of foo\n      if(BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n      BASE_DIMENSIONS.push(baseName);\n\n      // Push 0 onto existing base units\n      for(var b in BASE_UNITS) {\n        if(BASE_UNITS.hasOwnProperty(b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length-1] = 0;\n        }\n      }\n\n      // Add the new base unit\n      var newBaseUnit = { dimensions: [] };\n      for(var i=0; i<BASE_DIMENSIONS.length; i++) {\n        newBaseUnit.dimensions[i] = 0;\n      }\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length-1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n       \n      newUnit = {\n        name: name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset,\n        base: baseName\n      };\n\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n\n    }\n    else {\n\n      newUnit = {\n        name: name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes: prefixes,\n        offset: offset,\n      };\n      \n      // Create a new base if no matching base exists\n      var anyMatch = false;\n      for(var i in BASE_UNITS) {\n        if(BASE_UNITS.hasOwnProperty(i)) {\n          var match = true;\n          for(var j=0; j<BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[i].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n          if(match) {\n            anyMatch = true;\n            break;\n          }\n        }\n      }\n      if(!anyMatch) {\n        var baseName = name + \"_STUFF\";   // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n        var newBaseUnit = { dimensions: defUnit.dimensions.slice(0) };\n        newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = newBaseUnit;\n\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n\n        newUnit.base = baseName;\n      }\n    }\n\n    Unit.UNITS[name] = newUnit;\n\n    for (var i=0; i<aliases.length; i++) {\n      var aliasName = aliases[i];\n      var alias = {};\n      for(var key in newUnit) {\n        if(newUnit.hasOwnProperty(key)) {\n          alias[key] = newUnit[key];\n        }\n      }\n      alias.name = aliasName;\n      Unit.UNITS[aliasName] = alias;\n    }\n\n    return new Unit(null, name);\n  };\n\n  Unit.deleteUnit = function(name) {\n    delete Unit.UNITS[name];\n  };\n\n  // expose arrays with prefixes, dimensions, units, systems\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n\n  return Unit;\n}\n\nexports.name = 'Unit';\nexports.path = 'type';\nexports.factory = factory;\nexports.math = true; // request access to the math namespace\n","'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   *\n   * Syntax:\n   *\n   *     math.createUnit({\n   *       baseUnit1: {\n   *         aliases: [string, ...]\n   *         prefixes: object\n   *       },\n   *       unit2: {\n   *         definition: string,\n   *         aliases: [string, ...]\n   *         prefixes: object,\n   *         offset: number\n   *       },\n   *       unit3: string    // Shortcut\n   *     })\n   *\n   *     // Another shortcut:\n   *     math.createUnit(string, unit : string, [object])\n   *\n   * Examples: \n   *\n   *     math.createUnit('foo');\n   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']});\n   *     math.createUnit('mph', '1 mile/hour');\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\n   * @param {Object} options   (optional) An object containing any of the following properties:\n   *     prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @return {Unit} The new unit\n   */\n  var createUnit = typed('createUnit', {\n\n    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.\n    'Object, Object': function(obj, options) {\n      return type.Unit.createUnit(obj, options);\n    },\n\n    // Same as above but without the options.\n    'Object': function(obj) {\n      return type.Unit.createUnit(obj, {});\n    },\n\n    // Shortcut method for creating one unit.\n    'string, Unit | string | Object, Object': function (name, def, options) {\n      var obj = {};\n      obj[name] = def;\n      return type.Unit.createUnit(obj, options);\n    },\n\n    // Same as above but without the options.\n    'string, Unit | string | Object': function (name, def) {\n      var obj = {};\n      obj[name] = def;\n      return type.Unit.createUnit(obj, {});\n    },\n\n    // Without a definition, creates a base unit.\n    'string': function (name) {\n      var obj = {};\n      obj[name] = {};\n      return type.Unit.createUnit(obj, {});\n    },\n  });\n\n  return createUnit;\n}\n\nexports.name = 'createUnit';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n\n  /**\n   * Split a unit in an array of units whose sum is equal to the original unit.\n   *\n   * Syntax:\n   *\n   *     splitUnit(unit: Unit, parts: Array.<Unit>)\n   *\n   * Example:\n   *\n   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch']);\n   *     // [ 3 feet, 3.3700787401575 inch ]\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @param {Array} [parts] An array of strings or valueless units.\n   * @return {Array} An array of units.\n   */\n  var splitUnit = typed('splitUnit', {\n    'Unit, Array': function(unit, parts) {\n      return unit.splitUnit(parts);\n    }\n  });\n\n  return splitUnit;\n\n}\n\nexports.name = 'splitUnit';\nexports.factory = factory;\n","'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory (type, config, load, typed) {\n  /**\n   * Create a unit. Depending on the passed arguments, the function\n   * will create and return a new math.type.Unit object.\n   * When a matrix is provided, all elements will be converted to units.\n   *\n   * Syntax:\n   *\n   *     math.unit(unit : string)\n   *     math.unit(value : number, unit : string)\n   *\n   * Examples:\n   *\n   *    var a = math.unit(5, 'cm');    // returns Unit 50 mm\n   *    var b = math.unit('23 kg');    // returns Unit 23 kg\n   *    a.to('m');                     // returns Unit 0.05 m\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n   *\n   * @param {* | Array | Matrix} args   A number and unit.\n   * @return {Unit | Array | Matrix}    The created unit\n   */\n\n  var unit = typed('unit', {\n    'Unit': function (x) {\n      return x.clone();\n    },\n\n    'string': function (x) {\n      if (type.Unit.isValuelessUnit(x)) {\n        return new type.Unit(null, x); // a pure unit\n      }\n\n      return type.Unit.parse(x); // a unit with value, like '5cm'\n    },\n\n    'number | BigNumber | Fraction | Complex, string': function (value, unit) {\n      return new type.Unit(value, unit);\n    },\n\n    'Array | Matrix': function (x) {\n      return deepMap(x, unit);\n    }\n  });\n\n  unit.toTex = {\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)'\n  };\n\n  return unit;\n}\n\nexports.name = 'unit';\nexports.factory = factory;\n","module.exports = [\n  // type\n  require('./Unit'),\n\n  // construction function\n  require('./function/unit'),\n\n  // create new units\n  require('./function/createUnit'),\n\n  // split units\n  require('./function/splitUnit'),\n\n  // physical constants\n  require('./physicalConstants')\n];\n","var lazy = require('../../utils/object').lazy;\n\n\nfunction factory (type, config, load, typed, math) {\n\n  // helper function to create a unit with a fixed prefix\n  function fixedUnit(str) {\n    var unit = type.Unit.parse(str);\n    unit.fixPrefix = true;\n    return unit;\n  }\n\n  // Source: http://www.wikiwand.com/en/Physical_constant\n\n  // Universal constants\n  setLazyConstant(math, 'speedOfLight',         function () {return fixedUnit('299792458 m s^-1')});\n  setLazyConstant(math, 'gravitationConstant',  function () {return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2')});\n  setLazyConstant(math, 'planckConstant',       function () {return fixedUnit('6.626069311e-34 J s')});\n  setLazyConstant(math, 'reducedPlanckConstant',function () {return fixedUnit('1.05457172647e-34 J s')});\n\n  // Electromagnetic constants\n  setLazyConstant(math, 'magneticConstant',          function () {return fixedUnit('1.2566370614e-6 N A^-2')});\n  setLazyConstant(math, 'electricConstant',          function () {return fixedUnit('8.854187817e-12 F m^-1')});\n  setLazyConstant(math, 'vacuumImpedance',           function () {return fixedUnit('376.730313461 ohm')});\n  setLazyConstant(math, 'coulomb',                   function () {return fixedUnit('8.9875517873681764e9 N m^2 C^-2')});\n  setLazyConstant(math, 'elementaryCharge',          function () {return fixedUnit('1.60217656535e-19 C')});\n  setLazyConstant(math, 'bohrMagneton',              function () {return fixedUnit('9.2740096820e-24 J T^-1')});\n  setLazyConstant(math, 'conductanceQuantum',        function () {return fixedUnit('7.748091734625e-5 S')});\n  setLazyConstant(math, 'inverseConductanceQuantum', function () {return fixedUnit('12906.403721742 ohm')});\n  setLazyConstant(math, 'magneticFluxQuantum',       function () {return fixedUnit('2.06783375846e-15 Wb')});\n  setLazyConstant(math, 'nuclearMagneton',           function () {return fixedUnit('5.0507835311e-27 J T^-1')});\n  setLazyConstant(math, 'klitzing',                  function () {return fixedUnit('25812.807443484 ohm')});\n  //setLazyConstant(math, 'josephson',                 function () {return fixedUnit('4.8359787011e-14 Hz V^-1')});  // TODO: support for Hz needed\n\n  // Atomic and nuclear constants\n  setLazyConstant(math, 'bohrRadius',              function () {return fixedUnit('5.291772109217e-11 m')});\n  setLazyConstant(math, 'classicalElectronRadius', function () {return fixedUnit('2.817940326727e-15 m')});\n  setLazyConstant(math, 'electronMass',            function () {return fixedUnit('9.1093829140e-31 kg')});\n  setLazyConstant(math, 'fermiCoupling',           function () {return fixedUnit('1.1663645e-5 GeV^-2')});\n  setLazyConstant(math, 'fineStructure',           function () {return 7.297352569824e-3});\n  setLazyConstant(math, 'hartreeEnergy',           function () {return fixedUnit('4.3597443419e-18 J')});\n  setLazyConstant(math, 'protonMass',              function () {return fixedUnit('1.67262177774e-27 kg')});\n  setLazyConstant(math, 'deuteronMass',            function () {return fixedUnit('3.3435830926e-27 kg')});\n  setLazyConstant(math, 'neutronMass',             function () {return fixedUnit('1.6749271613e-27 kg')});\n  setLazyConstant(math, 'quantumOfCirculation',    function () {return fixedUnit('3.636947552024e-4 m^2 s^-1')});\n  setLazyConstant(math, 'rydberg',                 function () {return fixedUnit('10973731.56853955 m^-1')});\n  setLazyConstant(math, 'thomsonCrossSection',     function () {return fixedUnit('6.65245873413e-29 m^2')});\n  setLazyConstant(math, 'weakMixingAngle',         function () {return 0.222321});\n  setLazyConstant(math, 'efimovFactor',            function () {return 22.7});\n\n  // Physico-chemical constants\n  setLazyConstant(math, 'atomicMass',          function () {return fixedUnit('1.66053892173e-27 kg')});\n  setLazyConstant(math, 'avogadro',            function () {return fixedUnit('6.0221412927e23 mol^-1')});\n  setLazyConstant(math, 'boltzmann',           function () {return fixedUnit('1.380648813e-23 J K^-1')});\n  setLazyConstant(math, 'faraday',             function () {return fixedUnit('96485.336521 C mol^-1')});\n  setLazyConstant(math, 'firstRadiation',      function () {return fixedUnit('3.7417715317e-16 W m^2')});\n  // setLazyConstant(math, 'spectralRadiance',   function () {return fixedUnit('1.19104286953e-16 W m^2 sr^-1')}); // TODO spectralRadiance\n  setLazyConstant(math, 'loschmidt',           function () {return fixedUnit('2.686780524e25 m^-3')});\n  setLazyConstant(math, 'gasConstant',         function () {return fixedUnit('8.314462175 J K^-1 mol^-1')});\n  setLazyConstant(math, 'molarPlanckConstant', function () {return fixedUnit('3.990312717628e-10 J s mol^-1')});\n  setLazyConstant(math, 'molarVolume',         function () {return fixedUnit('2.241396820e-10 m^3 mol^-1')});\n  setLazyConstant(math, 'sackurTetrode',       function () {return -1.164870823});\n  setLazyConstant(math, 'secondRadiation',     function () {return fixedUnit('1.438777013e-2 m K')});\n  setLazyConstant(math, 'stefanBoltzmann',     function () {return fixedUnit('5.67037321e-8 W m^-2 K^-4')});\n  setLazyConstant(math, 'wienDisplacement',    function () {return fixedUnit('2.897772126e-3 m K')});\n\n  // Adopted values\n  setLazyConstant(math, 'molarMass',         function () {return fixedUnit('1e-3 kg mol^-1')});\n  setLazyConstant(math, 'molarMassC12',      function () {return fixedUnit('1.2e-2 kg mol^-1')});\n  setLazyConstant(math, 'gravity',           function () {return fixedUnit('9.80665 m s^-2')});\n  // atm is defined in Unit.js\n\n  // Natural units\n  setLazyConstant(math, 'planckLength',      function () {return fixedUnit('1.61619997e-35 m')});\n  setLazyConstant(math, 'planckMass',        function () {return fixedUnit('2.1765113e-8 kg')});\n  setLazyConstant(math, 'planckTime',        function () {return fixedUnit('5.3910632e-44 s')});\n  setLazyConstant(math, 'planckCharge',      function () {return fixedUnit('1.87554595641e-18 C')});\n  setLazyConstant(math, 'planckTemperature', function () {return fixedUnit('1.41683385e+32 K')});\n\n}\n\n// create a lazy constant in both math and mathWithTransform\nfunction setLazyConstant (math, name, resolver) {\n  lazy(math, name,  resolver);\n  lazy(math.expression.mathWithTransform, name,  resolver);\n}\n\nexports.factory = factory;\nexports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed\nexports.math = true;   // request access to the math namespace\n","'use strict';\n\nvar number = require('./number');\nvar string = require('./string');\nvar object = require('./object');\nvar types = require('./types');\n\nvar DimensionError = require('../error/DimensionError');\nvar IndexError = require('../error/IndexError');\n\n/**\n * Calculate the size of a multi dimensional array.\n * This function checks the size of the first entry, it does not validate\n * whether all dimensions match. (use function `validate` for that)\n * @param {Array} x\n * @Return {Number[]} size\n */\nexports.size = function (x) {\n  var s = [];\n\n  while (Array.isArray(x)) {\n    s.push(x.length);\n    x = x[0];\n  }\n\n  return s;\n};\n\n/**\n * Recursively validate whether each element in a multi dimensional array\n * has a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @param {number} dim   Current dimension\n * @throws DimensionError\n * @private\n */\nfunction _validate(array, size, dim) {\n  var i;\n  var len = array.length;\n\n  if (len != size[dim]) {\n    throw new DimensionError(len, size[dim]);\n  }\n\n  if (dim < size.length - 1) {\n    // recursively validate each child array\n    var dimNext = dim + 1;\n    for (i = 0; i < len; i++) {\n      var child = array[i];\n      if (!Array.isArray(child)) {\n        throw new DimensionError(size.length - 1, size.length, '<');\n      }\n      _validate(array[i], size, dimNext);\n    }\n  }\n  else {\n    // last dimension. none of the childs may be an array\n    for (i = 0; i < len; i++) {\n      if (Array.isArray(array[i])) {\n        throw new DimensionError(size.length + 1, size.length, '>');\n      }\n    }\n  }\n}\n\n/**\n * Validate whether each element in a multi dimensional array has\n * a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @throws DimensionError\n */\nexports.validate = function(array, size) {\n  var isScalar = (size.length == 0);\n  if (isScalar) {\n    // scalar\n    if (Array.isArray(array)) {\n      throw new DimensionError(array.length, 0);\n    }\n  }\n  else {\n    // array\n    _validate(array, size, 0);\n  }\n};\n\n/**\n * Test whether index is an integer number with index >= 0 and index < length\n * when length is provided\n * @param {number} index    Zero-based index\n * @param {number} [length] Length of the array\n */\nexports.validateIndex = function(index, length) {\n  if (!number.isNumber(index) || !number.isInteger(index)) {\n    throw new TypeError('Index must be an integer (value: ' + index + ')');\n  }\n  if (index < 0 || (typeof length === 'number' && index >= length)) {\n    throw new IndexError(index, length);\n  }\n};\n\n// a constant used to specify an undefined defaultValue\nexports.UNINITIALIZED = {};\n\n/**\n * Resize a multi dimensional array. The resized array is returned.\n * @param {Array} array         Array to be resized\n * @param {Array.<number>} size Array with the size of each dimension\n * @param {*} [defaultValue=0]  Value to be filled in in new entries,\n *                              zero by default. To leave new entries undefined,\n *                              specify array.UNINITIALIZED as defaultValue\n * @return {Array} array         The resized array\n */\nexports.resize = function(array, size, defaultValue) {\n  // TODO: add support for scalars, having size=[] ?\n\n  // check the type of the arguments\n  if (!Array.isArray(array) || !Array.isArray(size)) {\n    throw new TypeError('Array expected');\n  }\n  if (size.length === 0) {\n    throw new Error('Resizing to scalar is not supported');\n  }\n\n  // check whether size contains positive integers\n  size.forEach(function (value) {\n    if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {\n      throw new TypeError('Invalid size, must contain positive integers ' +\n          '(size: ' + string.format(size) + ')');\n    }\n  });\n\n  // recursively resize the array\n  var _defaultValue = (defaultValue !== undefined) ? defaultValue : 0;\n  _resize(array, size, 0, _defaultValue);\n\n  return array;\n};\n\n/**\n * Recursively resize a multi dimensional array\n * @param {Array} array         Array to be resized\n * @param {number[]} size       Array with the size of each dimension\n * @param {number} dim          Current dimension\n * @param {*} [defaultValue]    Value to be filled in in new entries,\n *                              undefined by default.\n * @private\n */\nfunction _resize (array, size, dim, defaultValue) {\n  var i;\n  var elem;\n  var oldLen = array.length;\n  var newLen = size[dim];\n  var minLen = Math.min(oldLen, newLen);\n\n  // apply new length\n  array.length = newLen;\n\n  if (dim < size.length - 1) {\n    // non-last dimension\n    var dimNext = dim + 1;\n\n    // resize existing child arrays\n    for (i = 0; i < minLen; i++) {\n      // resize child array\n      elem = array[i];\n      if (!Array.isArray(elem)) {\n        elem = [elem]; // add a dimension\n        array[i] = elem;\n      }\n      _resize(elem, size, dimNext, defaultValue);\n    }\n\n    // create new child arrays\n    for (i = minLen; i < newLen; i++) {\n      // get child array\n      elem = [];\n      array[i] = elem;\n\n      // resize new child array\n      _resize(elem, size, dimNext, defaultValue);\n    }\n  }\n  else {\n    // last dimension\n\n    // remove dimensions of existing values\n    for (i = 0; i < minLen; i++) {\n      while (Array.isArray(array[i])) {\n        array[i] = array[i][0];\n      }\n    }\n\n    if(defaultValue !== exports.UNINITIALIZED) {\n      // fill new elements with the default value\n      for (i = minLen; i < newLen; i++) {\n        array[i] = defaultValue;\n      }\n    }\n  }\n}\n\n/**\n * Re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n *\n * @throws {DimensionError}       If the product of the new dimension sizes does\n *                                not equal that of the old ones\n */\nexports.reshape = function(array, sizes) {\n  var flatArray = exports.flatten(array);\n  var newArray;\n\n  var product = function (arr) {\n    return arr.reduce(function (prev, curr) {\n      return prev * curr;\n    });\n  };\n\n  if (!Array.isArray(array) || !Array.isArray(sizes)) {\n    throw new TypeError('Array expected');\n  }\n\n  if (sizes.length === 0) {\n    throw new DimensionError(0, product(exports.size(array)), '!=');\n  }\n\n  try {\n    newArray  = _reshape(flatArray, sizes);\n  } catch (e) {\n    if (e instanceof DimensionError) {\n      throw new DimensionError(\n        product(sizes),\n        product(exports.size(array)),\n        '!='\n      );\n    }\n    throw e;\n  }\n\n  if (flatArray.length > 0) {\n    throw new DimensionError(\n      product(sizes),\n      product(exports.size(array)),\n      '!='\n    );\n  }\n\n  return newArray;\n};\n\n/**\n * Recursively re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n *\n * @throws {DimensionError}       If the product of the new dimension sizes does\n *                                not equal that of the old ones\n */\nfunction _reshape(array, sizes) {\n  var accumulator = [];\n  var i;\n\n  if (sizes.length === 0) {\n    if (array.length === 0) {\n      throw new DimensionError(null, null, '!=');\n    }\n    return array.shift();\n  }\n  for (i = 0; i < sizes[0]; i += 1) {\n    accumulator.push(_reshape(array, sizes.slice(1)));\n  }\n  return accumulator;\n}\n\n\n/**\n * Squeeze a multi dimensional array\n * @param {Array} array\n * @param {Array} [size]\n * @returns {Array} returns the array itself\n */\nexports.squeeze = function(array, size) {\n  var s = size || exports.size(array);\n\n  // squeeze outer dimensions\n  while (Array.isArray(array) && array.length === 1) {\n    array = array[0];\n    s.shift();\n  }\n\n  // find the first dimension to be squeezed\n  var dims = s.length;\n  while (s[dims - 1] === 1) {\n    dims--;\n  }\n\n  // squeeze inner dimensions\n  if (dims < s.length) {\n    array = _squeeze(array, dims, 0);\n    s.length = dims;\n  }\n\n  return array;\n};\n\n/**\n * Recursively squeeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\nfunction _squeeze (array, dims, dim) {\n  var i, ii;\n\n  if (dim < dims) {\n    var next = dim + 1;\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _squeeze(array[i], dims, next);\n    }\n  }\n  else {\n    while (Array.isArray(array)) {\n      array = array[0];\n    }\n  }\n\n  return array;\n}\n\n/**\n * Unsqueeze a multi dimensional array: add dimensions when missing\n * \n * Paramter `size` will be mutated to match the new, unqueezed matrix size.\n * \n * @param {Array} array\n * @param {number} dims     Desired number of dimensions of the array\n * @param {number} [outer]  Number of outer dimensions to be added\n * @param {Array} [size]    Current size of array.\n * @returns {Array} returns the array itself\n * @private\n */\nexports.unsqueeze = function(array, dims, outer, size) {\n  var s = size || exports.size(array);\n\n  // unsqueeze outer dimensions\n  if (outer) {\n    for (var i = 0; i < outer; i++) {\n      array = [array];\n      s.unshift(1);\n    }\n  }\n\n  // unsqueeze inner dimensions\n  array = _unsqueeze(array, dims, 0);\n  while (s.length < dims) {\n    s.push(1);\n  }\n\n  return array;\n};\n\n/**\n * Recursively unsqueeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\nfunction _unsqueeze (array, dims, dim) {\n  var i, ii;\n\n  if (Array.isArray(array)) {\n    var next = dim + 1;\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _unsqueeze(array[i], dims, next);\n    }\n  }\n  else {\n    for (var d = dim; d < dims; d++) {\n      array = [array];\n    }\n  }\n\n  return array;\n}\n/**\n * Flatten a multi dimensional array, put all elements in a one dimensional\n * array\n * @param {Array} array   A multi dimensional array\n * @return {Array}        The flattened array (1 dimensional)\n */\nexports.flatten = function(array) {\n  if (!Array.isArray(array)) {\n    //if not an array, return as is\n    return array;\n  }\n  var flat = [];\n\n  array.forEach(function callback(value) {\n    if (Array.isArray(value)) {\n      value.forEach(callback);  //traverse through sub-arrays recursively\n    }\n    else {\n      flat.push(value);\n    }\n  });\n\n  return flat;\n};\n\n/**\n * A safe map\n * @param {Array} array\n * @param {function} callback\n */\nexports.map = function (array, callback) {\n  return Array.prototype.map.call(array, callback);\n}\n\n/**\n * A safe forEach\n * @param {Array} array\n * @param {function} callback\n */\nexports.forEach = function (array, callback) {\n  Array.prototype.forEach.call(array, callback);\n}\n\n/**\n * A safe join\n * @param {Array} array\n * @param {string} separator\n */\nexports.join = function (array, separator) {\n  return Array.prototype.join.call(array, separator);\n}\n\n/**\n * Assign a numeric identifier to every element of a sorted array\n * @param {Array}\ta  An array\n * @return {Array}\tAn array of objects containing the original value and its identifier\n */\nexports.identify = function(a) {\n  if (!Array.isArray(a)) {\n\tthrow new TypeError('Array input expected');\n  }\n\t\n  if (a.length === 0) {\n\treturn a;\n  }\n\t\n  var b = [];\n  var count = 0;\n  b[0] = {value: a[0], identifier: 0};\n  for (var i=1; i<a.length; i++) {\n    if (a[i] === a[i-1]) {\n  \tcount++;\n    }\n    else {\n      count = 0;\n    }\n    b.push({value: a[i], identifier: count});\n  }\n  return b;\n}\n\n/**\n * Remove the numeric identifier from the elements\n * @param\ta  An array\n * @return\tAn array of values without identifiers\n */\nexports.generalize = function(a) {\n  if (!Array.isArray(a)) {\n\tthrow new TypeError('Array input expected');\n  }\n\t\n  if (a.length === 0) {\n\treturn a;\n  }\n\t\n  var b = [];\n  for (var i=0; i<a.length; i++) {\n    b.push(a[i].value);\n  }\n  return b;\n}\n\n/**\n * Test whether an object is an array\n * @param {*} value\n * @return {boolean} isArray\n */\nexports.isArray = Array.isArray;\n","var bitwise = require('./bitwise');\n\n/**\n * Bitwise and for Bignumbers\n *\n * Special Cases:\n *   N &  n =  N\n *   n &  0 =  0\n *   n & -1 =  n\n *   n &  n =  n\n *   I &  I =  I\n *  -I & -I = -I\n *   I & -I =  0\n *   I &  n =  n\n *   I & -n =  I\n *  -I &  n =  0\n *  -I & -n = -I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` & `y`, is fully precise\n * @private\n */\nmodule.exports = function bitAnd(x, y) {\n  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.eq(-1) || x.eq(y)) {\n    return x;\n  }\n  if (y.isZero() || x.eq(-1)) {\n    return y;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      if (x.isNegative() == y.isNegative()) {\n        return x;\n      }\n      return new BigNumber(0);\n    }\n    if (!x.isFinite()) {\n      if (y.isNegative()) {\n        return x;\n      }\n      if (x.isNegative()) {\n        return new BigNumber(0);\n      }\n      return y;\n    }\n    if (!y.isFinite()) {\n      if (x.isNegative()) {\n        return y;\n      }\n      if (y.isNegative()) {\n        return new BigNumber(0);\n      }\n      return x;\n    }\n  }\n  return bitwise(x, y, function (a, b) { return a & b });\n};\n","/**\n * Bitwise not\n * @param {BigNumber} value\n * @return {BigNumber} Result of ~`x`, fully precise\n *\n */\nmodule.exports = function bitNot (x) {\n  if (x.isFinite() && !x.isInteger()) {\n    throw new Error('Integer expected in function bitNot');\n  }\n\n  var BigNumber = x.constructor;\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({precision: 1E9});\n\n  var x = x.plus(new BigNumber(1));\n  x.s = -x.s || null;\n\n  BigNumber.config({precision: prevPrec});\n  return x;\n};\n","var bitwise = require('./bitwise');\n\n/**\n * Bitwise OR for BigNumbers\n *\n * Special Cases:\n *   N |  n =  N\n *   n |  0 =  n\n *   n | -1 = -1\n *   n |  n =  n\n *   I |  I =  I\n *  -I | -I = -I\n *   I | -n = -1\n *   I | -I = -1\n *   I |  n =  I\n *  -I |  n = -I\n *  -I | -n = -n\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` | `y`, fully precise\n */\nmodule.exports = function bitOr (x, y) {\n  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {\n    throw new Error('Integers expected in function bitOr');\n  }\n\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  var negOne = new BigNumber(-1);\n  if (x.isZero() || y.eq(negOne) || x.eq(y)) {\n    return y;\n  }\n  if (y.isZero() || x.eq(negOne)) {\n    return x;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if ((!x.isFinite() && !x.isNegative() && y.isNegative()) ||\n        (x.isNegative() && !y.isNegative() && !y.isFinite())) {\n      return negOne;\n    }\n    if (x.isNegative() && y.isNegative()) {\n      return x.isFinite() ? x : y;\n    }\n    return x.isFinite() ? y : x;\n  }\n\n  return bitwise(x, y, function (a, b) { return a | b });\n};\n","var bitwise = require('./bitwise');\nvar bitNot = require('./bitNot');\n\n/**\n * Bitwise XOR for BigNumbers\n *\n * Special Cases:\n *   N ^  n =  N\n *   n ^  0 =  n\n *   n ^  n =  0\n *   n ^ -1 = ~n\n *   I ^  n =  I\n *   I ^ -n = -I\n *   I ^ -I = -1\n *  -I ^  n = -I\n *  -I ^ -n =  I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` ^ `y`, fully precise\n *\n */\nmodule.exports = function bitXor(x, y) {\n  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {\n    throw new Error('Integers expected in function bitXor');\n  }\n\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero()) {\n    return y;\n  }\n  if (y.isZero()) {\n    return x;\n  }\n\n  if (x.eq(y)) {\n    return new BigNumber(0);\n  }\n\n  var negOne = new BigNumber(-1);\n  if (x.eq(negOne)) {\n    return bitNot(y);\n  }\n  if (y.eq(negOne)) {\n    return bitNot(x);\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      return negOne;\n    }\n    return new BigNumber(x.isNegative() == y.isNegative()\n        ?  Infinity\n        : -Infinity);\n  }\n  return bitwise(x, y, function (a, b) { return a ^ b });\n};\n","var bitNot = require('./bitNot');\n\n/**\n * Applies bitwise function to numbers\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @param {function (a, b)} func\n * @return {BigNumber}\n */\nmodule.exports = function bitwise(x, y, func) {\n  var BigNumber = x.constructor;\n\n  var xBits, yBits;\n  var xSign = +(x.s < 0);\n  var ySign = +(y.s < 0);\n  if (xSign) {\n    xBits = decCoefficientToBinaryString(bitNot(x));\n    for (var i = 0; i < xBits.length; ++i) {\n      xBits[i] ^= 1;\n    }\n  } else {\n    xBits = decCoefficientToBinaryString(x);\n  }\n  if (ySign) {\n    yBits = decCoefficientToBinaryString(bitNot(y));\n    for (var i = 0; i < yBits.length; ++i) {\n      yBits[i] ^= 1;\n    }\n  } else {\n    yBits = decCoefficientToBinaryString(y);\n  }\n\n  var minBits, maxBits, minSign;\n  if (xBits.length <= yBits.length) {\n    minBits = xBits;\n    maxBits = yBits;\n    minSign = xSign;\n  } else {\n    minBits = yBits;\n    maxBits = xBits;\n    minSign = ySign;\n  }\n\n  var shortLen = minBits.length;\n  var longLen = maxBits.length;\n  var expFuncVal = func(xSign, ySign) ^ 1;\n  var outVal = new BigNumber(expFuncVal ^ 1);\n  var twoPower = new BigNumber(1);\n  var two = new BigNumber(2);\n\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({precision: 1E9});\n\n  while (shortLen > 0) {\n    if (func(minBits[--shortLen], maxBits[--longLen]) == expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n    twoPower = twoPower.times(two);\n  }\n  while (longLen > 0) {\n    if (func(minSign, maxBits[--longLen]) == expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n    twoPower = twoPower.times(two);\n  }\n\n  BigNumber.config({precision: prevPrec});\n\n  if (expFuncVal == 0) {\n    outVal.s = -outVal.s;\n  }\n  return outVal;\n};\n\n/* Extracted from decimal.js, and edited to specialize. */\nfunction decCoefficientToBinaryString (x) {\n  // Convert to string\n  var a = x.d; // array with digits\n  var r = a[0] + '';\n\n  for (var i = 1; i < a.length; ++i) {\n    var s = a[i] + '';\n    for (var z = 7 - s.length; z--; ) {\n      s = '0' + s;\n    }\n\n    r += s;\n  }\n\n  var j;\n  for (j = r.length - 1; r.charAt(j) == '0'; --j);\n\n  var xe = x.e;\n  var str = r.slice(0, j + 1 || 1);\n  var strL = str.length;\n  if (xe > 0) {\n    if (++xe > strL) {\n      // Append zeros.\n      for (xe -= strL; xe--; str += '0');\n    } else if (xe < strL) {\n      str = str.slice(0, xe) + '.' + str.slice(xe);\n    }\n  }\n\n  // Convert from base 10 (decimal) to base 2\n  var arr = [0];\n  for (var i = 0; i < str.length; ) {\n    for (var arrL = arr.length; arrL--; arr[arrL] *= 10);\n\n    arr[0] += str.charAt(i++) << 0;  // convert to int\n    for (var j = 0; j < arr.length; ++j) {\n      if (arr[j] > 1) {\n        if (arr[j + 1] == null) {\n          arr[j + 1] = 0;\n        }\n\n        arr[j + 1] += arr[j] >> 1;\n        arr[j] &= 1;\n      }\n    }\n  }\n\n  return arr.reverse();\n}\n","var memoize = require('../function').memoize;\n\n/**\n * Calculate BigNumber e\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns e\n */\nexports.e = memoize(function (BigNumber) {\n  return new BigNumber(1).exp();\n}, hasher);\n\n/**\n * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns phi\n */\nexports.phi = memoize(function (BigNumber) {\n  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);\n}, hasher);\n\n/**\n * Calculate BigNumber pi.\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns pi\n */\nexports.pi = memoize(function (BigNumber) {\n  return BigNumber.acos(-1);\n}, hasher);\n\n/**\n * Calculate BigNumber tau, tau = 2 * pi\n * @param {function} BigNumber   BigNumber constructor\n * @returns {BigNumber} Returns tau\n */\nexports.tau = memoize(function (BigNumber) {\n  return exports.pi(BigNumber).times(2);\n}, hasher);\n\n/**\n * Create a hash for a BigNumber constructor function. The created has is\n * the configured precision\n * @param {Array} args         Supposed to contain a single entry with\n *                             a BigNumber constructor\n * @return {number} precision\n * @private\n */\nfunction hasher (args) {\n  return args[0].precision;\n}\n","/**\n * Convert a BigNumber to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lower` and `upper` bounds, and uses\n *                                          exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential' and\n *                                          'auto', `precision` defines the total\n *                                          number of significant digits returned\n *                                          and is undefined by default.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point, and is 0 by default.\n *                     {Object} exponential An object containing two parameters,\n *                                          {number} lower and {number} upper,\n *                                          used by notation 'auto' to determine\n *                                          when to return exponential notation.\n *                                          Default values are `lower=1e-3` and\n *                                          `upper=1e5`.\n *                                          Only applicable for notation `auto`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4);                                        // '6.4'\n *    format(1240000);                                    // '1.24e6'\n *    format(1/3);                                        // '0.3333333333333333'\n *    format(1/3, 3);                                     // '0.333'\n *    format(21385, 2);                                   // '21000'\n *    format(12.071, {notation: 'fixed'});                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'\n *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'\n *\n * @param {BigNumber} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\nexports.format = function (value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  }\n\n  // handle special cases\n  if (!value.isFinite()) {\n    return value.isNaN() ? 'NaN' : (value.gt(0) ? 'Infinity' : '-Infinity');\n  }\n\n  // default values for options\n  var notation = 'auto';\n  var precision = undefined;\n\n  if (options !== undefined) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    }\n\n    // determine precision from options\n    if (typeof options === 'number') {\n      precision = options;\n    }\n    else if (options.precision) {\n      precision = options.precision;\n    }\n  }\n\n  // handle the various notations\n  switch (notation) {\n    case 'fixed':\n      return exports.toFixed(value, precision);\n\n    case 'exponential':\n      return exports.toExponential(value, precision);\n\n    case 'auto':\n      // determine lower and upper bound for exponential notation.\n      // TODO: implement support for upper and lower to be BigNumbers themselves\n      var lower = 1e-3;\n      var upper = 1e5;\n      if (options && options.exponential) {\n        if (options.exponential.lower !== undefined) {\n          lower = options.exponential.lower;\n        }\n        if (options.exponential.upper !== undefined) {\n          upper = options.exponential.upper;\n        }\n      }\n\n      // adjust the configuration of the BigNumber constructor (yeah, this is quite tricky...)\n      var oldConfig = {\n        toExpNeg: value.constructor.toExpNeg,\n        toExpPos: value.constructor.toExpPos\n      };\n\n      value.constructor.config({\n        toExpNeg: Math.round(Math.log(lower) / Math.LN10),\n        toExpPos: Math.round(Math.log(upper) / Math.LN10)\n      });\n\n      // handle special case zero\n      if (value.isZero()) return '0';\n\n      // determine whether or not to output exponential notation\n      var str;\n      var abs = value.abs();\n      if (abs.gte(lower) && abs.lt(upper)) {\n        // normal number notation\n        str = value.toSignificantDigits(precision).toFixed();\n      }\n      else {\n        // exponential notation\n        str = exports.toExponential(value, precision);\n      }\n\n      // remove trailing zeros after the decimal point\n      return str.replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return (digits !== '.') ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' +\n          'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n};\n\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {BigNumber} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n * @returns {string} str\n */\nexports.toExponential = function (value, precision) {\n  if (precision !== undefined) {\n    return value.toExponential(precision - 1); // Note the offset of one\n  }\n  else {\n    return value.toExponential();\n  }\n};\n\n/**\n * Format a number with fixed notation.\n * @param {BigNumber} value\n * @param {number} [precision=0]        Optional number of decimals after the\n *                                      decimal point. Zero by default.\n */\nexports.toFixed = function (value, precision) {\n  return value.toFixed(precision || 0);\n  // Note: the (precision || 0) is needed as the toFixed of BigNumber has an\n  // undefined default precision instead of 0.\n};\n","\n/**\n * Bitwise left shift\n *\n * Special Cases:\n *  n << -n = N\n *  n <<  N = N\n *  N <<  n = N\n *  n <<  0 = n\n *  0 <<  n = 0\n *  I <<  I = N\n *  I <<  n = I\n *  n <<  I = I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` << `y`\n *\n */\nmodule.exports = function leftShift (x, y) {\n  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {\n    throw new Error('Integers expected in function leftShift');\n  }\n\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n  if (!x.isFinite() && !y.isFinite()) {\n    return new BigNumber(NaN);\n  }\n\n  // Math.pow(2, y) is fully precise for y < 55, and fast\n  if (y.lt(55)) {\n    return x.times(Math.pow(2, y.toNumber()) + '');\n  }\n  return x.times(new BigNumber(2).pow(y));\n};\n","'use strict';\n\n/**\n * Compares two BigNumbers.\n * @param {BigNumber} x       First value to compare\n * @param {BigNumber} y       Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n */\nmodule.exports = function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon == null) {\n    return x.eq(y);\n  }\n\n\n  // use \"==\" operator, handles infinities\n  if (x.eq(y)) {\n    return true;\n  }\n\n  // NaN\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  }\n\n  // at this point x and y should be finite\n  if(x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n    if (diff.isZero()) {\n      return true;\n    }\n    else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  }\n\n  // Infinite and Number or negative Infinite and positive Infinite cases\n  return false;\n};\n","/*\n * Special Cases:\n *   n >> -n =  N\n *   n >>  N =  N\n *   N >>  n =  N\n *   I >>  I =  N\n *   n >>  0 =  n\n *   I >>  n =  I\n *  -I >>  n = -I\n *  -I >>  I = -I\n *   n >>  I =  I\n *  -n >>  I = -1\n *   0 >>  n =  0\n *\n * @param {BigNumber} value\n * @param {BigNumber} value\n * @return {BigNumber} Result of `x` >> `y`\n *\n */\nmodule.exports = function rightArithShift (x, y) {\n  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n\n  var BigNumber = x.constructor;\n  if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {\n    return new BigNumber(NaN);\n  }\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n  if (!y.isFinite()) {\n    if (x.isNegative()) {\n      return new BigNumber(-1);\n    }\n    if (!x.isFinite()) {\n      return new BigNumber(NaN);\n    }\n    return new BigNumber(0);\n  }\n\n  // Math.pow(2, y) is fully precise for y < 55, and fast\n  if (y.lt(55)) {\n    return x.div(Math.pow(2, y.toNumber()) + '').floor();\n  }\n  return x.div(new BigNumber(2).pow(y)).floor();\n};\n","'use strict';\n\n/**\n * Test whether value is a boolean\n * @param {*} value\n * @return {boolean} isBoolean\n */\nexports.isBoolean = function(value) {\n  return typeof value == 'boolean';\n};\n","'use strict';\n\nvar isCollection = require('./isCollection');\n\n/**\n * Test whether an array contains collections\n * @param {Array} array\n * @returns {boolean} Returns true when the array contains one or multiple\n *                    collections (Arrays or Matrices). Returns false otherwise.\n */\nmodule.exports = function containsCollections (array) {\n  for (var i = 0; i < array.length; i++) {\n    if (isCollection(array[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n","'use strict';\n\n/**\n * Recursively loop over all elements in a given multi dimensional array\n * and invoke the callback on each of the elements.\n * @param {Array | Matrix} array\n * @param {Function} callback     The callback method is invoked with one\n *                                parameter: the current element in the array\n */\nmodule.exports = function deepForEach (array, callback) {\n  if (array && array.isMatrix === true) {\n    array = array.valueOf();\n  }\n\n  for (var i = 0, ii = array.length; i < ii; i++) {\n    var value = array[i];\n\n    if (Array.isArray(value)) {\n      deepForEach(value, callback);\n    }\n    else {\n      callback(value);\n    }\n  }\n};\n","'use strict';\n\n/**\n * Execute the callback function element wise for each element in array and any\n * nested array\n * Returns an array with the results\n * @param {Array | Matrix} array\n * @param {Function} callback   The callback is called with two parameters:\n *                              value1 and value2, which contain the current\n *                              element of both arrays.\n * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n *\n * @return {Array | Matrix} res\n */\nmodule.exports = function deepMap(array, callback, skipZeros) {\n  if (array && (typeof array.map === 'function')) {\n    // TODO: replace array.map with a for loop to improve performance\n    return array.map(function (x) {\n      return deepMap(x, callback, skipZeros);\n    });\n  }\n  else {\n    return callback(array);\n  }\n};\n","'use strict';\n\n/**\n * Test whether a value is a collection: an Array or Matrix\n * @param {*} x\n * @returns {boolean} isCollection\n */\nmodule.exports = function isCollection (x) {\n  return (Array.isArray(x) || (x && x.isMatrix === true));\n};\n","'use strict';\n\nvar arraySize = require('../array').size;\nvar IndexError = require('../../error/IndexError');\n\n/**\n * Reduce a given matrix or array to a new matrix or\n * array with one less dimension, applying the given\n * callback in the selected dimension.\n * @param {Array | Matrix} mat\n * @param {number} dim\n * @param {Function} callback\n * @return {Array | Matrix} res\n */\nmodule.exports = function(mat, dim, callback) {\n  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();\n  if (dim < 0 || (dim >= size.length)) {\n    // TODO: would be more clear when throwing a DimensionError here\n    throw new IndexError(dim, size.length);\n  }\n\n  if (mat && mat.isMatrix === true) {\n    return mat.create(_reduce(mat.valueOf(), dim, callback));\n  }else {\n    return _reduce(mat, dim, callback);\n  }\n};\n\n/**\n * Recursively reduce a matrix\n * @param {Array} mat\n * @param {number} dim\n * @param {Function} callback\n * @returns {Array} ret\n * @private\n */\nfunction _reduce(mat, dim, callback){\n  var i, ret, val, tran;\n\n  if(dim<=0){\n    if( !Array.isArray(mat[0]) ){\n      val = mat[0];\n      for(i=1; i<mat.length; i++){\n        val = callback(val, mat[i]);\n      }\n      return val;\n    }else{\n      tran = _switch(mat);\n      ret = [];\n      for(i=0; i<tran.length; i++){\n        ret[i] = _reduce(tran[i], dim-1, callback);\n      }\n      return ret;\n    }\n  }else{\n    ret = [];\n    for(i=0; i<mat.length; i++){\n      ret[i] = _reduce(mat[i], dim-1, callback);\n    }\n    return ret;\n  }\n}\n\n/**\n * Transpose a matrix\n * @param {Array} mat\n * @returns {Array} ret\n * @private\n */\nfunction _switch(mat){\n  var I = mat.length;\n  var J = mat[0].length;\n  var i, j;\n  var ret = [];\n  for( j=0; j<J; j++) {\n    var tmp = [];\n    for( i=0; i<I; i++) {\n      tmp.push(mat[i][j]);\n    }\n    ret.push(tmp);\n  }\n  return ret;\n}\n","'use strict';\n\nmodule.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr;\n  // c arrays\n  var cindex = c._index;\n\n  // vars\n  var k, k0, k1, i;\n\n  // check we need to process values (pattern matrix)\n  if (x) {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k];\n      // check value exists in current j\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark;\n        // add i to pattern of C\n        cindex.push(i);\n        // x(i) = A, check we need to call function this time\n        if (update) {\n          // copy value to workspace calling callback function\n          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);\n          // function was called on current row\n          u[i] = mark;\n        }\n        else {\n          // copy value to workspace\n          x[i] = avalues[k];\n        }\n      }\n      else {\n        // i exists in C already\n        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);\n        // function was called on current row\n        u[i] = mark;\n      }\n    }\n  }\n  else {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k];\n      // check value exists in current j\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark;\n        // add i to pattern of C\n        cindex.push(i);\n      }\n      else {\n        // indicate function was called on current row\n        u[i] = mark;\n      }\n    }\n  }\n};\n","'use strict';\n\nvar hasOwnProperty = require('./object').hasOwnProperty;\n\n/**\n * Get a property of a plain object\n * Throws an error in case the object is not a plain object or the\n * property is not defined on the object itself\n * @param {Object} object\n * @param {string} prop\n * @return {*} Returns the property value when safe\n */\nfunction getSafeProperty (object, prop) {\n  // only allow getting properties of a plain object\n  if (isPlainObject(object)) {\n    // only allow getting properties defined on the object itself,\n    // not inherited from it's prototype.\n    if (hasOwnProperty(object, prop)) {\n      return object[prop];\n    }\n\n    if (!(prop in object)) {\n      // this is a not existing property on a plain object\n      return undefined;\n    }\n  }\n\n  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {\n    throw new Error('Cannot access method \"' + prop + '\" as a property');\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n\n/**\n * Set a property on a plain object.\n * Throws an error in case the object is not a plain object or the\n * property would override an inherited property like .constructor or .toString\n * @param {Object} object\n * @param {string} prop\n * @param {*} value\n * @return {*} Returns the value\n */\n// TODO: merge this function into access.js?\nfunction setSafeProperty (object, prop, value) {\n  // only allow setting properties of a plain object\n  if (isPlainObject(object)) {\n    // only allow setting properties defined on the object itself,\n    // not inherited from it's prototype.\n    if (prop in object) {\n      // property already exists\n      // override when the property is defined on the object itself.\n      // don't allow overriding inherited properties like .constructor or .toString\n      if (hasOwnProperty(object, prop)) {\n        return object[prop] = value;\n      }\n    }\n    else {\n      // this is a new property, that's just ok\n      return object[prop] = value;\n    }\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n\n/**\n * Test whether a property is safe to use for an object.\n * For example .toString and .constructor are not safe\n * @param {string} prop\n * @return {boolean} Returns true when safe\n */\nfunction isSafeProperty (prop) {\n  return !(prop in {});\n}\n\n/**\n * Validate whether a method is safe.\n * Throws an error when that's not the case.\n * @param {Object} object\n * @param {string} method\n */\n// TODO: merge this function into assign.js?\nfunction validateSafeMethod (object, method) {\n  if (!isSafeMethod(object, method)) {\n    throw new Error('No access to method \"' + method + '\"');\n  }\n}\n\n/**\n * Check whether a method is safe.\n * Throws an error when that's not the case (for example for `constructor`).\n * @param {Object} object\n * @param {string} method\n * @return {boolean} Returns true when safe, false otherwise\n */\nfunction isSafeMethod (object, method) {\n  // test for plain functions defined on the object (instead of a method)\n  if (hasOwnProperty(object, method)) {\n    return isPlainObject(object);\n  }\n  else {\n    // only allow methods:\n    // - defined on the prototype of this object\n    // - not defined on the prototype of native Object\n    //   i.e. constructor, __defineGetter__, hasOwnProperty, etc. are not allowed\n    // - calling methods on a function (like bind) is not allowed\n    // - A few safe native methods are allowed: toString, valueOf, toLocaleString\n    return (object && typeof object !== 'function' &&\n        (hasOwnProperty(object.constructor.prototype, method) ||\n            hasOwnProperty(object.__proto__, method)) &&\n        (!hasOwnProperty(Object.prototype, method) || hasOwnProperty(safeNativeMethods, method)));\n  }\n}\n\nfunction isPlainObject (object) {\n  return typeof object === 'object' && object && object.constructor === Object;\n}\n\nvar safeNativeMethods = {\n  toString: true,\n  valueOf: true,\n  toLocaleString: true\n};\n\nexports.getSafeProperty = getSafeProperty;\nexports.setSafeProperty = setSafeProperty;\nexports.isSafeProperty = isSafeProperty;\nexports.validateSafeMethod = validateSafeMethod;\nexports.isSafeMethod = isSafeMethod;\nexports.isPlainObject = isPlainObject;\n","var Emitter = require('tiny-emitter');\n\n/**\n * Extend given object with emitter functions `on`, `off`, `once`, `emit`\n * @param {Object} obj\n * @return {Object} obj\n */\nexports.mixin = function (obj) {\n  // create event emitter\n  var emitter = new Emitter();\n\n  // bind methods to obj (we don't want to expose the emitter.e Array...)\n  obj.on   = emitter.on.bind(emitter);\n  obj.off  = emitter.off.bind(emitter);\n  obj.once = emitter.once.bind(emitter);\n  obj.emit = emitter.emit.bind(emitter);\n\n  return obj;\n};\n","// function utils\n\n/*\n * Memoize a given function by caching the computed result.\n * The cache of a memoized function can be cleared by deleting the `cache`\n * property of the function.\n *\n * @param {function} fn                     The function to be memoized.\n *                                          Must be a pure function.\n * @param {function(args: Array)} [hasher]  A custom hash builder.\n *                                          Is JSON.stringify by default.\n * @return {function}                       Returns the memoized function\n */\nexports.memoize = function(fn, hasher) {\n  return function memoize() {\n    if (typeof memoize.cache !== 'object') {\n      memoize.cache = {};\n    }\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    var hash = hasher ? hasher(args) : JSON.stringify(args);\n    if (!(hash in memoize.cache)) {\n      return memoize.cache[hash] = fn.apply(fn, args);\n    }\n    return memoize.cache[hash];\n  };\n};\n\n/**\n * Find the maximum number of arguments expected by a typed function.\n * @param {function} fn   A typed function\n * @return {number} Returns the maximum number of expected arguments.\n *                  Returns -1 when no signatures where found on the function.\n */\nexports.maxArgumentCount = function (fn) {\n  return Object.keys(fn.signatures || {})\n      .reduce(function (args, signature) {\n        var count = (signature.match(/,/g) || []).length + 1;\n        return Math.max(args, count);\n      }, -1);\n};\n","'use strict';\n\nexports.array = require('./array');\nexports['boolean'] = require('./boolean');\nexports['function'] = require('./function');\nexports.number = require('./number');\nexports.object = require('./object');\nexports.string = require('./string');\nexports.types = require('./types');\nexports.emitter = require('./emitter');\n","'use strict';\n\nexports.symbols = {\n  // GREEK LETTERS\n  Alpha: 'A',     alpha: '\\\\alpha',\n  Beta: 'B',      beta: '\\\\beta',\n  Gamma: '\\\\Gamma',    gamma: '\\\\gamma',\n  Delta: '\\\\Delta',    delta: '\\\\delta',\n  Epsilon: 'E',   epsilon: '\\\\epsilon',  varepsilon: '\\\\varepsilon',\n  Zeta: 'Z',      zeta: '\\\\zeta',\n  Eta: 'H',       eta: '\\\\eta',\n  Theta: '\\\\Theta',    theta: '\\\\theta',    vartheta: '\\\\vartheta',\n  Iota: 'I',      iota: '\\\\iota',\n  Kappa: 'K',     kappa: '\\\\kappa',    varkappa: '\\\\varkappa',\n  Lambda: '\\\\Lambda',   lambda: '\\\\lambda',\n  Mu: 'M',        mu: '\\\\mu',\n  Nu: 'N',        nu: '\\\\nu',\n  Xi: '\\\\Xi',       xi: '\\\\xi',\n  Omicron: 'O',   omicron: 'o',\n  Pi: '\\\\Pi',       pi: '\\\\pi',       varpi: '\\\\varpi',\n  Rho: 'P',       rho: '\\\\rho',      varrho: '\\\\varrho',\n  Sigma: '\\\\Sigma',    sigma: '\\\\sigma',    varsigma: '\\\\varsigma',\n  Tau: 'T',       tau: '\\\\tau',\n  Upsilon: '\\\\Upsilon',  upsilon: '\\\\upsilon',\n  Phi: '\\\\Phi',      phi: '\\\\phi',      varphi: '\\\\varphi',\n  Chi: 'X',       chi: '\\\\chi',\n  Psi: '\\\\Psi',      psi: '\\\\psi',\n  Omega: '\\\\Omega',    omega: '\\\\omega',\n  //logic\n  'true': '\\\\mathrm{True}',\n  'false': '\\\\mathrm{False}',\n  //other\n  i: 'i', //TODO use \\i ??\n  inf: '\\\\infty',\n  Inf: '\\\\infty',\n  infinity: '\\\\infty',\n  Infinity: '\\\\infty',\n  oo: '\\\\infty',\n  lim: '\\\\lim',\n  'undefined': '\\\\mathbf{?}'\n};\n\nexports.operators = {\n  'transpose': '^\\\\top',\n  'factorial': '!',\n  'pow': '^',\n  'dotPow': '.^\\\\wedge', //TODO find ideal solution\n  'unaryPlus': '+',\n  'unaryMinus': '-',\n  'bitNot': '~', //TODO find ideal solution\n  'not': '\\\\neg',\n  'multiply': '\\\\cdot',\n  'divide': '\\\\frac', //TODO how to handle that properly?\n  'dotMultiply': '.\\\\cdot', //TODO find ideal solution\n  'dotDivide': '.:', //TODO find ideal solution\n  'mod': '\\\\mod',\n  'add': '+',\n  'subtract': '-',\n  'to': '\\\\rightarrow',\n  'leftShift': '<<',\n  'rightArithShift': '>>',\n  'rightLogShift': '>>>',\n  'equal': '=',\n  'unequal': '\\\\neq',\n  'smaller': '<',\n  'larger': '>',\n  'smallerEq': '\\\\leq',\n  'largerEq': '\\\\geq',\n  'bitAnd': '\\\\&',\n  'bitXor': '\\\\underline{|}',\n  'bitOr': '|',\n  'and': '\\\\wedge',\n  'xor': '\\\\veebar',\n  'or': '\\\\vee'\n};\n\nexports.defaultTemplate = '\\\\mathrm{${name}}\\\\left(${args}\\\\right)';\n\nvar units = {\n  deg: '^\\\\circ'\n};\n\n//@param {string} name\n//@param {boolean} isUnit\nexports.toSymbol = function (name, isUnit) {\n  isUnit = typeof isUnit === 'undefined' ? false : isUnit;\n  if (isUnit) {\n    if (units.hasOwnProperty(name)) {\n      return units[name];\n    }\n    return '\\\\mathrm{' + name + '}';\n  }\n\n  if (exports.symbols.hasOwnProperty(name)) {\n    return exports.symbols[name];\n  }\n  else if (name.indexOf('_') !== -1) {\n    //symbol with index (eg. alpha_1)\n    var index = name.indexOf('_');\n    return exports.toSymbol(name.substring(0, index)) + '_{'\n      + exports.toSymbol(name.substring(index + 1)) + '}';\n  }\n  return name;\n};\n","'use strict';\n\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Test whether value is a number\n * @param {*} value\n * @return {boolean} isNumber\n */\nexports.isNumber = function(value) {\n  return typeof value === 'number';\n};\n\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\nexports.isInteger = function(value) {\n  return isFinite(value)\n      ? (value == Math.round(value))\n      : false;\n  // Note: we use ==, not ===, as we can have Booleans as well\n};\n\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {*}\n */\nexports.sign = Math.sign || function(x) {\n  if (x > 0) {\n    return 1;\n  }\n  else if (x < 0) {\n    return -1;\n  }\n  else {\n    return 0;\n  }\n};\n\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lower` and `upper` bounds, and uses\n *                                          exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential' and\n *                                          'auto', `precision` defines the total\n *                                          number of significant digits returned\n *                                          and is undefined by default.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point, and is 0 by default.\n *                     {Object} exponential An object containing two parameters,\n *                                          {number} lower and {number} upper,\n *                                          used by notation 'auto' to determine\n *                                          when to return exponential notation.\n *                                          Default values are `lower=1e-3` and\n *                                          `upper=1e5`.\n *                                          Only applicable for notation `auto`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4);                                        // '6.4'\n *    format(1240000);                                    // '1.24e6'\n *    format(1/3);                                        // '0.3333333333333333'\n *    format(1/3, 3);                                     // '0.333'\n *    format(21385, 2);                                   // '21000'\n *    format(12.071, {notation: 'fixed'});                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'\n *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'});        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\nexports.format = function(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  }\n\n  // handle special cases\n  if (value === Infinity) {\n    return 'Infinity';\n  }\n  else if (value === -Infinity) {\n    return '-Infinity';\n  }\n  else if (isNaN(value)) {\n    return 'NaN';\n  }\n\n  // default values for options\n  var notation = 'auto';\n  var precision = undefined;\n\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    }\n\n    // determine precision from options\n    if (exports.isNumber(options)) {\n      precision = options;\n    }\n    else if (options.precision) {\n      precision = options.precision;\n    }\n  }\n\n  // handle the various notations\n  switch (notation) {\n    case 'fixed':\n      return exports.toFixed(value, precision);\n\n    case 'exponential':\n      return exports.toExponential(value, precision);\n\n    case 'engineering':\n      return exports.toEngineering(value, precision);\n\n    case 'auto':\n      return exports\n          .toPrecision(value, precision, options && options.exponential)\n\n          // remove trailing zeros after the decimal point\n          .replace(/((\\.\\d*?)(0+))($|e)/, function () {\n            var digits = arguments[2];\n            var e = arguments[4];\n            return (digits !== '.') ? digits + e : e;\n          });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' +\n          'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n};\n\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\nexports.splitNumber = function (value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^0*?(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n\n  var sign         = match[1];\n  var digits       = match[2];\n  var exponent     = parseFloat(match[4] || '0');\n\n  var dot = digits.indexOf('.');\n  exponent += (dot !== -1) ? (dot - 1) : (digits.length - 1);\n\n  var coefficients = digits\n      .replace('.', '')  // remove the dot (must be removed before removing leading zeros)\n      .replace(/^0*/, function (zeros) {\n        // remove leading zeros, add their count to the exponent\n        exponent -= zeros.length;\n        return '';\n      })\n      .replace(/0*$/, '') // remove trailing zeros\n      .split('')\n      .map(function (d) {\n        return parseInt(d);\n      });\n\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n\n  return {\n    sign: sign,\n    coefficients: coefficients,\n    exponent: exponent\n  };\n};\n\n\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision=0]        Optional number of decimals after the\n *                                      decimal point. Zero by default.\n */\nexports.toEngineering = function (value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n  \n  var rounded = exports.roundDigits(exports.splitNumber(value), precision);\n\n  var e = rounded.exponent;\n  var c = rounded.coefficients;\n\n  // find nearest lower multiple of 3 for exponent\n  var newExp = e % 3 === 0 ? e : (e < 0 ? (e - 3) - (e % 3) : e - (e % 3));\n\n  // concatenate coefficients with necessary zeros\n  var significandsDiff = e >= 0 ? e : Math.abs(newExp);\n\n  // add zeros if necessary (for ex: 1e+8)\n  if (c.length - 1 < significandsDiff) c = c.concat(zeros(significandsDiff - (c.length - 1)));\n\n  // find difference in exponents\n  var expDiff = Math.abs(e - newExp);\n\n  var decimalIdx = 1;\n\n  // push decimal index over by expDiff times\n  while (--expDiff >= 0) decimalIdx++;\n\n  // if all coefficient values are zero after the decimal point, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = decimals.match(/[1-9]/) ? ('.' + decimals) : '';\n\n  var str = c.slice(0, decimalIdx).join('') +\n      decimalVal +\n      'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n};\n\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=0]        Optional number of decimals after the\n *                                      decimal point. Zero by default.\n */\nexports.toFixed = function (value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var splitValue = exports.splitNumber(value)\n  var rounded = exports.roundDigits(splitValue, splitValue.exponent + 1 + (precision || 0));\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n\n  // append zeros if needed\n  var pp = p + (precision || 0);\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  }\n\n  // prepend zeros if needed\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  }\n\n  // insert a dot if needed\n  if (precision) {\n    c.splice(p, 0, (p === 0) ? '0.' : '.');\n  }\n\n  return rounded.sign + c.join('');\n};\n\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\nexports.toExponential = function (value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  // round if needed, else create a clone\n  var split = exports.splitNumber(value)\n  var rounded = precision ? exports.roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent;\n\n  // append zeros if needed\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  }\n\n  // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? ('.' + c.join('')) : '') +\n      'e' + (e >= 0 ? '+' : '') + e;\n}\n\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lower: number | undefined, upper: number | undefined}} [options]\n *                                       By default:\n *                                         lower = 1e-3 (excl)\n *                                         upper = 1e+5 (incl)\n * @return {string}\n */\nexports.toPrecision = function (value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  // determine lower and upper bound for exponential notation.\n  var lower = (options && options.lower !== undefined) ? options.lower : 1e-3;\n  var upper = (options && options.upper !== undefined) ? options.upper : 1e+5;\n\n  var split = exports.splitNumber(value)\n  var abs = Math.abs(Math.pow(10, split.exponent));\n  if (abs < lower || abs >= upper) {\n    // exponential notation\n    return exports.toExponential(value, precision);\n  }\n  else {\n    var rounded = precision ? exports.roundDigits(split, precision) : split;\n    var c = rounded.coefficients;\n    var e = rounded.exponent;\n\n    // append trailing zeros\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    }\n\n    // append trailing zeros\n    // TODO: simplify the next statement\n    c = c.concat(zeros(e - c.length + 1 +\n        (c.length < precision ? precision - c.length : 0)));\n\n    // prepend zeros\n    c = zeros(-e).concat(c);\n\n    var dot = e > 0 ? e : 0;\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n\n    return rounded.sign + c.join('');\n  }\n}\n\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\nexports.roundDigits = function (split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  }\n  var c = rounded.coefficients;\n\n  // prepend zeros if needed\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n      while (c[i] === 10) {\n        c.pop();\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n        i--;\n        c[i]++;\n      }\n    }\n  }\n\n  return rounded;\n};\n\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\nfunction zeros(length) {\n  var arr = [];\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n  return arr;\n}\n\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\nexports.digits = function(value) {\n  return value\n      .toExponential()\n      .replace(/e.*$/, '')          // remove exponential notation\n      .replace( /^0\\.?0*|\\./, '')   // remove decimal point and leading zeros\n      .length\n};\n\n/**\n * Minimum number added to one that makes the result different than one\n */\nexports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\nexports.nearlyEqual = function(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon == null) {\n    return x == y;\n  }\n\n  // use \"==\" operator, handles infinities\n  if (x == y) {\n    return true;\n  }\n\n  // NaN\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  }\n\n  // at this point x and y should be finite\n  if(isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n    if (diff < exports.DBL_EPSILON) {\n      return true;\n    }\n    else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  }\n\n  // Infinite and Number or negative Infinite and positive Infinite cases\n  return false;\n};\n","'use strict';\n\n/**\n * Clone an object\n *\n *     clone(x)\n *\n * Can clone any primitive type, array, and object.\n * If x has a function clone, this function will be invoked to clone the object.\n *\n * @param {*} x\n * @return {*} clone\n */\nexports.clone = function clone(x) {\n  var type = typeof x;\n\n  // immutable primitive types\n  if (type === 'number' || type === 'string' || type === 'boolean' ||\n      x === null || x === undefined) {\n    return x;\n  }\n\n  // use clone function of the object when available\n  if (typeof x.clone === 'function') {\n    return x.clone();\n  }\n\n  // array\n  if (Array.isArray(x)) {\n    return x.map(function (value) {\n      return clone(value);\n    });\n  }\n\n  if (x instanceof Number)    return new Number(x.valueOf());\n  if (x instanceof String)    return new String(x.valueOf());\n  if (x instanceof Boolean)   return new Boolean(x.valueOf());\n  if (x instanceof Date)      return new Date(x.valueOf());\n  if (x && x.isBigNumber === true) return x; // bignumbers are immutable\n  if (x instanceof RegExp)  throw new TypeError('Cannot clone ' + x);  // TODO: clone a RegExp\n\n  // object\n  return exports.map(x, clone);\n};\n\n/**\n * Apply map to all properties of an object\n * @param {Object} object\n * @param {function} callback\n * @return {Object} Returns a copy of the object with mapped properties\n */\nexports.map = function(object, callback) {\n  var clone = {};\n\n  for (var key in object) {\n    if (exports.hasOwnProperty(object, key)) {\n      clone[key] = callback(object[key]);\n    }\n  }\n\n  return clone;\n}\n\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\nexports.extend = function(a, b) {\n  for (var prop in b) {\n    if (exports.hasOwnProperty(b, prop)) {\n      a[prop] = b[prop];\n    }\n  }\n  return a;\n};\n\n/**\n * Deep extend an object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @returns {Object}\n */\nexports.deepExtend = function deepExtend (a, b) {\n  // TODO: add support for Arrays to deepExtend\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend');\n  }\n\n  for (var prop in b) {\n    if (exports.hasOwnProperty(b, prop)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {};\n        }\n        if (a[prop].constructor === Object) {\n          deepExtend(a[prop], b[prop]);\n        }\n        else {\n          a[prop] = b[prop];\n        }\n      } else if (Array.isArray(b[prop])) {\n        throw new TypeError('Arrays are not supported by deepExtend');\n      } else {\n        a[prop] = b[prop];\n      }\n    }\n  }\n  return a;\n};\n\n/**\n * Deep test equality of all fields in two pairs of arrays or objects.\n * @param {Array | Object} a\n * @param {Array | Object} b\n * @returns {boolean}\n */\nexports.deepEqual = function deepEqual (a, b) {\n  var prop, i, len;\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n\n    if (a.length != b.length) {\n      return false;\n    }\n\n    for (i = 0, len = a.length; i < len; i++) {\n      if (!exports.deepEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  else if (a instanceof Object) {\n    if (Array.isArray(b) || !(b instanceof Object)) {\n      return false;\n    }\n\n    for (prop in a) {\n      //noinspection JSUnfilteredForInLoop\n      if (!exports.deepEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n    for (prop in b) {\n      //noinspection JSUnfilteredForInLoop\n      if (!exports.deepEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  else {\n    return (typeof a === typeof b) && (a == b);\n  }\n};\n\n/**\n * Test whether the current JavaScript engine supports Object.defineProperty\n * @returns {boolean} returns true if supported\n */\nexports.canDefineProperty = function () {\n  // test needed for broken IE8 implementation\n  try {\n    if (Object.defineProperty) {\n      Object.defineProperty({}, 'x', { get: function () {} });\n      return true;\n    }\n  } catch (e) {}\n\n  return false;\n};\n\n/**\n * Attach a lazy loading property to a constant.\n * The given function `fn` is called once when the property is first requested.\n * On older browsers (<IE8), the function will fall back to direct evaluation\n * of the properties value.\n * @param {Object} object   Object where to add the property\n * @param {string} prop     Property name\n * @param {Function} fn     Function returning the property value. Called\n *                          without arguments.\n */\nexports.lazy = function (object, prop, fn) {\n  if (exports.canDefineProperty()) {\n    var _uninitialized = true;\n    var _value;\n    Object.defineProperty(object, prop, {\n      get: function () {\n        if (_uninitialized) {\n          _value = fn();\n          _uninitialized = false;\n        }\n        return _value;\n      },\n\n      set: function (value) {\n        _value = value;\n        _uninitialized = false;\n      },\n\n      configurable: true,\n      enumerable: true\n    });\n  }\n  else {\n    // fall back to immediate evaluation\n    object[prop] = fn();\n  }\n};\n\n/**\n * Traverse a path into an object.\n * When a namespace is missing, it will be created\n * @param {Object} object\n * @param {string} path   A dot separated string like 'name.space'\n * @return {Object} Returns the object at the end of the path\n */\nexports.traverse = function(object, path) {\n  var obj = object;\n\n  if (path) {\n    var names = path.split('.');\n    for (var i = 0; i < names.length; i++) {\n      var name = names[i];\n      if (!(name in obj)) {\n        obj[name] = {};\n      }\n      obj = obj[name];\n    }\n  }\n\n  return obj;\n};\n\n/**\n * A safe hasOwnProperty\n * @param {Object} object\n * @param {string} property\n */\nexports.hasOwnProperty = function (object, property) {\n  return object && Object.hasOwnProperty.call(object, property);\n}\n\n/**\n * Test whether an object is a factory. a factory has fields:\n *\n * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n * - name: string (optional)\n * - path: string    A dot separated path (optional)\n * - math: boolean   If true (false by default), the math namespace is passed\n *                   as fifth argument of the factory function\n *\n * @param {*} object\n * @returns {boolean}\n */\nexports.isFactory = function (object) {\n  return object && typeof object.factory === 'function';\n};\n","'use strict';\n\nvar formatNumber = require('./number').format;\nvar formatBigNumber = require('./bignumber/formatter').format;\n\n/**\n * Test whether value is a string\n * @param {*} value\n * @return {boolean} isString\n */\nexports.isString = function(value) {\n  return typeof value === 'string';\n};\n\n/**\n * Check if a text ends with a certain string.\n * @param {string} text\n * @param {string} search\n */\nexports.endsWith = function(text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return (text.substring(start, end) === search);\n};\n\n/**\n * Format a value of any type into a string.\n *\n * Usage:\n *     math.format(value)\n *     math.format(value, precision)\n *\n * When value is a function:\n *\n * - When the function has a property `syntax`, it returns this\n *   syntax description.\n * - In other cases, a string `'function'` is returned.\n *\n * When `value` is an Object:\n *\n * - When the object contains a property `format` being a function, this\n *   function is invoked as `value.format(options)` and the result is returned.\n * - When the object has its own `toString` method, this method is invoked\n *   and the result is returned.\n * - In other cases the function will loop over all object properties and\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n *\n * Example usage:\n *     math.format(2/7);                // '0.2857142857142857'\n *     math.format(math.pi, 3);         // '3.14'\n *     math.format(new Complex(2, 3));  // '2 + 3i'\n *     math.format('hello');            // '\"hello\"'\n *\n * @param {*} value             Value to be stringified\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @return {string} str\n */\nexports.format = function(value, options) {\n  if (typeof value === 'number') {\n    return formatNumber(value, options);\n  }\n\n  if (value && value.isBigNumber === true) {\n    return formatBigNumber(value, options);\n  }\n\n  if (value && value.isFraction === true) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return (value.s * value.n) + '/' + value.d;\n    }\n    else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n\n  if (exports.isString(value)) {\n    return '\"' + value + '\"';\n  }\n\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n\n  if (value && typeof value === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    }\n    else if (value && value.toString() !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString();\n    }\n    else {\n      var entries = [];\n\n      for (var key in value) {\n        if (value.hasOwnProperty(key)) {\n          entries.push('\"' + key + '\": ' + exports.format(value[key], options));\n        }\n      }\n\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n\n  return String(value);\n};\n\n/**\n * Stringify a value into a string enclosed in double quotes.\n * Unescaped double quotes and backslashes inside the value are escaped.\n * @param {*} value\n * @return {string}\n */\nexports.stringify = function (value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n  while (i < text.length) {\n    var c = text.charAt(i);\n\n    if (c === '\\\\') {\n      escaped += c;\n      i++;\n\n      c = text.charAt(i);\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\n        escaped += '\\\\';  // no valid escape character -> escape it\n      }\n      escaped += c;\n    }\n    else if (c === '\"') {\n      escaped += '\\\\\"';\n    }\n    else {\n      escaped += c;\n    }\n    i++;\n  }\n\n  return '\"' + escaped + '\"';\n}\n\n/**\n * Escape special HTML characters\n * @param {*} value\n * @return {string}\n */\nexports.escape = function (value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;')\n\t\t\t .replace(/\"/g, '&quot;')\n\t\t\t .replace(/'/g, '&#39;')\n\t\t\t .replace(/</g, '&lt;')\n\t\t\t .replace(/>/g, '&gt;');\n  \n  return text;\n}\n\n/**\n * Recursively format an n-dimensional matrix\n * Example output: \"[[1, 2], [3, 4]]\"\n * @param {Array} array\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @returns {string} str\n */\nfunction formatArray (array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n    for (var i = 0; i < len; i++) {\n      if (i != 0) {\n        str += ', ';\n      }\n      str += formatArray(array[i], options);\n    }\n    str += ']';\n    return str;\n  }\n  else {\n    return exports.format(array, options);\n  }\n}","'use strict';\n\n/**\n * Determine the type of a variable\n *\n *     type(x)\n *\n * The following types are recognized:\n *\n *     'undefined'\n *     'null'\n *     'boolean'\n *     'number'\n *     'string'\n *     'Array'\n *     'Function'\n *     'Date'\n *     'RegExp'\n *     'Object'\n *\n * @param {*} x\n * @return {string} Returns the name of the type. Primitive types are lower case,\n *                  non-primitive types are upper-camel-case.\n *                  For example 'number', 'string', 'Array', 'Date'.\n */\nexports.type = function(x) {\n  var type = typeof x;\n\n  if (type === 'object') {\n    if (x === null)           return 'null';\n    if (Array.isArray(x))     return 'Array';\n    if (x instanceof Date)    return 'Date';\n    if (x instanceof RegExp)  return 'RegExp';\n    if (x instanceof Boolean) return 'boolean';\n    if (x instanceof Number)  return 'number';\n    if (x instanceof String)  return 'string';\n\n    return 'Object';\n  }\n\n  if (type === 'function')    return 'Function';\n\n  return type;\n};\n","'use strict';\r\n\r\nvar width = 256;// each RC4 output is 0 <= x < 256\r\nvar chunks = 6;// at least six RC4 outputs for each double\r\nvar digits = 52;// there are 52 significant digits in a double\r\nvar pool = [];// pool: entropy pool starts empty\r\nvar GLOBAL = typeof global === 'undefined' ? window : global;\r\n\r\n//\r\n// The following constants are related to IEEE 754 limits.\r\n//\r\nvar startdenom = Math.pow(width, chunks),\r\n    significance = Math.pow(2, digits),\r\n    overflow = significance * 2,\r\n    mask = width - 1;\r\n\r\n\r\nvar oldRandom = Math.random;\r\n\r\n//\r\n// seedrandom()\r\n// This is the seedrandom function described above.\r\n//\r\nmodule.exports = function(seed, options) {\r\n  if (options && options.global === true) {\r\n    options.global = false;\r\n    Math.random = module.exports(seed, options);\r\n    options.global = true;\r\n    return Math.random;\r\n  }\r\n  var use_entropy = (options && options.entropy) || false;\r\n  var key = [];\r\n\r\n  // Flatten the seed string or build one from local entropy if needed.\r\n  var shortseed = mixkey(flatten(\r\n    use_entropy ? [seed, tostring(pool)] :\r\n    0 in arguments ? seed : autoseed(), 3), key);\r\n\r\n  // Use the seed to initialize an ARC4 generator.\r\n  var arc4 = new ARC4(key);\r\n\r\n  // Mix the randomness into accumulated entropy.\r\n  mixkey(tostring(arc4.S), pool);\r\n\r\n  // Override Math.random\r\n\r\n  // This function returns a random double in [0, 1) that contains\r\n  // randomness in every bit of the mantissa of the IEEE 754 value.\r\n\r\n  return function() {         // Closure to return a random double:\r\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\r\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\r\n        x = 0;                          //   and no 'extra last byte'.\r\n    while (n < significance) {          // Fill up all significant digits by\r\n      n = (n + x) * width;              //   shifting numerator and\r\n      d *= width;                       //   denominator and generating a\r\n      x = arc4.g(1);                    //   new least-significant-byte.\r\n    }\r\n    while (n >= overflow) {             // To avoid rounding up, before adding\r\n      n /= 2;                           //   last byte, shift everything\r\n      d /= 2;                           //   right using integer Math until\r\n      x >>>= 1;                         //   we have exactly the desired bits.\r\n    }\r\n    return (n + x) / d;                 // Form the number within [0, 1).\r\n  };\r\n};\r\n\r\nmodule.exports.resetGlobal = function () {\r\n  Math.random = oldRandom;\r\n};\r\n\r\n//\r\n// ARC4\r\n//\r\n// An ARC4 implementation.  The constructor takes a key in the form of\r\n// an array of at most (width) integers that should be 0 <= x < (width).\r\n//\r\n// The g(count) method returns a pseudorandom integer that concatenates\r\n// the next (count) outputs from ARC4.  Its return value is a number x\r\n// that is in the range 0 <= x < (width ^ count).\r\n//\r\n/** @constructor */\r\nfunction ARC4(key) {\r\n  var t, keylen = key.length,\r\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\r\n\r\n  // The empty key [] is treated as [0].\r\n  if (!keylen) { key = [keylen++]; }\r\n\r\n  // Set up S using the standard key scheduling algorithm.\r\n  while (i < width) {\r\n    s[i] = i++;\r\n  }\r\n  for (i = 0; i < width; i++) {\r\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\r\n    s[j] = t;\r\n  }\r\n\r\n  // The \"g\" method returns the next (count) outputs as one number.\r\n  (me.g = function(count) {\r\n    // Using instance members instead of closure state nearly doubles speed.\r\n    var t, r = 0,\r\n        i = me.i, j = me.j, s = me.S;\r\n    while (count--) {\r\n      t = s[i = mask & (i + 1)];\r\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\r\n    }\r\n    me.i = i; me.j = j;\r\n    return r;\r\n    // For robust unpredictability discard an initial batch of values.\r\n    // See http://www.rsa.com/rsalabs/node.asp?id=2009\r\n  })(width);\r\n}\r\n\r\n//\r\n// flatten()\r\n// Converts an object tree to nested arrays of strings.\r\n//\r\nfunction flatten(obj, depth) {\r\n  var result = [], typ = (typeof obj)[0], prop;\r\n  if (depth && typ == 'o') {\r\n    for (prop in obj) {\r\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\r\n    }\r\n  }\r\n  return (result.length ? result : typ == 's' ? obj : obj + '\\0');\r\n}\r\n\r\n//\r\n// mixkey()\r\n// Mixes a string seed into a key that is an array of integers, and\r\n// returns a shortened string seed that is equivalent to the result key.\r\n//\r\nfunction mixkey(seed, key) {\r\n  var stringseed = seed + '', smear, j = 0;\r\n  while (j < stringseed.length) {\r\n    key[mask & j] =\r\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\r\n  }\r\n  return tostring(key);\r\n}\r\n\r\n//\r\n// autoseed()\r\n// Returns an object for autoseeding, using window.crypto if available.\r\n//\r\n/** @param {Uint8Array=} seed */\r\nfunction autoseed(seed) {\r\n  try {\r\n    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));\r\n    return tostring(seed);\r\n  } catch (e) {\r\n    return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,\r\n            GLOBAL.screen, tostring(pool)];\r\n  }\r\n}\r\n\r\n//\r\n// tostring()\r\n// Converts an array of charcodes to a string\r\n//\r\nfunction tostring(a) {\r\n  return String.fromCharCode.apply(0, a);\r\n}\r\n\r\n//\r\n// When seedrandom.js is loaded, we immediately mix a few bits\r\n// from the built-in RNG into the entropy pool.  Because we do\r\n// not want to intefere with determinstic PRNG state later,\r\n// seedrandom will not call Math.random on its own again after\r\n// initialization.\r\n//\r\nmixkey(Math.random(), pool);\r\n","function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\n","/**\n * typed-function\n *\n * Type checking for JavaScript functions\n *\n * https://github.com/josdejong/typed-function\n */\n'use strict';\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    // OldNode. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like OldNode.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.typed = factory();\n  }\n}(this, function () {\n  // factory function to create a new instance of typed-function\n  // TODO: allow passing configuration, types, tests via the factory function\n  function create() {\n    /**\n     * Get a type test function for a specific data type\n     * @param {string} name                   Name of a data type like 'number' or 'string'\n     * @returns {Function(obj: *) : boolean}  Returns a type testing function.\n     *                                        Throws an error for an unknown type.\n     */\n    function getTypeTest(name) {\n      var test;\n      for (var i = 0; i < typed.types.length; i++) {\n        var entry = typed.types[i];\n        if (entry.name === name) {\n          test = entry.test;\n          break;\n        }\n      }\n\n      if (!test) {\n        var hint;\n        for (i = 0; i < typed.types.length; i++) {\n          entry = typed.types[i];\n          if (entry.name.toLowerCase() == name.toLowerCase()) {\n            hint = entry.name;\n            break;\n          }\n        }\n\n        throw new Error('Unknown type \"' + name + '\"' +\n            (hint ? ('. Did you mean \"' + hint + '\"?') : ''));\n      }\n      return test;\n    }\n\n    /**\n     * Retrieve the function name from a set of functions, and check\n     * whether the name of all functions match (if given)\n     * @param {Array.<function>} fns\n     */\n    function getName (fns) {\n      var name = '';\n\n      for (var i = 0; i < fns.length; i++) {\n        var fn = fns[i];\n\n        // merge function name when this is a typed function\n        if (fn.signatures && fn.name != '') {\n          if (name == '') {\n            name = fn.name;\n          }\n          else if (name != fn.name) {\n            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');\n            err.data = {\n              actual: fn.name,\n              expected: name\n            };\n            throw err;\n          }\n        }\n      }\n\n      return name;\n    }\n\n    /**\n     * Create an ArgumentsError. Creates messages like:\n     *\n     *   Unexpected type of argument (expected: ..., actual: ..., index: ...)\n     *   Too few arguments (expected: ..., index: ...)\n     *   Too many arguments (expected: ..., actual: ...)\n     *\n     * @param {String} fn         Function name\n     * @param {number} argCount   Number of arguments\n     * @param {Number} index      Current argument index\n     * @param {*} actual          Current argument\n     * @param {string} [expected] An optional, comma separated string with\n     *                            expected types on given index\n     * @extends Error\n     */\n    function createError(fn, argCount, index, actual, expected) {\n      var actualType = getTypeOf(actual);\n      var _expected = expected ? expected.split(',') : null;\n      var _fn = (fn || 'unnamed');\n      var anyType = _expected && contains(_expected, 'any');\n      var message;\n      var data = {\n        fn: fn,\n        index: index,\n        actual: actual,\n        expected: _expected\n      };\n\n      if (_expected) {\n        if (argCount > index && !anyType) {\n          // unexpected type\n          message = 'Unexpected type of argument in function ' + _fn +\n              ' (expected: ' + _expected.join(' or ') + ', actual: ' + actualType + ', index: ' + index + ')';\n        }\n        else {\n          // too few arguments\n          message = 'Too few arguments in function ' + _fn +\n              ' (expected: ' + _expected.join(' or ') + ', index: ' + index + ')';\n        }\n      }\n      else {\n        // too many arguments\n        message = 'Too many arguments in function ' + _fn +\n            ' (expected: ' + index + ', actual: ' + argCount + ')'\n      }\n\n      var err = new TypeError(message);\n      err.data = data;\n      return err;\n    }\n\n    /**\n     * Collection with function references (local shortcuts to functions)\n     * @constructor\n     * @param {string} [name='refs']  Optional name for the refs, used to generate\n     *                                JavaScript code\n     */\n    function Refs(name) {\n      this.name = name || 'refs';\n      this.categories = {};\n    }\n\n    /**\n     * Add a function reference.\n     * @param {Function} fn\n     * @param {string} [category='fn']    A function category, like 'fn' or 'signature'\n     * @returns {string} Returns the function name, for example 'fn0' or 'signature2'\n     */\n    Refs.prototype.add = function (fn, category) {\n      var cat = category || 'fn';\n      if (!this.categories[cat]) this.categories[cat] = [];\n\n      var index = this.categories[cat].indexOf(fn);\n      if (index == -1) {\n        index = this.categories[cat].length;\n        this.categories[cat].push(fn);\n      }\n\n      return cat + index;\n    };\n\n    /**\n     * Create code lines for all function references\n     * @returns {string} Returns the code containing all function references\n     */\n    Refs.prototype.toCode = function () {\n      var code = [];\n      var path = this.name + '.categories';\n      var categories = this.categories;\n\n      for (var cat in categories) {\n        if (categories.hasOwnProperty(cat)) {\n          var category = categories[cat];\n\n          for (var i = 0; i < category.length; i++) {\n            code.push('var ' + cat + i + ' = ' + path + '[\\'' + cat + '\\'][' + i + '];');\n          }\n        }\n      }\n\n      return code.join('\\n');\n    };\n\n    /**\n     * A function parameter\n     * @param {string | string[] | Param} types    A parameter type like 'string',\n     *                                             'number | boolean'\n     * @param {boolean} [varArgs=false]            Variable arguments if true\n     * @constructor\n     */\n    function Param(types, varArgs) {\n      // parse the types, can be a string with types separated by pipe characters |\n      if (typeof types === 'string') {\n        // parse variable arguments operator (ellipses '...number')\n        var _types = types.trim();\n        var _varArgs = _types.substr(0, 3) === '...';\n        if (_varArgs) {\n          _types = _types.substr(3);\n        }\n        if (_types === '') {\n          this.types = ['any'];\n        }\n        else {\n          this.types = _types.split('|');\n          for (var i = 0; i < this.types.length; i++) {\n            this.types[i] = this.types[i].trim();\n          }\n        }\n      }\n      else if (Array.isArray(types)) {\n        this.types = types;\n      }\n      else if (types instanceof Param) {\n        return types.clone();\n      }\n      else {\n        throw new Error('String or Array expected');\n      }\n\n      // can hold a type to which to convert when handling this parameter\n      this.conversions = [];\n      // TODO: implement better API for conversions, be able to add conversions via constructor (support a new type Object?)\n\n      // variable arguments\n      this.varArgs = _varArgs || varArgs || false;\n\n      // check for any type arguments\n      this.anyType = this.types.indexOf('any') !== -1;\n    }\n\n    /**\n     * Order Params\n     * any type ('any') will be ordered last, and object as second last (as other\n     * types may be an object as well, like Array).\n     *\n     * @param {Param} a\n     * @param {Param} b\n     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.\n     */\n    Param.compare = function (a, b) {\n      // TODO: simplify parameter comparison, it's a mess\n      if (a.anyType) return 1;\n      if (b.anyType) return -1;\n\n      if (contains(a.types, 'Object')) return 1;\n      if (contains(b.types, 'Object')) return -1;\n\n      if (a.hasConversions()) {\n        if (b.hasConversions()) {\n          var i, ac, bc;\n\n          for (i = 0; i < a.conversions.length; i++) {\n            if (a.conversions[i] !== undefined) {\n              ac = a.conversions[i];\n              break;\n            }\n          }\n\n          for (i = 0; i < b.conversions.length; i++) {\n            if (b.conversions[i] !== undefined) {\n              bc = b.conversions[i];\n              break;\n            }\n          }\n\n          return typed.conversions.indexOf(ac) - typed.conversions.indexOf(bc);\n        }\n        else {\n          return 1;\n        }\n      }\n      else {\n        if (b.hasConversions()) {\n          return -1;\n        }\n        else {\n          // both params have no conversions\n          var ai, bi;\n\n          for (i = 0; i < typed.types.length; i++) {\n            if (typed.types[i].name === a.types[0]) {\n              ai = i;\n              break;\n            }\n          }\n\n          for (i = 0; i < typed.types.length; i++) {\n            if (typed.types[i].name === b.types[0]) {\n              bi = i;\n              break;\n            }\n          }\n\n          return ai - bi;\n        }\n      }\n    };\n\n    /**\n     * Test whether this parameters types overlap an other parameters types.\n     * Will not match ['any'] with ['number']\n     * @param {Param} other\n     * @return {boolean} Returns true when there are overlapping types\n     */\n    Param.prototype.overlapping = function (other) {\n      for (var i = 0; i < this.types.length; i++) {\n        if (contains(other.types, this.types[i])) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    /**\n     * Test whether this parameters types matches an other parameters types.\n     * When any of the two parameters contains `any`, true is returned\n     * @param {Param} other\n     * @return {boolean} Returns true when there are matching types\n     */\n    Param.prototype.matches = function (other) {\n      return this.anyType || other.anyType || this.overlapping(other);\n    };\n\n    /**\n     * Create a clone of this param\n     * @returns {Param} Returns a cloned version of this param\n     */\n    Param.prototype.clone = function () {\n      var param = new Param(this.types.slice(), this.varArgs);\n      param.conversions = this.conversions.slice();\n      return param;\n    };\n\n    /**\n     * Test whether this parameter contains conversions\n     * @returns {boolean} Returns true if the parameter contains one or\n     *                    multiple conversions.\n     */\n    Param.prototype.hasConversions = function () {\n      return this.conversions.length > 0;\n    };\n\n    /**\n     * Tests whether this parameters contains any of the provided types\n     * @param {Object} types  A Map with types, like {'number': true}\n     * @returns {boolean}     Returns true when the parameter contains any\n     *                        of the provided types\n     */\n    Param.prototype.contains = function (types) {\n      for (var i = 0; i < this.types.length; i++) {\n        if (types[this.types[i]]) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    /**\n     * Return a string representation of this params types, like 'string' or\n     * 'number | boolean' or '...number'\n     * @param {boolean} [toConversion]   If true, the returned types string\n     *                                   contains the types where the parameter\n     *                                   will convert to. If false (default)\n     *                                   the \"from\" types are returned\n     * @returns {string}\n     */\n    Param.prototype.toString = function (toConversion) {\n      var types = [];\n      var keys = {};\n\n      for (var i = 0; i < this.types.length; i++) {\n        var conversion = this.conversions[i];\n        var type = toConversion && conversion ? conversion.to : this.types[i];\n        if (!(type in keys)) {\n          keys[type] = true;\n          types.push(type);\n        }\n      }\n\n      return (this.varArgs ? '...' : '') + types.join('|');\n    };\n\n    /**\n     * A function signature\n     * @param {string | string[] | Param[]} params\n     *                         Array with the type(s) of each parameter,\n     *                         or a comma separated string with types\n     * @param {Function} fn    The actual function\n     * @constructor\n     */\n    function Signature(params, fn) {\n      var _params;\n      if (typeof params === 'string') {\n        _params = (params !== '') ? params.split(',') : [];\n      }\n      else if (Array.isArray(params)) {\n        _params = params;\n      }\n      else {\n        throw new Error('string or Array expected');\n      }\n\n      this.params = new Array(_params.length);\n      this.anyType = false;\n      this.varArgs = false;\n      for (var i = 0; i < _params.length; i++) {\n        var param = new Param(_params[i]);\n        this.params[i] = param;\n        if (param.anyType) {\n          this.anyType = true;\n        }\n        if (i === _params.length - 1) {\n          // the last argument\n          this.varArgs = param.varArgs;\n        }\n        else {\n          // non-last argument\n          if (param.varArgs) {\n            throw new SyntaxError('Unexpected variable arguments operator \"...\"');\n          }\n        }\n      }\n\n      this.fn = fn;\n    }\n\n    /**\n     * Create a clone of this signature\n     * @returns {Signature} Returns a cloned version of this signature\n     */\n    Signature.prototype.clone = function () {\n      return new Signature(this.params.slice(), this.fn);\n    };\n\n    /**\n     * Expand a signature: split params with union types in separate signatures\n     * For example split a Signature \"string | number\" into two signatures.\n     * @return {Signature[]} Returns an array with signatures (at least one)\n     */\n    Signature.prototype.expand = function () {\n      var signatures = [];\n\n      function recurse(signature, path) {\n        if (path.length < signature.params.length) {\n          var i, newParam, conversion;\n\n          var param = signature.params[path.length];\n          if (param.varArgs) {\n            // a variable argument. do not split the types in the parameter\n            newParam = param.clone();\n\n            // add conversions to the parameter\n            // recurse for all conversions\n            for (i = 0; i < typed.conversions.length; i++) {\n              conversion = typed.conversions[i];\n              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {\n                var j = newParam.types.length;\n                newParam.types[j] = conversion.from;\n                newParam.conversions[j] = conversion;\n              }\n            }\n\n            recurse(signature, path.concat(newParam));\n          }\n          else {\n            // split each type in the parameter\n            for (i = 0; i < param.types.length; i++) {\n              recurse(signature, path.concat(new Param(param.types[i])));\n            }\n\n            // recurse for all conversions\n            for (i = 0; i < typed.conversions.length; i++) {\n              conversion = typed.conversions[i];\n              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {\n                newParam = new Param(conversion.from);\n                newParam.conversions[0] = conversion;\n                recurse(signature, path.concat(newParam));\n              }\n            }\n          }\n        }\n        else {\n          signatures.push(new Signature(path, signature.fn));\n        }\n      }\n\n      recurse(this, []);\n\n      return signatures;\n    };\n\n    /**\n     * Compare two signatures.\n     *\n     * When two params are equal and contain conversions, they will be sorted\n     * by lowest index of the first conversions.\n     *\n     * @param {Signature} a\n     * @param {Signature} b\n     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.\n     */\n    Signature.compare = function (a, b) {\n      if (a.params.length > b.params.length) return 1;\n      if (a.params.length < b.params.length) return -1;\n\n      // count the number of conversions\n      var i;\n      var len = a.params.length; // a and b have equal amount of params\n      var ac = 0;\n      var bc = 0;\n      for (i = 0; i < len; i++) {\n        if (a.params[i].hasConversions()) ac++;\n        if (b.params[i].hasConversions()) bc++;\n      }\n\n      if (ac > bc) return 1;\n      if (ac < bc) return -1;\n\n      // compare the order per parameter\n      for (i = 0; i < a.params.length; i++) {\n        var cmp = Param.compare(a.params[i], b.params[i]);\n        if (cmp !== 0) {\n          return cmp;\n        }\n      }\n\n      return 0;\n    };\n\n    /**\n     * Test whether any of the signatures parameters has conversions\n     * @return {boolean} Returns true when any of the parameters contains\n     *                   conversions.\n     */\n    Signature.prototype.hasConversions = function () {\n      for (var i = 0; i < this.params.length; i++) {\n        if (this.params[i].hasConversions()) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    /**\n     * Test whether this signature should be ignored.\n     * Checks whether any of the parameters contains a type listed in\n     * typed.ignore\n     * @return {boolean} Returns true when the signature should be ignored\n     */\n    Signature.prototype.ignore = function () {\n      // create a map with ignored types\n      var types = {};\n      for (var i = 0; i < typed.ignore.length; i++) {\n        types[typed.ignore[i]] = true;\n      }\n\n      // test whether any of the parameters contains this type\n      for (i = 0; i < this.params.length; i++) {\n        if (this.params[i].contains(types)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    /**\n     * Test whether the path of this signature matches a given path.\n     * @param {Param[]} params\n     */\n    Signature.prototype.paramsStartWith = function (params) {\n      if (params.length === 0) {\n        return true;\n      }\n\n      var aLast = last(this.params);\n      var bLast = last(params);\n\n      for (var i = 0; i < params.length; i++) {\n        var a = this.params[i] || (aLast.varArgs ? aLast: null);\n        var b = params[i]      || (bLast.varArgs ? bLast: null);\n\n        if (!a ||  !b || !a.matches(b)) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    /**\n     * Generate the code to invoke this signature\n     * @param {Refs} refs\n     * @param {string} prefix\n     * @returns {string} Returns code\n     */\n    Signature.prototype.toCode = function (refs, prefix) {\n      var code = [];\n\n      var args = new Array(this.params.length);\n      for (var i = 0; i < this.params.length; i++) {\n        var param = this.params[i];\n        var conversion = param.conversions[0];\n        if (param.varArgs) {\n          args[i] = 'varArgs';\n        }\n        else if (conversion) {\n          args[i] = refs.add(conversion.convert, 'convert') + '(arg' + i + ')';\n        }\n        else {\n          args[i] = 'arg' + i;\n        }\n      }\n\n      var ref = this.fn ? refs.add(this.fn, 'signature') : undefined;\n      if (ref) {\n        return prefix + 'return ' + ref + '(' + args.join(', ') + '); // signature: ' + this.params.join(', ');\n      }\n\n      return code.join('\\n');\n    };\n\n    /**\n     * Return a string representation of the signature\n     * @returns {string}\n     */\n    Signature.prototype.toString = function () {\n      return this.params.join(', ');\n    };\n\n    /**\n     * A group of signatures with the same parameter on given index\n     * @param {Param[]} path\n     * @param {Signature} [signature]\n     * @param {Node[]} childs\n     * @param {boolean} [fallThrough=false]\n     * @constructor\n     */\n    function Node(path, signature, childs, fallThrough) {\n      this.path = path || [];\n      this.param = path[path.length - 1] || null;\n      this.signature = signature || null;\n      this.childs = childs || [];\n      this.fallThrough = fallThrough || false;\n    }\n\n    /**\n     * Generate code for this group of signatures\n     * @param {Refs} refs\n     * @param {string} prefix\n     * @returns {string} Returns the code as string\n     */\n    Node.prototype.toCode = function (refs, prefix) {\n      // TODO: split this function in multiple functions, it's too large\n      var code = [];\n\n      if (this.param) {\n        var index = this.path.length - 1;\n        var conversion = this.param.conversions[0];\n        var comment = '// type: ' + (conversion ?\n                (conversion.from + ' (convert to ' + conversion.to + ')') :\n                this.param);\n\n        // non-root node (path is non-empty)\n        if (this.param.varArgs) {\n          if (this.param.anyType) {\n            // variable arguments with any type\n            code.push(prefix + 'if (arguments.length > ' + index + ') {');\n            code.push(prefix + '  var varArgs = [];');\n            code.push(prefix + '  for (var i = ' + index + '; i < arguments.length; i++) {');\n            code.push(prefix + '    varArgs.push(arguments[i]);');\n            code.push(prefix + '  }');\n            code.push(this.signature.toCode(refs, prefix + '  '));\n            code.push(prefix + '}');\n          }\n          else {\n            // variable arguments with a fixed type\n            var getTests = function (types, arg) {\n              var tests = [];\n              for (var i = 0; i < types.length; i++) {\n                tests[i] = refs.add(getTypeTest(types[i]), 'test') + '(' + arg + ')';\n              }\n              return tests.join(' || ');\n            }.bind(this);\n\n            var allTypes = this.param.types;\n            var exactTypes = [];\n            for (var i = 0; i < allTypes.length; i++) {\n              if (this.param.conversions[i] === undefined) {\n                exactTypes.push(allTypes[i]);\n              }\n            }\n\n            code.push(prefix + 'if (' + getTests(allTypes, 'arg' + index) + ') { ' + comment);\n            code.push(prefix + '  var varArgs = [arg' + index + '];');\n            code.push(prefix + '  for (var i = ' + (index + 1) + '; i < arguments.length; i++) {');\n            code.push(prefix + '    if (' + getTests(exactTypes, 'arguments[i]') + ') {');\n            code.push(prefix + '      varArgs.push(arguments[i]);');\n\n            for (var i = 0; i < allTypes.length; i++) {\n              var conversion_i = this.param.conversions[i];\n              if (conversion_i) {\n                var test = refs.add(getTypeTest(allTypes[i]), 'test');\n                var convert = refs.add(conversion_i.convert, 'convert');\n                code.push(prefix + '    }');\n                code.push(prefix + '    else if (' + test + '(arguments[i])) {');\n                code.push(prefix + '      varArgs.push(' + convert + '(arguments[i]));');\n              }\n            }\n            code.push(prefix + '    } else {');\n            code.push(prefix + '      throw createError(name, arguments.length, i, arguments[i], \\'' + exactTypes.join(',') + '\\');');\n            code.push(prefix + '    }');\n            code.push(prefix + '  }');\n            code.push(this.signature.toCode(refs, prefix + '  '));\n            code.push(prefix + '}');\n          }\n        }\n        else {\n          if (this.param.anyType) {\n            // any type\n            code.push(prefix + '// type: any');\n            code.push(this._innerCode(refs, prefix));\n          }\n          else {\n            // regular type\n            var type = this.param.types[0];\n            var test = type !== 'any' ? refs.add(getTypeTest(type), 'test') : null;\n\n            code.push(prefix + 'if (' + test + '(arg' + index + ')) { ' + comment);\n            code.push(this._innerCode(refs, prefix + '  '));\n            code.push(prefix + '}');\n          }\n        }\n      }\n      else {\n        // root node (path is empty)\n        code.push(this._innerCode(refs, prefix));\n      }\n\n      return code.join('\\n');\n    };\n\n    /**\n     * Generate inner code for this group of signatures.\n     * This is a helper function of Node.prototype.toCode\n     * @param {Refs} refs\n     * @param {string} prefix\n     * @returns {string} Returns the inner code as string\n     * @private\n     */\n    Node.prototype._innerCode = function (refs, prefix) {\n      var code = [];\n      var i;\n\n      if (this.signature) {\n        code.push(prefix + 'if (arguments.length === ' + this.path.length + ') {');\n        code.push(this.signature.toCode(refs, prefix + '  '));\n        code.push(prefix + '}');\n      }\n\n      for (i = 0; i < this.childs.length; i++) {\n        code.push(this.childs[i].toCode(refs, prefix));\n      }\n\n      // TODO: shouldn't the this.param.anyType check be redundant\n      if (!this.fallThrough || (this.param && this.param.anyType)) {\n        var exceptions = this._exceptions(refs, prefix);\n        if (exceptions) {\n          code.push(exceptions);\n        }\n      }\n\n      return code.join('\\n');\n    };\n\n\n    /**\n     * Generate code to throw exceptions\n     * @param {Refs} refs\n     * @param {string} prefix\n     * @returns {string} Returns the inner code as string\n     * @private\n     */\n    Node.prototype._exceptions = function (refs, prefix) {\n      var index = this.path.length;\n\n      if (this.childs.length === 0) {\n        // TODO: can this condition be simplified? (we have a fall-through here)\n        return [\n          prefix + 'if (arguments.length > ' + index + ') {',\n          prefix + '  throw createError(name, arguments.length, ' + index + ', arguments[' + index + ']);',\n          prefix + '}'\n        ].join('\\n');\n      }\n      else {\n        var keys = {};\n        var types = [];\n\n        for (var i = 0; i < this.childs.length; i++) {\n          var node = this.childs[i];\n          if (node.param) {\n            for (var j = 0; j < node.param.types.length; j++) {\n              var type = node.param.types[j];\n              if (!(type in keys) && !node.param.conversions[j]) {\n                keys[type] = true;\n                types.push(type);\n              }\n            }\n          }\n        }\n\n        return prefix + 'throw createError(name, arguments.length, ' + index + ', arguments[' + index + '], \\'' + types.join(',') + '\\');';\n      }\n    };\n\n    /**\n     * Split all raw signatures into an array with expanded Signatures\n     * @param {Object.<string, Function>} rawSignatures\n     * @return {Signature[]} Returns an array with expanded signatures\n     */\n    function parseSignatures(rawSignatures) {\n      // FIXME: need to have deterministic ordering of signatures, do not create via object\n      var signature;\n      var keys = {};\n      var signatures = [];\n      var i;\n\n      for (var types in rawSignatures) {\n        if (rawSignatures.hasOwnProperty(types)) {\n          var fn = rawSignatures[types];\n          signature = new Signature(types, fn);\n\n          if (signature.ignore()) {\n            continue;\n          }\n\n          var expanded = signature.expand();\n\n          for (i = 0; i < expanded.length; i++) {\n            var signature_i = expanded[i];\n            var key = signature_i.toString();\n            var existing = keys[key];\n            if (!existing) {\n              keys[key] = signature_i;\n            }\n            else {\n              var cmp = Signature.compare(signature_i, existing);\n              if (cmp < 0) {\n                // override if sorted first\n                keys[key] = signature_i;\n              }\n              else if (cmp === 0) {\n                throw new Error('Signature \"' + key + '\" is defined twice');\n              }\n              // else: just ignore\n            }\n          }\n        }\n      }\n\n      // convert from map to array\n      for (key in keys) {\n        if (keys.hasOwnProperty(key)) {\n          signatures.push(keys[key]);\n        }\n      }\n\n      // order the signatures\n      signatures.sort(function (a, b) {\n        return Signature.compare(a, b);\n      });\n\n      // filter redundant conversions from signatures with varArgs\n      // TODO: simplify this loop or move it to a separate function\n      for (i = 0; i < signatures.length; i++) {\n        signature = signatures[i];\n\n        if (signature.varArgs) {\n          var index = signature.params.length - 1;\n          var param = signature.params[index];\n\n          var t = 0;\n          while (t < param.types.length) {\n            if (param.conversions[t]) {\n              var type = param.types[t];\n\n              for (var j = 0; j < signatures.length; j++) {\n                var other = signatures[j];\n                var p = other.params[index];\n\n                if (other !== signature &&\n                    p &&\n                    contains(p.types, type) && !p.conversions[index]) {\n                  // this (conversion) type already exists, remove it\n                  param.types.splice(t, 1);\n                  param.conversions.splice(t, 1);\n                  t--;\n                  break;\n                }\n              }\n            }\n            t++;\n          }\n        }\n      }\n\n      return signatures;\n    }\n\n    /**\n     * Filter all any type signatures\n     * @param {Signature[]} signatures\n     * @return {Signature[]} Returns only any type signatures\n     */\n    function filterAnyTypeSignatures (signatures) {\n      var filtered = [];\n\n      for (var i = 0; i < signatures.length; i++) {\n        if (signatures[i].anyType) {\n          filtered.push(signatures[i]);\n        }\n      }\n\n      return filtered;\n    }\n\n    /**\n     * create a map with normalized signatures as key and the function as value\n     * @param {Signature[]} signatures   An array with split signatures\n     * @return {Object.<string, Function>} Returns a map with normalized\n     *                                     signatures as key, and the function\n     *                                     as value.\n     */\n    function mapSignatures(signatures) {\n      var normalized = {};\n\n      for (var i = 0; i < signatures.length; i++) {\n        var signature = signatures[i];\n        if (signature.fn && !signature.hasConversions()) {\n          var params = signature.params.join(',');\n          normalized[params] = signature.fn;\n        }\n      }\n\n      return normalized;\n    }\n\n    /**\n     * Parse signatures recursively in a node tree.\n     * @param {Signature[]} signatures  Array with expanded signatures\n     * @param {Param[]} path            Traversed path of parameter types\n     * @param {Signature[]} anys\n     * @return {Node}                   Returns a node tree\n     */\n    function parseTree(signatures, path, anys) {\n      var i, signature;\n      var index = path.length;\n      var nodeSignature;\n\n      var filtered = [];\n      for (i = 0; i < signatures.length; i++) {\n        signature = signatures[i];\n\n        // filter the first signature with the correct number of params\n        if (signature.params.length === index && !nodeSignature) {\n          nodeSignature = signature;\n        }\n\n        if (signature.params[index] != undefined) {\n          filtered.push(signature);\n        }\n      }\n\n      // sort the filtered signatures by param\n      filtered.sort(function (a, b) {\n        return Param.compare(a.params[index], b.params[index]);\n      });\n\n      // recurse over the signatures\n      var entries = [];\n      for (i = 0; i < filtered.length; i++) {\n        signature = filtered[i];\n        // group signatures with the same param at current index\n        var param = signature.params[index];\n\n        // TODO: replace the next filter loop\n        var existing = entries.filter(function (entry) {\n          return entry.param.overlapping(param);\n        })[0];\n\n        //var existing;\n        //for (var j = 0; j < entries.length; j++) {\n        //  if (entries[j].param.overlapping(param)) {\n        //    existing = entries[j];\n        //    break;\n        //  }\n        //}\n\n        if (existing) {\n          if (existing.param.varArgs) {\n            throw new Error('Conflicting types \"' + existing.param + '\" and \"' + param + '\"');\n          }\n          existing.signatures.push(signature);\n        }\n        else {\n          entries.push({\n            param: param,\n            signatures: [signature]\n          });\n        }\n      }\n\n      // find all any type signature that can still match our current path\n      var matchingAnys = [];\n      for (i = 0; i < anys.length; i++) {\n        if (anys[i].paramsStartWith(path)) {\n          matchingAnys.push(anys[i]);\n        }\n      }\n\n      // see if there are any type signatures that don't match any of the\n      // signatures that we have in our tree, i.e. we have alternative\n      // matching signature(s) outside of our current tree and we should\n      // fall through to them instead of throwing an exception\n      var fallThrough = false;\n      for (i = 0; i < matchingAnys.length; i++) {\n        if (!contains(signatures, matchingAnys[i])) {\n          fallThrough = true;\n          break;\n        }\n      }\n\n      // parse the childs\n      var childs = new Array(entries.length);\n      for (i = 0; i < entries.length; i++) {\n        var entry = entries[i];\n        childs[i] = parseTree(entry.signatures, path.concat(entry.param), matchingAnys)\n      }\n\n      return new Node(path, nodeSignature, childs, fallThrough);\n    }\n\n    /**\n     * Generate an array like ['arg0', 'arg1', 'arg2']\n     * @param {number} count Number of arguments to generate\n     * @returns {Array} Returns an array with argument names\n     */\n    function getArgs(count) {\n      // create an array with all argument names\n      var args = [];\n      for (var i = 0; i < count; i++) {\n        args[i] = 'arg' + i;\n      }\n\n      return args;\n    }\n\n    /**\n     * Compose a function from sub-functions each handling a single type signature.\n     * Signatures:\n     *   typed(signature: string, fn: function)\n     *   typed(name: string, signature: string, fn: function)\n     *   typed(signatures: Object.<string, function>)\n     *   typed(name: string, signatures: Object.<string, function>)\n     *\n     * @param {string | null} name\n     * @param {Object.<string, Function>} signatures\n     * @return {Function} Returns the typed function\n     * @private\n     */\n    function _typed(name, signatures) {\n      var refs = new Refs();\n\n      // parse signatures, expand them\n      var _signatures = parseSignatures(signatures);\n      if (_signatures.length == 0) {\n        throw new Error('No signatures provided');\n      }\n\n      // filter all any type signatures\n      var anys = filterAnyTypeSignatures(_signatures);\n\n      // parse signatures into a node tree\n      var node = parseTree(_signatures, [], anys);\n\n      //var util = require('util');\n      //console.log('ROOT');\n      //console.log(util.inspect(node, { depth: null }));\n\n      // generate code for the typed function\n      var code = [];\n      var _name = name || '';\n      var _args = getArgs(maxParams(_signatures));\n      code.push('function ' + _name + '(' + _args.join(', ') + ') {');\n      code.push('  \"use strict\";');\n      code.push('  var name = \\'' + _name + '\\';');\n      code.push(node.toCode(refs, '  ', false));\n      code.push('}');\n\n      // generate body for the factory function\n      var body = [\n        refs.toCode(),\n        'return ' + code.join('\\n')\n      ].join('\\n');\n\n      // evaluate the JavaScript code and attach function references\n      var factory = (new Function(refs.name, 'createError', body));\n      var fn = factory(refs, createError);\n\n      //console.log('FN\\n' + fn.toString()); // TODO: cleanup\n\n      // attach the signatures with sub-functions to the constructed function\n      fn.signatures = mapSignatures(_signatures);\n\n      return fn;\n    }\n\n    /**\n     * Calculate the maximum number of parameters in givens signatures\n     * @param {Signature[]} signatures\n     * @returns {number} The maximum number of parameters\n     */\n    function maxParams(signatures) {\n      var max = 0;\n\n      for (var i = 0; i < signatures.length; i++) {\n        var len = signatures[i].params.length;\n        if (len > max) {\n          max = len;\n        }\n      }\n\n      return max;\n    }\n\n    /**\n     * Get the type of a value\n     * @param {*} x\n     * @returns {string} Returns a string with the type of value\n     */\n    function getTypeOf(x) {\n      var obj;\n\n      for (var i = 0; i < typed.types.length; i++) {\n        var entry = typed.types[i];\n\n        if (entry.name === 'Object') {\n          // Array and Date are also Object, so test for Object afterwards\n          obj = entry;\n        }\n        else {\n          if (entry.test(x)) return entry.name;\n        }\n      }\n\n      // at last, test whether an object\n      if (obj && obj.test(x)) return obj.name;\n\n      return 'unknown';\n    }\n\n    /**\n     * Test whether an array contains some item\n     * @param {Array} array\n     * @param {*} item\n     * @return {boolean} Returns true if array contains item, false if not.\n     */\n    function contains(array, item) {\n      return array.indexOf(item) !== -1;\n    }\n\n    /**\n     * Returns the last item in the array\n     * @param {Array} array\n     * @return {*} item\n     */\n    function last (array) {\n      return array[array.length - 1];\n    }\n\n    // data type tests\n    var types = [\n      { name: 'number',    test: function (x) { return typeof x === 'number' } },\n      { name: 'string',    test: function (x) { return typeof x === 'string' } },\n      { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },\n      { name: 'Function',  test: function (x) { return typeof x === 'function'} },\n      { name: 'Array',     test: Array.isArray },\n      { name: 'Date',      test: function (x) { return x instanceof Date } },\n      { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },\n      { name: 'Object',    test: function (x) { return typeof x === 'object' } },\n      { name: 'null',      test: function (x) { return x === null } },\n      { name: 'undefined', test: function (x) { return x === undefined } }\n    ];\n\n    // configuration\n    var config = {};\n\n    // type conversions. Order is important\n    var conversions = [];\n\n    // types to be ignored\n    var ignore = [];\n\n    // temporary object for holding types and conversions, for constructing\n    // the `typed` function itself\n    // TODO: find a more elegant solution for this\n    var typed = {\n      config: config,\n      types: types,\n      conversions: conversions,\n      ignore: ignore\n    };\n\n    /**\n     * Construct the typed function itself with various signatures\n     *\n     * Signatures:\n     *\n     *   typed(signatures: Object.<string, function>)\n     *   typed(name: string, signatures: Object.<string, function>)\n     */\n    typed = _typed('typed', {\n      'Object': function (signatures) {\n        var fns = [];\n        for (var signature in signatures) {\n          if (signatures.hasOwnProperty(signature)) {\n            fns.push(signatures[signature]);\n          }\n        }\n        var name = getName(fns);\n\n        return _typed(name, signatures);\n      },\n      'string, Object': _typed,\n      // TODO: add a signature 'Array.<function>'\n      '...Function': function (fns) {\n        var err;\n        var name = getName(fns);\n        var signatures = {};\n\n        for (var i = 0; i < fns.length; i++) {\n          var fn = fns[i];\n\n          // test whether this is a typed-function\n          if (!(typeof fn.signatures === 'object')) {\n            err = new TypeError('Function is no typed-function (index: ' + i + ')');\n            err.data = {index: i};\n            throw err;\n          }\n\n          // merge the signatures\n          for (var signature in fn.signatures) {\n            if (fn.signatures.hasOwnProperty(signature)) {\n              if (signatures.hasOwnProperty(signature)) {\n                if (fn.signatures[signature] !== signatures[signature]) {\n                  err = new Error('Signature \"' + signature + '\" is defined twice');\n                  err.data = {signature: signature};\n                  throw err;\n                }\n                // else: both signatures point to the same function, that's fine\n              }\n              else {\n                signatures[signature] = fn.signatures[signature];\n              }\n            }\n          }\n        }\n\n        return _typed(name, signatures);\n      }\n    });\n\n    /**\n     * Find a specific signature from a (composed) typed function, for\n     * example:\n     *\n     *   typed.find(fn, ['number', 'string'])\n     *   typed.find(fn, 'number, string')\n     *\n     * Function find only only works for exact matches.\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature   Signature to be found, can be\n     *                                        an array or a comma separated string.\n     * @return {Function}                     Returns the matching signature, or\n     *                                        throws an errror when no signature\n     *                                        is found.\n     */\n    function find (fn, signature) {\n      if (!fn.signatures) {\n        throw new TypeError('Function is no typed-function');\n      }\n\n      // normalize input\n      var arr;\n      if (typeof signature === 'string') {\n        arr = signature.split(',');\n        for (var i = 0; i < arr.length; i++) {\n          arr[i] = arr[i].trim();\n        }\n      }\n      else if (Array.isArray(signature)) {\n        arr = signature;\n      }\n      else {\n        throw new TypeError('String array or a comma separated string expected');\n      }\n\n      var str = arr.join(',');\n\n      // find an exact match\n      var match = fn.signatures[str];\n      if (match) {\n        return match;\n      }\n\n      // TODO: extend find to match non-exact signatures\n\n      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');\n    }\n\n    /**\n     * Convert a given value to another data type.\n     * @param {*} value\n     * @param {string} type\n     */\n    function convert (value, type) {\n      var from = getTypeOf(value);\n\n      // check conversion is needed\n      if (type === from) {\n        return value;\n      }\n\n      for (var i = 0; i < typed.conversions.length; i++) {\n        var conversion = typed.conversions[i];\n        if (conversion.from === from && conversion.to === type) {\n          return conversion.convert(value);\n        }\n      }\n\n      throw new Error('Cannot convert from ' + from + ' to ' + type);\n    }\n\n    // attach types and conversions to the final `typed` function\n    typed.config = config;\n    typed.types = types;\n    typed.conversions = conversions;\n    typed.ignore = ignore;\n    typed.create = create;\n    typed.find = find;\n    typed.convert = convert;\n\n    // add a type\n    typed.addType = function (type) {\n      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {\n        throw new TypeError('Object with properties {name: string, test: function} expected');\n      }\n\n      typed.types.push(type);\n    };\n\n    // add a conversion\n    typed.addConversion = function (conversion) {\n      if (!conversion\n          || typeof conversion.from !== 'string'\n          || typeof conversion.to !== 'string'\n          || typeof conversion.convert !== 'function') {\n        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n      }\n\n      typed.conversions.push(conversion);\n    };\n\n    return typed;\n  }\n\n  return create();\n}));\n","import {Utils, log} from \"sd-utils\";\nimport * as math from \"./mathjs\";\nimport * as sdRandom from \"sd-random\";\n\n//Import random functions from sd-random to math.js\nsdRandom.functionNameList.forEach(fnName=>{\n    let importFn = {};\n    importFn[fnName] = sdRandom[fnName];\n    try{\n        math.import(importFn);\n    }catch (e){\n        log.error(e)\n    }\n});\n\n\nexport class ExpressionEngine {\n\n    static staticParser = math.parser();\n\n    constructor() {\n        this.parser = math.parser();\n\n    }\n\n    setScope(scope) {\n        this.parser.scope = scope;\n    }\n\n    eval(expr, asNumber = true, scope) {\n        return ExpressionEngine.doEval(expr, asNumber, scope, this.parser);\n    }\n\n    static eval(expr, asNumber = true, scope) {\n        return ExpressionEngine.doEval(expr, asNumber, scope, ExpressionEngine.staticParser);\n    }\n\n    static doEval(expr, asNumber, scope, parser){\n        log.trace('eval: ' + expr);\n        expr += \"\";\n        expr = expr.trim();\n        if (asNumber) {\n            try {\n                return ExpressionEngine.toNumber(expr);\n            } catch (e) {\n                //   Left empty intentionally\n            }\n        }\n\n        let prevScope = parser.scope;\n\n        parser.scope = scope || {};\n\n        let ev = parser.eval(expr + \"\");\n        parser.scope = prevScope;\n        if (!asNumber) {\n            return ev;\n        }\n        return ExpressionEngine.toNumber(ev);\n    }\n\n    static isHash(expr) {\n        return expr && Utils.isString(expr) && expr.trim() === '#'\n    }\n\n    static hasAssignmentExpression(expr) {\n        return Utils.isString(expr) && expr.indexOf('=') !== -1\n    }\n\n    static add(a, b) {\n        return math.add(ExpressionEngine.toNumber(a), ExpressionEngine.toNumber(b));\n    }\n\n    static subtract(a, b) {\n        return math.subtract(ExpressionEngine.toNumber(a), ExpressionEngine.toNumber(b));\n    }\n\n    static divide(a, b) {\n        return math.divide(ExpressionEngine.toNumber(a), ExpressionEngine.toNumber(b));\n    }\n\n    static multiply(a, b) {\n        return math.multiply(ExpressionEngine.toNumber(a), ExpressionEngine.toNumber(b));\n    }\n\n    static round(a, places) {\n        return ExpressionEngine.toNumber(a).round(places)\n    }\n\n    static toNumber(a) {\n        let parsed = parseFloat(a);\n        if(parsed === Infinity || parsed === -Infinity) {\n            return parsed;\n        }\n\n        return math.fraction(a);\n    }\n\n    static max() {\n        return math.max(...arguments);\n    }\n\n    static min() {\n        return math.min(...arguments);\n    }\n\n    static mad() {\n        return math.mad(...arguments);\n    }\n\n    static mean() {\n        return math.mean(...arguments);\n    }\n\n    static median() {\n        return math.median(...arguments);\n    }\n\n    static std() {\n        return math.std(...arguments);\n    }\n\n\n    static compare(a, b) {\n        a = ExpressionEngine.toNumber(a);\n        b = ExpressionEngine.toNumber(b);\n        if(a != b ){\n            if(a == -Infinity){\n                return -1\n            }\n            if(a == Infinity){\n                return 1\n            }\n            if(b == -Infinity){\n                return 1\n            }\n            if(b == Infinity){\n                return -1\n            }\n        }else{\n            return 0;\n        }\n\n        return math.compare(a, b)\n    }\n\n\n    validate(expr, scope, compileOnly = true) {\n        if (!scope) {\n            scope = this.parser.scope;\n        }\n        return ExpressionEngine.validate(expr, scope, compileOnly);\n    }\n\n    static validate(expr, scope, compileOnly = true){\n        if (expr === null || expr === undefined) {\n            return false;\n        }\n\n        try {\n            expr += \"\";\n            expr = expr.trim();\n            var c = math.compile(expr);\n\n            if (compileOnly) {\n                return true;\n            }\n\n            var e = c.eval(scope);\n            return Utils.isNumeric(e);\n        } catch (e) {\n            return false;\n        }\n    }\n\n    static isExpressionObject(v) {\n        return v && !!v.mathjs;\n    }\n\n    serialize(v) {\n        return ExpressionEngine.toNumber(v).toFraction(true);\n    }\n\n    getJsonReviver() {\n        return math.json.reviver;\n    }\n\n    getJsonReplacer() {\n        var self = this;\n        return function (k, v) {\n            if (v !== null && v !== undefined && ExpressionEngine.isExpressionObject(v)) {\n                try {\n                    return self.serialize(v);\n                } catch (e) {\n                    return v;\n                }\n            }\n            return v;\n        }\n    }\n\n    static toFloat(number){\n        return math.number(number);\n    }\n\n    static format(val) {\n        return math.format(val);\n    }\n\n    static randomMenuList = sdRandom.menuList.slice();\n}\n","export * from './expression-engine'\n","var core = require('mathjs/core');\n\n// Create a new, empty math.js instance\n// It will only contain methods `import` and `config`\nvar math = core.create();\nmath.config({\n    number: 'number'\n});\n// load the data types you need.\n// To load all data types:\n//\n    math.import(require('mathjs/lib/type'));\n//\n// math.import(require('mathjs/lib/type/fraction'));\n\n// Load the functions you need.\n//\n// To load all functions:\n//\n//     math.import(require('mathjs/lib/function'));\n//\n// To load all functions of a specific category:\n//\n// math.import(require('mathjs/lib/function/arithmetic'));\n// math.import(require('mathjs/lib/function/relational'));\n// math.import(require('mathjs/lib/function/probability'));\nmath.import(require('mathjs/lib/function'));\n//\n// math.import(require('mathjs/lib/function/arithmetic/add'));\n// math.import(require('mathjs/lib/function/arithmetic/subtract'));\n// math.import(require('mathjs/lib/function/arithmetic/multiply'));\n// math.import(require('mathjs/lib/function/arithmetic/divide'));\n// math.import(require('mathjs/lib/function/utils/format'));\n\n// Expressions:\nmath.import(require('mathjs/lib/expression'));\nmath.import(require('mathjs/lib/json'));\n// math.import(require('mathjs/lib/utils/string'));\n\nmodule.exports = math;\n","export * from './src';\n\n\n\n\n"]}